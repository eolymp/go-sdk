// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: eolymp/guardian/guardian.proto

package guardian

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuardianClient is the client API for Guardian service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuardianClient interface {
	ListPolicies(ctx context.Context, in *ListPoliciesInput, opts ...grpc.CallOption) (*ListPoliciesOutput, error)
	DescribePolicy(ctx context.Context, in *DescribePolicyInput, opts ...grpc.CallOption) (*DescribePolicyOutput, error)
	DefinePolicy(ctx context.Context, in *DefinePolicyInput, opts ...grpc.CallOption) (*DefinePolicyOutput, error)
	RemovePolicy(ctx context.Context, in *RemovePolicyInput, opts ...grpc.CallOption) (*RemovePolicyOutput, error)
	Evaluate(ctx context.Context, in *EvaluateInput, opts ...grpc.CallOption) (*EvaluateOutput, error)
}

type guardianClient struct {
	cc grpc.ClientConnInterface
}

func NewGuardianClient(cc grpc.ClientConnInterface) GuardianClient {
	return &guardianClient{cc}
}

func (c *guardianClient) ListPolicies(ctx context.Context, in *ListPoliciesInput, opts ...grpc.CallOption) (*ListPoliciesOutput, error) {
	out := new(ListPoliciesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.guardian.Guardian/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardianClient) DescribePolicy(ctx context.Context, in *DescribePolicyInput, opts ...grpc.CallOption) (*DescribePolicyOutput, error) {
	out := new(DescribePolicyOutput)
	err := c.cc.Invoke(ctx, "/eolymp.guardian.Guardian/DescribePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardianClient) DefinePolicy(ctx context.Context, in *DefinePolicyInput, opts ...grpc.CallOption) (*DefinePolicyOutput, error) {
	out := new(DefinePolicyOutput)
	err := c.cc.Invoke(ctx, "/eolymp.guardian.Guardian/DefinePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardianClient) RemovePolicy(ctx context.Context, in *RemovePolicyInput, opts ...grpc.CallOption) (*RemovePolicyOutput, error) {
	out := new(RemovePolicyOutput)
	err := c.cc.Invoke(ctx, "/eolymp.guardian.Guardian/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardianClient) Evaluate(ctx context.Context, in *EvaluateInput, opts ...grpc.CallOption) (*EvaluateOutput, error) {
	out := new(EvaluateOutput)
	err := c.cc.Invoke(ctx, "/eolymp.guardian.Guardian/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardianServer is the server API for Guardian service.
// All implementations should embed UnimplementedGuardianServer
// for forward compatibility
type GuardianServer interface {
	ListPolicies(context.Context, *ListPoliciesInput) (*ListPoliciesOutput, error)
	DescribePolicy(context.Context, *DescribePolicyInput) (*DescribePolicyOutput, error)
	DefinePolicy(context.Context, *DefinePolicyInput) (*DefinePolicyOutput, error)
	RemovePolicy(context.Context, *RemovePolicyInput) (*RemovePolicyOutput, error)
	Evaluate(context.Context, *EvaluateInput) (*EvaluateOutput, error)
}

// UnimplementedGuardianServer should be embedded to have forward compatible implementations.
type UnimplementedGuardianServer struct {
}

func (UnimplementedGuardianServer) ListPolicies(context.Context, *ListPoliciesInput) (*ListPoliciesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedGuardianServer) DescribePolicy(context.Context, *DescribePolicyInput) (*DescribePolicyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePolicy not implemented")
}
func (UnimplementedGuardianServer) DefinePolicy(context.Context, *DefinePolicyInput) (*DefinePolicyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefinePolicy not implemented")
}
func (UnimplementedGuardianServer) RemovePolicy(context.Context, *RemovePolicyInput) (*RemovePolicyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedGuardianServer) Evaluate(context.Context, *EvaluateInput) (*EvaluateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}

// UnsafeGuardianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuardianServer will
// result in compilation errors.
type UnsafeGuardianServer interface {
	mustEmbedUnimplementedGuardianServer()
}

func RegisterGuardianServer(s grpc.ServiceRegistrar, srv GuardianServer) {
	s.RegisterService(&Guardian_ServiceDesc, srv)
}

func _Guardian_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.guardian.Guardian/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianServer).ListPolicies(ctx, req.(*ListPoliciesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guardian_DescribePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianServer).DescribePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.guardian.Guardian/DescribePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianServer).DescribePolicy(ctx, req.(*DescribePolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guardian_DefinePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinePolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianServer).DefinePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.guardian.Guardian/DefinePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianServer).DefinePolicy(ctx, req.(*DefinePolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guardian_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.guardian.Guardian/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianServer).RemovePolicy(ctx, req.(*RemovePolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guardian_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.guardian.Guardian/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianServer).Evaluate(ctx, req.(*EvaluateInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Guardian_ServiceDesc is the grpc.ServiceDesc for Guardian service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Guardian_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.guardian.Guardian",
	HandlerType: (*GuardianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicies",
			Handler:    _Guardian_ListPolicies_Handler,
		},
		{
			MethodName: "DescribePolicy",
			Handler:    _Guardian_DescribePolicy_Handler,
		},
		{
			MethodName: "DefinePolicy",
			Handler:    _Guardian_DefinePolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _Guardian_RemovePolicy_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Guardian_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/guardian/guardian.proto",
}
