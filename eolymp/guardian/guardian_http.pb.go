// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package guardian

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Guardian_HTTPReadQueryString parses body into proto.Message
func _Guardian_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Guardian_HTTPReadRequestBody parses body into proto.Message
func _Guardian_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Guardian_HTTPWriteResponse writes proto.Message to HTTP response
func _Guardian_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Guardian_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Guardian_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Guardian_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewGuardianHandler constructs new http.Handler for GuardianServer
func NewGuardianHandler(srv GuardianServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.guardian.Guardian/ListPolicies", _Guardian_ListPolicies(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.guardian.Guardian/DescribePolicy", _Guardian_DescribePolicy(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.guardian.Guardian/DefinePolicy", _Guardian_DefinePolicy(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.guardian.Guardian/DeletePolicy", _Guardian_DeletePolicy(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.guardian.Guardian/Evaluate", _Guardian_Evaluate(srv)).Methods(http.MethodPost)
	return router
}

// NewGuardianHandlerHttp constructs new http.Handler for GuardianServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewGuardianHandlerHttp(srv GuardianServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/policies", _Guardian_ListPolicies_Rule0(srv)).
		Methods("GET").
		Name("eolymp.guardian.Guardian.ListPolicies")

	router.Handle(prefix+"/policies/{id}", _Guardian_DescribePolicy_Rule0(srv)).
		Methods("GET").
		Name("eolymp.guardian.Guardian.DescribePolicy")

	router.Handle(prefix+"/policies/{id}", _Guardian_DefinePolicy_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.guardian.Guardian.DefinePolicy")

	router.Handle(prefix+"/policies/{id}", _Guardian_DeletePolicy_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.guardian.Guardian.DeletePolicy")

	router.Handle(prefix+"/evaluate", _Guardian_Evaluate_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.guardian.Guardian.Evaluate")

	return router
}

func _Guardian_ListPolicies(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPoliciesInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListPolicies(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DescribePolicy(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePolicyInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DefinePolicy(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DefinePolicyInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DefinePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DeletePolicy(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeletePolicyInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeletePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_Evaluate(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EvaluateInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.Evaluate(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_ListPolicies_Rule0(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPoliciesInput{}

		if err := _Guardian_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListPolicies(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DescribePolicy_Rule0(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePolicyInput{}

		if err := _Guardian_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Id = vars["id"]

		out, err := srv.DescribePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DefinePolicy_Rule0(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DefinePolicyInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Id = vars["id"]

		out, err := srv.DefinePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_DeletePolicy_Rule0(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeletePolicyInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Id = vars["id"]

		out, err := srv.DeletePolicy(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

func _Guardian_Evaluate_Rule0(srv GuardianServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EvaluateInput{}

		if err := _Guardian_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.Evaluate(r.Context(), in)
		if err != nil {
			_Guardian_HTTPWriteErrorResponse(w, err)
			return
		}

		_Guardian_HTTPWriteResponse(w, out)
	})
}

type _GuardianHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _GuardianMiddleware = func(ctx context.Context, method string, in proto.Message, handler _GuardianHandler) (out proto.Message, err error)
type GuardianInterceptor struct {
	middleware []_GuardianMiddleware
	server     GuardianServer
}

// NewGuardianInterceptor constructs additional middleware for a server based on annotations in proto files
func NewGuardianInterceptor(srv GuardianServer, middleware ..._GuardianMiddleware) *GuardianInterceptor {
	return &GuardianInterceptor{server: srv, middleware: middleware}
}

func (i *GuardianInterceptor) ListPolicies(ctx context.Context, in *ListPoliciesInput) (*ListPoliciesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListPoliciesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListPoliciesInput, got %T", in))
		}

		return i.server.ListPolicies(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.guardian.Guardian.ListPolicies", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListPoliciesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListPoliciesOutput, got %T", out))
	}

	return message, err
}

func (i *GuardianInterceptor) DescribePolicy(ctx context.Context, in *DescribePolicyInput) (*DescribePolicyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribePolicyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribePolicyInput, got %T", in))
		}

		return i.server.DescribePolicy(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.guardian.Guardian.DescribePolicy", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribePolicyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribePolicyOutput, got %T", out))
	}

	return message, err
}

func (i *GuardianInterceptor) DefinePolicy(ctx context.Context, in *DefinePolicyInput) (*DefinePolicyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DefinePolicyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DefinePolicyInput, got %T", in))
		}

		return i.server.DefinePolicy(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.guardian.Guardian.DefinePolicy", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DefinePolicyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DefinePolicyOutput, got %T", out))
	}

	return message, err
}

func (i *GuardianInterceptor) DeletePolicy(ctx context.Context, in *DeletePolicyInput) (*DeletePolicyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeletePolicyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeletePolicyInput, got %T", in))
		}

		return i.server.DeletePolicy(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.guardian.Guardian.DeletePolicy", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeletePolicyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeletePolicyOutput, got %T", out))
	}

	return message, err
}

func (i *GuardianInterceptor) Evaluate(ctx context.Context, in *EvaluateInput) (*EvaluateOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EvaluateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EvaluateInput, got %T", in))
		}

		return i.server.Evaluate(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.guardian.Guardian.Evaluate", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EvaluateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EvaluateOutput, got %T", out))
	}

	return message, err
}
