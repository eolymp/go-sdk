// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.4
// source: eolymp/course/problem_service.proto

package course

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	atlas "github.com/eolymp/go-sdk/eolymp/atlas"
	playground "github.com/eolymp/go-sdk/eolymp/playground"
	runtime "github.com/eolymp/go-sdk/eolymp/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListStatementsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStatementsInput) Reset() {
	*x = ListStatementsInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStatementsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatementsInput) ProtoMessage() {}

func (x *ListStatementsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatementsInput.ProtoReflect.Descriptor instead.
func (*ListStatementsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{0}
}

type ListStatementsOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items         []*atlas.Statement     `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStatementsOutput) Reset() {
	*x = ListStatementsOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStatementsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatementsOutput) ProtoMessage() {}

func (x *ListStatementsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatementsOutput.ProtoReflect.Descriptor instead.
func (*ListStatementsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListStatementsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStatementsOutput) GetItems() []*atlas.Statement {
	if x != nil {
		return x.Items
	}
	return nil
}

type LookupStatementInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locale        string                 `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupStatementInput) Reset() {
	*x = LookupStatementInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupStatementInput) ProtoMessage() {}

func (x *LookupStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupStatementInput.ProtoReflect.Descriptor instead.
func (*LookupStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{2}
}

func (x *LookupStatementInput) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type LookupStatementOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statement     *atlas.Statement       `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupStatementOutput) Reset() {
	*x = LookupStatementOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupStatementOutput) ProtoMessage() {}

func (x *LookupStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupStatementOutput.ProtoReflect.Descriptor instead.
func (*LookupStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{3}
}

func (x *LookupStatementOutput) GetStatement() *atlas.Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type ListExamplesInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExamplesInput) Reset() {
	*x = ListExamplesInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExamplesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesInput) ProtoMessage() {}

func (x *ListExamplesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesInput.ProtoReflect.Descriptor instead.
func (*ListExamplesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{4}
}

type ListExamplesOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Examples      []*atlas.Test          `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExamplesOutput) Reset() {
	*x = ListExamplesOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExamplesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesOutput) ProtoMessage() {}

func (x *ListExamplesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesOutput.ProtoReflect.Descriptor instead.
func (*ListExamplesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListExamplesOutput) GetExamples() []*atlas.Test {
	if x != nil {
		return x.Examples
	}
	return nil
}

type LookupCodeTemplateInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runtime       string                 `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupCodeTemplateInput) Reset() {
	*x = LookupCodeTemplateInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupCodeTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupCodeTemplateInput) ProtoMessage() {}

func (x *LookupCodeTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupCodeTemplateInput.ProtoReflect.Descriptor instead.
func (*LookupCodeTemplateInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{6}
}

func (x *LookupCodeTemplateInput) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

type LookupCodeTemplateOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Template      *atlas.Template        `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupCodeTemplateOutput) Reset() {
	*x = LookupCodeTemplateOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupCodeTemplateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupCodeTemplateOutput) ProtoMessage() {}

func (x *LookupCodeTemplateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupCodeTemplateOutput.ProtoReflect.Descriptor instead.
func (*LookupCodeTemplateOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{7}
}

func (x *LookupCodeTemplateOutput) GetTemplate() *atlas.Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateRunInput struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Runtime string                 `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Source  string                 `protobuf:"bytes,100,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are valid to be assigned to Input:
	//
	//	*CreateRunInput_InputData
	//	*CreateRunInput_InputRef
	Input         isCreateRunInput_Input `protobuf_oneof:"input"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRunInput) Reset() {
	*x = CreateRunInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunInput) ProtoMessage() {}

func (x *CreateRunInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunInput.ProtoReflect.Descriptor instead.
func (*CreateRunInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateRunInput) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *CreateRunInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateRunInput) GetInput() isCreateRunInput_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateRunInput) GetInputData() []byte {
	if x != nil {
		if x, ok := x.Input.(*CreateRunInput_InputData); ok {
			return x.InputData
		}
	}
	return nil
}

func (x *CreateRunInput) GetInputRef() string {
	if x != nil {
		if x, ok := x.Input.(*CreateRunInput_InputRef); ok {
			return x.InputRef
		}
	}
	return ""
}

type isCreateRunInput_Input interface {
	isCreateRunInput_Input()
}

type CreateRunInput_InputData struct {
	InputData []byte `protobuf:"bytes,101,opt,name=input_data,json=inputData,proto3,oneof"`
}

type CreateRunInput_InputRef struct {
	InputRef string `protobuf:"bytes,102,opt,name=input_ref,json=inputRef,proto3,oneof"`
}

func (*CreateRunInput_InputData) isCreateRunInput_Input() {}

func (*CreateRunInput_InputRef) isCreateRunInput_Input() {}

type CreateRunOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRunOutput) Reset() {
	*x = CreateRunOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunOutput) ProtoMessage() {}

func (x *CreateRunOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunOutput.ProtoReflect.Descriptor instead.
func (*CreateRunOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRunOutput) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DescribeRunInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRunInput) Reset() {
	*x = DescribeRunInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRunInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRunInput) ProtoMessage() {}

func (x *DescribeRunInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRunInput.ProtoReflect.Descriptor instead.
func (*DescribeRunInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeRunInput) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DescribeRunOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           *playground.Run        `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeRunOutput) Reset() {
	*x = DescribeRunOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeRunOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRunOutput) ProtoMessage() {}

func (x *DescribeRunOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRunOutput.ProtoReflect.Descriptor instead.
func (*DescribeRunOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeRunOutput) GetRun() *playground.Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type WatchRunInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchRunInput) Reset() {
	*x = WatchRunInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRunInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunInput) ProtoMessage() {}

func (x *WatchRunInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunInput.ProtoReflect.Descriptor instead.
func (*WatchRunInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{12}
}

func (x *WatchRunInput) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type WatchRunOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           *playground.Run        `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchRunOutput) Reset() {
	*x = WatchRunOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRunOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunOutput) ProtoMessage() {}

func (x *WatchRunOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunOutput.ProtoReflect.Descriptor instead.
func (*WatchRunOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{13}
}

func (x *WatchRunOutput) GetRun() *playground.Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type ListRuntimesInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuntimesInput) Reset() {
	*x = ListRuntimesInput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuntimesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuntimesInput) ProtoMessage() {}

func (x *ListRuntimesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuntimesInput.ProtoReflect.Descriptor instead.
func (*ListRuntimesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{14}
}

type ListRuntimesOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items         []*runtime.Runtime     `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRuntimesOutput) Reset() {
	*x = ListRuntimesOutput{}
	mi := &file_eolymp_course_problem_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuntimesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuntimesOutput) ProtoMessage() {}

func (x *ListRuntimesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_course_problem_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuntimesOutput.ProtoReflect.Descriptor instead.
func (*ListRuntimesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_course_problem_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListRuntimesOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRuntimesOutput) GetItems() []*runtime.Runtime {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_eolymp_course_problem_service_proto protoreflect.FileDescriptor

var file_eolymp_course_problem_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x2e, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0x4e, 0x0a, 0x15, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x4e, 0x0a, 0x18, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x28, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x75,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x03, 0x72, 0x75,
	0x6e, 0x22, 0x26, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x03, 0x72, 0x75, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xb9, 0x0e, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x3c, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x43, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2,
	0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a,
	0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3f, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x18, 0x8a,
	0xe3, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3d, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x16, 0x8a,
	0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x4d, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2,
	0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x7a, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1a,
	0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xa1, 0x01, 0x0a,
	0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x84, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1d,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x38, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3,
	0x0a, 0x18, 0x8a, 0xe3, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x3a, 0x72, 0x75, 0x6e, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07,
	0x22, 0x05, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x40, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x75,
	0x6e, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x72,
	0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a,
	0x08, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x46, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x75, 0x6e, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f,
	0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01,
	0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x39, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x19, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x3b, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_course_problem_service_proto_rawDescOnce sync.Once
	file_eolymp_course_problem_service_proto_rawDescData = file_eolymp_course_problem_service_proto_rawDesc
)

func file_eolymp_course_problem_service_proto_rawDescGZIP() []byte {
	file_eolymp_course_problem_service_proto_rawDescOnce.Do(func() {
		file_eolymp_course_problem_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_course_problem_service_proto_rawDescData)
	})
	return file_eolymp_course_problem_service_proto_rawDescData
}

var file_eolymp_course_problem_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_eolymp_course_problem_service_proto_goTypes = []any{
	(*ListStatementsInput)(nil),      // 0: eolymp.course.ListStatementsInput
	(*ListStatementsOutput)(nil),     // 1: eolymp.course.ListStatementsOutput
	(*LookupStatementInput)(nil),     // 2: eolymp.course.LookupStatementInput
	(*LookupStatementOutput)(nil),    // 3: eolymp.course.LookupStatementOutput
	(*ListExamplesInput)(nil),        // 4: eolymp.course.ListExamplesInput
	(*ListExamplesOutput)(nil),       // 5: eolymp.course.ListExamplesOutput
	(*LookupCodeTemplateInput)(nil),  // 6: eolymp.course.LookupCodeTemplateInput
	(*LookupCodeTemplateOutput)(nil), // 7: eolymp.course.LookupCodeTemplateOutput
	(*CreateRunInput)(nil),           // 8: eolymp.course.CreateRunInput
	(*CreateRunOutput)(nil),          // 9: eolymp.course.CreateRunOutput
	(*DescribeRunInput)(nil),         // 10: eolymp.course.DescribeRunInput
	(*DescribeRunOutput)(nil),        // 11: eolymp.course.DescribeRunOutput
	(*WatchRunInput)(nil),            // 12: eolymp.course.WatchRunInput
	(*WatchRunOutput)(nil),           // 13: eolymp.course.WatchRunOutput
	(*ListRuntimesInput)(nil),        // 14: eolymp.course.ListRuntimesInput
	(*ListRuntimesOutput)(nil),       // 15: eolymp.course.ListRuntimesOutput
	(*atlas.Statement)(nil),          // 16: eolymp.atlas.Statement
	(*atlas.Test)(nil),               // 17: eolymp.atlas.Test
	(*atlas.Template)(nil),           // 18: eolymp.atlas.Template
	(*playground.Run)(nil),           // 19: eolymp.playground.Run
	(*runtime.Runtime)(nil),          // 20: eolymp.runtime.Runtime
	(*CreateSubmissionInput)(nil),    // 21: eolymp.course.CreateSubmissionInput
	(*ListSubmissionsInput)(nil),     // 22: eolymp.course.ListSubmissionsInput
	(*DescribeSubmissionInput)(nil),  // 23: eolymp.course.DescribeSubmissionInput
	(*WatchSubmissionInput)(nil),     // 24: eolymp.course.WatchSubmissionInput
	(*CreateSubmissionOutput)(nil),   // 25: eolymp.course.CreateSubmissionOutput
	(*ListSubmissionsOutput)(nil),    // 26: eolymp.course.ListSubmissionsOutput
	(*DescribeSubmissionOutput)(nil), // 27: eolymp.course.DescribeSubmissionOutput
	(*WatchSubmissionOutput)(nil),    // 28: eolymp.course.WatchSubmissionOutput
}
var file_eolymp_course_problem_service_proto_depIdxs = []int32{
	16, // 0: eolymp.course.ListStatementsOutput.items:type_name -> eolymp.atlas.Statement
	16, // 1: eolymp.course.LookupStatementOutput.statement:type_name -> eolymp.atlas.Statement
	17, // 2: eolymp.course.ListExamplesOutput.examples:type_name -> eolymp.atlas.Test
	18, // 3: eolymp.course.LookupCodeTemplateOutput.template:type_name -> eolymp.atlas.Template
	19, // 4: eolymp.course.DescribeRunOutput.run:type_name -> eolymp.playground.Run
	19, // 5: eolymp.course.WatchRunOutput.run:type_name -> eolymp.playground.Run
	20, // 6: eolymp.course.ListRuntimesOutput.items:type_name -> eolymp.runtime.Runtime
	0,  // 7: eolymp.course.ProblemService.ListStatements:input_type -> eolymp.course.ListStatementsInput
	2,  // 8: eolymp.course.ProblemService.LookupStatement:input_type -> eolymp.course.LookupStatementInput
	4,  // 9: eolymp.course.ProblemService.ListExamples:input_type -> eolymp.course.ListExamplesInput
	21, // 10: eolymp.course.ProblemService.CreateSubmission:input_type -> eolymp.course.CreateSubmissionInput
	22, // 11: eolymp.course.ProblemService.ListSubmissions:input_type -> eolymp.course.ListSubmissionsInput
	23, // 12: eolymp.course.ProblemService.DescribeSubmission:input_type -> eolymp.course.DescribeSubmissionInput
	24, // 13: eolymp.course.ProblemService.WatchSubmission:input_type -> eolymp.course.WatchSubmissionInput
	6,  // 14: eolymp.course.ProblemService.LookupCodeTemplate:input_type -> eolymp.course.LookupCodeTemplateInput
	8,  // 15: eolymp.course.ProblemService.CreateRun:input_type -> eolymp.course.CreateRunInput
	10, // 16: eolymp.course.ProblemService.DescribeRun:input_type -> eolymp.course.DescribeRunInput
	12, // 17: eolymp.course.ProblemService.WatchRun:input_type -> eolymp.course.WatchRunInput
	14, // 18: eolymp.course.ProblemService.ListRuntimes:input_type -> eolymp.course.ListRuntimesInput
	1,  // 19: eolymp.course.ProblemService.ListStatements:output_type -> eolymp.course.ListStatementsOutput
	3,  // 20: eolymp.course.ProblemService.LookupStatement:output_type -> eolymp.course.LookupStatementOutput
	5,  // 21: eolymp.course.ProblemService.ListExamples:output_type -> eolymp.course.ListExamplesOutput
	25, // 22: eolymp.course.ProblemService.CreateSubmission:output_type -> eolymp.course.CreateSubmissionOutput
	26, // 23: eolymp.course.ProblemService.ListSubmissions:output_type -> eolymp.course.ListSubmissionsOutput
	27, // 24: eolymp.course.ProblemService.DescribeSubmission:output_type -> eolymp.course.DescribeSubmissionOutput
	28, // 25: eolymp.course.ProblemService.WatchSubmission:output_type -> eolymp.course.WatchSubmissionOutput
	7,  // 26: eolymp.course.ProblemService.LookupCodeTemplate:output_type -> eolymp.course.LookupCodeTemplateOutput
	9,  // 27: eolymp.course.ProblemService.CreateRun:output_type -> eolymp.course.CreateRunOutput
	11, // 28: eolymp.course.ProblemService.DescribeRun:output_type -> eolymp.course.DescribeRunOutput
	13, // 29: eolymp.course.ProblemService.WatchRun:output_type -> eolymp.course.WatchRunOutput
	15, // 30: eolymp.course.ProblemService.ListRuntimes:output_type -> eolymp.course.ListRuntimesOutput
	19, // [19:31] is the sub-list for method output_type
	7,  // [7:19] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_eolymp_course_problem_service_proto_init() }
func file_eolymp_course_problem_service_proto_init() {
	if File_eolymp_course_problem_service_proto != nil {
		return
	}
	file_eolymp_course_submission_service_proto_init()
	file_eolymp_course_problem_service_proto_msgTypes[8].OneofWrappers = []any{
		(*CreateRunInput_InputData)(nil),
		(*CreateRunInput_InputRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_course_problem_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_course_problem_service_proto_goTypes,
		DependencyIndexes: file_eolymp_course_problem_service_proto_depIdxs,
		MessageInfos:      file_eolymp_course_problem_service_proto_msgTypes,
	}.Build()
	File_eolymp_course_problem_service_proto = out.File
	file_eolymp_course_problem_service_proto_rawDesc = nil
	file_eolymp_course_problem_service_proto_goTypes = nil
	file_eolymp_course_problem_service_proto_depIdxs = nil
}
