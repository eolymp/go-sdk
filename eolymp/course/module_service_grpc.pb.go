// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/course/module_service.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModuleService_CreateModule_FullMethodName       = "/eolymp.course.ModuleService/CreateModule"
	ModuleService_UpdateModule_FullMethodName       = "/eolymp.course.ModuleService/UpdateModule"
	ModuleService_DeleteModule_FullMethodName       = "/eolymp.course.ModuleService/DeleteModule"
	ModuleService_DescribeModule_FullMethodName     = "/eolymp.course.ModuleService/DescribeModule"
	ModuleService_ListModules_FullMethodName        = "/eolymp.course.ModuleService/ListModules"
	ModuleService_CreateModuleItem_FullMethodName   = "/eolymp.course.ModuleService/CreateModuleItem"
	ModuleService_UpdateModuleItem_FullMethodName   = "/eolymp.course.ModuleService/UpdateModuleItem"
	ModuleService_MoveModuleItem_FullMethodName     = "/eolymp.course.ModuleService/MoveModuleItem"
	ModuleService_DeleteModuleItem_FullMethodName   = "/eolymp.course.ModuleService/DeleteModuleItem"
	ModuleService_DescribeModuleItem_FullMethodName = "/eolymp.course.ModuleService/DescribeModuleItem"
	ModuleService_ListModuleItems_FullMethodName    = "/eolymp.course.ModuleService/ListModuleItems"
)

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	CreateModule(ctx context.Context, in *CreateModuleInput, opts ...grpc.CallOption) (*CreateModuleOutput, error)
	UpdateModule(ctx context.Context, in *UpdateModuleInput, opts ...grpc.CallOption) (*UpdateModuleOutput, error)
	DeleteModule(ctx context.Context, in *DeleteModuleInput, opts ...grpc.CallOption) (*DeleteModuleOutput, error)
	DescribeModule(ctx context.Context, in *DescribeModuleInput, opts ...grpc.CallOption) (*DescribeModuleOutput, error)
	ListModules(ctx context.Context, in *ListModulesInput, opts ...grpc.CallOption) (*ListModulesOutput, error)
	CreateModuleItem(ctx context.Context, in *CreateModuleItemInput, opts ...grpc.CallOption) (*CreateModuleItemOutput, error)
	UpdateModuleItem(ctx context.Context, in *UpdateModuleItemInput, opts ...grpc.CallOption) (*UpdateModuleItemOutput, error)
	MoveModuleItem(ctx context.Context, in *MoveModuleItemInput, opts ...grpc.CallOption) (*MoveModuleItemOutput, error)
	DeleteModuleItem(ctx context.Context, in *DeleteModuleItemInput, opts ...grpc.CallOption) (*DeleteModuleItemOutput, error)
	DescribeModuleItem(ctx context.Context, in *DescribeModuleItemInput, opts ...grpc.CallOption) (*DescribeModuleItemOutput, error)
	ListModuleItems(ctx context.Context, in *ListModuleItemsInput, opts ...grpc.CallOption) (*ListModuleItemsOutput, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) CreateModule(ctx context.Context, in *CreateModuleInput, opts ...grpc.CallOption) (*CreateModuleOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleOutput)
	err := c.cc.Invoke(ctx, ModuleService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleInput, opts ...grpc.CallOption) (*UpdateModuleOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleOutput)
	err := c.cc.Invoke(ctx, ModuleService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleInput, opts ...grpc.CallOption) (*DeleteModuleOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleOutput)
	err := c.cc.Invoke(ctx, ModuleService_DeleteModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DescribeModule(ctx context.Context, in *DescribeModuleInput, opts ...grpc.CallOption) (*DescribeModuleOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeModuleOutput)
	err := c.cc.Invoke(ctx, ModuleService_DescribeModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModules(ctx context.Context, in *ListModulesInput, opts ...grpc.CallOption) (*ListModulesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModulesOutput)
	err := c.cc.Invoke(ctx, ModuleService_ListModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) CreateModuleItem(ctx context.Context, in *CreateModuleItemInput, opts ...grpc.CallOption) (*CreateModuleItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleItemOutput)
	err := c.cc.Invoke(ctx, ModuleService_CreateModuleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModuleItem(ctx context.Context, in *UpdateModuleItemInput, opts ...grpc.CallOption) (*UpdateModuleItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleItemOutput)
	err := c.cc.Invoke(ctx, ModuleService_UpdateModuleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) MoveModuleItem(ctx context.Context, in *MoveModuleItemInput, opts ...grpc.CallOption) (*MoveModuleItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveModuleItemOutput)
	err := c.cc.Invoke(ctx, ModuleService_MoveModuleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModuleItem(ctx context.Context, in *DeleteModuleItemInput, opts ...grpc.CallOption) (*DeleteModuleItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleItemOutput)
	err := c.cc.Invoke(ctx, ModuleService_DeleteModuleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DescribeModuleItem(ctx context.Context, in *DescribeModuleItemInput, opts ...grpc.CallOption) (*DescribeModuleItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeModuleItemOutput)
	err := c.cc.Invoke(ctx, ModuleService_DescribeModuleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModuleItems(ctx context.Context, in *ListModuleItemsInput, opts ...grpc.CallOption) (*ListModuleItemsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModuleItemsOutput)
	err := c.cc.Invoke(ctx, ModuleService_ListModuleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations should embed UnimplementedModuleServiceServer
// for forward compatibility.
type ModuleServiceServer interface {
	CreateModule(context.Context, *CreateModuleInput) (*CreateModuleOutput, error)
	UpdateModule(context.Context, *UpdateModuleInput) (*UpdateModuleOutput, error)
	DeleteModule(context.Context, *DeleteModuleInput) (*DeleteModuleOutput, error)
	DescribeModule(context.Context, *DescribeModuleInput) (*DescribeModuleOutput, error)
	ListModules(context.Context, *ListModulesInput) (*ListModulesOutput, error)
	CreateModuleItem(context.Context, *CreateModuleItemInput) (*CreateModuleItemOutput, error)
	UpdateModuleItem(context.Context, *UpdateModuleItemInput) (*UpdateModuleItemOutput, error)
	MoveModuleItem(context.Context, *MoveModuleItemInput) (*MoveModuleItemOutput, error)
	DeleteModuleItem(context.Context, *DeleteModuleItemInput) (*DeleteModuleItemOutput, error)
	DescribeModuleItem(context.Context, *DescribeModuleItemInput) (*DescribeModuleItemOutput, error)
	ListModuleItems(context.Context, *ListModuleItemsInput) (*ListModuleItemsOutput, error)
}

// UnimplementedModuleServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServiceServer struct{}

func (UnimplementedModuleServiceServer) CreateModule(context.Context, *CreateModuleInput) (*CreateModuleOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModule(context.Context, *UpdateModuleInput) (*UpdateModuleOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModule(context.Context, *DeleteModuleInput) (*DeleteModuleOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServiceServer) DescribeModule(context.Context, *DescribeModuleInput) (*DescribeModuleOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeModule not implemented")
}
func (UnimplementedModuleServiceServer) ListModules(context.Context, *ListModulesInput) (*ListModulesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedModuleServiceServer) CreateModuleItem(context.Context, *CreateModuleItemInput) (*CreateModuleItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleItem not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModuleItem(context.Context, *UpdateModuleItemInput) (*UpdateModuleItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModuleItem not implemented")
}
func (UnimplementedModuleServiceServer) MoveModuleItem(context.Context, *MoveModuleItemInput) (*MoveModuleItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveModuleItem not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModuleItem(context.Context, *DeleteModuleItemInput) (*DeleteModuleItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleItem not implemented")
}
func (UnimplementedModuleServiceServer) DescribeModuleItem(context.Context, *DescribeModuleItemInput) (*DescribeModuleItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeModuleItem not implemented")
}
func (UnimplementedModuleServiceServer) ListModuleItems(context.Context, *ListModuleItemsInput) (*ListModuleItemsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleItems not implemented")
}
func (UnimplementedModuleServiceServer) testEmbeddedByValue() {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModule(ctx, req.(*CreateModuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModule(ctx, req.(*UpdateModuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModule(ctx, req.(*DeleteModuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DescribeModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeModuleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DescribeModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DescribeModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DescribeModule(ctx, req.(*DescribeModuleInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModules(ctx, req.(*ListModulesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_CreateModuleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModuleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_CreateModuleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModuleItem(ctx, req.(*CreateModuleItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModuleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModuleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_UpdateModuleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModuleItem(ctx, req.(*UpdateModuleItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_MoveModuleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveModuleItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).MoveModuleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_MoveModuleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).MoveModuleItem(ctx, req.(*MoveModuleItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModuleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModuleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DeleteModuleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModuleItem(ctx, req.(*DeleteModuleItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DescribeModuleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeModuleItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DescribeModuleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DescribeModuleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DescribeModuleItem(ctx, req.(*DescribeModuleItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModuleItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleItemsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModuleItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_ListModuleItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModuleItems(ctx, req.(*ListModuleItemsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.course.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _ModuleService_CreateModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModuleService_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModuleService_DeleteModule_Handler,
		},
		{
			MethodName: "DescribeModule",
			Handler:    _ModuleService_DescribeModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _ModuleService_ListModules_Handler,
		},
		{
			MethodName: "CreateModuleItem",
			Handler:    _ModuleService_CreateModuleItem_Handler,
		},
		{
			MethodName: "UpdateModuleItem",
			Handler:    _ModuleService_UpdateModuleItem_Handler,
		},
		{
			MethodName: "MoveModuleItem",
			Handler:    _ModuleService_MoveModuleItem_Handler,
		},
		{
			MethodName: "DeleteModuleItem",
			Handler:    _ModuleService_DeleteModuleItem_Handler,
		},
		{
			MethodName: "DescribeModuleItem",
			Handler:    _ModuleService_DescribeModuleItem_Handler,
		},
		{
			MethodName: "ListModuleItems",
			Handler:    _ModuleService_ListModuleItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/course/module_service.proto",
}
