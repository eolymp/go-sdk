// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/course/assignment_service_v2.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AssignmentServiceV2_CreateAssignment_FullMethodName   = "/eolymp.course.AssignmentServiceV2/CreateAssignment"
	AssignmentServiceV2_UpdateAssignment_FullMethodName   = "/eolymp.course.AssignmentServiceV2/UpdateAssignment"
	AssignmentServiceV2_DeleteAssignment_FullMethodName   = "/eolymp.course.AssignmentServiceV2/DeleteAssignment"
	AssignmentServiceV2_DescribeAssignment_FullMethodName = "/eolymp.course.AssignmentServiceV2/DescribeAssignment"
	AssignmentServiceV2_ListAssignments_FullMethodName    = "/eolymp.course.AssignmentServiceV2/ListAssignments"
)

// AssignmentServiceV2Client is the client API for AssignmentServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentServiceV2Client interface {
	CreateAssignment(ctx context.Context, in *CreateAssignmentV2Input, opts ...grpc.CallOption) (*CreateAssignmentV2Output, error)
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentV2Input, opts ...grpc.CallOption) (*UpdateAssignmentV2Output, error)
	DeleteAssignment(ctx context.Context, in *DeleteAssignmentV2Input, opts ...grpc.CallOption) (*DeleteAssignmentV2Output, error)
	DescribeAssignment(ctx context.Context, in *DescribeAssignmentV2Input, opts ...grpc.CallOption) (*DescribeAssignmentV2Output, error)
	ListAssignments(ctx context.Context, in *ListAssignmentsV2Input, opts ...grpc.CallOption) (*ListAssignmentsV2Output, error)
}

type assignmentServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentServiceV2Client(cc grpc.ClientConnInterface) AssignmentServiceV2Client {
	return &assignmentServiceV2Client{cc}
}

func (c *assignmentServiceV2Client) CreateAssignment(ctx context.Context, in *CreateAssignmentV2Input, opts ...grpc.CallOption) (*CreateAssignmentV2Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAssignmentV2Output)
	err := c.cc.Invoke(ctx, AssignmentServiceV2_CreateAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceV2Client) UpdateAssignment(ctx context.Context, in *UpdateAssignmentV2Input, opts ...grpc.CallOption) (*UpdateAssignmentV2Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAssignmentV2Output)
	err := c.cc.Invoke(ctx, AssignmentServiceV2_UpdateAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceV2Client) DeleteAssignment(ctx context.Context, in *DeleteAssignmentV2Input, opts ...grpc.CallOption) (*DeleteAssignmentV2Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAssignmentV2Output)
	err := c.cc.Invoke(ctx, AssignmentServiceV2_DeleteAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceV2Client) DescribeAssignment(ctx context.Context, in *DescribeAssignmentV2Input, opts ...grpc.CallOption) (*DescribeAssignmentV2Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeAssignmentV2Output)
	err := c.cc.Invoke(ctx, AssignmentServiceV2_DescribeAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceV2Client) ListAssignments(ctx context.Context, in *ListAssignmentsV2Input, opts ...grpc.CallOption) (*ListAssignmentsV2Output, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssignmentsV2Output)
	err := c.cc.Invoke(ctx, AssignmentServiceV2_ListAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentServiceV2Server is the server API for AssignmentServiceV2 service.
// All implementations should embed UnimplementedAssignmentServiceV2Server
// for forward compatibility
type AssignmentServiceV2Server interface {
	CreateAssignment(context.Context, *CreateAssignmentV2Input) (*CreateAssignmentV2Output, error)
	UpdateAssignment(context.Context, *UpdateAssignmentV2Input) (*UpdateAssignmentV2Output, error)
	DeleteAssignment(context.Context, *DeleteAssignmentV2Input) (*DeleteAssignmentV2Output, error)
	DescribeAssignment(context.Context, *DescribeAssignmentV2Input) (*DescribeAssignmentV2Output, error)
	ListAssignments(context.Context, *ListAssignmentsV2Input) (*ListAssignmentsV2Output, error)
}

// UnimplementedAssignmentServiceV2Server should be embedded to have forward compatible implementations.
type UnimplementedAssignmentServiceV2Server struct {
}

func (UnimplementedAssignmentServiceV2Server) CreateAssignment(context.Context, *CreateAssignmentV2Input) (*CreateAssignmentV2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignment not implemented")
}
func (UnimplementedAssignmentServiceV2Server) UpdateAssignment(context.Context, *UpdateAssignmentV2Input) (*UpdateAssignmentV2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedAssignmentServiceV2Server) DeleteAssignment(context.Context, *DeleteAssignmentV2Input) (*DeleteAssignmentV2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignment not implemented")
}
func (UnimplementedAssignmentServiceV2Server) DescribeAssignment(context.Context, *DescribeAssignmentV2Input) (*DescribeAssignmentV2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAssignment not implemented")
}
func (UnimplementedAssignmentServiceV2Server) ListAssignments(context.Context, *ListAssignmentsV2Input) (*ListAssignmentsV2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignments not implemented")
}

// UnsafeAssignmentServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentServiceV2Server will
// result in compilation errors.
type UnsafeAssignmentServiceV2Server interface {
	mustEmbedUnimplementedAssignmentServiceV2Server()
}

func RegisterAssignmentServiceV2Server(s grpc.ServiceRegistrar, srv AssignmentServiceV2Server) {
	s.RegisterService(&AssignmentServiceV2_ServiceDesc, srv)
}

func _AssignmentServiceV2_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentV2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceV2Server).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentServiceV2_CreateAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceV2Server).CreateAssignment(ctx, req.(*CreateAssignmentV2Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentServiceV2_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentV2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceV2Server).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentServiceV2_UpdateAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceV2Server).UpdateAssignment(ctx, req.(*UpdateAssignmentV2Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentServiceV2_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentV2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceV2Server).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentServiceV2_DeleteAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceV2Server).DeleteAssignment(ctx, req.(*DeleteAssignmentV2Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentServiceV2_DescribeAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAssignmentV2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceV2Server).DescribeAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentServiceV2_DescribeAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceV2Server).DescribeAssignment(ctx, req.(*DescribeAssignmentV2Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentServiceV2_ListAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentsV2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceV2Server).ListAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignmentServiceV2_ListAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceV2Server).ListAssignments(ctx, req.(*ListAssignmentsV2Input))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignmentServiceV2_ServiceDesc is the grpc.ServiceDesc for AssignmentServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignmentServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.course.AssignmentServiceV2",
	HandlerType: (*AssignmentServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssignment",
			Handler:    _AssignmentServiceV2_CreateAssignment_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _AssignmentServiceV2_UpdateAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _AssignmentServiceV2_DeleteAssignment_Handler,
		},
		{
			MethodName: "DescribeAssignment",
			Handler:    _AssignmentServiceV2_DescribeAssignment_Handler,
		},
		{
			MethodName: "ListAssignments",
			Handler:    _AssignmentServiceV2_ListAssignments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/course/assignment_service_v2.proto",
}
