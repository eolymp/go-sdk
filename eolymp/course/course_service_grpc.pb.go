// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/course/course_service.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourseService_CreateCourse_FullMethodName   = "/eolymp.course.CourseService/CreateCourse"
	CourseService_UpdateCourse_FullMethodName   = "/eolymp.course.CourseService/UpdateCourse"
	CourseService_DeleteCourse_FullMethodName   = "/eolymp.course.CourseService/DeleteCourse"
	CourseService_DescribeCourse_FullMethodName = "/eolymp.course.CourseService/DescribeCourse"
	CourseService_ListCourses_FullMethodName    = "/eolymp.course.CourseService/ListCourses"
	CourseService_AssignCourse_FullMethodName   = "/eolymp.course.CourseService/AssignCourse"
	CourseService_UnassignCourse_FullMethodName = "/eolymp.course.CourseService/UnassignCourse"
	CourseService_StartCourse_FullMethodName    = "/eolymp.course.CourseService/StartCourse"
)

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	CreateCourse(ctx context.Context, in *CreateCourseInput, opts ...grpc.CallOption) (*CreateCourseOutput, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseInput, opts ...grpc.CallOption) (*UpdateCourseOutput, error)
	DeleteCourse(ctx context.Context, in *DeleteCourseInput, opts ...grpc.CallOption) (*DeleteCourseOutput, error)
	DescribeCourse(ctx context.Context, in *DescribeCourseInput, opts ...grpc.CallOption) (*DescribeCourseOutput, error)
	ListCourses(ctx context.Context, in *ListCoursesInput, opts ...grpc.CallOption) (*ListCoursesOutput, error)
	AssignCourse(ctx context.Context, in *AssignCourseInput, opts ...grpc.CallOption) (*AssignCourseOutput, error)
	UnassignCourse(ctx context.Context, in *UnassignCourseInput, opts ...grpc.CallOption) (*UnassignCourseOutput, error)
	StartCourse(ctx context.Context, in *StartCourseInput, opts ...grpc.CallOption) (*StartCourseOutput, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) CreateCourse(ctx context.Context, in *CreateCourseInput, opts ...grpc.CallOption) (*CreateCourseOutput, error) {
	out := new(CreateCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_CreateCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseInput, opts ...grpc.CallOption) (*UpdateCourseOutput, error) {
	out := new(UpdateCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_UpdateCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseInput, opts ...grpc.CallOption) (*DeleteCourseOutput, error) {
	out := new(DeleteCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_DeleteCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DescribeCourse(ctx context.Context, in *DescribeCourseInput, opts ...grpc.CallOption) (*DescribeCourseOutput, error) {
	out := new(DescribeCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_DescribeCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListCourses(ctx context.Context, in *ListCoursesInput, opts ...grpc.CallOption) (*ListCoursesOutput, error) {
	out := new(ListCoursesOutput)
	err := c.cc.Invoke(ctx, CourseService_ListCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AssignCourse(ctx context.Context, in *AssignCourseInput, opts ...grpc.CallOption) (*AssignCourseOutput, error) {
	out := new(AssignCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_AssignCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UnassignCourse(ctx context.Context, in *UnassignCourseInput, opts ...grpc.CallOption) (*UnassignCourseOutput, error) {
	out := new(UnassignCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_UnassignCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) StartCourse(ctx context.Context, in *StartCourseInput, opts ...grpc.CallOption) (*StartCourseOutput, error) {
	out := new(StartCourseOutput)
	err := c.cc.Invoke(ctx, CourseService_StartCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations should embed UnimplementedCourseServiceServer
// for forward compatibility
type CourseServiceServer interface {
	CreateCourse(context.Context, *CreateCourseInput) (*CreateCourseOutput, error)
	UpdateCourse(context.Context, *UpdateCourseInput) (*UpdateCourseOutput, error)
	DeleteCourse(context.Context, *DeleteCourseInput) (*DeleteCourseOutput, error)
	DescribeCourse(context.Context, *DescribeCourseInput) (*DescribeCourseOutput, error)
	ListCourses(context.Context, *ListCoursesInput) (*ListCoursesOutput, error)
	AssignCourse(context.Context, *AssignCourseInput) (*AssignCourseOutput, error)
	UnassignCourse(context.Context, *UnassignCourseInput) (*UnassignCourseOutput, error)
	StartCourse(context.Context, *StartCourseInput) (*StartCourseOutput, error)
}

// UnimplementedCourseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (UnimplementedCourseServiceServer) CreateCourse(context.Context, *CreateCourseInput) (*CreateCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCourseServiceServer) UpdateCourse(context.Context, *UpdateCourseInput) (*UpdateCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCourseServiceServer) DeleteCourse(context.Context, *DeleteCourseInput) (*DeleteCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedCourseServiceServer) DescribeCourse(context.Context, *DescribeCourseInput) (*DescribeCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCourse not implemented")
}
func (UnimplementedCourseServiceServer) ListCourses(context.Context, *ListCoursesInput) (*ListCoursesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourses not implemented")
}
func (UnimplementedCourseServiceServer) AssignCourse(context.Context, *AssignCourseInput) (*AssignCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCourse not implemented")
}
func (UnimplementedCourseServiceServer) UnassignCourse(context.Context, *UnassignCourseInput) (*UnassignCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignCourse not implemented")
}
func (UnimplementedCourseServiceServer) StartCourse(context.Context, *StartCourseInput) (*StartCourseOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCourse not implemented")
}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_CreateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateCourse(ctx, req.(*CreateCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_UpdateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpdateCourse(ctx, req.(*UpdateCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_DeleteCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteCourse(ctx, req.(*DeleteCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DescribeCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DescribeCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_DescribeCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DescribeCourse(ctx, req.(*DescribeCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_ListCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListCourses(ctx, req.(*ListCoursesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AssignCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AssignCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_AssignCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AssignCourse(ctx, req.(*AssignCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UnassignCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UnassignCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_UnassignCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UnassignCourse(ctx, req.(*UnassignCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_StartCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCourseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).StartCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_StartCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).StartCourse(ctx, req.(*StartCourseInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.course.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourse",
			Handler:    _CourseService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CourseService_UpdateCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _CourseService_DeleteCourse_Handler,
		},
		{
			MethodName: "DescribeCourse",
			Handler:    _CourseService_DescribeCourse_Handler,
		},
		{
			MethodName: "ListCourses",
			Handler:    _CourseService_ListCourses_Handler,
		},
		{
			MethodName: "AssignCourse",
			Handler:    _CourseService_AssignCourse_Handler,
		},
		{
			MethodName: "UnassignCourse",
			Handler:    _CourseService_UnassignCourse_Handler,
		},
		{
			MethodName: "StartCourse",
			Handler:    _CourseService_StartCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/course/course_service.proto",
}
