// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package course

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _ClassService_HTTPReadQueryString parses body into proto.Message
func _ClassService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _ClassService_HTTPReadRequestBody parses body into proto.Message
func _ClassService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ClassService_HTTPWriteResponse writes proto.Message to HTTP response
func _ClassService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ClassService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ClassService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ClassService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterClassServiceHttpHandlers adds handlers for for ClassServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterClassServiceHttpHandlers(router *mux.Router, prefix string, cli ClassServiceClient) {
	router.Handle(prefix+"/classes", _ClassService_CreateClass_Rule0(cli)).
		Methods("POST").
		Name("eolymp.course.ClassService.CreateClass")
	router.Handle(prefix+"/classes/{group_id}", _ClassService_UpdateClass_Rule0(cli)).
		Methods("POST").
		Name("eolymp.course.ClassService.UpdateClass")
	router.Handle(prefix+"/classes/{group_id}", _ClassService_DeleteClass_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.course.ClassService.DeleteClass")
	router.Handle(prefix+"/classes/{group_id}", _ClassService_DescribeClass_Rule0(cli)).
		Methods("GET").
		Name("eolymp.course.ClassService.DescribeClass")
	router.Handle(prefix+"/classes", _ClassService_ListClasses_Rule0(cli)).
		Methods("GET").
		Name("eolymp.course.ClassService.ListClasses")
	router.Handle(prefix+"/classes/{group_id}/assignments", _ClassService_ListClassAssignments_Rule0(cli)).
		Methods("GET").
		Name("eolymp.course.ClassService.ListClassAssignments")
	router.Handle(prefix+"/classes/{group_id}/assignments", _ClassService_UpdateClassAssignment_Rule0(cli)).
		Methods("POST").
		Name("eolymp.course.ClassService.UpdateClassAssignment")
	router.Handle(prefix+"/classes/{group_id}/assignments", _ClassService_DeleteClassAssignment_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.course.ClassService.DeleteClassAssignment")
}

func _ClassService_CreateClass_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateClassInput{}

		if err := _ClassService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateClass(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_UpdateClass_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateClassInput{}

		if err := _ClassService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateClass(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_DeleteClass_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteClassInput{}

		if err := _ClassService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteClass(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_DescribeClass_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeClassInput{}

		if err := _ClassService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeClass(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_ListClasses_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListClassesInput{}

		if err := _ClassService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListClasses(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_ListClassAssignments_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListClassAssignmentsInput{}

		if err := _ClassService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.ListClassAssignments(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_UpdateClassAssignment_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateClassAssignmentInput{}

		if err := _ClassService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateClassAssignment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ClassService_DeleteClassAssignment_Rule0(cli ClassServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteClassAssignmentInput{}

		if err := _ClassService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.GroupId = vars["group_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteClassAssignment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ClassService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ClassService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _ClassServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _ClassServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _ClassServiceHandler) (out proto.Message, err error)
type ClassServiceInterceptor struct {
	middleware []_ClassServiceMiddleware
	client     ClassServiceClient
}

// NewClassServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewClassServiceInterceptor(cli ClassServiceClient, middleware ..._ClassServiceMiddleware) *ClassServiceInterceptor {
	return &ClassServiceInterceptor{client: cli, middleware: middleware}
}

func (i *ClassServiceInterceptor) CreateClass(ctx context.Context, in *CreateClassInput, opts ...grpc.CallOption) (*CreateClassOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateClassInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateClassInput, got %T", in))
		}

		return i.client.CreateClass(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.CreateClass", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateClassOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateClassOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) UpdateClass(ctx context.Context, in *UpdateClassInput, opts ...grpc.CallOption) (*UpdateClassOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateClassInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateClassInput, got %T", in))
		}

		return i.client.UpdateClass(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.UpdateClass", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateClassOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateClassOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) DeleteClass(ctx context.Context, in *DeleteClassInput, opts ...grpc.CallOption) (*DeleteClassOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteClassInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteClassInput, got %T", in))
		}

		return i.client.DeleteClass(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.DeleteClass", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteClassOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteClassOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) DescribeClass(ctx context.Context, in *DescribeClassInput, opts ...grpc.CallOption) (*DescribeClassOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeClassInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeClassInput, got %T", in))
		}

		return i.client.DescribeClass(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.DescribeClass", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeClassOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeClassOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) ListClasses(ctx context.Context, in *ListClassesInput, opts ...grpc.CallOption) (*ListClassesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListClassesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListClassesInput, got %T", in))
		}

		return i.client.ListClasses(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.ListClasses", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListClassesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListClassesOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) ListClassAssignments(ctx context.Context, in *ListClassAssignmentsInput, opts ...grpc.CallOption) (*ListClassAssignmentsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListClassAssignmentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListClassAssignmentsInput, got %T", in))
		}

		return i.client.ListClassAssignments(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.ListClassAssignments", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListClassAssignmentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListClassAssignmentsOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) UpdateClassAssignment(ctx context.Context, in *UpdateClassAssignmentInput, opts ...grpc.CallOption) (*UpdateClassAssignmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateClassAssignmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateClassAssignmentInput, got %T", in))
		}

		return i.client.UpdateClassAssignment(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.UpdateClassAssignment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateClassAssignmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateClassAssignmentOutput, got %T", out))
	}

	return message, err
}

func (i *ClassServiceInterceptor) DeleteClassAssignment(ctx context.Context, in *DeleteClassAssignmentInput, opts ...grpc.CallOption) (*DeleteClassAssignmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteClassAssignmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteClassAssignmentInput, got %T", in))
		}

		return i.client.DeleteClassAssignment(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.course.ClassService.DeleteClassAssignment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteClassAssignmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteClassAssignmentOutput, got %T", out))
	}

	return message, err
}
