// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/course/enrollment_service.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EnrollmentService_CreateEnrollment_FullMethodName   = "/eolymp.course.EnrollmentService/CreateEnrollment"
	EnrollmentService_UpdateEnrollment_FullMethodName   = "/eolymp.course.EnrollmentService/UpdateEnrollment"
	EnrollmentService_DeleteEnrollment_FullMethodName   = "/eolymp.course.EnrollmentService/DeleteEnrollment"
	EnrollmentService_DescribeEnrollment_FullMethodName = "/eolymp.course.EnrollmentService/DescribeEnrollment"
	EnrollmentService_ListEnrollments_FullMethodName    = "/eolymp.course.EnrollmentService/ListEnrollments"
)

// EnrollmentServiceClient is the client API for EnrollmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentServiceClient interface {
	CreateEnrollment(ctx context.Context, in *CreateEnrollmentInput, opts ...grpc.CallOption) (*CreateEnrollmentOutput, error)
	UpdateEnrollment(ctx context.Context, in *UpdateEnrollmentInput, opts ...grpc.CallOption) (*UpdateEnrollmentOutput, error)
	DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentInput, opts ...grpc.CallOption) (*DeleteEnrollmentOutput, error)
	DescribeEnrollment(ctx context.Context, in *DescribeEnrollmentInput, opts ...grpc.CallOption) (*DescribeEnrollmentOutput, error)
	ListEnrollments(ctx context.Context, in *ListEnrollmentsInput, opts ...grpc.CallOption) (*ListEnrollmentsOutput, error)
}

type enrollmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentServiceClient(cc grpc.ClientConnInterface) EnrollmentServiceClient {
	return &enrollmentServiceClient{cc}
}

func (c *enrollmentServiceClient) CreateEnrollment(ctx context.Context, in *CreateEnrollmentInput, opts ...grpc.CallOption) (*CreateEnrollmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnrollmentOutput)
	err := c.cc.Invoke(ctx, EnrollmentService_CreateEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) UpdateEnrollment(ctx context.Context, in *UpdateEnrollmentInput, opts ...grpc.CallOption) (*UpdateEnrollmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnrollmentOutput)
	err := c.cc.Invoke(ctx, EnrollmentService_UpdateEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentInput, opts ...grpc.CallOption) (*DeleteEnrollmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnrollmentOutput)
	err := c.cc.Invoke(ctx, EnrollmentService_DeleteEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) DescribeEnrollment(ctx context.Context, in *DescribeEnrollmentInput, opts ...grpc.CallOption) (*DescribeEnrollmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEnrollmentOutput)
	err := c.cc.Invoke(ctx, EnrollmentService_DescribeEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) ListEnrollments(ctx context.Context, in *ListEnrollmentsInput, opts ...grpc.CallOption) (*ListEnrollmentsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnrollmentsOutput)
	err := c.cc.Invoke(ctx, EnrollmentService_ListEnrollments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollmentServiceServer is the server API for EnrollmentService service.
// All implementations should embed UnimplementedEnrollmentServiceServer
// for forward compatibility
type EnrollmentServiceServer interface {
	CreateEnrollment(context.Context, *CreateEnrollmentInput) (*CreateEnrollmentOutput, error)
	UpdateEnrollment(context.Context, *UpdateEnrollmentInput) (*UpdateEnrollmentOutput, error)
	DeleteEnrollment(context.Context, *DeleteEnrollmentInput) (*DeleteEnrollmentOutput, error)
	DescribeEnrollment(context.Context, *DescribeEnrollmentInput) (*DescribeEnrollmentOutput, error)
	ListEnrollments(context.Context, *ListEnrollmentsInput) (*ListEnrollmentsOutput, error)
}

// UnimplementedEnrollmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEnrollmentServiceServer struct {
}

func (UnimplementedEnrollmentServiceServer) CreateEnrollment(context.Context, *CreateEnrollmentInput) (*CreateEnrollmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) UpdateEnrollment(context.Context, *UpdateEnrollmentInput) (*UpdateEnrollmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) DeleteEnrollment(context.Context, *DeleteEnrollmentInput) (*DeleteEnrollmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) DescribeEnrollment(context.Context, *DescribeEnrollmentInput) (*DescribeEnrollmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) ListEnrollments(context.Context, *ListEnrollmentsInput) (*ListEnrollmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrollments not implemented")
}

// UnsafeEnrollmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentServiceServer will
// result in compilation errors.
type UnsafeEnrollmentServiceServer interface {
	mustEmbedUnimplementedEnrollmentServiceServer()
}

func RegisterEnrollmentServiceServer(s grpc.ServiceRegistrar, srv EnrollmentServiceServer) {
	s.RegisterService(&EnrollmentService_ServiceDesc, srv)
}

func _EnrollmentService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_CreateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).CreateEnrollment(ctx, req.(*CreateEnrollmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_UpdateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnrollmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).UpdateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_UpdateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).UpdateEnrollment(ctx, req.(*UpdateEnrollmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_DeleteEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).DeleteEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_DeleteEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).DeleteEnrollment(ctx, req.(*DeleteEnrollmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_DescribeEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEnrollmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).DescribeEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_DescribeEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).DescribeEnrollment(ctx, req.(*DescribeEnrollmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_ListEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnrollmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).ListEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentService_ListEnrollments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).ListEnrollments(ctx, req.(*ListEnrollmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrollmentService_ServiceDesc is the grpc.ServiceDesc for EnrollmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrollmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.course.EnrollmentService",
	HandlerType: (*EnrollmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnrollment",
			Handler:    _EnrollmentService_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollment",
			Handler:    _EnrollmentService_UpdateEnrollment_Handler,
		},
		{
			MethodName: "DeleteEnrollment",
			Handler:    _EnrollmentService_DeleteEnrollment_Handler,
		},
		{
			MethodName: "DescribeEnrollment",
			Handler:    _EnrollmentService_DescribeEnrollment_Handler,
		},
		{
			MethodName: "ListEnrollments",
			Handler:    _EnrollmentService_ListEnrollments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/course/enrollment_service.proto",
}
