// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/course/class_service.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClassService_CreateClass_FullMethodName           = "/eolymp.course.ClassService/CreateClass"
	ClassService_UpdateClass_FullMethodName           = "/eolymp.course.ClassService/UpdateClass"
	ClassService_DeleteClass_FullMethodName           = "/eolymp.course.ClassService/DeleteClass"
	ClassService_DescribeClass_FullMethodName         = "/eolymp.course.ClassService/DescribeClass"
	ClassService_ListClasses_FullMethodName           = "/eolymp.course.ClassService/ListClasses"
	ClassService_ListClassAssignments_FullMethodName  = "/eolymp.course.ClassService/ListClassAssignments"
	ClassService_UpdateClassAssignment_FullMethodName = "/eolymp.course.ClassService/UpdateClassAssignment"
	ClassService_DeleteClassAssignment_FullMethodName = "/eolymp.course.ClassService/DeleteClassAssignment"
)

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	CreateClass(ctx context.Context, in *CreateClassInput, opts ...grpc.CallOption) (*CreateClassOutput, error)
	UpdateClass(ctx context.Context, in *UpdateClassInput, opts ...grpc.CallOption) (*UpdateClassOutput, error)
	DeleteClass(ctx context.Context, in *DeleteClassInput, opts ...grpc.CallOption) (*DeleteClassOutput, error)
	DescribeClass(ctx context.Context, in *DescribeClassInput, opts ...grpc.CallOption) (*DescribeClassOutput, error)
	ListClasses(ctx context.Context, in *ListClassesInput, opts ...grpc.CallOption) (*ListClassesOutput, error)
	ListClassAssignments(ctx context.Context, in *ListClassAssignmentsInput, opts ...grpc.CallOption) (*ListClassAssignmentsOutput, error)
	UpdateClassAssignment(ctx context.Context, in *UpdateClassAssignmentInput, opts ...grpc.CallOption) (*UpdateClassAssignmentOutput, error)
	DeleteClassAssignment(ctx context.Context, in *DeleteClassAssignmentInput, opts ...grpc.CallOption) (*DeleteClassAssignmentOutput, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) CreateClass(ctx context.Context, in *CreateClassInput, opts ...grpc.CallOption) (*CreateClassOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClassOutput)
	err := c.cc.Invoke(ctx, ClassService_CreateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) UpdateClass(ctx context.Context, in *UpdateClassInput, opts ...grpc.CallOption) (*UpdateClassOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClassOutput)
	err := c.cc.Invoke(ctx, ClassService_UpdateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) DeleteClass(ctx context.Context, in *DeleteClassInput, opts ...grpc.CallOption) (*DeleteClassOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClassOutput)
	err := c.cc.Invoke(ctx, ClassService_DeleteClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) DescribeClass(ctx context.Context, in *DescribeClassInput, opts ...grpc.CallOption) (*DescribeClassOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeClassOutput)
	err := c.cc.Invoke(ctx, ClassService_DescribeClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ListClasses(ctx context.Context, in *ListClassesInput, opts ...grpc.CallOption) (*ListClassesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassesOutput)
	err := c.cc.Invoke(ctx, ClassService_ListClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ListClassAssignments(ctx context.Context, in *ListClassAssignmentsInput, opts ...grpc.CallOption) (*ListClassAssignmentsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClassAssignmentsOutput)
	err := c.cc.Invoke(ctx, ClassService_ListClassAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) UpdateClassAssignment(ctx context.Context, in *UpdateClassAssignmentInput, opts ...grpc.CallOption) (*UpdateClassAssignmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClassAssignmentOutput)
	err := c.cc.Invoke(ctx, ClassService_UpdateClassAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) DeleteClassAssignment(ctx context.Context, in *DeleteClassAssignmentInput, opts ...grpc.CallOption) (*DeleteClassAssignmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClassAssignmentOutput)
	err := c.cc.Invoke(ctx, ClassService_DeleteClassAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations should embed UnimplementedClassServiceServer
// for forward compatibility.
type ClassServiceServer interface {
	CreateClass(context.Context, *CreateClassInput) (*CreateClassOutput, error)
	UpdateClass(context.Context, *UpdateClassInput) (*UpdateClassOutput, error)
	DeleteClass(context.Context, *DeleteClassInput) (*DeleteClassOutput, error)
	DescribeClass(context.Context, *DescribeClassInput) (*DescribeClassOutput, error)
	ListClasses(context.Context, *ListClassesInput) (*ListClassesOutput, error)
	ListClassAssignments(context.Context, *ListClassAssignmentsInput) (*ListClassAssignmentsOutput, error)
	UpdateClassAssignment(context.Context, *UpdateClassAssignmentInput) (*UpdateClassAssignmentOutput, error)
	DeleteClassAssignment(context.Context, *DeleteClassAssignmentInput) (*DeleteClassAssignmentOutput, error)
}

// UnimplementedClassServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClassServiceServer struct{}

func (UnimplementedClassServiceServer) CreateClass(context.Context, *CreateClassInput) (*CreateClassOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedClassServiceServer) UpdateClass(context.Context, *UpdateClassInput) (*UpdateClassOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassServiceServer) DeleteClass(context.Context, *DeleteClassInput) (*DeleteClassOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassServiceServer) DescribeClass(context.Context, *DescribeClassInput) (*DescribeClassOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeClass not implemented")
}
func (UnimplementedClassServiceServer) ListClasses(context.Context, *ListClassesInput) (*ListClassesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClasses not implemented")
}
func (UnimplementedClassServiceServer) ListClassAssignments(context.Context, *ListClassAssignmentsInput) (*ListClassAssignmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClassAssignments not implemented")
}
func (UnimplementedClassServiceServer) UpdateClassAssignment(context.Context, *UpdateClassAssignmentInput) (*UpdateClassAssignmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassAssignment not implemented")
}
func (UnimplementedClassServiceServer) DeleteClassAssignment(context.Context, *DeleteClassAssignmentInput) (*DeleteClassAssignmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassAssignment not implemented")
}
func (UnimplementedClassServiceServer) testEmbeddedByValue() {}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	// If the following call pancis, it indicates UnimplementedClassServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClassService_ServiceDesc, srv)
}

func _ClassService_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_CreateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).CreateClass(ctx, req.(*CreateClassInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).UpdateClass(ctx, req.(*UpdateClassInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_DeleteClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).DeleteClass(ctx, req.(*DeleteClassInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_DescribeClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeClassInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).DescribeClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_DescribeClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).DescribeClass(ctx, req.(*DescribeClassInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ListClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ListClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_ListClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ListClasses(ctx, req.(*ListClassesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ListClassAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassAssignmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ListClassAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_ListClassAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ListClassAssignments(ctx, req.(*ListClassAssignmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_UpdateClassAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassAssignmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).UpdateClassAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_UpdateClassAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).UpdateClassAssignment(ctx, req.(*UpdateClassAssignmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_DeleteClassAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassAssignmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).DeleteClassAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassService_DeleteClassAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).DeleteClassAssignment(ctx, req.(*DeleteClassAssignmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassService_ServiceDesc is the grpc.ServiceDesc for ClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.course.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _ClassService_CreateClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _ClassService_UpdateClass_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _ClassService_DeleteClass_Handler,
		},
		{
			MethodName: "DescribeClass",
			Handler:    _ClassService_DescribeClass_Handler,
		},
		{
			MethodName: "ListClasses",
			Handler:    _ClassService_ListClasses_Handler,
		},
		{
			MethodName: "ListClassAssignments",
			Handler:    _ClassService_ListClassAssignments_Handler,
		},
		{
			MethodName: "UpdateClassAssignment",
			Handler:    _ClassService_UpdateClassAssignment_Handler,
		},
		{
			MethodName: "DeleteClassAssignment",
			Handler:    _ClassService_DeleteClassAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/course/class_service.proto",
}
