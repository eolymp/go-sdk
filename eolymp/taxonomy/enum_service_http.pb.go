// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package taxonomy

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _EnumService_HTTPReadQueryString parses body into proto.Message
func _EnumService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _EnumService_HTTPReadRequestBody parses body into proto.Message
func _EnumService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _EnumService_HTTPWriteResponse writes proto.Message to HTTP response
func _EnumService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_EnumService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _EnumService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _EnumService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterEnumServiceHttpHandlers adds handlers for for EnumServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterEnumServiceHttpHandlers(router *mux.Router, prefix string, cli EnumServiceClient) {
	router.Handle(prefix+"/enums", _EnumService_CreateEnum_Rule0(cli)).
		Methods("POST").
		Name("eolymp.taxonomy.EnumService.CreateEnum")
	router.Handle(prefix+"/enums/{enum_id}", _EnumService_DeleteEnum_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.EnumService.DeleteEnum")
	router.Handle(prefix+"/enums/{enum_id}", _EnumService_UpdateEnum_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.EnumService.UpdateEnum")
	router.Handle(prefix+"/enums/{enum_id}", _EnumService_DescribeEnum_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.EnumService.DescribeEnum")
	router.Handle(prefix+"/enums", _EnumService_ListEnums_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.EnumService.ListEnums")
	router.Handle(prefix+"/enums/{enum_id}/items", _EnumService_CreateValue_Rule0(cli)).
		Methods("POST").
		Name("eolymp.taxonomy.EnumService.CreateValue")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}", _EnumService_DeleteValue_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.EnumService.DeleteValue")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}", _EnumService_UpdateValue_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.EnumService.UpdateValue")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}", _EnumService_DescribeValue_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.EnumService.DescribeValue")
	router.Handle(prefix+"/enums/{enum_id}/items", _EnumService_ListValues_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.EnumService.ListValues")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}/translations/{locale}", _EnumService_TranslateValue_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.EnumService.TranslateValue")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}/translations/{locale}", _EnumService_DeleteTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.EnumService.DeleteTranslation")
	router.Handle(prefix+"/enums/{enum_id}/values/{value_id}/translations", _EnumService_ListTranslations_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.EnumService.ListTranslations")
}

func _EnumService_CreateEnum_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateEnumInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateEnum(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_DeleteEnum_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteEnumInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteEnum(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_UpdateEnum_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateEnumInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateEnum(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_DescribeEnum_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeEnumInput{}

		if err := _EnumService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeEnum(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_ListEnums_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEnumsInput{}

		if err := _EnumService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListEnums(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_CreateValue_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateValueInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateValue(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_DeleteValue_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteValueInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteValue(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_UpdateValue_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateValueInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateValue(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_DescribeValue_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeValueInput{}

		if err := _EnumService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeValue(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_ListValues_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListValuesInput{}

		if err := _EnumService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]

		var header, trailer metadata.MD

		out, err := cli.ListValues(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_TranslateValue_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslateValueInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.TranslateValue(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_DeleteTranslation_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTranslationInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _EnumService_ListTranslations_Rule0(cli EnumServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationsInput{}

		if err := _EnumService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.EnumId = vars["enum_id"]
		in.ValueId = vars["value_id"]

		var header, trailer metadata.MD

		out, err := cli.ListTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_EnumService_HTTPWriteErrorResponse(w, err)
			return
		}

		_EnumService_HTTPWriteResponse(w, out, header, trailer)
	})
}
