// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package taxonomy

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _DatasetService_HTTPReadQueryString parses body into proto.Message
func _DatasetService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _DatasetService_HTTPReadRequestBody parses body into proto.Message
func _DatasetService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _DatasetService_HTTPWriteResponse writes proto.Message to HTTP response
func _DatasetService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_DatasetService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _DatasetService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _DatasetService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _DatasetService_WebsocketErrorResponse writes error to websocket connection
func _DatasetService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _DatasetService_WebsocketCodec implements protobuf codec for websockets package
var _DatasetService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterDatasetServiceHttpHandlers adds handlers for for DatasetServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterDatasetServiceHttpHandlers(router *mux.Router, prefix string, cli DatasetServiceClient) {
	router.Handle(prefix+"/datasets", _DatasetService_CreateDataset_Rule0(cli)).
		Methods("POST").
		Name("eolymp.taxonomy.DatasetService.CreateDataset")
	router.Handle(prefix+"/datasets/{dataset_id}", _DatasetService_DeleteDataset_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.DatasetService.DeleteDataset")
	router.Handle(prefix+"/datasets/{dataset_id}", _DatasetService_UpdateDataset_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.DatasetService.UpdateDataset")
	router.Handle(prefix+"/datasets/{dataset_id}", _DatasetService_DescribeDataset_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.DatasetService.DescribeDataset")
	router.Handle(prefix+"/datasets", _DatasetService_ListDatasets_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.DatasetService.ListDatasets")
	router.Handle(prefix+"/datasets/{dataset_id}/items", _DatasetService_CreateEntry_Rule0(cli)).
		Methods("POST").
		Name("eolymp.taxonomy.DatasetService.CreateEntry")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}", _DatasetService_DeleteEntry_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.DatasetService.DeleteEntry")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}", _DatasetService_UpdateEntry_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.DatasetService.UpdateEntry")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}", _DatasetService_DescribeEntry_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.DatasetService.DescribeEntry")
	router.Handle(prefix+"/datasets/{dataset_id}/items", _DatasetService_ListEntries_Rule0(cli)).
		Methods("GET").
		Name("eolymp.taxonomy.DatasetService.ListEntries")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}/translations/{locale}", _DatasetService_TranslateEntry_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.taxonomy.DatasetService.TranslateEntry")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}/translations/{locale}", _DatasetService_DeleteTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.DatasetService.DeleteTranslation")
	router.Handle(prefix+"/datasets/{dataset_id}/items/{entry_id}/translations", _DatasetService_ListTranslations_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.taxonomy.DatasetService.ListTranslations")
}

func _DatasetService_CreateDataset_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateDatasetInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.CreateDataset(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_DeleteDataset_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteDatasetInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]

		out, err := cli.DeleteDataset(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_UpdateDataset_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateDatasetInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]

		out, err := cli.UpdateDataset(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_DescribeDataset_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeDatasetInput{}

		if err := _DatasetService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]

		out, err := cli.DescribeDataset(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_ListDatasets_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListDatasetsInput{}

		if err := _DatasetService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.ListDatasets(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_CreateEntry_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateEntryInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]

		out, err := cli.CreateEntry(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_DeleteEntry_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteEntryInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]

		out, err := cli.DeleteEntry(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_UpdateEntry_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateEntryInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]

		out, err := cli.UpdateEntry(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_DescribeEntry_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeEntryInput{}

		if err := _DatasetService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]

		out, err := cli.DescribeEntry(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_ListEntries_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntriesInput{}

		if err := _DatasetService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]

		out, err := cli.ListEntries(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_TranslateEntry_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslateEntryInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]
		in.Locale = vars["locale"]

		out, err := cli.TranslateEntry(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_DeleteTranslation_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTranslationInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]
		in.Locale = vars["locale"]

		out, err := cli.DeleteTranslation(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

func _DatasetService_ListTranslations_Rule0(cli DatasetServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationsInput{}

		if err := _DatasetService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.DatasetId = vars["dataset_id"]
		in.EntryId = vars["entry_id"]

		out, err := cli.ListTranslations(r.Context(), in)
		if err != nil {
			_DatasetService_HTTPWriteErrorResponse(w, err)
			return
		}

		_DatasetService_HTTPWriteResponse(w, out)
	})
}

type _DatasetServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _DatasetServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _DatasetServiceHandler) (out proto.Message, err error)
type DatasetServiceInterceptor struct {
	middleware []_DatasetServiceMiddleware
	client     DatasetServiceClient
}

// NewDatasetServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewDatasetServiceInterceptor(cli DatasetServiceClient, middleware ..._DatasetServiceMiddleware) *DatasetServiceInterceptor {
	return &DatasetServiceInterceptor{client: cli, middleware: middleware}
}

func (i *DatasetServiceInterceptor) CreateDataset(ctx context.Context, in *CreateDatasetInput, opts ...grpc.CallOption) (*CreateDatasetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateDatasetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateDatasetInput, got %T", in))
		}

		return i.client.CreateDataset(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.CreateDataset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateDatasetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateDatasetOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) DeleteDataset(ctx context.Context, in *DeleteDatasetInput, opts ...grpc.CallOption) (*DeleteDatasetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteDatasetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteDatasetInput, got %T", in))
		}

		return i.client.DeleteDataset(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.DeleteDataset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteDatasetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteDatasetOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) UpdateDataset(ctx context.Context, in *UpdateDatasetInput, opts ...grpc.CallOption) (*UpdateDatasetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateDatasetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateDatasetInput, got %T", in))
		}

		return i.client.UpdateDataset(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.UpdateDataset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateDatasetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateDatasetOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) DescribeDataset(ctx context.Context, in *DescribeDatasetInput, opts ...grpc.CallOption) (*DescribeDatasetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeDatasetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeDatasetInput, got %T", in))
		}

		return i.client.DescribeDataset(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.DescribeDataset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeDatasetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeDatasetOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) ListDatasets(ctx context.Context, in *ListDatasetsInput, opts ...grpc.CallOption) (*ListDatasetsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListDatasetsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListDatasetsInput, got %T", in))
		}

		return i.client.ListDatasets(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.ListDatasets", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListDatasetsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListDatasetsOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) CreateEntry(ctx context.Context, in *CreateEntryInput, opts ...grpc.CallOption) (*CreateEntryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateEntryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateEntryInput, got %T", in))
		}

		return i.client.CreateEntry(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.CreateEntry", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateEntryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateEntryOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) DeleteEntry(ctx context.Context, in *DeleteEntryInput, opts ...grpc.CallOption) (*DeleteEntryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteEntryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteEntryInput, got %T", in))
		}

		return i.client.DeleteEntry(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.DeleteEntry", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteEntryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteEntryOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) UpdateEntry(ctx context.Context, in *UpdateEntryInput, opts ...grpc.CallOption) (*UpdateEntryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateEntryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateEntryInput, got %T", in))
		}

		return i.client.UpdateEntry(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.UpdateEntry", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateEntryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateEntryOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) DescribeEntry(ctx context.Context, in *DescribeEntryInput, opts ...grpc.CallOption) (*DescribeEntryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeEntryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeEntryInput, got %T", in))
		}

		return i.client.DescribeEntry(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.DescribeEntry", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeEntryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeEntryOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) ListEntries(ctx context.Context, in *ListEntriesInput, opts ...grpc.CallOption) (*ListEntriesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListEntriesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListEntriesInput, got %T", in))
		}

		return i.client.ListEntries(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.ListEntries", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListEntriesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListEntriesOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) TranslateEntry(ctx context.Context, in *TranslateEntryInput, opts ...grpc.CallOption) (*TranslateEntryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*TranslateEntryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *TranslateEntryInput, got %T", in))
		}

		return i.client.TranslateEntry(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.TranslateEntry", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*TranslateEntryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *TranslateEntryOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTranslationInput, got %T", in))
		}

		return i.client.DeleteTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.DeleteTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *DatasetServiceInterceptor) ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTranslationsInput, got %T", in))
		}

		return i.client.ListTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.taxonomy.DatasetService.ListTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTranslationsOutput, got %T", out))
	}

	return message, err
}
