// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/taxonomy/dataset_service.proto

package taxonomy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetService_CreateDataset_FullMethodName     = "/eolymp.taxonomy.DatasetService/CreateDataset"
	DatasetService_DeleteDataset_FullMethodName     = "/eolymp.taxonomy.DatasetService/DeleteDataset"
	DatasetService_UpdateDataset_FullMethodName     = "/eolymp.taxonomy.DatasetService/UpdateDataset"
	DatasetService_DescribeDataset_FullMethodName   = "/eolymp.taxonomy.DatasetService/DescribeDataset"
	DatasetService_ListDatasets_FullMethodName      = "/eolymp.taxonomy.DatasetService/ListDatasets"
	DatasetService_CreateEntry_FullMethodName       = "/eolymp.taxonomy.DatasetService/CreateEntry"
	DatasetService_DeleteEntry_FullMethodName       = "/eolymp.taxonomy.DatasetService/DeleteEntry"
	DatasetService_UpdateEntry_FullMethodName       = "/eolymp.taxonomy.DatasetService/UpdateEntry"
	DatasetService_DescribeEntry_FullMethodName     = "/eolymp.taxonomy.DatasetService/DescribeEntry"
	DatasetService_ListEntries_FullMethodName       = "/eolymp.taxonomy.DatasetService/ListEntries"
	DatasetService_TranslateEntry_FullMethodName    = "/eolymp.taxonomy.DatasetService/TranslateEntry"
	DatasetService_DeleteTranslation_FullMethodName = "/eolymp.taxonomy.DatasetService/DeleteTranslation"
	DatasetService_ListTranslations_FullMethodName  = "/eolymp.taxonomy.DatasetService/ListTranslations"
)

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	CreateDataset(ctx context.Context, in *CreateDatasetInput, opts ...grpc.CallOption) (*CreateDatasetOutput, error)
	DeleteDataset(ctx context.Context, in *DeleteDatasetInput, opts ...grpc.CallOption) (*DeleteDatasetOutput, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetInput, opts ...grpc.CallOption) (*UpdateDatasetOutput, error)
	DescribeDataset(ctx context.Context, in *DescribeDatasetInput, opts ...grpc.CallOption) (*DescribeDatasetOutput, error)
	ListDatasets(ctx context.Context, in *ListDatasetsInput, opts ...grpc.CallOption) (*ListDatasetsOutput, error)
	CreateEntry(ctx context.Context, in *CreateEntryInput, opts ...grpc.CallOption) (*CreateEntryOutput, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryInput, opts ...grpc.CallOption) (*DeleteEntryOutput, error)
	UpdateEntry(ctx context.Context, in *UpdateEntryInput, opts ...grpc.CallOption) (*UpdateEntryOutput, error)
	DescribeEntry(ctx context.Context, in *DescribeEntryInput, opts ...grpc.CallOption) (*DescribeEntryOutput, error)
	ListEntries(ctx context.Context, in *ListEntriesInput, opts ...grpc.CallOption) (*ListEntriesOutput, error)
	TranslateEntry(ctx context.Context, in *TranslateEntryInput, opts ...grpc.CallOption) (*TranslateEntryOutput, error)
	DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error)
	ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetInput, opts ...grpc.CallOption) (*CreateDatasetOutput, error) {
	out := new(CreateDatasetOutput)
	err := c.cc.Invoke(ctx, DatasetService_CreateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetInput, opts ...grpc.CallOption) (*DeleteDatasetOutput, error) {
	out := new(DeleteDatasetOutput)
	err := c.cc.Invoke(ctx, DatasetService_DeleteDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDataset(ctx context.Context, in *UpdateDatasetInput, opts ...grpc.CallOption) (*UpdateDatasetOutput, error) {
	out := new(UpdateDatasetOutput)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DescribeDataset(ctx context.Context, in *DescribeDatasetInput, opts ...grpc.CallOption) (*DescribeDatasetOutput, error) {
	out := new(DescribeDatasetOutput)
	err := c.cc.Invoke(ctx, DatasetService_DescribeDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsInput, opts ...grpc.CallOption) (*ListDatasetsOutput, error) {
	out := new(ListDatasetsOutput)
	err := c.cc.Invoke(ctx, DatasetService_ListDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateEntry(ctx context.Context, in *CreateEntryInput, opts ...grpc.CallOption) (*CreateEntryOutput, error) {
	out := new(CreateEntryOutput)
	err := c.cc.Invoke(ctx, DatasetService_CreateEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteEntry(ctx context.Context, in *DeleteEntryInput, opts ...grpc.CallOption) (*DeleteEntryOutput, error) {
	out := new(DeleteEntryOutput)
	err := c.cc.Invoke(ctx, DatasetService_DeleteEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateEntry(ctx context.Context, in *UpdateEntryInput, opts ...grpc.CallOption) (*UpdateEntryOutput, error) {
	out := new(UpdateEntryOutput)
	err := c.cc.Invoke(ctx, DatasetService_UpdateEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DescribeEntry(ctx context.Context, in *DescribeEntryInput, opts ...grpc.CallOption) (*DescribeEntryOutput, error) {
	out := new(DescribeEntryOutput)
	err := c.cc.Invoke(ctx, DatasetService_DescribeEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListEntries(ctx context.Context, in *ListEntriesInput, opts ...grpc.CallOption) (*ListEntriesOutput, error) {
	out := new(ListEntriesOutput)
	err := c.cc.Invoke(ctx, DatasetService_ListEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) TranslateEntry(ctx context.Context, in *TranslateEntryInput, opts ...grpc.CallOption) (*TranslateEntryOutput, error) {
	out := new(TranslateEntryOutput)
	err := c.cc.Invoke(ctx, DatasetService_TranslateEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error) {
	out := new(DeleteTranslationOutput)
	err := c.cc.Invoke(ctx, DatasetService_DeleteTranslation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error) {
	out := new(ListTranslationsOutput)
	err := c.cc.Invoke(ctx, DatasetService_ListTranslations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations should embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	CreateDataset(context.Context, *CreateDatasetInput) (*CreateDatasetOutput, error)
	DeleteDataset(context.Context, *DeleteDatasetInput) (*DeleteDatasetOutput, error)
	UpdateDataset(context.Context, *UpdateDatasetInput) (*UpdateDatasetOutput, error)
	DescribeDataset(context.Context, *DescribeDatasetInput) (*DescribeDatasetOutput, error)
	ListDatasets(context.Context, *ListDatasetsInput) (*ListDatasetsOutput, error)
	CreateEntry(context.Context, *CreateEntryInput) (*CreateEntryOutput, error)
	DeleteEntry(context.Context, *DeleteEntryInput) (*DeleteEntryOutput, error)
	UpdateEntry(context.Context, *UpdateEntryInput) (*UpdateEntryOutput, error)
	DescribeEntry(context.Context, *DescribeEntryInput) (*DescribeEntryOutput, error)
	ListEntries(context.Context, *ListEntriesInput) (*ListEntriesOutput, error)
	TranslateEntry(context.Context, *TranslateEntryInput) (*TranslateEntryOutput, error)
	DeleteTranslation(context.Context, *DeleteTranslationInput) (*DeleteTranslationOutput, error)
	ListTranslations(context.Context, *ListTranslationsInput) (*ListTranslationsOutput, error)
}

// UnimplementedDatasetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) CreateDataset(context.Context, *CreateDatasetInput) (*CreateDatasetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDatasetInput) (*DeleteDatasetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDataset(context.Context, *UpdateDatasetInput) (*UpdateDatasetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DescribeDataset(context.Context, *DescribeDatasetInput) (*DescribeDatasetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDataset not implemented")
}
func (UnimplementedDatasetServiceServer) ListDatasets(context.Context, *ListDatasetsInput) (*ListDatasetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) CreateEntry(context.Context, *CreateEntryInput) (*CreateEntryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteEntry(context.Context, *DeleteEntryInput) (*DeleteEntryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateEntry(context.Context, *UpdateEntryInput) (*UpdateEntryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedDatasetServiceServer) DescribeEntry(context.Context, *DescribeEntryInput) (*DescribeEntryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEntry not implemented")
}
func (UnimplementedDatasetServiceServer) ListEntries(context.Context, *ListEntriesInput) (*ListEntriesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedDatasetServiceServer) TranslateEntry(context.Context, *TranslateEntryInput) (*TranslateEntryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateEntry not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteTranslation(context.Context, *DeleteTranslationInput) (*DeleteTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranslation not implemented")
}
func (UnimplementedDatasetServiceServer) ListTranslations(context.Context, *ListTranslationsInput) (*ListTranslationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranslations not implemented")
}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateDataset(ctx, req.(*CreateDatasetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, req.(*UpdateDatasetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DescribeDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDatasetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DescribeDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DescribeDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DescribeDataset(ctx, req.(*DescribeDatasetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListDatasets(ctx, req.(*ListDatasetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_CreateEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateEntry(ctx, req.(*CreateEntryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DeleteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteEntry(ctx, req.(*DeleteEntryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateEntry(ctx, req.(*UpdateEntryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DescribeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEntryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DescribeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DescribeEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DescribeEntry(ctx, req.(*DescribeEntryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_ListEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListEntries(ctx, req.(*ListEntriesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_TranslateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateEntryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).TranslateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_TranslateEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).TranslateEntry(ctx, req.(*TranslateEntryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DeleteTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteTranslation(ctx, req.(*DeleteTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranslationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_ListTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListTranslations(ctx, req.(*ListTranslationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.taxonomy.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetService_CreateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetService_UpdateDataset_Handler,
		},
		{
			MethodName: "DescribeDataset",
			Handler:    _DatasetService_DescribeDataset_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _DatasetService_ListDatasets_Handler,
		},
		{
			MethodName: "CreateEntry",
			Handler:    _DatasetService_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _DatasetService_DeleteEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _DatasetService_UpdateEntry_Handler,
		},
		{
			MethodName: "DescribeEntry",
			Handler:    _DatasetService_DescribeEntry_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _DatasetService_ListEntries_Handler,
		},
		{
			MethodName: "TranslateEntry",
			Handler:    _DatasetService_TranslateEntry_Handler,
		},
		{
			MethodName: "DeleteTranslation",
			Handler:    _DatasetService_DeleteTranslation_Handler,
		},
		{
			MethodName: "ListTranslations",
			Handler:    _DatasetService_ListTranslations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/taxonomy/dataset_service.proto",
}
