// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package harmony

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Harmony_HTTPReadQueryString parses body into proto.Message
func _Harmony_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Harmony_HTTPReadRequestBody parses body into proto.Message
func _Harmony_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Harmony_HTTPWriteResponse writes proto.Message to HTTP response
func _Harmony_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Harmony_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Harmony_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Harmony_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewHarmonyHandler constructs new http.Handler for HarmonyServer
func NewHarmonyHandler(srv HarmonyServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.harmony.Harmony/ListAgreements", _Harmony_ListAgreements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.harmony.Harmony/GetConsent", _Harmony_GetConsent(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.harmony.Harmony/SetConsent", _Harmony_SetConsent(srv)).Methods(http.MethodPost)
	return router
}

// NewHarmonyHandlerHttp constructs new http.Handler for HarmonyServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewHarmonyHandlerHttp(srv HarmonyServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/harmony/agreements", _Harmony_ListAgreements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.harmony.Harmony.ListAgreements")

	router.Handle(prefix+"/harmony/agreements/{agreement_id}/consent", _Harmony_GetConsent_Rule0(srv)).
		Methods("GET").
		Name("eolymp.harmony.Harmony.GetConsent")

	router.Handle(prefix+"/harmony/agreements/{agreement_id}/consent", _Harmony_SetConsent_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.harmony.Harmony.SetConsent")

	return router
}

func _Harmony_ListAgreements(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAgreementsInput{}

		if err := _Harmony_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAgreements(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

func _Harmony_GetConsent(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GetConsentInput{}

		if err := _Harmony_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.GetConsent(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

func _Harmony_SetConsent(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SetConsentInput{}

		if err := _Harmony_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SetConsent(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

func _Harmony_ListAgreements_Rule0(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAgreementsInput{}

		if err := _Harmony_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAgreements(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

func _Harmony_GetConsent_Rule0(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GetConsentInput{}

		if err := _Harmony_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AgreementId = vars["agreement_id"]

		out, err := srv.GetConsent(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

func _Harmony_SetConsent_Rule0(srv HarmonyServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SetConsentInput{}

		if err := _Harmony_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AgreementId = vars["agreement_id"]

		out, err := srv.SetConsent(r.Context(), in)
		if err != nil {
			_Harmony_HTTPWriteErrorResponse(w, err)
			return
		}

		_Harmony_HTTPWriteResponse(w, out)
	})
}

type _HarmonyHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _HarmonyMiddleware = func(ctx context.Context, method string, in proto.Message, handler _HarmonyHandler) (out proto.Message, err error)
type HarmonyInterceptor struct {
	middleware []_HarmonyMiddleware
	server     HarmonyServer
}

// NewHarmonyInterceptor constructs additional middleware for a server based on annotations in proto files
func NewHarmonyInterceptor(srv HarmonyServer, middleware ..._HarmonyMiddleware) *HarmonyInterceptor {
	return &HarmonyInterceptor{server: srv, middleware: middleware}
}

func (i *HarmonyInterceptor) ListAgreements(ctx context.Context, in *ListAgreementsInput) (*ListAgreementsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAgreementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAgreementsInput, got %T", in))
		}

		return i.server.ListAgreements(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.harmony.Harmony.ListAgreements", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAgreementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAgreementsOutput, got %T", out))
	}

	return message, err
}

func (i *HarmonyInterceptor) GetConsent(ctx context.Context, in *GetConsentInput) (*GetConsentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*GetConsentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *GetConsentInput, got %T", in))
		}

		return i.server.GetConsent(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.harmony.Harmony.GetConsent", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*GetConsentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *GetConsentOutput, got %T", out))
	}

	return message, err
}

func (i *HarmonyInterceptor) SetConsent(ctx context.Context, in *SetConsentInput) (*SetConsentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SetConsentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SetConsentInput, got %T", in))
		}

		return i.server.SetConsent(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.harmony.Harmony.SetConsent", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SetConsentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SetConsentOutput, got %T", out))
	}

	return message, err
}
