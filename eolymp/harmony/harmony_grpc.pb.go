// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/harmony/harmony.proto

package harmony

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Harmony_ListAgreements_FullMethodName = "/eolymp.harmony.Harmony/ListAgreements"
	Harmony_GetConsent_FullMethodName     = "/eolymp.harmony.Harmony/GetConsent"
	Harmony_SetConsent_FullMethodName     = "/eolymp.harmony.Harmony/SetConsent"
	Harmony_FollowShortcut_FullMethodName = "/eolymp.harmony.Harmony/FollowShortcut"
)

// HarmonyClient is the client API for Harmony service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HarmonyClient interface {
	ListAgreements(ctx context.Context, in *ListAgreementsInput, opts ...grpc.CallOption) (*ListAgreementsOutput, error)
	GetConsent(ctx context.Context, in *GetConsentInput, opts ...grpc.CallOption) (*GetConsentOutput, error)
	SetConsent(ctx context.Context, in *SetConsentInput, opts ...grpc.CallOption) (*SetConsentOutput, error)
	FollowShortcut(ctx context.Context, in *FollowShortcutInput, opts ...grpc.CallOption) (*FollowShortcutOutput, error)
}

type harmonyClient struct {
	cc grpc.ClientConnInterface
}

func NewHarmonyClient(cc grpc.ClientConnInterface) HarmonyClient {
	return &harmonyClient{cc}
}

func (c *harmonyClient) ListAgreements(ctx context.Context, in *ListAgreementsInput, opts ...grpc.CallOption) (*ListAgreementsOutput, error) {
	out := new(ListAgreementsOutput)
	err := c.cc.Invoke(ctx, Harmony_ListAgreements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harmonyClient) GetConsent(ctx context.Context, in *GetConsentInput, opts ...grpc.CallOption) (*GetConsentOutput, error) {
	out := new(GetConsentOutput)
	err := c.cc.Invoke(ctx, Harmony_GetConsent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harmonyClient) SetConsent(ctx context.Context, in *SetConsentInput, opts ...grpc.CallOption) (*SetConsentOutput, error) {
	out := new(SetConsentOutput)
	err := c.cc.Invoke(ctx, Harmony_SetConsent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harmonyClient) FollowShortcut(ctx context.Context, in *FollowShortcutInput, opts ...grpc.CallOption) (*FollowShortcutOutput, error) {
	out := new(FollowShortcutOutput)
	err := c.cc.Invoke(ctx, Harmony_FollowShortcut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HarmonyServer is the server API for Harmony service.
// All implementations should embed UnimplementedHarmonyServer
// for forward compatibility
type HarmonyServer interface {
	ListAgreements(context.Context, *ListAgreementsInput) (*ListAgreementsOutput, error)
	GetConsent(context.Context, *GetConsentInput) (*GetConsentOutput, error)
	SetConsent(context.Context, *SetConsentInput) (*SetConsentOutput, error)
	FollowShortcut(context.Context, *FollowShortcutInput) (*FollowShortcutOutput, error)
}

// UnimplementedHarmonyServer should be embedded to have forward compatible implementations.
type UnimplementedHarmonyServer struct {
}

func (UnimplementedHarmonyServer) ListAgreements(context.Context, *ListAgreementsInput) (*ListAgreementsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgreements not implemented")
}
func (UnimplementedHarmonyServer) GetConsent(context.Context, *GetConsentInput) (*GetConsentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsent not implemented")
}
func (UnimplementedHarmonyServer) SetConsent(context.Context, *SetConsentInput) (*SetConsentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConsent not implemented")
}
func (UnimplementedHarmonyServer) FollowShortcut(context.Context, *FollowShortcutInput) (*FollowShortcutOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowShortcut not implemented")
}

// UnsafeHarmonyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HarmonyServer will
// result in compilation errors.
type UnsafeHarmonyServer interface {
	mustEmbedUnimplementedHarmonyServer()
}

func RegisterHarmonyServer(s grpc.ServiceRegistrar, srv HarmonyServer) {
	s.RegisterService(&Harmony_ServiceDesc, srv)
}

func _Harmony_ListAgreements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgreementsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarmonyServer).ListAgreements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harmony_ListAgreements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarmonyServer).ListAgreements(ctx, req.(*ListAgreementsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harmony_GetConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarmonyServer).GetConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harmony_GetConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarmonyServer).GetConsent(ctx, req.(*GetConsentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harmony_SetConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConsentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarmonyServer).SetConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harmony_SetConsent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarmonyServer).SetConsent(ctx, req.(*SetConsentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harmony_FollowShortcut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowShortcutInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarmonyServer).FollowShortcut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harmony_FollowShortcut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarmonyServer).FollowShortcut(ctx, req.(*FollowShortcutInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Harmony_ServiceDesc is the grpc.ServiceDesc for Harmony service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Harmony_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.harmony.Harmony",
	HandlerType: (*HarmonyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgreements",
			Handler:    _Harmony_ListAgreements_Handler,
		},
		{
			MethodName: "GetConsent",
			Handler:    _Harmony_GetConsent_Handler,
		},
		{
			MethodName: "SetConsent",
			Handler:    _Harmony_SetConsent_Handler,
		},
		{
			MethodName: "FollowShortcut",
			Handler:    _Harmony_FollowShortcut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/harmony/harmony.proto",
}
