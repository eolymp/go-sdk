// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.4
// source: eolymp/executor/evaluation_task.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dependency mode used in depends_on preconditions.
type EvaluationTask_DependencyMode int32

const (
	EvaluationTask_UNKNOWN_DEPENDENCY_MODE EvaluationTask_DependencyMode = 0
	EvaluationTask_FULLY_ACCEPTED          EvaluationTask_DependencyMode = 1 // to unlock dependency all runs must be accepted
	EvaluationTask_FIRST_POINT             EvaluationTask_DependencyMode = 2 // to unlock dependency any of the matching runs must have at least one point or full accepted
)

// Enum value maps for EvaluationTask_DependencyMode.
var (
	EvaluationTask_DependencyMode_name = map[int32]string{
		0: "UNKNOWN_DEPENDENCY_MODE",
		1: "FULLY_ACCEPTED",
		2: "FIRST_POINT",
	}
	EvaluationTask_DependencyMode_value = map[string]int32{
		"UNKNOWN_DEPENDENCY_MODE": 0,
		"FULLY_ACCEPTED":          1,
		"FIRST_POINT":             2,
	}
)

func (x EvaluationTask_DependencyMode) Enum() *EvaluationTask_DependencyMode {
	p := new(EvaluationTask_DependencyMode)
	*p = x
	return p
}

func (x EvaluationTask_DependencyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationTask_DependencyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_evaluation_task_proto_enumTypes[0].Descriptor()
}

func (EvaluationTask_DependencyMode) Type() protoreflect.EnumType {
	return &file_eolymp_executor_evaluation_task_proto_enumTypes[0]
}

func (x EvaluationTask_DependencyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationTask_DependencyMode.Descriptor instead.
func (EvaluationTask_DependencyMode) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0, 0}
}

// Task represents task to be executed by judge agent.
type EvaluationTask struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	TaskId    string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reference string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	Origin    string                 `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Metadata  map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Task priority. Allowed values 1-9. Messages with higher priority are precessed first.
	// Currently not supported.
	Priority uint32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Combine stderr and stdout when capturing output. Checker will use combined output as answer. Status will capture
	// both stderr and stdout in output field while stderr will be empty.
	RedirectStderrToStdout bool `protobuf:"varint,13,opt,name=redirect_stderr_to_stdout,json=redirectStderrToStdout,proto3" json:"redirect_stderr_to_stdout,omitempty"`
	// The agent will normalize execution time of each run within deviation range.
	//
	// Each agent calculates a time coefficient (a multiplier) based on the evaluation time of benchmark solution. This coefficient is used to normalize execution time of each run.
	// This parameter allows to limit the coefficient deviation, for example 0.5 means the coefficient will be limited to range of 0.5-1.5, 0 means the coefficient will be ignored and actual execution time will be used.
	TimeCoefficientDeviation float32 `protobuf:"fixed32,14,opt,name=time_coefficient_deviation,json=timeCoefficientDeviation,proto3" json:"time_coefficient_deviation,omitempty"`
	// Number of times solution will be executed, after each run (except last) output.txt will be renamed to input.txt.
	RunCount uint32 `protobuf:"varint,16,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	// Use interactor in the second and subsequent runs (when run_count > 1)
	InteractiveFollowup bool `protobuf:"varint,17,opt,name=interactive_followup,json=interactiveFollowup,proto3" json:"interactive_followup,omitempty"`
	// Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
	Preconditions []*EvaluationTask_Precondition `protobuf:"bytes,40,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	// Execution constraints, define limits imposed on each run.
	Constraints   []*EvaluationTask_Constraint `protobuf:"bytes,20,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Submission    *Script                      `protobuf:"bytes,12,opt,name=submission,proto3" json:"submission,omitempty"` // Submission being evaluated.
	Interactor    *Script                      `protobuf:"bytes,26,opt,name=interactor,proto3" json:"interactor,omitempty"` // Interactor configuration
	Checker       *Checker                     `protobuf:"bytes,24,opt,name=checker,proto3" json:"checker,omitempty"`       // Checker configuration.
	Scripts       []*Script                    `protobuf:"bytes,60,rep,name=scripts,proto3" json:"scripts,omitempty"`       // Additional scripts
	Runs          []*EvaluationTask_Run        `protobuf:"bytes,30,rep,name=runs,proto3" json:"runs,omitempty"`             // Run configurations.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationTask) Reset() {
	*x = EvaluationTask{}
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationTask) ProtoMessage() {}

func (x *EvaluationTask) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationTask.ProtoReflect.Descriptor instead.
func (*EvaluationTask) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0}
}

func (x *EvaluationTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *EvaluationTask) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EvaluationTask) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *EvaluationTask) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EvaluationTask) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EvaluationTask) GetRedirectStderrToStdout() bool {
	if x != nil {
		return x.RedirectStderrToStdout
	}
	return false
}

func (x *EvaluationTask) GetTimeCoefficientDeviation() float32 {
	if x != nil {
		return x.TimeCoefficientDeviation
	}
	return 0
}

func (x *EvaluationTask) GetRunCount() uint32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *EvaluationTask) GetInteractiveFollowup() bool {
	if x != nil {
		return x.InteractiveFollowup
	}
	return false
}

func (x *EvaluationTask) GetPreconditions() []*EvaluationTask_Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *EvaluationTask) GetConstraints() []*EvaluationTask_Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *EvaluationTask) GetSubmission() *Script {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *EvaluationTask) GetInteractor() *Script {
	if x != nil {
		return x.Interactor
	}
	return nil
}

func (x *EvaluationTask) GetChecker() *Checker {
	if x != nil {
		return x.Checker
	}
	return nil
}

func (x *EvaluationTask) GetScripts() []*Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *EvaluationTask) GetRuns() []*EvaluationTask_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

// Generator defines run configuration for generator script.
type EvaluationTask_Generator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptName    string                 `protobuf:"bytes,1,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	Arguments     []string               `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationTask_Generator) Reset() {
	*x = EvaluationTask_Generator{}
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationTask_Generator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationTask_Generator) ProtoMessage() {}

func (x *EvaluationTask_Generator) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationTask_Generator.ProtoReflect.Descriptor instead.
func (*EvaluationTask_Generator) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EvaluationTask_Generator) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *EvaluationTask_Generator) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// Run defines a single execution of the task.
type EvaluationTask_Run struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Reference string                 `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"` // Run reference.
	Index     uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`        // Index defines order in which runs are executed.
	Group     uint32                 `protobuf:"varint,6,opt,name=group,proto3" json:"group,omitempty"`
	Debug     bool                   `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty"`                                                                      // Use debugging (report content of stdout, stderr and exit code).
	Cost      float32                `protobuf:"fixed32,4,opt,name=cost,proto3" json:"cost,omitempty"`                                                                       // A number of points awarded for passing this run.
	Env       map[string]string      `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional environment variables used during run
	Labels    []string               `protobuf:"bytes,30,rep,name=labels,proto3" json:"labels,omitempty"`                                                                    // Labels used to match constraints and preconditions.
	// Types that are valid to be assigned to Input:
	//
	//	*EvaluationTask_Run_InputUrl
	//	*EvaluationTask_Run_InputContent
	//	*EvaluationTask_Run_InputGenerator
	Input isEvaluationTask_Run_Input `protobuf_oneof:"input"`
	// Types that are valid to be assigned to Answer:
	//
	//	*EvaluationTask_Run_AnswerUrl
	//	*EvaluationTask_Run_AnswerContent
	//	*EvaluationTask_Run_AnswerGenerator
	Answer        isEvaluationTask_Run_Answer `protobuf_oneof:"answer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationTask_Run) Reset() {
	*x = EvaluationTask_Run{}
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationTask_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationTask_Run) ProtoMessage() {}

func (x *EvaluationTask_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationTask_Run.ProtoReflect.Descriptor instead.
func (*EvaluationTask_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EvaluationTask_Run) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EvaluationTask_Run) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EvaluationTask_Run) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *EvaluationTask_Run) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *EvaluationTask_Run) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EvaluationTask_Run) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *EvaluationTask_Run) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EvaluationTask_Run) GetInput() isEvaluationTask_Run_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EvaluationTask_Run) GetInputUrl() string {
	if x != nil {
		if x, ok := x.Input.(*EvaluationTask_Run_InputUrl); ok {
			return x.InputUrl
		}
	}
	return ""
}

func (x *EvaluationTask_Run) GetInputContent() string {
	if x != nil {
		if x, ok := x.Input.(*EvaluationTask_Run_InputContent); ok {
			return x.InputContent
		}
	}
	return ""
}

func (x *EvaluationTask_Run) GetInputGenerator() *EvaluationTask_Generator {
	if x != nil {
		if x, ok := x.Input.(*EvaluationTask_Run_InputGenerator); ok {
			return x.InputGenerator
		}
	}
	return nil
}

func (x *EvaluationTask_Run) GetAnswer() isEvaluationTask_Run_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *EvaluationTask_Run) GetAnswerUrl() string {
	if x != nil {
		if x, ok := x.Answer.(*EvaluationTask_Run_AnswerUrl); ok {
			return x.AnswerUrl
		}
	}
	return ""
}

func (x *EvaluationTask_Run) GetAnswerContent() string {
	if x != nil {
		if x, ok := x.Answer.(*EvaluationTask_Run_AnswerContent); ok {
			return x.AnswerContent
		}
	}
	return ""
}

func (x *EvaluationTask_Run) GetAnswerGenerator() *EvaluationTask_Generator {
	if x != nil {
		if x, ok := x.Answer.(*EvaluationTask_Run_AnswerGenerator); ok {
			return x.AnswerGenerator
		}
	}
	return nil
}

type isEvaluationTask_Run_Input interface {
	isEvaluationTask_Run_Input()
}

type EvaluationTask_Run_InputUrl struct {
	InputUrl string `protobuf:"bytes,12,opt,name=input_url,json=inputUrl,proto3,oneof"` // download input via URL
}

type EvaluationTask_Run_InputContent struct {
	InputContent string `protobuf:"bytes,11,opt,name=input_content,json=inputContent,proto3,oneof"` // use input from this field (up to 1KB)
}

type EvaluationTask_Run_InputGenerator struct {
	InputGenerator *EvaluationTask_Generator `protobuf:"bytes,13,opt,name=input_generator,json=inputGenerator,proto3,oneof"` // use a script to generate input
}

func (*EvaluationTask_Run_InputUrl) isEvaluationTask_Run_Input() {}

func (*EvaluationTask_Run_InputContent) isEvaluationTask_Run_Input() {}

func (*EvaluationTask_Run_InputGenerator) isEvaluationTask_Run_Input() {}

type isEvaluationTask_Run_Answer interface {
	isEvaluationTask_Run_Answer()
}

type EvaluationTask_Run_AnswerUrl struct {
	AnswerUrl string `protobuf:"bytes,22,opt,name=answer_url,json=answerUrl,proto3,oneof"` // download answer via URL
}

type EvaluationTask_Run_AnswerContent struct {
	AnswerContent string `protobuf:"bytes,21,opt,name=answer_content,json=answerContent,proto3,oneof"` // use answer from this field (up to 1KB)
}

type EvaluationTask_Run_AnswerGenerator struct {
	AnswerGenerator *EvaluationTask_Generator `protobuf:"bytes,23,opt,name=answer_generator,json=answerGenerator,proto3,oneof"` // use a script to generate answer
}

func (*EvaluationTask_Run_AnswerUrl) isEvaluationTask_Run_Answer() {}

func (*EvaluationTask_Run_AnswerContent) isEvaluationTask_Run_Answer() {}

func (*EvaluationTask_Run_AnswerGenerator) isEvaluationTask_Run_Answer() {}

// Precondition defines criteria for a run to be executed. If this criteria does not meet, the run will be skipped.
type EvaluationTask_Precondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Precondition will apply to all runs matching this label selector.
	// Run must have all labels defined by selector. Empty selector will match all runs.
	Selector []string `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty"`
	// Defines label selector for runs which must be passing.
	// Dependent runs will match if they have at least one of the labels defined in depends_on.
	// To match dependent runs with by multiple labels, use two different preconditions.
	// Empty depends_on means no dependencies.
	DependsOn []string `protobuf:"bytes,10,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	// Defines what is considered as resolved dependency.
	DependencyMode EvaluationTask_DependencyMode `protobuf:"varint,20,opt,name=dependency_mode,json=dependencyMode,proto3,enum=eolymp.executor.EvaluationTask_DependencyMode" json:"dependency_mode,omitempty"`
	// Skip the rest of the runs if one fails.
	StopOnFailure bool `protobuf:"varint,11,opt,name=stop_on_failure,json=stopOnFailure,proto3" json:"stop_on_failure,omitempty"`
	// Defines maximum execution time for all runs matching this precondition.
	// Accepted runs are not counted towards execution time.
	// Once max_execution_time is reached, the rest of the tests are skipped.
	MaxExecutionTime uint32 `protobuf:"varint,12,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EvaluationTask_Precondition) Reset() {
	*x = EvaluationTask_Precondition{}
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationTask_Precondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationTask_Precondition) ProtoMessage() {}

func (x *EvaluationTask_Precondition) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationTask_Precondition.ProtoReflect.Descriptor instead.
func (*EvaluationTask_Precondition) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EvaluationTask_Precondition) GetSelector() []string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *EvaluationTask_Precondition) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *EvaluationTask_Precondition) GetDependencyMode() EvaluationTask_DependencyMode {
	if x != nil {
		return x.DependencyMode
	}
	return EvaluationTask_UNKNOWN_DEPENDENCY_MODE
}

func (x *EvaluationTask_Precondition) GetStopOnFailure() bool {
	if x != nil {
		return x.StopOnFailure
	}
	return false
}

func (x *EvaluationTask_Precondition) GetMaxExecutionTime() uint32 {
	if x != nil {
		return x.MaxExecutionTime
	}
	return 0
}

// Constraint defines limitations which apply to the run.
type EvaluationTask_Constraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Constraint will apply to all runs matching this label selector.
	// Run must have all labels defined by selector. Empty selector will match all runs.
	Selector []string `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty"`
	// Defines actor to whom the constraint is applied (used by Task V2)
	Actor string `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// Real-world time limit in milliseconds.
	WallTimeLimit uint32 `protobuf:"varint,10,opt,name=wall_time_limit,json=wallTimeLimit,proto3" json:"wall_time_limit,omitempty"`
	// CPU time limit in milliseconds.
	CpuTimeLimit uint32 `protobuf:"varint,11,opt,name=cpu_time_limit,json=cpuTimeLimit,proto3" json:"cpu_time_limit,omitempty"`
	// Memory limit in bytes.
	MemoryLimit uint64 `protobuf:"varint,12,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	// File size limit in bytes.
	FileSizeLimit uint64 `protobuf:"varint,13,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationTask_Constraint) Reset() {
	*x = EvaluationTask_Constraint{}
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationTask_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationTask_Constraint) ProtoMessage() {}

func (x *EvaluationTask_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_evaluation_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationTask_Constraint.ProtoReflect.Descriptor instead.
func (*EvaluationTask_Constraint) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_evaluation_task_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EvaluationTask_Constraint) GetSelector() []string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *EvaluationTask_Constraint) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *EvaluationTask_Constraint) GetWallTimeLimit() uint32 {
	if x != nil {
		return x.WallTimeLimit
	}
	return 0
}

func (x *EvaluationTask_Constraint) GetCpuTimeLimit() uint32 {
	if x != nil {
		return x.CpuTimeLimit
	}
	return 0
}

func (x *EvaluationTask_Constraint) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *EvaluationTask_Constraint) GetFileSizeLimit() uint64 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

var File_eolymp_executor_evaluation_task_proto protoreflect.FileDescriptor

const file_eolymp_executor_evaluation_task_proto_rawDesc = "" +
	"\n" +
	"%eolymp/executor/evaluation_task.proto\x12\x0feolymp.executor\x1a\x1deolymp/executor/checker.proto\x1a\x1ceolymp/executor/script.proto\"\xd2\x10\n" +
	"\x0eEvaluationTask\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\x12\x16\n" +
	"\x06origin\x18\x03 \x01(\tR\x06origin\x12I\n" +
	"\bmetadata\x18\x05 \x03(\v2-.eolymp.executor.EvaluationTask.MetadataEntryR\bmetadata\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\rR\bpriority\x129\n" +
	"\x19redirect_stderr_to_stdout\x18\r \x01(\bR\x16redirectStderrToStdout\x12<\n" +
	"\x1atime_coefficient_deviation\x18\x0e \x01(\x02R\x18timeCoefficientDeviation\x12\x1b\n" +
	"\trun_count\x18\x10 \x01(\rR\brunCount\x121\n" +
	"\x14interactive_followup\x18\x11 \x01(\bR\x13interactiveFollowup\x12R\n" +
	"\rpreconditions\x18( \x03(\v2,.eolymp.executor.EvaluationTask.PreconditionR\rpreconditions\x12L\n" +
	"\vconstraints\x18\x14 \x03(\v2*.eolymp.executor.EvaluationTask.ConstraintR\vconstraints\x127\n" +
	"\n" +
	"submission\x18\f \x01(\v2\x17.eolymp.executor.ScriptR\n" +
	"submission\x127\n" +
	"\n" +
	"interactor\x18\x1a \x01(\v2\x17.eolymp.executor.ScriptR\n" +
	"interactor\x122\n" +
	"\achecker\x18\x18 \x01(\v2\x18.eolymp.executor.CheckerR\achecker\x121\n" +
	"\ascripts\x18< \x03(\v2\x17.eolymp.executor.ScriptR\ascripts\x127\n" +
	"\x04runs\x18\x1e \x03(\v2#.eolymp.executor.EvaluationTask.RunR\x04runs\x1aJ\n" +
	"\tGenerator\x12\x1f\n" +
	"\vscript_name\x18\x01 \x01(\tR\n" +
	"scriptName\x12\x1c\n" +
	"\targuments\x18\x02 \x03(\tR\targuments\x1a\xda\x04\n" +
	"\x03Run\x12\x1c\n" +
	"\treference\x18\x01 \x01(\tR\treference\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x14\n" +
	"\x05group\x18\x06 \x01(\rR\x05group\x12\x14\n" +
	"\x05debug\x18\x03 \x01(\bR\x05debug\x12\x12\n" +
	"\x04cost\x18\x04 \x01(\x02R\x04cost\x12>\n" +
	"\x03env\x18\x05 \x03(\v2,.eolymp.executor.EvaluationTask.Run.EnvEntryR\x03env\x12\x16\n" +
	"\x06labels\x18\x1e \x03(\tR\x06labels\x12\x1d\n" +
	"\tinput_url\x18\f \x01(\tH\x00R\binputUrl\x12%\n" +
	"\rinput_content\x18\v \x01(\tH\x00R\finputContent\x12T\n" +
	"\x0finput_generator\x18\r \x01(\v2).eolymp.executor.EvaluationTask.GeneratorH\x00R\x0einputGenerator\x12\x1f\n" +
	"\n" +
	"answer_url\x18\x16 \x01(\tH\x01R\tanswerUrl\x12'\n" +
	"\x0eanswer_content\x18\x15 \x01(\tH\x01R\ranswerContent\x12V\n" +
	"\x10answer_generator\x18\x17 \x01(\v2).eolymp.executor.EvaluationTask.GeneratorH\x01R\x0fanswerGenerator\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05inputB\b\n" +
	"\x06answer\x1a\xf8\x01\n" +
	"\fPrecondition\x12\x1a\n" +
	"\bselector\x18\x01 \x03(\tR\bselector\x12\x1d\n" +
	"\n" +
	"depends_on\x18\n" +
	" \x03(\tR\tdependsOn\x12W\n" +
	"\x0fdependency_mode\x18\x14 \x01(\x0e2..eolymp.executor.EvaluationTask.DependencyModeR\x0edependencyMode\x12&\n" +
	"\x0fstop_on_failure\x18\v \x01(\bR\rstopOnFailure\x12,\n" +
	"\x12max_execution_time\x18\f \x01(\rR\x10maxExecutionTime\x1a\xd7\x01\n" +
	"\n" +
	"Constraint\x12\x1a\n" +
	"\bselector\x18\x01 \x03(\tR\bselector\x12\x14\n" +
	"\x05actor\x18\x02 \x01(\tR\x05actor\x12&\n" +
	"\x0fwall_time_limit\x18\n" +
	" \x01(\rR\rwallTimeLimit\x12$\n" +
	"\x0ecpu_time_limit\x18\v \x01(\rR\fcpuTimeLimit\x12!\n" +
	"\fmemory_limit\x18\f \x01(\x04R\vmemoryLimit\x12&\n" +
	"\x0ffile_size_limit\x18\r \x01(\x04R\rfileSizeLimit\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"R\n" +
	"\x0eDependencyMode\x12\x1b\n" +
	"\x17UNKNOWN_DEPENDENCY_MODE\x10\x00\x12\x12\n" +
	"\x0eFULLY_ACCEPTED\x10\x01\x12\x0f\n" +
	"\vFIRST_POINT\x10\x02B3Z1github.com/eolymp/go-sdk/eolymp/executor;executorb\x06proto3"

var (
	file_eolymp_executor_evaluation_task_proto_rawDescOnce sync.Once
	file_eolymp_executor_evaluation_task_proto_rawDescData []byte
)

func file_eolymp_executor_evaluation_task_proto_rawDescGZIP() []byte {
	file_eolymp_executor_evaluation_task_proto_rawDescOnce.Do(func() {
		file_eolymp_executor_evaluation_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_executor_evaluation_task_proto_rawDesc), len(file_eolymp_executor_evaluation_task_proto_rawDesc)))
	})
	return file_eolymp_executor_evaluation_task_proto_rawDescData
}

var file_eolymp_executor_evaluation_task_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_executor_evaluation_task_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_eolymp_executor_evaluation_task_proto_goTypes = []any{
	(EvaluationTask_DependencyMode)(0),  // 0: eolymp.executor.EvaluationTask.DependencyMode
	(*EvaluationTask)(nil),              // 1: eolymp.executor.EvaluationTask
	(*EvaluationTask_Generator)(nil),    // 2: eolymp.executor.EvaluationTask.Generator
	(*EvaluationTask_Run)(nil),          // 3: eolymp.executor.EvaluationTask.Run
	(*EvaluationTask_Precondition)(nil), // 4: eolymp.executor.EvaluationTask.Precondition
	(*EvaluationTask_Constraint)(nil),   // 5: eolymp.executor.EvaluationTask.Constraint
	nil,                                 // 6: eolymp.executor.EvaluationTask.MetadataEntry
	nil,                                 // 7: eolymp.executor.EvaluationTask.Run.EnvEntry
	(*Script)(nil),                      // 8: eolymp.executor.Script
	(*Checker)(nil),                     // 9: eolymp.executor.Checker
}
var file_eolymp_executor_evaluation_task_proto_depIdxs = []int32{
	6,  // 0: eolymp.executor.EvaluationTask.metadata:type_name -> eolymp.executor.EvaluationTask.MetadataEntry
	4,  // 1: eolymp.executor.EvaluationTask.preconditions:type_name -> eolymp.executor.EvaluationTask.Precondition
	5,  // 2: eolymp.executor.EvaluationTask.constraints:type_name -> eolymp.executor.EvaluationTask.Constraint
	8,  // 3: eolymp.executor.EvaluationTask.submission:type_name -> eolymp.executor.Script
	8,  // 4: eolymp.executor.EvaluationTask.interactor:type_name -> eolymp.executor.Script
	9,  // 5: eolymp.executor.EvaluationTask.checker:type_name -> eolymp.executor.Checker
	8,  // 6: eolymp.executor.EvaluationTask.scripts:type_name -> eolymp.executor.Script
	3,  // 7: eolymp.executor.EvaluationTask.runs:type_name -> eolymp.executor.EvaluationTask.Run
	7,  // 8: eolymp.executor.EvaluationTask.Run.env:type_name -> eolymp.executor.EvaluationTask.Run.EnvEntry
	2,  // 9: eolymp.executor.EvaluationTask.Run.input_generator:type_name -> eolymp.executor.EvaluationTask.Generator
	2,  // 10: eolymp.executor.EvaluationTask.Run.answer_generator:type_name -> eolymp.executor.EvaluationTask.Generator
	0,  // 11: eolymp.executor.EvaluationTask.Precondition.dependency_mode:type_name -> eolymp.executor.EvaluationTask.DependencyMode
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_eolymp_executor_evaluation_task_proto_init() }
func file_eolymp_executor_evaluation_task_proto_init() {
	if File_eolymp_executor_evaluation_task_proto != nil {
		return
	}
	file_eolymp_executor_checker_proto_init()
	file_eolymp_executor_script_proto_init()
	file_eolymp_executor_evaluation_task_proto_msgTypes[2].OneofWrappers = []any{
		(*EvaluationTask_Run_InputUrl)(nil),
		(*EvaluationTask_Run_InputContent)(nil),
		(*EvaluationTask_Run_InputGenerator)(nil),
		(*EvaluationTask_Run_AnswerUrl)(nil),
		(*EvaluationTask_Run_AnswerContent)(nil),
		(*EvaluationTask_Run_AnswerGenerator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_executor_evaluation_task_proto_rawDesc), len(file_eolymp_executor_evaluation_task_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_executor_evaluation_task_proto_goTypes,
		DependencyIndexes: file_eolymp_executor_evaluation_task_proto_depIdxs,
		EnumInfos:         file_eolymp_executor_evaluation_task_proto_enumTypes,
		MessageInfos:      file_eolymp_executor_evaluation_task_proto_msgTypes,
	}.Build()
	File_eolymp_executor_evaluation_task_proto = out.File
	file_eolymp_executor_evaluation_task_proto_goTypes = nil
	file_eolymp_executor_evaluation_task_proto_depIdxs = nil
}
