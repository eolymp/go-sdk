// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: eolymp/executor/task_v2.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Task represents task to be executed by judge agent.
type TaskV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task unique reference so originator can look up task in its database, for example, this field might be set to
	// Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
	// sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
	// in its database.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Task originator (service which has created task). This field will be added to task status reports, so consumers
	// can easily filter status reports they are interested in.
	Origin string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
	Preconditions []*Task_Precondition `protobuf:"bytes,10,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	// Actors of the task.
	Actors []*TaskV2_Actor `protobuf:"bytes,20,rep,name=actors,proto3" json:"actors,omitempty"`
	// Runs of the task.
	Runs []*TaskV2_Run `protobuf:"bytes,30,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *TaskV2) Reset() {
	*x = TaskV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2) ProtoMessage() {}

func (x *TaskV2) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2.ProtoReflect.Descriptor instead.
func (*TaskV2) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0}
}

func (x *TaskV2) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *TaskV2) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *TaskV2) GetPreconditions() []*Task_Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *TaskV2) GetActors() []*TaskV2_Actor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *TaskV2) GetRuns() []*TaskV2_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

// Actor is an executable used in the task
type TaskV2_Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                               // Unique name, used to refer to the actor from other places
	Runtime   string            `protobuf:"bytes,10,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                                                                        // Runtime
	SourceErn string            `protobuf:"bytes,11,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"`                                                                                   // Source code ERN
	InitEnv   map[string]string `protobuf:"bytes,40,rep,name=init_env,json=initEnv,proto3" json:"init_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional environment variable during init
	InitFiles []*TaskV2_File    `protobuf:"bytes,41,rep,name=init_files,json=initFiles,proto3" json:"init_files,omitempty"`                                                                                   // Additional files mounted before init
	Args      []string          `protobuf:"bytes,20,rep,name=args,proto3" json:"args,omitempty"`                                                                                                              // Arguments passed to the program during execution
	Env       map[string]string `protobuf:"bytes,21,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                        // Environment variables
	Stdin     string            `protobuf:"bytes,30,opt,name=stdin,proto3" json:"stdin,omitempty"`                                                                                                            // Local path to the stdin source (relative to workdir)
	Stdout    string            `protobuf:"bytes,31,opt,name=stdout,proto3" json:"stdout,omitempty"`                                                                                                          // Local path to the stdout destination (relative to workdir)
	Stderr    string            `protobuf:"bytes,32,opt,name=stderr,proto3" json:"stderr,omitempty"`                                                                                                          // Local path to the stderr destination (relative to workdir), can be same as stdout
	Mount     []*TaskV2_Mount   `protobuf:"bytes,33,rep,name=mount,proto3" json:"mount,omitempty"`                                                                                                            // Allows to mount workdir from another actor locally
}

func (x *TaskV2_Actor) Reset() {
	*x = TaskV2_Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_Actor) ProtoMessage() {}

func (x *TaskV2_Actor) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_Actor.ProtoReflect.Descriptor instead.
func (*TaskV2_Actor) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TaskV2_Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskV2_Actor) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *TaskV2_Actor) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

func (x *TaskV2_Actor) GetInitEnv() map[string]string {
	if x != nil {
		return x.InitEnv
	}
	return nil
}

func (x *TaskV2_Actor) GetInitFiles() []*TaskV2_File {
	if x != nil {
		return x.InitFiles
	}
	return nil
}

func (x *TaskV2_Actor) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TaskV2_Actor) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskV2_Actor) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *TaskV2_Actor) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *TaskV2_Actor) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *TaskV2_Actor) GetMount() []*TaskV2_Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

// Mount defines how to mount workdir of one actor onto another
type TaskV2_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromActor string `protobuf:"bytes,1,opt,name=from_actor,json=fromActor,proto3" json:"from_actor,omitempty"` // Name of the actor to mount
	ToPath    string `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`          // Path where workdir will be mounted to
}

func (x *TaskV2_Mount) Reset() {
	*x = TaskV2_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_Mount) ProtoMessage() {}

func (x *TaskV2_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_Mount.ProtoReflect.Descriptor instead.
func (*TaskV2_Mount) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TaskV2_Mount) GetFromActor() string {
	if x != nil {
		return x.FromActor
	}
	return ""
}

func (x *TaskV2_Mount) GetToPath() string {
	if x != nil {
		return x.ToPath
	}
	return ""
}

// File defines additional file which might be placed into work directory during compilation or execution
type TaskV2_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                            // Path where file should be placed (always relative to the workdir)
	SourceErn string `protobuf:"bytes,2,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"` // ERN defines how to fetch file content
}

func (x *TaskV2_File) Reset() {
	*x = TaskV2_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_File) ProtoMessage() {}

func (x *TaskV2_File) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_File.ProtoReflect.Descriptor instead.
func (*TaskV2_File) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TaskV2_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TaskV2_File) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

// Run defines a single execution of the task.
type TaskV2_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string         `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"` // Run reference.
	Index     uint32         `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`        // Index defines order in which runs are executed.
	Labels    []string       `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`      // Labels used to match constraints and preconditions.
	Steps     []*TaskV2_Step `protobuf:"bytes,20,rep,name=steps,proto3" json:"steps,omitempty"`        // Steps to execute the run
}

func (x *TaskV2_Run) Reset() {
	*x = TaskV2_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_Run) ProtoMessage() {}

func (x *TaskV2_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_Run.ProtoReflect.Descriptor instead.
func (*TaskV2_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TaskV2_Run) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *TaskV2_Run) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TaskV2_Run) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TaskV2_Run) GetSteps() []*TaskV2_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Step defines an action within run
type TaskV2_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Write   []*TaskV2_WriteOp   `protobuf:"bytes,10,rep,name=write,proto3" json:"write,omitempty"`
	Copy    []*TaskV2_CopyOp    `protobuf:"bytes,11,rep,name=copy,proto3" json:"copy,omitempty"`
	Execute []*TaskV2_ExecuteOp `protobuf:"bytes,12,rep,name=execute,proto3" json:"execute,omitempty"`
	Upload  []*TaskV2_UploadOp  `protobuf:"bytes,13,rep,name=upload,proto3" json:"upload,omitempty"`
}

func (x *TaskV2_Step) Reset() {
	*x = TaskV2_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_Step) ProtoMessage() {}

func (x *TaskV2_Step) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_Step.ProtoReflect.Descriptor instead.
func (*TaskV2_Step) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 4}
}

func (x *TaskV2_Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskV2_Step) GetWrite() []*TaskV2_WriteOp {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *TaskV2_Step) GetCopy() []*TaskV2_CopyOp {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *TaskV2_Step) GetExecute() []*TaskV2_ExecuteOp {
	if x != nil {
		return x.Execute
	}
	return nil
}

func (x *TaskV2_Step) GetUpload() []*TaskV2_UploadOp {
	if x != nil {
		return x.Upload
	}
	return nil
}

// Write operation writes (and downloads) file by ERN
type TaskV2_WriteOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceErn   string `protobuf:"bytes,1,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"`
	TargetActor string `protobuf:"bytes,2,opt,name=target_actor,json=targetActor,proto3" json:"target_actor,omitempty"`
	TargetPath  string `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
}

func (x *TaskV2_WriteOp) Reset() {
	*x = TaskV2_WriteOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_WriteOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_WriteOp) ProtoMessage() {}

func (x *TaskV2_WriteOp) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_WriteOp.ProtoReflect.Descriptor instead.
func (*TaskV2_WriteOp) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 5}
}

func (x *TaskV2_WriteOp) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

func (x *TaskV2_WriteOp) GetTargetActor() string {
	if x != nil {
		return x.TargetActor
	}
	return ""
}

func (x *TaskV2_WriteOp) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

// Upload operation uploads saves file to the object storage
type TaskV2_UploadOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceActor string `protobuf:"bytes,1,opt,name=source_actor,json=sourceActor,proto3" json:"source_actor,omitempty"`
	SourcePath  string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	TargetName  string `protobuf:"bytes,3,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"` // Name for the uploaded file
	Optionally  bool   `protobuf:"varint,4,opt,name=optionally,proto3" json:"optionally,omitempty"`                  // If true, step won't fail if source file does not exist
	Ttl         uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`                                // Defines how long uploaded file should be stored (in seconds)
	MaxSize     uint32 `protobuf:"varint,6,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`         // Defines maximum file size (in bytes), if file exceeds this limit it will be trimmed
}

func (x *TaskV2_UploadOp) Reset() {
	*x = TaskV2_UploadOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_UploadOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_UploadOp) ProtoMessage() {}

func (x *TaskV2_UploadOp) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_UploadOp.ProtoReflect.Descriptor instead.
func (*TaskV2_UploadOp) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 6}
}

func (x *TaskV2_UploadOp) GetSourceActor() string {
	if x != nil {
		return x.SourceActor
	}
	return ""
}

func (x *TaskV2_UploadOp) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *TaskV2_UploadOp) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *TaskV2_UploadOp) GetOptionally() bool {
	if x != nil {
		return x.Optionally
	}
	return false
}

func (x *TaskV2_UploadOp) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *TaskV2_UploadOp) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

// Copy operation copies file from one actor to another
type TaskV2_CopyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceActor string `protobuf:"bytes,1,opt,name=source_actor,json=sourceActor,proto3" json:"source_actor,omitempty"`
	SourcePath  string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	TargetActor string `protobuf:"bytes,3,opt,name=target_actor,json=targetActor,proto3" json:"target_actor,omitempty"`
	TargetPath  string `protobuf:"bytes,4,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	Optionally  bool   `protobuf:"varint,5,opt,name=optionally,proto3" json:"optionally,omitempty"` // If true, step won't fail if source file does not exist
}

func (x *TaskV2_CopyOp) Reset() {
	*x = TaskV2_CopyOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_CopyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_CopyOp) ProtoMessage() {}

func (x *TaskV2_CopyOp) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_CopyOp.ProtoReflect.Descriptor instead.
func (*TaskV2_CopyOp) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 7}
}

func (x *TaskV2_CopyOp) GetSourceActor() string {
	if x != nil {
		return x.SourceActor
	}
	return ""
}

func (x *TaskV2_CopyOp) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *TaskV2_CopyOp) GetTargetActor() string {
	if x != nil {
		return x.TargetActor
	}
	return ""
}

func (x *TaskV2_CopyOp) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *TaskV2_CopyOp) GetOptionally() bool {
	if x != nil {
		return x.Optionally
	}
	return false
}

// Execute operation executes actor
type TaskV2_ExecuteOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor         string            `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                     // Name of the actor to execute.
	Args          []string          `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`                                                                                       // If set will override arguments set in Actor.
	Env           map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // If set will append environment variables set in Actor.
	WallTimeLimit uint32            `protobuf:"varint,10,opt,name=wall_time_limit,json=wallTimeLimit,proto3" json:"wall_time_limit,omitempty"`                                            // Wall time limit in ms
	CpuTimeLimit  uint32            `protobuf:"varint,11,opt,name=cpu_time_limit,json=cpuTimeLimit,proto3" json:"cpu_time_limit,omitempty"`                                               // CPU usage limit in ms
	MemoryLimit   uint64            `protobuf:"varint,12,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`                                                    // Memory usage limit in bytes
	FileSizeLimit uint32            `protobuf:"varint,13,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"`                                            // File size limit in bytes
}

func (x *TaskV2_ExecuteOp) Reset() {
	*x = TaskV2_ExecuteOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_task_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskV2_ExecuteOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskV2_ExecuteOp) ProtoMessage() {}

func (x *TaskV2_ExecuteOp) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_task_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskV2_ExecuteOp.ProtoReflect.Descriptor instead.
func (*TaskV2_ExecuteOp) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_task_v2_proto_rawDescGZIP(), []int{0, 8}
}

func (x *TaskV2_ExecuteOp) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *TaskV2_ExecuteOp) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TaskV2_ExecuteOp) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskV2_ExecuteOp) GetWallTimeLimit() uint32 {
	if x != nil {
		return x.WallTimeLimit
	}
	return 0
}

func (x *TaskV2_ExecuteOp) GetCpuTimeLimit() uint32 {
	if x != nil {
		return x.CpuTimeLimit
	}
	return 0
}

func (x *TaskV2_ExecuteOp) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *TaskV2_ExecuteOp) GetFileSizeLimit() uint32 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

var File_eolymp_executor_task_v2_proto protoreflect.FileDescriptor

var file_eolymp_executor_task_v2_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x1a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2,
	0x10, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x48, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e,
	0x73, 0x1a, 0x95, 0x04, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x56, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x76, 0x12,
	0x3b, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x64, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x33, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x05, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x39, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x72, 0x6e, 0x1a, 0x85, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56,
	0x32, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0xfc, 0x01,
	0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x56, 0x32, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x70, 0x52,
	0x04, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x70, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x6c, 0x0a, 0x07,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xbc, 0x01, 0x0a, 0x08, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xb0, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x70, 0x79, 0x4f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x1a, 0xc4, 0x02, 0x0a,
	0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x4f, 0x70, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70,
	0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x3b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_executor_task_v2_proto_rawDescOnce sync.Once
	file_eolymp_executor_task_v2_proto_rawDescData = file_eolymp_executor_task_v2_proto_rawDesc
)

func file_eolymp_executor_task_v2_proto_rawDescGZIP() []byte {
	file_eolymp_executor_task_v2_proto_rawDescOnce.Do(func() {
		file_eolymp_executor_task_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_executor_task_v2_proto_rawDescData)
	})
	return file_eolymp_executor_task_v2_proto_rawDescData
}

var file_eolymp_executor_task_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_eolymp_executor_task_v2_proto_goTypes = []interface{}{
	(*TaskV2)(nil),            // 0: eolymp.executor.TaskV2
	(*TaskV2_Actor)(nil),      // 1: eolymp.executor.TaskV2.Actor
	(*TaskV2_Mount)(nil),      // 2: eolymp.executor.TaskV2.Mount
	(*TaskV2_File)(nil),       // 3: eolymp.executor.TaskV2.File
	(*TaskV2_Run)(nil),        // 4: eolymp.executor.TaskV2.Run
	(*TaskV2_Step)(nil),       // 5: eolymp.executor.TaskV2.Step
	(*TaskV2_WriteOp)(nil),    // 6: eolymp.executor.TaskV2.WriteOp
	(*TaskV2_UploadOp)(nil),   // 7: eolymp.executor.TaskV2.UploadOp
	(*TaskV2_CopyOp)(nil),     // 8: eolymp.executor.TaskV2.CopyOp
	(*TaskV2_ExecuteOp)(nil),  // 9: eolymp.executor.TaskV2.ExecuteOp
	nil,                       // 10: eolymp.executor.TaskV2.Actor.InitEnvEntry
	nil,                       // 11: eolymp.executor.TaskV2.Actor.EnvEntry
	nil,                       // 12: eolymp.executor.TaskV2.ExecuteOp.EnvEntry
	(*Task_Precondition)(nil), // 13: eolymp.executor.Task.Precondition
}
var file_eolymp_executor_task_v2_proto_depIdxs = []int32{
	13, // 0: eolymp.executor.TaskV2.preconditions:type_name -> eolymp.executor.Task.Precondition
	1,  // 1: eolymp.executor.TaskV2.actors:type_name -> eolymp.executor.TaskV2.Actor
	4,  // 2: eolymp.executor.TaskV2.runs:type_name -> eolymp.executor.TaskV2.Run
	10, // 3: eolymp.executor.TaskV2.Actor.init_env:type_name -> eolymp.executor.TaskV2.Actor.InitEnvEntry
	3,  // 4: eolymp.executor.TaskV2.Actor.init_files:type_name -> eolymp.executor.TaskV2.File
	11, // 5: eolymp.executor.TaskV2.Actor.env:type_name -> eolymp.executor.TaskV2.Actor.EnvEntry
	2,  // 6: eolymp.executor.TaskV2.Actor.mount:type_name -> eolymp.executor.TaskV2.Mount
	5,  // 7: eolymp.executor.TaskV2.Run.steps:type_name -> eolymp.executor.TaskV2.Step
	6,  // 8: eolymp.executor.TaskV2.Step.write:type_name -> eolymp.executor.TaskV2.WriteOp
	8,  // 9: eolymp.executor.TaskV2.Step.copy:type_name -> eolymp.executor.TaskV2.CopyOp
	9,  // 10: eolymp.executor.TaskV2.Step.execute:type_name -> eolymp.executor.TaskV2.ExecuteOp
	7,  // 11: eolymp.executor.TaskV2.Step.upload:type_name -> eolymp.executor.TaskV2.UploadOp
	12, // 12: eolymp.executor.TaskV2.ExecuteOp.env:type_name -> eolymp.executor.TaskV2.ExecuteOp.EnvEntry
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_eolymp_executor_task_v2_proto_init() }
func file_eolymp_executor_task_v2_proto_init() {
	if File_eolymp_executor_task_v2_proto != nil {
		return
	}
	file_eolymp_executor_interactor_proto_init()
	file_eolymp_executor_task_proto_init()
	file_eolymp_executor_verifier_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_executor_task_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_WriteOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_UploadOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_CopyOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_task_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskV2_ExecuteOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_executor_task_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_executor_task_v2_proto_goTypes,
		DependencyIndexes: file_eolymp_executor_task_v2_proto_depIdxs,
		MessageInfos:      file_eolymp_executor_task_v2_proto_msgTypes,
	}.Build()
	File_eolymp_executor_task_v2_proto = out.File
	file_eolymp_executor_task_v2_proto_rawDesc = nil
	file_eolymp_executor_task_v2_proto_goTypes = nil
	file_eolymp_executor_task_v2_proto_depIdxs = nil
}
