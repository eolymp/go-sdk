// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: eolymp/executor/job.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Output format defines how to read program execution status.
type Job_Actor_OutputFormat int32

const (
	// Results of the execution are based on program's exit code, 0 - SUCCESS, non-0 - FAILURE.
	Job_Actor_EXIT_CODE Job_Actor_OutputFormat = 0
	// Results of the execution are based on testlib.h (https://github.com/MikeMirzayanov/testlib) output format.
	Job_Actor_TESTLIB_OUTPUT Job_Actor_OutputFormat = 1
)

// Enum value maps for Job_Actor_OutputFormat.
var (
	Job_Actor_OutputFormat_name = map[int32]string{
		0: "EXIT_CODE",
		1: "TESTLIB_OUTPUT",
	}
	Job_Actor_OutputFormat_value = map[string]int32{
		"EXIT_CODE":      0,
		"TESTLIB_OUTPUT": 1,
	}
)

func (x Job_Actor_OutputFormat) Enum() *Job_Actor_OutputFormat {
	p := new(Job_Actor_OutputFormat)
	*p = x
	return p
}

func (x Job_Actor_OutputFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_Actor_OutputFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_job_proto_enumTypes[0].Descriptor()
}

func (Job_Actor_OutputFormat) Type() protoreflect.EnumType {
	return &file_eolymp_executor_job_proto_enumTypes[0]
}

func (x Job_Actor_OutputFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_Actor_OutputFormat.Descriptor instead.
func (Job_Actor_OutputFormat) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Job represents task to be executed by judge agent.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task unique reference so originator can look up task in its database, for example, this field might be set to
	// Submission ID. Unlike ID, reference is set by client and does not have to be unique. Although, it would make
	// sense for reference to be unique within same originator, otherwise originator won't be able to correlated tasks
	// in its database.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Task originator (service which has created task). This field will be added to task status reports, so consumers
	// can easily filter status reports they are interested in.
	Origin string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// Precondition define conditions when each run should be executed, if runs does not satisfy preconditions it will be skipped.
	Preconditions []*Task_Precondition `protobuf:"bytes,10,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	// Actors of the task.
	Actors []*Job_Actor `protobuf:"bytes,20,rep,name=actors,proto3" json:"actors,omitempty"`
	// Scenario defines template for runs, steps in run are merged with scenario
	Scenario []*Job_Step `protobuf:"bytes,40,rep,name=scenario,proto3" json:"scenario,omitempty"`
	// Runs of the task.
	Runs []*Job_Run `protobuf:"bytes,30,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Job) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Job) GetPreconditions() []*Task_Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *Job) GetActors() []*Job_Actor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Job) GetScenario() []*Job_Step {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *Job) GetRuns() []*Job_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

// Actor is an executable used in the task
type Job_Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                        // Unique name, used to refer to the actor from other places
	Runtime      string                 `protobuf:"bytes,10,opt,name=runtime,proto3" json:"runtime,omitempty"`                                                                                 // Runtime
	SourceErn    string                 `protobuf:"bytes,11,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"`                                                            // Source code ERN
	HeaderErn    string                 `protobuf:"bytes,12,opt,name=header_ern,json=headerErn,proto3" json:"header_ern,omitempty"`                                                            // Header code ERN, automatically added before source code
	FooterErn    string                 `protobuf:"bytes,13,opt,name=footer_ern,json=footerErn,proto3" json:"footer_ern,omitempty"`                                                            // Footer code ERN, automatically added after source code
	SourceUrl    string                 `protobuf:"bytes,14,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`                                                            // Source code URL
	HeaderUrl    string                 `protobuf:"bytes,15,opt,name=header_url,json=headerUrl,proto3" json:"header_url,omitempty"`                                                            // Header code URL, automatically added before source code
	FooterUrl    string                 `protobuf:"bytes,16,opt,name=footer_url,json=footerUrl,proto3" json:"footer_url,omitempty"`                                                            // Footer code URL, automatically added after source code
	Env          map[string]string      `protobuf:"bytes,40,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional environment variable during init
	Files        []*Job_File            `protobuf:"bytes,41,rep,name=files,proto3" json:"files,omitempty"`                                                                                     // Additional files mounted before init
	OutputFormat Job_Actor_OutputFormat `protobuf:"varint,35,opt,name=output_format,json=outputFormat,proto3,enum=eolymp.executor.Job_Actor_OutputFormat" json:"output_format,omitempty"`      // Defines how to treat program exit status and output parameters
	Mount        []*Job_Mount           `protobuf:"bytes,50,rep,name=mount,proto3" json:"mount,omitempty"`                                                                                     // Allows to mount workdir from another actor locally
}

func (x *Job_Actor) Reset() {
	*x = Job_Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Actor) ProtoMessage() {}

func (x *Job_Actor) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Actor.ProtoReflect.Descriptor instead.
func (*Job_Actor) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Job_Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job_Actor) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Job_Actor) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

func (x *Job_Actor) GetHeaderErn() string {
	if x != nil {
		return x.HeaderErn
	}
	return ""
}

func (x *Job_Actor) GetFooterErn() string {
	if x != nil {
		return x.FooterErn
	}
	return ""
}

func (x *Job_Actor) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Job_Actor) GetHeaderUrl() string {
	if x != nil {
		return x.HeaderUrl
	}
	return ""
}

func (x *Job_Actor) GetFooterUrl() string {
	if x != nil {
		return x.FooterUrl
	}
	return ""
}

func (x *Job_Actor) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Job_Actor) GetFiles() []*Job_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Job_Actor) GetOutputFormat() Job_Actor_OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return Job_Actor_EXIT_CODE
}

func (x *Job_Actor) GetMount() []*Job_Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

// Mount defines how to mount workdir of one actor onto another
type Job_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromActor string `protobuf:"bytes,1,opt,name=from_actor,json=fromActor,proto3" json:"from_actor,omitempty"` // Name of the actor to mount
	ToPath    string `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`          // Path where workdir will be mounted to
}

func (x *Job_Mount) Reset() {
	*x = Job_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Mount) ProtoMessage() {}

func (x *Job_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Mount.ProtoReflect.Descriptor instead.
func (*Job_Mount) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Job_Mount) GetFromActor() string {
	if x != nil {
		return x.FromActor
	}
	return ""
}

func (x *Job_Mount) GetToPath() string {
	if x != nil {
		return x.ToPath
	}
	return ""
}

// File defines additional file which might be placed into work directory during compilation or execution
type Job_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                            // Path where file should be placed (always relative to the workdir)
	SourceErn string `protobuf:"bytes,2,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"` // ERN defines how to fetch file content
	SourceUrl string `protobuf:"bytes,3,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
}

func (x *Job_File) Reset() {
	*x = Job_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_File) ProtoMessage() {}

func (x *Job_File) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_File.ProtoReflect.Descriptor instead.
func (*Job_File) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Job_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Job_File) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

func (x *Job_File) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

// Run defines a single execution of the task.
type Job_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string      `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"` // Run reference.
	Index     uint32      `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`        // Index defines order in which runs are executed.
	Labels    []string    `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty"`      // Labels used to match constraints and preconditions.
	Steps     []*Job_Step `protobuf:"bytes,20,rep,name=steps,proto3" json:"steps,omitempty"`        // Steps to execute the run
}

func (x *Job_Run) Reset() {
	*x = Job_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Run) ProtoMessage() {}

func (x *Job_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Run.ProtoReflect.Descriptor instead.
func (*Job_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Job_Run) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Job_Run) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Job_Run) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Job_Run) GetSteps() []*Job_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Step defines an action within run
type Job_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EvenOnFailure bool   `protobuf:"varint,100,opt,name=even_on_failure,json=evenOnFailure,proto3" json:"even_on_failure,omitempty"` // run this step even if one of the previous steps have failed
	OnlyOnFailure bool   `protobuf:"varint,101,opt,name=only_on_failure,json=onlyOnFailure,proto3" json:"only_on_failure,omitempty"` // run this step only if one of the previous steps have failed
	// Types that are assignable to Action:
	//	*Job_Step_Write_
	//	*Job_Step_Copy_
	//	*Job_Step_Execute_
	//	*Job_Step_Upload_
	//	*Job_Step_Group_
	Action isJob_Step_Action `protobuf_oneof:"action"`
}

func (x *Job_Step) Reset() {
	*x = Job_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step) ProtoMessage() {}

func (x *Job_Step) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step.ProtoReflect.Descriptor instead.
func (*Job_Step) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Job_Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job_Step) GetEvenOnFailure() bool {
	if x != nil {
		return x.EvenOnFailure
	}
	return false
}

func (x *Job_Step) GetOnlyOnFailure() bool {
	if x != nil {
		return x.OnlyOnFailure
	}
	return false
}

func (m *Job_Step) GetAction() isJob_Step_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Job_Step) GetWrite() *Job_Step_Write {
	if x, ok := x.GetAction().(*Job_Step_Write_); ok {
		return x.Write
	}
	return nil
}

func (x *Job_Step) GetCopy() *Job_Step_Copy {
	if x, ok := x.GetAction().(*Job_Step_Copy_); ok {
		return x.Copy
	}
	return nil
}

func (x *Job_Step) GetExecute() *Job_Step_Execute {
	if x, ok := x.GetAction().(*Job_Step_Execute_); ok {
		return x.Execute
	}
	return nil
}

func (x *Job_Step) GetUpload() *Job_Step_Upload {
	if x, ok := x.GetAction().(*Job_Step_Upload_); ok {
		return x.Upload
	}
	return nil
}

func (x *Job_Step) GetGroup() *Job_Step_Group {
	if x, ok := x.GetAction().(*Job_Step_Group_); ok {
		return x.Group
	}
	return nil
}

type isJob_Step_Action interface {
	isJob_Step_Action()
}

type Job_Step_Write_ struct {
	Write *Job_Step_Write `protobuf:"bytes,10,opt,name=write,proto3,oneof"`
}

type Job_Step_Copy_ struct {
	Copy *Job_Step_Copy `protobuf:"bytes,11,opt,name=copy,proto3,oneof"`
}

type Job_Step_Execute_ struct {
	Execute *Job_Step_Execute `protobuf:"bytes,12,opt,name=execute,proto3,oneof"`
}

type Job_Step_Upload_ struct {
	Upload *Job_Step_Upload `protobuf:"bytes,13,opt,name=upload,proto3,oneof"`
}

type Job_Step_Group_ struct {
	Group *Job_Step_Group `protobuf:"bytes,14,opt,name=group,proto3,oneof"`
}

func (*Job_Step_Write_) isJob_Step_Action() {}

func (*Job_Step_Copy_) isJob_Step_Action() {}

func (*Job_Step_Execute_) isJob_Step_Action() {}

func (*Job_Step_Upload_) isJob_Step_Action() {}

func (*Job_Step_Group_) isJob_Step_Action() {}

// Write operation writes (or downloads) file by ERN
type Job_Step_Write struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceErn   string `protobuf:"bytes,1,opt,name=source_ern,json=sourceErn,proto3" json:"source_ern,omitempty"`
	SourceUrl   string `protobuf:"bytes,5,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	TargetActor string `protobuf:"bytes,2,opt,name=target_actor,json=targetActor,proto3" json:"target_actor,omitempty"`
	TargetPath  string `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	FixCrlf     bool   `protobuf:"varint,4,opt,name=fix_crlf,json=fixCrlf,proto3" json:"fix_crlf,omitempty"` // automatically turn CRLF into LF
}

func (x *Job_Step_Write) Reset() {
	*x = Job_Step_Write{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step_Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step_Write) ProtoMessage() {}

func (x *Job_Step_Write) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step_Write.ProtoReflect.Descriptor instead.
func (*Job_Step_Write) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Job_Step_Write) GetSourceErn() string {
	if x != nil {
		return x.SourceErn
	}
	return ""
}

func (x *Job_Step_Write) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Job_Step_Write) GetTargetActor() string {
	if x != nil {
		return x.TargetActor
	}
	return ""
}

func (x *Job_Step_Write) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *Job_Step_Write) GetFixCrlf() bool {
	if x != nil {
		return x.FixCrlf
	}
	return false
}

// Upload operation uploads saves file to the object storage
type Job_Step_Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceActor string `protobuf:"bytes,1,opt,name=source_actor,json=sourceActor,proto3" json:"source_actor,omitempty"`    // Source actor.
	SourcePath  string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`       // Source path relative to the actor's workdir.
	TargetName  string `protobuf:"bytes,3,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`       // Name for the uploaded file.
	Optionally  bool   `protobuf:"varint,4,opt,name=optionally,proto3" json:"optionally,omitempty"`                        // If true, step won't fail if source file does not exist.
	Ttl         uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`                                      // Defines how long uploaded file should be stored (in seconds).
	MaxSize     uint32 `protobuf:"varint,6,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`               // Defines maximum file size (in bytes), if file exceeds this limit it will be trimmed.
	MaxDataSize uint32 `protobuf:"varint,7,opt,name=max_data_size,json=maxDataSize,proto3" json:"max_data_size,omitempty"` // Max size (in bytes) for data encoded as Data ERN, this value can not exceed 3831 bytes (produces ERN under 5KB). Default value is 759 bytes (produces ERNs under 1KB). Use force_upload to avoid data ERNs completely.
	ForceUpload bool   `protobuf:"varint,8,opt,name=force_upload,json=forceUpload,proto3" json:"force_upload,omitempty"`   // Force upload to blob storage, by default upload action will encode small files into data ERN instead of uploading files to blob storage.
}

func (x *Job_Step_Upload) Reset() {
	*x = Job_Step_Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step_Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step_Upload) ProtoMessage() {}

func (x *Job_Step_Upload) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step_Upload.ProtoReflect.Descriptor instead.
func (*Job_Step_Upload) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Job_Step_Upload) GetSourceActor() string {
	if x != nil {
		return x.SourceActor
	}
	return ""
}

func (x *Job_Step_Upload) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *Job_Step_Upload) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *Job_Step_Upload) GetOptionally() bool {
	if x != nil {
		return x.Optionally
	}
	return false
}

func (x *Job_Step_Upload) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *Job_Step_Upload) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Job_Step_Upload) GetMaxDataSize() uint32 {
	if x != nil {
		return x.MaxDataSize
	}
	return 0
}

func (x *Job_Step_Upload) GetForceUpload() bool {
	if x != nil {
		return x.ForceUpload
	}
	return false
}

// Copy operation copies file from one actor to another
type Job_Step_Copy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceActor  string `protobuf:"bytes,1,opt,name=source_actor,json=sourceActor,proto3" json:"source_actor,omitempty"`
	SourcePath   string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	TargetActor  string `protobuf:"bytes,3,opt,name=target_actor,json=targetActor,proto3" json:"target_actor,omitempty"`
	TargetPath   string `protobuf:"bytes,4,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	Optionally   bool   `protobuf:"varint,5,opt,name=optionally,proto3" json:"optionally,omitempty"`                         // If true, step won't fail if source file does not exist
	RemoveSource bool   `protobuf:"varint,6,opt,name=remove_source,json=removeSource,proto3" json:"remove_source,omitempty"` // If true, source file will be removed (ie. file will be moved rather than copied)
}

func (x *Job_Step_Copy) Reset() {
	*x = Job_Step_Copy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step_Copy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step_Copy) ProtoMessage() {}

func (x *Job_Step_Copy) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step_Copy.ProtoReflect.Descriptor instead.
func (*Job_Step_Copy) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *Job_Step_Copy) GetSourceActor() string {
	if x != nil {
		return x.SourceActor
	}
	return ""
}

func (x *Job_Step_Copy) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *Job_Step_Copy) GetTargetActor() string {
	if x != nil {
		return x.TargetActor
	}
	return ""
}

func (x *Job_Step_Copy) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *Job_Step_Copy) GetOptionally() bool {
	if x != nil {
		return x.Optionally
	}
	return false
}

func (x *Job_Step_Copy) GetRemoveSource() bool {
	if x != nil {
		return x.RemoveSource
	}
	return false
}

// Execute operation executes actor
type Job_Step_Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor         string            `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                     // Name of the actor to execute.
	Args          []string          `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`                                                                                       // If set will override arguments set in Actor.
	Env           map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // If set will append environment variables set in Actor.
	Stdin         string            `protobuf:"bytes,30,opt,name=stdin,proto3" json:"stdin,omitempty"`                                                                                    // Local path to the stdin source (relative to workdir)
	Stdout        string            `protobuf:"bytes,31,opt,name=stdout,proto3" json:"stdout,omitempty"`                                                                                  // Local path to the stdout destination (relative to workdir)
	Stderr        string            `protobuf:"bytes,32,opt,name=stderr,proto3" json:"stderr,omitempty"`                                                                                  // Local path to the stderr destination (relative to workdir), can be same as stdout
	StdinLast     bool              `protobuf:"varint,33,opt,name=stdin_last,json=stdinLast,proto3" json:"stdin_last,omitempty"`                                                          // If true, open stdin file after stdout and stderr, this is used when two actors communicate using named pipes and should not interlock each other.
	WallTimeLimit uint32            `protobuf:"varint,10,opt,name=wall_time_limit,json=wallTimeLimit,proto3" json:"wall_time_limit,omitempty"`                                            // Wall time limit in ms
	CpuTimeLimit  uint32            `protobuf:"varint,11,opt,name=cpu_time_limit,json=cpuTimeLimit,proto3" json:"cpu_time_limit,omitempty"`                                               // CPU usage limit in ms
	MemoryLimit   uint64            `protobuf:"varint,12,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`                                                    // Memory usage limit in bytes
	FileSizeLimit uint64            `protobuf:"varint,13,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"`                                            // File size limit in bytes
}

func (x *Job_Step_Execute) Reset() {
	*x = Job_Step_Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step_Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step_Execute) ProtoMessage() {}

func (x *Job_Step_Execute) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step_Execute.ProtoReflect.Descriptor instead.
func (*Job_Step_Execute) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *Job_Step_Execute) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *Job_Step_Execute) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Job_Step_Execute) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Job_Step_Execute) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *Job_Step_Execute) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Job_Step_Execute) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Job_Step_Execute) GetStdinLast() bool {
	if x != nil {
		return x.StdinLast
	}
	return false
}

func (x *Job_Step_Execute) GetWallTimeLimit() uint32 {
	if x != nil {
		return x.WallTimeLimit
	}
	return 0
}

func (x *Job_Step_Execute) GetCpuTimeLimit() uint32 {
	if x != nil {
		return x.CpuTimeLimit
	}
	return 0
}

func (x *Job_Step_Execute) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Job_Step_Execute) GetFileSizeLimit() uint64 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

type Job_Step_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*Job_Step_Execute `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *Job_Step_Group) Reset() {
	*x = Job_Step_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_job_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Step_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Step_Group) ProtoMessage() {}

func (x *Job_Step_Group) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_job_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Step_Group.ProtoReflect.Descriptor instead.
func (*Job_Step_Group) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_job_proto_rawDescGZIP(), []int{0, 4, 4}
}

func (x *Job_Step_Group) GetProcesses() []*Job_Step_Execute {
	if x != nil {
		return x.Processes
	}
	return nil
}

var File_eolymp_executor_job_proto protoreflect.FileDescriptor

var file_eolymp_executor_job_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x1a, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x15, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x72,
	0x75, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x1a, 0xc2, 0x04, 0x0a, 0x05, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x45, 0x72, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x0c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45,
	0x53, 0x54, 0x4c, 0x49, 0x42, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x01, 0x1a, 0x3f,
	0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x1a,
	0x58, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x82, 0x01, 0x0a, 0x03, 0x52, 0x75,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x8c,
	0x0c, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e,
	0x6c, 0x79, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa4,
	0x01, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x78, 0x5f, 0x63, 0x72, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x43, 0x72, 0x6c, 0x66, 0x1a, 0x81, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xd3, 0x01, 0x0a, 0x04, 0x43, 0x6f,
	0x70, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0xa7, 0x03, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x64,
	0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x3b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_executor_job_proto_rawDescOnce sync.Once
	file_eolymp_executor_job_proto_rawDescData = file_eolymp_executor_job_proto_rawDesc
)

func file_eolymp_executor_job_proto_rawDescGZIP() []byte {
	file_eolymp_executor_job_proto_rawDescOnce.Do(func() {
		file_eolymp_executor_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_executor_job_proto_rawDescData)
	})
	return file_eolymp_executor_job_proto_rawDescData
}

var file_eolymp_executor_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_executor_job_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_eolymp_executor_job_proto_goTypes = []interface{}{
	(Job_Actor_OutputFormat)(0), // 0: eolymp.executor.Job.Actor.OutputFormat
	(*Job)(nil),                 // 1: eolymp.executor.Job
	(*Job_Actor)(nil),           // 2: eolymp.executor.Job.Actor
	(*Job_Mount)(nil),           // 3: eolymp.executor.Job.Mount
	(*Job_File)(nil),            // 4: eolymp.executor.Job.File
	(*Job_Run)(nil),             // 5: eolymp.executor.Job.Run
	(*Job_Step)(nil),            // 6: eolymp.executor.Job.Step
	nil,                         // 7: eolymp.executor.Job.Actor.EnvEntry
	(*Job_Step_Write)(nil),      // 8: eolymp.executor.Job.Step.Write
	(*Job_Step_Upload)(nil),     // 9: eolymp.executor.Job.Step.Upload
	(*Job_Step_Copy)(nil),       // 10: eolymp.executor.Job.Step.Copy
	(*Job_Step_Execute)(nil),    // 11: eolymp.executor.Job.Step.Execute
	(*Job_Step_Group)(nil),      // 12: eolymp.executor.Job.Step.Group
	nil,                         // 13: eolymp.executor.Job.Step.Execute.EnvEntry
	(*Task_Precondition)(nil),   // 14: eolymp.executor.Task.Precondition
}
var file_eolymp_executor_job_proto_depIdxs = []int32{
	14, // 0: eolymp.executor.Job.preconditions:type_name -> eolymp.executor.Task.Precondition
	2,  // 1: eolymp.executor.Job.actors:type_name -> eolymp.executor.Job.Actor
	6,  // 2: eolymp.executor.Job.scenario:type_name -> eolymp.executor.Job.Step
	5,  // 3: eolymp.executor.Job.runs:type_name -> eolymp.executor.Job.Run
	7,  // 4: eolymp.executor.Job.Actor.env:type_name -> eolymp.executor.Job.Actor.EnvEntry
	4,  // 5: eolymp.executor.Job.Actor.files:type_name -> eolymp.executor.Job.File
	0,  // 6: eolymp.executor.Job.Actor.output_format:type_name -> eolymp.executor.Job.Actor.OutputFormat
	3,  // 7: eolymp.executor.Job.Actor.mount:type_name -> eolymp.executor.Job.Mount
	6,  // 8: eolymp.executor.Job.Run.steps:type_name -> eolymp.executor.Job.Step
	8,  // 9: eolymp.executor.Job.Step.write:type_name -> eolymp.executor.Job.Step.Write
	10, // 10: eolymp.executor.Job.Step.copy:type_name -> eolymp.executor.Job.Step.Copy
	11, // 11: eolymp.executor.Job.Step.execute:type_name -> eolymp.executor.Job.Step.Execute
	9,  // 12: eolymp.executor.Job.Step.upload:type_name -> eolymp.executor.Job.Step.Upload
	12, // 13: eolymp.executor.Job.Step.group:type_name -> eolymp.executor.Job.Step.Group
	13, // 14: eolymp.executor.Job.Step.Execute.env:type_name -> eolymp.executor.Job.Step.Execute.EnvEntry
	11, // 15: eolymp.executor.Job.Step.Group.processes:type_name -> eolymp.executor.Job.Step.Execute
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_eolymp_executor_job_proto_init() }
func file_eolymp_executor_job_proto_init() {
	if File_eolymp_executor_job_proto != nil {
		return
	}
	file_eolymp_executor_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_executor_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step_Write); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step_Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step_Copy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step_Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_job_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job_Step_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eolymp_executor_job_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Job_Step_Write_)(nil),
		(*Job_Step_Copy_)(nil),
		(*Job_Step_Execute_)(nil),
		(*Job_Step_Upload_)(nil),
		(*Job_Step_Group_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_executor_job_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_executor_job_proto_goTypes,
		DependencyIndexes: file_eolymp_executor_job_proto_depIdxs,
		EnumInfos:         file_eolymp_executor_job_proto_enumTypes,
		MessageInfos:      file_eolymp_executor_job_proto_msgTypes,
	}.Build()
	File_eolymp_executor_job_proto = out.File
	file_eolymp_executor_job_proto_rawDesc = nil
	file_eolymp_executor_job_proto_goTypes = nil
	file_eolymp_executor_job_proto_depIdxs = nil
}
