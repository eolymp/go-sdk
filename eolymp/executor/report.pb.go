// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v3.21.12
// source: eolymp/executor/report.proto

package executor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Report_State int32

const (
	Report_UNSPECIFIED Report_State = 0
	Report_PENDING     Report_State = 1
	Report_EXECUTING   Report_State = 2
	Report_COMPLETE    Report_State = 3
	Report_FAILED      Report_State = 4
	Report_BLOCKED     Report_State = 5
	Report_SKIPPED     Report_State = 6
)

// Enum value maps for Report_State.
var (
	Report_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PENDING",
		2: "EXECUTING",
		3: "COMPLETE",
		4: "FAILED",
		5: "BLOCKED",
		6: "SKIPPED",
	}
	Report_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PENDING":     1,
		"EXECUTING":   2,
		"COMPLETE":    3,
		"FAILED":      4,
		"BLOCKED":     5,
		"SKIPPED":     6,
	}
)

func (x Report_State) Enum() *Report_State {
	p := new(Report_State)
	*p = x
	return p
}

func (x Report_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_State) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_report_proto_enumTypes[0].Descriptor()
}

func (Report_State) Type() protoreflect.EnumType {
	return &file_eolymp_executor_report_proto_enumTypes[0]
}

func (x Report_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_State.Descriptor instead.
func (Report_State) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 0}
}

type Report_Actor_Error int32

const (
	Report_Actor_NONE       Report_Actor_Error = 0 // no error, actor was initialized successfully
	Report_Actor_INIT_ERROR Report_Actor_Error = 1 // compilation error, see error_message for compiler output
	Report_Actor_INTERNAL   Report_Actor_Error = 2 // internal error, see error_message for details
)

// Enum value maps for Report_Actor_Error.
var (
	Report_Actor_Error_name = map[int32]string{
		0: "NONE",
		1: "INIT_ERROR",
		2: "INTERNAL",
	}
	Report_Actor_Error_value = map[string]int32{
		"NONE":       0,
		"INIT_ERROR": 1,
		"INTERNAL":   2,
	}
)

func (x Report_Actor_Error) Enum() *Report_Actor_Error {
	p := new(Report_Actor_Error)
	*p = x
	return p
}

func (x Report_Actor_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Actor_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_report_proto_enumTypes[1].Descriptor()
}

func (Report_Actor_Error) Type() protoreflect.EnumType {
	return &file_eolymp_executor_report_proto_enumTypes[1]
}

func (x Report_Actor_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Actor_Error.Descriptor instead.
func (Report_Actor_Error) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Report_Step_Outcome int32

const (
	Report_Step_UNSPECIFIED Report_Step_Outcome = 0
	Report_Step_COMPLETE    Report_Step_Outcome = 1
	Report_Step_FAILED      Report_Step_Outcome = 2
)

// Enum value maps for Report_Step_Outcome.
var (
	Report_Step_Outcome_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "COMPLETE",
		2: "FAILED",
	}
	Report_Step_Outcome_value = map[string]int32{
		"UNSPECIFIED": 0,
		"COMPLETE":    1,
		"FAILED":      2,
	}
)

func (x Report_Step_Outcome) Enum() *Report_Step_Outcome {
	p := new(Report_Step_Outcome)
	*p = x
	return p
}

func (x Report_Step_Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Step_Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_report_proto_enumTypes[2].Descriptor()
}

func (Report_Step_Outcome) Type() protoreflect.EnumType {
	return &file_eolymp_executor_report_proto_enumTypes[2]
}

func (x Report_Step_Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Step_Outcome.Descriptor instead.
func (Report_Step_Outcome) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2, 0}
}

type Report_Step_Execute_Exit int32

const (
	Report_Step_Execute_UNSPECIFIED     Report_Step_Execute_Exit = 0 // Should not be used.
	Report_Step_Execute_SUCCESS         Report_Step_Execute_Exit = 1 // Execution finished without error.
	Report_Step_Execute_TIMEOUT         Report_Step_Execute_Exit = 2 // Timeout reached (wall time usage reached).
	Report_Step_Execute_CPU_EXHAUSTED   Report_Step_Execute_Exit = 3 // CPU exhausted (cpu time usage reached).
	Report_Step_Execute_MEMORY_OVERFLOW Report_Step_Execute_Exit = 4 // Memory limit reached.
	Report_Step_Execute_RUNTIME_ERROR   Report_Step_Execute_Exit = 5 // Executed, but exit code was non-zero.
	Report_Step_Execute_SKIPPED         Report_Step_Execute_Exit = 6 // Execution was skipped.
)

// Enum value maps for Report_Step_Execute_Exit.
var (
	Report_Step_Execute_Exit_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SUCCESS",
		2: "TIMEOUT",
		3: "CPU_EXHAUSTED",
		4: "MEMORY_OVERFLOW",
		5: "RUNTIME_ERROR",
		6: "SKIPPED",
	}
	Report_Step_Execute_Exit_value = map[string]int32{
		"UNSPECIFIED":     0,
		"SUCCESS":         1,
		"TIMEOUT":         2,
		"CPU_EXHAUSTED":   3,
		"MEMORY_OVERFLOW": 4,
		"RUNTIME_ERROR":   5,
		"SKIPPED":         6,
	}
)

func (x Report_Step_Execute_Exit) Enum() *Report_Step_Execute_Exit {
	p := new(Report_Step_Execute_Exit)
	*p = x
	return p
}

func (x Report_Step_Execute_Exit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Step_Execute_Exit) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_executor_report_proto_enumTypes[3].Descriptor()
}

func (Report_Step_Execute_Exit) Type() protoreflect.EnumType {
	return &file_eolymp_executor_report_proto_enumTypes[3]
}

func (x Report_Step_Execute_Exit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Step_Execute_Exit.Descriptor instead.
func (Report_Step_Execute_Exit) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

// Status represents results of the executing task.
// deprecated
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task reference as set when task was created.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Originator of the task (service which created task)
	Origin string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// Unique identifier of the agent which executed task.
	AgentName string `protobuf:"bytes,110,opt,name=agent_name,json=agentName,proto3" json:"agent_name,omitempty"`
	// Always increasing report version.
	//
	// Each time agent emits a report it would increase version, so listener can put reports in the right order: process
	// newer and ignore older.
	//
	// In case runs of a single task are distributed among multiple agents, each agent will report version independently,
	// so listener must track versions per run (eg. run #1 last update is v.15, run #2 last update is v.41, if listener
	// receives run #1 v.20 it's newer and should be processed, but run #2 v.20 should be ignored).
	Version uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"`
	// Overall task state
	State Report_State `protobuf:"varint,10,opt,name=state,proto3,enum=eolymp.executor.Report_State" json:"state,omitempty"`
	// Actor statuses.
	Actors []*Report_Actor `protobuf:"bytes,50,rep,name=actors,proto3" json:"actors,omitempty"`
	// Runs statuses.
	Runs []*Report_Run `protobuf:"bytes,40,rep,name=runs,proto3" json:"runs,omitempty"`
	// Error message.
	Error string `protobuf:"bytes,20,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Report) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Report) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Report) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Report) GetState() Report_State {
	if x != nil {
		return x.State
	}
	return Report_UNSPECIFIED
}

func (x *Report) GetActors() []*Report_Actor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Report) GetRuns() []*Report_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *Report) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Communicates status of the actor
type Report_Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actor name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Source code signature is a unique fingerprint of the code, calculated by agent for a specific language.
	// It should be used to find identical or similar source codes.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Error code defines type of error, if any
	ErrorCode Report_Actor_Error `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3,enum=eolymp.executor.Report_Actor_Error" json:"error_code,omitempty"`
	// Actor related error message, for example compilation error message
	ErrorMessage string `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Report_Actor) Reset() {
	*x = Report_Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Actor) ProtoMessage() {}

func (x *Report_Actor) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Actor.ProtoReflect.Descriptor instead.
func (*Report_Actor) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Report_Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Report_Actor) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Report_Actor) GetErrorCode() Report_Actor_Error {
	if x != nil {
		return x.ErrorCode
	}
	return Report_Actor_NONE
}

func (x *Report_Actor) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Run represents a single execution scenario. Runs consist of multiple steps.
type Report_Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference    string         `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`                            // Run reference as set by originator.
	State        Report_State   `protobuf:"varint,2,opt,name=state,proto3,enum=eolymp.executor.Report_State" json:"state,omitempty"` // Overall run status.
	ErrorMessage string         `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`  // Error message in case of failure.
	Steps        []*Report_Step `protobuf:"bytes,10,rep,name=steps,proto3" json:"steps,omitempty"`                                   // Statuses for steps.
}

func (x *Report_Run) Reset() {
	*x = Report_Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Run) ProtoMessage() {}

func (x *Report_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Run.ProtoReflect.Descriptor instead.
func (*Report_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Report_Run) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Report_Run) GetState() Report_State {
	if x != nil {
		return x.State
	}
	return Report_UNSPECIFIED
}

func (x *Report_Run) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Report_Run) GetSteps() []*Report_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Step represents a status for a single run operation.
type Report_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Outcome Report_Step_Outcome `protobuf:"varint,2,opt,name=outcome,proto3,enum=eolymp.executor.Report_Step_Outcome" json:"outcome,omitempty"`
	// Types that are assignable to Output:
	//
	//	*Report_Step_Execute_
	//	*Report_Step_Upload_
	//	*Report_Step_Group_
	Output isReport_Step_Output `protobuf_oneof:"output"`
}

func (x *Report_Step) Reset() {
	*x = Report_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Step) ProtoMessage() {}

func (x *Report_Step) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Step.ProtoReflect.Descriptor instead.
func (*Report_Step) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Report_Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Report_Step) GetOutcome() Report_Step_Outcome {
	if x != nil {
		return x.Outcome
	}
	return Report_Step_UNSPECIFIED
}

func (m *Report_Step) GetOutput() isReport_Step_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *Report_Step) GetExecute() *Report_Step_Execute {
	if x, ok := x.GetOutput().(*Report_Step_Execute_); ok {
		return x.Execute
	}
	return nil
}

func (x *Report_Step) GetUpload() *Report_Step_Upload {
	if x, ok := x.GetOutput().(*Report_Step_Upload_); ok {
		return x.Upload
	}
	return nil
}

func (x *Report_Step) GetGroup() *Report_Step_Group {
	if x, ok := x.GetOutput().(*Report_Step_Group_); ok {
		return x.Group
	}
	return nil
}

type isReport_Step_Output interface {
	isReport_Step_Output()
}

type Report_Step_Execute_ struct {
	Execute *Report_Step_Execute `protobuf:"bytes,12,opt,name=execute,proto3,oneof"`
}

type Report_Step_Upload_ struct {
	Upload *Report_Step_Upload `protobuf:"bytes,13,opt,name=upload,proto3,oneof"`
}

type Report_Step_Group_ struct {
	Group *Report_Step_Group `protobuf:"bytes,14,opt,name=group,proto3,oneof"`
}

func (*Report_Step_Execute_) isReport_Step_Output() {}

func (*Report_Step_Upload_) isReport_Step_Output() {}

func (*Report_Step_Group_) isReport_Step_Output() {}

type Report_Step_Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor         string                   `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`                                                                                           // Actor name
	ExitStatus    Report_Step_Execute_Exit `protobuf:"varint,2,opt,name=exit_status,json=exitStatus,proto3,enum=eolymp.executor.Report_Step_Execute_Exit" json:"exit_status,omitempty"`                // Exit status
	Values        map[string]string        `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional output values (depends on output format)
	WallTimeUsage uint32                   `protobuf:"varint,51,opt,name=wall_time_usage,json=wallTimeUsage,proto3" json:"wall_time_usage,omitempty"`                                                  // Wall time usage in milliseconds
	WallTimeLimit uint32                   `protobuf:"varint,61,opt,name=wall_time_limit,json=wallTimeLimit,proto3" json:"wall_time_limit,omitempty"`                                                  // Wall time limit in milliseconds
	CpuTimeUsage  uint32                   `protobuf:"varint,52,opt,name=cpu_time_usage,json=cpuTimeUsage,proto3" json:"cpu_time_usage,omitempty"`                                                     // CPU time usage in milliseconds
	CpuTimeLimit  uint32                   `protobuf:"varint,62,opt,name=cpu_time_limit,json=cpuTimeLimit,proto3" json:"cpu_time_limit,omitempty"`                                                     // CPU time limit in milliseconds
	MemoryUsage   uint64                   `protobuf:"varint,53,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                                                          // Memory usage in bytes
	MemoryLimit   uint64                   `protobuf:"varint,63,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`                                                          // Memory limit in bytes
	ExitCode      uint32                   `protobuf:"varint,70,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`                                                                   // Program exit code
	Signal        uint32                   `protobuf:"varint,71,opt,name=signal,proto3" json:"signal,omitempty"`                                                                                       // Might contain signal used to kill program
	ResourceUsage *ResourceUsage           `protobuf:"bytes,80,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`                                                     // resource usage as reported by getrusage
}

func (x *Report_Step_Execute) Reset() {
	*x = Report_Step_Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Step_Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Step_Execute) ProtoMessage() {}

func (x *Report_Step_Execute) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Step_Execute.ProtoReflect.Descriptor instead.
func (*Report_Step_Execute) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Report_Step_Execute) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *Report_Step_Execute) GetExitStatus() Report_Step_Execute_Exit {
	if x != nil {
		return x.ExitStatus
	}
	return Report_Step_Execute_UNSPECIFIED
}

func (x *Report_Step_Execute) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Report_Step_Execute) GetWallTimeUsage() uint32 {
	if x != nil {
		return x.WallTimeUsage
	}
	return 0
}

func (x *Report_Step_Execute) GetWallTimeLimit() uint32 {
	if x != nil {
		return x.WallTimeLimit
	}
	return 0
}

func (x *Report_Step_Execute) GetCpuTimeUsage() uint32 {
	if x != nil {
		return x.CpuTimeUsage
	}
	return 0
}

func (x *Report_Step_Execute) GetCpuTimeLimit() uint32 {
	if x != nil {
		return x.CpuTimeLimit
	}
	return 0
}

func (x *Report_Step_Execute) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Report_Step_Execute) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Report_Step_Execute) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Report_Step_Execute) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *Report_Step_Execute) GetResourceUsage() *ResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

type Report_Step_Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetName string `protobuf:"bytes,1,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	TargetUrl  string `protobuf:"bytes,3,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
}

func (x *Report_Step_Upload) Reset() {
	*x = Report_Step_Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Step_Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Step_Upload) ProtoMessage() {}

func (x *Report_Step_Upload) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Step_Upload.ProtoReflect.Descriptor instead.
func (*Report_Step_Upload) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Report_Step_Upload) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *Report_Step_Upload) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

type Report_Step_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*Report_Step_Execute `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *Report_Step_Group) Reset() {
	*x = Report_Step_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_executor_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Step_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Step_Group) ProtoMessage() {}

func (x *Report_Step_Group) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_executor_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Step_Group.ProtoReflect.Descriptor instead.
func (*Report_Step_Group) Descriptor() ([]byte, []int) {
	return file_eolymp_executor_report_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *Report_Step_Group) GetProcesses() []*Report_Step_Execute {
	if x != nil {
		return x.Processes
	}
	return nil
}

var File_eolymp_executor_report_proto protoreflect.FileDescriptor

var file_eolymp_executor_report_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a,
	0x1b, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x0f, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72,
	0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xd3, 0x01, 0x0a, 0x05, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0xb1, 0x01, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x1a, 0xba, 0x09, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc9, 0x05,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x4a, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52,
	0x0a, 0x65, 0x78, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79,
	0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x50, 0x55, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55, 0x4e,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x48, 0x0a, 0x06, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x1a, 0x4b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x34, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x68, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x3b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_executor_report_proto_rawDescOnce sync.Once
	file_eolymp_executor_report_proto_rawDescData = file_eolymp_executor_report_proto_rawDesc
)

func file_eolymp_executor_report_proto_rawDescGZIP() []byte {
	file_eolymp_executor_report_proto_rawDescOnce.Do(func() {
		file_eolymp_executor_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_executor_report_proto_rawDescData)
	})
	return file_eolymp_executor_report_proto_rawDescData
}

var file_eolymp_executor_report_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_eolymp_executor_report_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_eolymp_executor_report_proto_goTypes = []interface{}{
	(Report_State)(0),             // 0: eolymp.executor.Report.State
	(Report_Actor_Error)(0),       // 1: eolymp.executor.Report.Actor.Error
	(Report_Step_Outcome)(0),      // 2: eolymp.executor.Report.Step.Outcome
	(Report_Step_Execute_Exit)(0), // 3: eolymp.executor.Report.Step.Execute.Exit
	(*Report)(nil),                // 4: eolymp.executor.Report
	(*Report_Actor)(nil),          // 5: eolymp.executor.Report.Actor
	(*Report_Run)(nil),            // 6: eolymp.executor.Report.Run
	(*Report_Step)(nil),           // 7: eolymp.executor.Report.Step
	(*Report_Step_Execute)(nil),   // 8: eolymp.executor.Report.Step.Execute
	(*Report_Step_Upload)(nil),    // 9: eolymp.executor.Report.Step.Upload
	(*Report_Step_Group)(nil),     // 10: eolymp.executor.Report.Step.Group
	nil,                           // 11: eolymp.executor.Report.Step.Execute.ValuesEntry
	(*ResourceUsage)(nil),         // 12: eolymp.executor.ResourceUsage
}
var file_eolymp_executor_report_proto_depIdxs = []int32{
	0,  // 0: eolymp.executor.Report.state:type_name -> eolymp.executor.Report.State
	5,  // 1: eolymp.executor.Report.actors:type_name -> eolymp.executor.Report.Actor
	6,  // 2: eolymp.executor.Report.runs:type_name -> eolymp.executor.Report.Run
	1,  // 3: eolymp.executor.Report.Actor.error_code:type_name -> eolymp.executor.Report.Actor.Error
	0,  // 4: eolymp.executor.Report.Run.state:type_name -> eolymp.executor.Report.State
	7,  // 5: eolymp.executor.Report.Run.steps:type_name -> eolymp.executor.Report.Step
	2,  // 6: eolymp.executor.Report.Step.outcome:type_name -> eolymp.executor.Report.Step.Outcome
	8,  // 7: eolymp.executor.Report.Step.execute:type_name -> eolymp.executor.Report.Step.Execute
	9,  // 8: eolymp.executor.Report.Step.upload:type_name -> eolymp.executor.Report.Step.Upload
	10, // 9: eolymp.executor.Report.Step.group:type_name -> eolymp.executor.Report.Step.Group
	3,  // 10: eolymp.executor.Report.Step.Execute.exit_status:type_name -> eolymp.executor.Report.Step.Execute.Exit
	11, // 11: eolymp.executor.Report.Step.Execute.values:type_name -> eolymp.executor.Report.Step.Execute.ValuesEntry
	12, // 12: eolymp.executor.Report.Step.Execute.resource_usage:type_name -> eolymp.executor.ResourceUsage
	8,  // 13: eolymp.executor.Report.Step.Group.processes:type_name -> eolymp.executor.Report.Step.Execute
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_eolymp_executor_report_proto_init() }
func file_eolymp_executor_report_proto_init() {
	if File_eolymp_executor_report_proto != nil {
		return
	}
	file_eolymp_executor_usage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_executor_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Step_Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Step_Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_executor_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_Step_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eolymp_executor_report_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Report_Step_Execute_)(nil),
		(*Report_Step_Upload_)(nil),
		(*Report_Step_Group_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_executor_report_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_executor_report_proto_goTypes,
		DependencyIndexes: file_eolymp_executor_report_proto_depIdxs,
		EnumInfos:         file_eolymp_executor_report_proto_enumTypes,
		MessageInfos:      file_eolymp_executor_report_proto_msgTypes,
	}.Build()
	File_eolymp_executor_report_proto = out.File
	file_eolymp_executor_report_proto_rawDesc = nil
	file_eolymp_executor_report_proto_goTypes = nil
	file_eolymp_executor_report_proto_depIdxs = nil
}
