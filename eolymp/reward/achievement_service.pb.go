// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: eolymp/reward/achievement_service.proto

package reward

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAchievementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *Achievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
}

func (x *CreateAchievementInput) Reset() {
	*x = CreateAchievementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAchievementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAchievementInput) ProtoMessage() {}

func (x *CreateAchievementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAchievementInput.ProtoReflect.Descriptor instead.
func (*CreateAchievementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAchievementInput) GetAchievement() *Achievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

type CreateAchievementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId string `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (x *CreateAchievementOutput) Reset() {
	*x = CreateAchievementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAchievementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAchievementOutput) ProtoMessage() {}

func (x *CreateAchievementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAchievementOutput.ProtoReflect.Descriptor instead.
func (*CreateAchievementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAchievementOutput) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

type UpdateAchievementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId string       `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Achievement   *Achievement `protobuf:"bytes,2,opt,name=achievement,proto3" json:"achievement,omitempty"`
}

func (x *UpdateAchievementInput) Reset() {
	*x = UpdateAchievementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAchievementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAchievementInput) ProtoMessage() {}

func (x *UpdateAchievementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAchievementInput.ProtoReflect.Descriptor instead.
func (*UpdateAchievementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAchievementInput) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *UpdateAchievementInput) GetAchievement() *Achievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

type UpdateAchievementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAchievementOutput) Reset() {
	*x = UpdateAchievementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAchievementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAchievementOutput) ProtoMessage() {}

func (x *UpdateAchievementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAchievementOutput.ProtoReflect.Descriptor instead.
func (*UpdateAchievementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{3}
}

type DeleteAchievementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId string `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (x *DeleteAchievementInput) Reset() {
	*x = DeleteAchievementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAchievementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAchievementInput) ProtoMessage() {}

func (x *DeleteAchievementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAchievementInput.ProtoReflect.Descriptor instead.
func (*DeleteAchievementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAchievementInput) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

type DeleteAchievementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAchievementOutput) Reset() {
	*x = DeleteAchievementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAchievementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAchievementOutput) ProtoMessage() {}

func (x *DeleteAchievementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAchievementOutput.ProtoReflect.Descriptor instead.
func (*DeleteAchievementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{5}
}

type DescribeAchievementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId string              `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Extra         []Achievement_Extra `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.reward.Achievement_Extra" json:"extra,omitempty"`
}

func (x *DescribeAchievementInput) Reset() {
	*x = DescribeAchievementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAchievementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAchievementInput) ProtoMessage() {}

func (x *DescribeAchievementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAchievementInput.ProtoReflect.Descriptor instead.
func (*DescribeAchievementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeAchievementInput) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *DescribeAchievementInput) GetExtra() []Achievement_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DescribeAchievementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Achievement *Achievement `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
}

func (x *DescribeAchievementOutput) Reset() {
	*x = DescribeAchievementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAchievementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAchievementOutput) ProtoMessage() {}

func (x *DescribeAchievementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAchievementOutput.ProtoReflect.Descriptor instead.
func (*DescribeAchievementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeAchievementOutput) GetAchievement() *Achievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

type ListAchievementsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset  int32                         `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int32                         `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Filters *ListAchievementsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	Extra   []Achievement_Extra           `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.reward.Achievement_Extra" json:"extra,omitempty"`
}

func (x *ListAchievementsInput) Reset() {
	*x = ListAchievementsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAchievementsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAchievementsInput) ProtoMessage() {}

func (x *ListAchievementsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAchievementsInput.ProtoReflect.Descriptor instead.
func (*ListAchievementsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListAchievementsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAchievementsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListAchievementsInput) GetFilters() *ListAchievementsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListAchievementsInput) GetExtra() []Achievement_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ListAchievementsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Achievement `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAchievementsOutput) Reset() {
	*x = ListAchievementsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAchievementsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAchievementsOutput) ProtoMessage() {}

func (x *ListAchievementsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAchievementsOutput.ProtoReflect.Descriptor instead.
func (*ListAchievementsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListAchievementsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAchievementsOutput) GetItems() []*Achievement {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListAchievementsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string                    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Id    []*wellknown.ExpressionID `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *ListAchievementsInput_Filter) Reset() {
	*x = ListAchievementsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_reward_achievement_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAchievementsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAchievementsInput_Filter) ProtoMessage() {}

func (x *ListAchievementsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_reward_achievement_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAchievementsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListAchievementsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_reward_achievement_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListAchievementsInput_Filter) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListAchievementsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

var File_eolymp_reward_achievement_service_proto protoreflect.FileDescriptor

var file_eolymp_reward_achievement_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x56, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x3f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x7a, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xe3, 0x08, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x59, 0x0a, 0x19, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xe3, 0x08, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x4e, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0x95,
	0x07, 0x0a, 0x12, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x42, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x1a, 0x8a,
	0xe3, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x3a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22,
	0x0d, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb7,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x53, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40,
	0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x3a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3,
	0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x3a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xbc, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3,
	0x0a, 0x19, 0x8a, 0xe3, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x3a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x41, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40,
	0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x19, 0x8a, 0xe3, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x3a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x3b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_reward_achievement_service_proto_rawDescOnce sync.Once
	file_eolymp_reward_achievement_service_proto_rawDescData = file_eolymp_reward_achievement_service_proto_rawDesc
)

func file_eolymp_reward_achievement_service_proto_rawDescGZIP() []byte {
	file_eolymp_reward_achievement_service_proto_rawDescOnce.Do(func() {
		file_eolymp_reward_achievement_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_reward_achievement_service_proto_rawDescData)
	})
	return file_eolymp_reward_achievement_service_proto_rawDescData
}

var file_eolymp_reward_achievement_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_eolymp_reward_achievement_service_proto_goTypes = []any{
	(*CreateAchievementInput)(nil),       // 0: eolymp.reward.CreateAchievementInput
	(*CreateAchievementOutput)(nil),      // 1: eolymp.reward.CreateAchievementOutput
	(*UpdateAchievementInput)(nil),       // 2: eolymp.reward.UpdateAchievementInput
	(*UpdateAchievementOutput)(nil),      // 3: eolymp.reward.UpdateAchievementOutput
	(*DeleteAchievementInput)(nil),       // 4: eolymp.reward.DeleteAchievementInput
	(*DeleteAchievementOutput)(nil),      // 5: eolymp.reward.DeleteAchievementOutput
	(*DescribeAchievementInput)(nil),     // 6: eolymp.reward.DescribeAchievementInput
	(*DescribeAchievementOutput)(nil),    // 7: eolymp.reward.DescribeAchievementOutput
	(*ListAchievementsInput)(nil),        // 8: eolymp.reward.ListAchievementsInput
	(*ListAchievementsOutput)(nil),       // 9: eolymp.reward.ListAchievementsOutput
	(*ListAchievementsInput_Filter)(nil), // 10: eolymp.reward.ListAchievementsInput.Filter
	(*Achievement)(nil),                  // 11: eolymp.reward.Achievement
	(Achievement_Extra)(0),               // 12: eolymp.reward.Achievement.Extra
	(*wellknown.ExpressionID)(nil),       // 13: eolymp.wellknown.ExpressionID
}
var file_eolymp_reward_achievement_service_proto_depIdxs = []int32{
	11, // 0: eolymp.reward.CreateAchievementInput.achievement:type_name -> eolymp.reward.Achievement
	11, // 1: eolymp.reward.UpdateAchievementInput.achievement:type_name -> eolymp.reward.Achievement
	12, // 2: eolymp.reward.DescribeAchievementInput.extra:type_name -> eolymp.reward.Achievement.Extra
	11, // 3: eolymp.reward.DescribeAchievementOutput.achievement:type_name -> eolymp.reward.Achievement
	10, // 4: eolymp.reward.ListAchievementsInput.filters:type_name -> eolymp.reward.ListAchievementsInput.Filter
	12, // 5: eolymp.reward.ListAchievementsInput.extra:type_name -> eolymp.reward.Achievement.Extra
	11, // 6: eolymp.reward.ListAchievementsOutput.items:type_name -> eolymp.reward.Achievement
	13, // 7: eolymp.reward.ListAchievementsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	0,  // 8: eolymp.reward.AchievementService.CreateAchievement:input_type -> eolymp.reward.CreateAchievementInput
	2,  // 9: eolymp.reward.AchievementService.UpdateAchievement:input_type -> eolymp.reward.UpdateAchievementInput
	4,  // 10: eolymp.reward.AchievementService.DeleteAchievement:input_type -> eolymp.reward.DeleteAchievementInput
	6,  // 11: eolymp.reward.AchievementService.DescribeAchievement:input_type -> eolymp.reward.DescribeAchievementInput
	8,  // 12: eolymp.reward.AchievementService.ListAchievements:input_type -> eolymp.reward.ListAchievementsInput
	1,  // 13: eolymp.reward.AchievementService.CreateAchievement:output_type -> eolymp.reward.CreateAchievementOutput
	3,  // 14: eolymp.reward.AchievementService.UpdateAchievement:output_type -> eolymp.reward.UpdateAchievementOutput
	5,  // 15: eolymp.reward.AchievementService.DeleteAchievement:output_type -> eolymp.reward.DeleteAchievementOutput
	7,  // 16: eolymp.reward.AchievementService.DescribeAchievement:output_type -> eolymp.reward.DescribeAchievementOutput
	9,  // 17: eolymp.reward.AchievementService.ListAchievements:output_type -> eolymp.reward.ListAchievementsOutput
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_eolymp_reward_achievement_service_proto_init() }
func file_eolymp_reward_achievement_service_proto_init() {
	if File_eolymp_reward_achievement_service_proto != nil {
		return
	}
	file_eolymp_reward_achievement_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_reward_achievement_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAchievementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAchievementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAchievementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAchievementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAchievementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAchievementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeAchievementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeAchievementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListAchievementsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListAchievementsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_reward_achievement_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListAchievementsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_reward_achievement_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_reward_achievement_service_proto_goTypes,
		DependencyIndexes: file_eolymp_reward_achievement_service_proto_depIdxs,
		MessageInfos:      file_eolymp_reward_achievement_service_proto_msgTypes,
	}.Build()
	File_eolymp_reward_achievement_service_proto = out.File
	file_eolymp_reward_achievement_service_proto_rawDesc = nil
	file_eolymp_reward_achievement_service_proto_goTypes = nil
	file_eolymp_reward_achievement_service_proto_depIdxs = nil
}
