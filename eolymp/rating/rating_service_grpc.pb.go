// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/rating/rating_service.proto

package rating

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RatingService_SetRating_FullMethodName      = "/eolymp.rating.RatingService/SetRating"
	RatingService_UpdateRating_FullMethodName   = "/eolymp.rating.RatingService/UpdateRating"
	RatingService_DeleteRating_FullMethodName   = "/eolymp.rating.RatingService/DeleteRating"
	RatingService_DescribeRating_FullMethodName = "/eolymp.rating.RatingService/DescribeRating"
	RatingService_ListRating_FullMethodName     = "/eolymp.rating.RatingService/ListRating"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	SetRating(ctx context.Context, in *SetRatingInput, opts ...grpc.CallOption) (*SetRatingOutput, error)
	UpdateRating(ctx context.Context, in *UpdateRatingInput, opts ...grpc.CallOption) (*UpdateRatingOutput, error)
	DeleteRating(ctx context.Context, in *DeleteRatingInput, opts ...grpc.CallOption) (*DeleteRatingOutput, error)
	DescribeRating(ctx context.Context, in *DescribeRatingInput, opts ...grpc.CallOption) (*DescribeRatingOutput, error)
	ListRating(ctx context.Context, in *ListRatingInput, opts ...grpc.CallOption) (*ListRatingOutput, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) SetRating(ctx context.Context, in *SetRatingInput, opts ...grpc.CallOption) (*SetRatingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRatingOutput)
	err := c.cc.Invoke(ctx, RatingService_SetRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) UpdateRating(ctx context.Context, in *UpdateRatingInput, opts ...grpc.CallOption) (*UpdateRatingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRatingOutput)
	err := c.cc.Invoke(ctx, RatingService_UpdateRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DeleteRating(ctx context.Context, in *DeleteRatingInput, opts ...grpc.CallOption) (*DeleteRatingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRatingOutput)
	err := c.cc.Invoke(ctx, RatingService_DeleteRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) DescribeRating(ctx context.Context, in *DescribeRatingInput, opts ...grpc.CallOption) (*DescribeRatingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRatingOutput)
	err := c.cc.Invoke(ctx, RatingService_DescribeRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) ListRating(ctx context.Context, in *ListRatingInput, opts ...grpc.CallOption) (*ListRatingOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRatingOutput)
	err := c.cc.Invoke(ctx, RatingService_ListRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations should embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	SetRating(context.Context, *SetRatingInput) (*SetRatingOutput, error)
	UpdateRating(context.Context, *UpdateRatingInput) (*UpdateRatingOutput, error)
	DeleteRating(context.Context, *DeleteRatingInput) (*DeleteRatingOutput, error)
	DescribeRating(context.Context, *DescribeRatingInput) (*DescribeRatingOutput, error)
	ListRating(context.Context, *ListRatingInput) (*ListRatingOutput, error)
}

// UnimplementedRatingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) SetRating(context.Context, *SetRatingInput) (*SetRatingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRating not implemented")
}
func (UnimplementedRatingServiceServer) UpdateRating(context.Context, *UpdateRatingInput) (*UpdateRatingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedRatingServiceServer) DeleteRating(context.Context, *DeleteRatingInput) (*DeleteRatingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRating not implemented")
}
func (UnimplementedRatingServiceServer) DescribeRating(context.Context, *DescribeRatingInput) (*DescribeRatingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRating not implemented")
}
func (UnimplementedRatingServiceServer) ListRating(context.Context, *ListRatingInput) (*ListRatingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRating not implemented")
}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_SetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).SetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_SetRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).SetRating(ctx, req.(*SetRatingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_UpdateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).UpdateRating(ctx, req.(*UpdateRatingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DeleteRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRatingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DeleteRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DeleteRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DeleteRating(ctx, req.(*DeleteRatingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_DescribeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRatingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).DescribeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_DescribeRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).DescribeRating(ctx, req.(*DescribeRatingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_ListRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRatingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).ListRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_ListRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).ListRating(ctx, req.(*ListRatingInput))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.rating.RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRating",
			Handler:    _RatingService_SetRating_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _RatingService_UpdateRating_Handler,
		},
		{
			MethodName: "DeleteRating",
			Handler:    _RatingService_DeleteRating_Handler,
		},
		{
			MethodName: "DescribeRating",
			Handler:    _RatingService_DescribeRating_Handler,
		},
		{
			MethodName: "ListRating",
			Handler:    _RatingService_ListRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/rating/rating_service.proto",
}
