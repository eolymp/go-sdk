// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: eolymp/drive/drive.proto

package drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriveClient is the client API for Drive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriveClient interface {
	DescribeFile(ctx context.Context, in *DescribeFileInput, opts ...grpc.CallOption) (*DescribeFileOutput, error)
	ListFiles(ctx context.Context, in *ListFilesInput, opts ...grpc.CallOption) (*ListFilesOutput, error)
	CreateFile(ctx context.Context, in *CreateFileInput, opts ...grpc.CallOption) (*CreateFileOutput, error)
	UpdateFile(ctx context.Context, in *UpdateFileInput, opts ...grpc.CallOption) (*UpdateFileOutput, error)
	DeleteFile(ctx context.Context, in *DeleteFileInput, opts ...grpc.CallOption) (*DeleteFileOutput, error)
	StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error)
	UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error)
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error)
}

type driveClient struct {
	cc grpc.ClientConnInterface
}

func NewDriveClient(cc grpc.ClientConnInterface) DriveClient {
	return &driveClient{cc}
}

func (c *driveClient) DescribeFile(ctx context.Context, in *DescribeFileInput, opts ...grpc.CallOption) (*DescribeFileOutput, error) {
	out := new(DescribeFileOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/DescribeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) ListFiles(ctx context.Context, in *ListFilesInput, opts ...grpc.CallOption) (*ListFilesOutput, error) {
	out := new(ListFilesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) CreateFile(ctx context.Context, in *CreateFileInput, opts ...grpc.CallOption) (*CreateFileOutput, error) {
	out := new(CreateFileOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) UpdateFile(ctx context.Context, in *UpdateFileInput, opts ...grpc.CallOption) (*UpdateFileOutput, error) {
	out := new(UpdateFileOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) DeleteFile(ctx context.Context, in *DeleteFileInput, opts ...grpc.CallOption) (*DeleteFileOutput, error) {
	out := new(DeleteFileOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error) {
	out := new(StartMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/StartMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error) {
	out := new(UploadPartOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/UploadPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error) {
	out := new(CompleteMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/eolymp.drive.Drive/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriveServer is the server API for Drive service.
// All implementations should embed UnimplementedDriveServer
// for forward compatibility
type DriveServer interface {
	DescribeFile(context.Context, *DescribeFileInput) (*DescribeFileOutput, error)
	ListFiles(context.Context, *ListFilesInput) (*ListFilesOutput, error)
	CreateFile(context.Context, *CreateFileInput) (*CreateFileOutput, error)
	UpdateFile(context.Context, *UpdateFileInput) (*UpdateFileOutput, error)
	DeleteFile(context.Context, *DeleteFileInput) (*DeleteFileOutput, error)
	StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error)
	UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error)
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error)
}

// UnimplementedDriveServer should be embedded to have forward compatible implementations.
type UnimplementedDriveServer struct {
}

func (UnimplementedDriveServer) DescribeFile(context.Context, *DescribeFileInput) (*DescribeFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFile not implemented")
}
func (UnimplementedDriveServer) ListFiles(context.Context, *ListFilesInput) (*ListFilesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedDriveServer) CreateFile(context.Context, *CreateFileInput) (*CreateFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedDriveServer) UpdateFile(context.Context, *UpdateFileInput) (*UpdateFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedDriveServer) DeleteFile(context.Context, *DeleteFileInput) (*DeleteFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDriveServer) StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultipartUpload not implemented")
}
func (UnimplementedDriveServer) UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedDriveServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}

// UnsafeDriveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriveServer will
// result in compilation errors.
type UnsafeDriveServer interface {
	mustEmbedUnimplementedDriveServer()
}

func RegisterDriveServer(s grpc.ServiceRegistrar, srv DriveServer) {
	s.RegisterService(&Drive_ServiceDesc, srv)
}

func _Drive_DescribeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).DescribeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/DescribeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).DescribeFile(ctx, req.(*DescribeFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).ListFiles(ctx, req.(*ListFilesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).CreateFile(ctx, req.(*CreateFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).UpdateFile(ctx, req.(*UpdateFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).DeleteFile(ctx, req.(*DeleteFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_StartMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).StartMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/StartMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).StartMultipartUpload(ctx, req.(*StartMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/UploadPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).UploadPart(ctx, req.(*UploadPartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drive_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.drive.Drive/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Drive_ServiceDesc is the grpc.ServiceDesc for Drive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.drive.Drive",
	HandlerType: (*DriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeFile",
			Handler:    _Drive_DescribeFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Drive_ListFiles_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _Drive_CreateFile_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _Drive_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Drive_DeleteFile_Handler,
		},
		{
			MethodName: "StartMultipartUpload",
			Handler:    _Drive_StartMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _Drive_UploadPart_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _Drive_CompleteMultipartUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/drive/drive.proto",
}
