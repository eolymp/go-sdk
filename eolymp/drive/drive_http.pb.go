// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package drive

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Drive_HTTPReadQueryString parses body into proto.Message
func _Drive_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Drive_HTTPReadRequestBody parses body into proto.Message
func _Drive_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Drive_HTTPWriteResponse writes proto.Message to HTTP response
func _Drive_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Drive_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Drive_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Drive_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterDriveHttpHandlers adds handlers for for DriveServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterDriveHttpHandlers(router *mux.Router, prefix string, srv DriveServer) {
	router.Handle(prefix+"/files", _Drive_UploadFile_Rule0(srv)).
		Methods("POST").
		Name("eolymp.drive.Drive.UploadFile")
	router.Handle(prefix+"/files/{file_id}", _Drive_DescribeFile_Rule0(srv)).
		Methods("GET").
		Name("eolymp.drive.Drive.DescribeFile")
	router.Handle(prefix+"/files", _Drive_ListFiles_Rule0(srv)).
		Methods("GET").
		Name("eolymp.drive.Drive.ListFiles")
	router.Handle(prefix+"/files/{file_id}", _Drive_UpdateFile_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.drive.Drive.UpdateFile")
	router.Handle(prefix+"/files/{file_id}", _Drive_DeleteFile_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.drive.Drive.DeleteFile")
	router.Handle(prefix+"/uploads", _Drive_StartMultipartUpload_Rule0(srv)).
		Methods("POST").
		Name("eolymp.drive.Drive.StartMultipartUpload")
	router.Handle(prefix+"/uploads/{upload_id}", _Drive_UploadPart_Rule0(srv)).
		Methods("POST").
		Name("eolymp.drive.Drive.UploadPart")
	router.Handle(prefix+"/uploads/{upload_id}", _Drive_CompleteMultipartUpload_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.drive.Drive.CompleteMultipartUpload")
}

func _Drive_UploadFile_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadFileInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UploadFile(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_DescribeFile_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeFileInput{}

		if err := _Drive_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FileId = vars["file_id"]

		out, err := srv.DescribeFile(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_ListFiles_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListFilesInput{}

		if err := _Drive_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListFiles(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_UpdateFile_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateFileInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FileId = vars["file_id"]

		out, err := srv.UpdateFile(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_DeleteFile_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteFileInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FileId = vars["file_id"]

		out, err := srv.DeleteFile(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_StartMultipartUpload_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartMultipartUploadInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartMultipartUpload(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_UploadPart_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadPartInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UploadId = vars["upload_id"]

		out, err := srv.UploadPart(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

func _Drive_CompleteMultipartUpload_Rule0(srv DriveServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CompleteMultipartUploadInput{}

		if err := _Drive_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UploadId = vars["upload_id"]

		out, err := srv.CompleteMultipartUpload(r.Context(), in)
		if err != nil {
			_Drive_HTTPWriteErrorResponse(w, err)
			return
		}

		_Drive_HTTPWriteResponse(w, out)
	})
}

type _DriveHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _DriveMiddleware = func(ctx context.Context, method string, in proto.Message, handler _DriveHandler) (out proto.Message, err error)
type DriveInterceptor struct {
	middleware []_DriveMiddleware
	server     DriveServer
}

// NewDriveInterceptor constructs additional middleware for a server based on annotations in proto files
func NewDriveInterceptor(srv DriveServer, middleware ..._DriveMiddleware) *DriveInterceptor {
	return &DriveInterceptor{server: srv, middleware: middleware}
}

func (i *DriveInterceptor) UploadFile(ctx context.Context, in *UploadFileInput) (*UploadFileOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UploadFileInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UploadFileInput, got %T", in))
		}

		return i.server.UploadFile(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.UploadFile", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UploadFileOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UploadFileOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) DescribeFile(ctx context.Context, in *DescribeFileInput) (*DescribeFileOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeFileInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeFileInput, got %T", in))
		}

		return i.server.DescribeFile(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.DescribeFile", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeFileOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeFileOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) ListFiles(ctx context.Context, in *ListFilesInput) (*ListFilesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListFilesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListFilesInput, got %T", in))
		}

		return i.server.ListFiles(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.ListFiles", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListFilesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListFilesOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) UpdateFile(ctx context.Context, in *UpdateFileInput) (*UpdateFileOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateFileInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateFileInput, got %T", in))
		}

		return i.server.UpdateFile(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.UpdateFile", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateFileOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateFileOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) DeleteFile(ctx context.Context, in *DeleteFileInput) (*DeleteFileOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteFileInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteFileInput, got %T", in))
		}

		return i.server.DeleteFile(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.DeleteFile", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteFileOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteFileOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput) (*StartMultipartUploadOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*StartMultipartUploadInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *StartMultipartUploadInput, got %T", in))
		}

		return i.server.StartMultipartUpload(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.StartMultipartUpload", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*StartMultipartUploadOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *StartMultipartUploadOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) UploadPart(ctx context.Context, in *UploadPartInput) (*UploadPartOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UploadPartInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UploadPartInput, got %T", in))
		}

		return i.server.UploadPart(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.UploadPart", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UploadPartOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UploadPartOutput, got %T", out))
	}

	return message, err
}

func (i *DriveInterceptor) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CompleteMultipartUploadInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CompleteMultipartUploadInput, got %T", in))
		}

		return i.server.CompleteMultipartUpload(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.drive.Drive.CompleteMultipartUpload", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CompleteMultipartUploadOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CompleteMultipartUploadOutput, got %T", out))
	}

	return message, err
}
