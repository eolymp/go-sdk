// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/community/ranking_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RankingService_CreateRankingEvent_FullMethodName   = "/eolymp.community.RankingService/CreateRankingEvent"
	RankingService_UpdateRankingEvent_FullMethodName   = "/eolymp.community.RankingService/UpdateRankingEvent"
	RankingService_DeleteRankingEvent_FullMethodName   = "/eolymp.community.RankingService/DeleteRankingEvent"
	RankingService_DescribeRankingEvent_FullMethodName = "/eolymp.community.RankingService/DescribeRankingEvent"
	RankingService_ListRankingEvents_FullMethodName    = "/eolymp.community.RankingService/ListRankingEvents"
	RankingService_UpdateRankingPoint_FullMethodName   = "/eolymp.community.RankingService/UpdateRankingPoint"
	RankingService_DeleteRankingPoint_FullMethodName   = "/eolymp.community.RankingService/DeleteRankingPoint"
	RankingService_DescribeRankingPoint_FullMethodName = "/eolymp.community.RankingService/DescribeRankingPoint"
	RankingService_ListRankingPoints_FullMethodName    = "/eolymp.community.RankingService/ListRankingPoints"
)

// RankingServiceClient is the client API for RankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankingServiceClient interface {
	CreateRankingEvent(ctx context.Context, in *CreateRankingEventInput, opts ...grpc.CallOption) (*CreateRankingEventOutput, error)
	UpdateRankingEvent(ctx context.Context, in *UpdateRankingEventInput, opts ...grpc.CallOption) (*UpdateRankingEventOutput, error)
	DeleteRankingEvent(ctx context.Context, in *DeleteRankingEventInput, opts ...grpc.CallOption) (*DeleteRankingEventOutput, error)
	DescribeRankingEvent(ctx context.Context, in *DescribeRankingEventInput, opts ...grpc.CallOption) (*DescribeRankingEventOutput, error)
	ListRankingEvents(ctx context.Context, in *ListRankingEventsInput, opts ...grpc.CallOption) (*ListRankingEventsOutput, error)
	UpdateRankingPoint(ctx context.Context, in *UpdateRankingPointInput, opts ...grpc.CallOption) (*UpdateRankingPointOutput, error)
	DeleteRankingPoint(ctx context.Context, in *DeleteRankingPointInput, opts ...grpc.CallOption) (*DeleteRankingPointOutput, error)
	DescribeRankingPoint(ctx context.Context, in *DescribeRankingPointInput, opts ...grpc.CallOption) (*DescribeRankingPointOutput, error)
	ListRankingPoints(ctx context.Context, in *ListRankingPointsInput, opts ...grpc.CallOption) (*ListRankingPointsOutput, error)
}

type rankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankingServiceClient(cc grpc.ClientConnInterface) RankingServiceClient {
	return &rankingServiceClient{cc}
}

func (c *rankingServiceClient) CreateRankingEvent(ctx context.Context, in *CreateRankingEventInput, opts ...grpc.CallOption) (*CreateRankingEventOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRankingEventOutput)
	err := c.cc.Invoke(ctx, RankingService_CreateRankingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) UpdateRankingEvent(ctx context.Context, in *UpdateRankingEventInput, opts ...grpc.CallOption) (*UpdateRankingEventOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRankingEventOutput)
	err := c.cc.Invoke(ctx, RankingService_UpdateRankingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteRankingEvent(ctx context.Context, in *DeleteRankingEventInput, opts ...grpc.CallOption) (*DeleteRankingEventOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRankingEventOutput)
	err := c.cc.Invoke(ctx, RankingService_DeleteRankingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DescribeRankingEvent(ctx context.Context, in *DescribeRankingEventInput, opts ...grpc.CallOption) (*DescribeRankingEventOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRankingEventOutput)
	err := c.cc.Invoke(ctx, RankingService_DescribeRankingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) ListRankingEvents(ctx context.Context, in *ListRankingEventsInput, opts ...grpc.CallOption) (*ListRankingEventsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRankingEventsOutput)
	err := c.cc.Invoke(ctx, RankingService_ListRankingEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) UpdateRankingPoint(ctx context.Context, in *UpdateRankingPointInput, opts ...grpc.CallOption) (*UpdateRankingPointOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRankingPointOutput)
	err := c.cc.Invoke(ctx, RankingService_UpdateRankingPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DeleteRankingPoint(ctx context.Context, in *DeleteRankingPointInput, opts ...grpc.CallOption) (*DeleteRankingPointOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRankingPointOutput)
	err := c.cc.Invoke(ctx, RankingService_DeleteRankingPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) DescribeRankingPoint(ctx context.Context, in *DescribeRankingPointInput, opts ...grpc.CallOption) (*DescribeRankingPointOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRankingPointOutput)
	err := c.cc.Invoke(ctx, RankingService_DescribeRankingPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingServiceClient) ListRankingPoints(ctx context.Context, in *ListRankingPointsInput, opts ...grpc.CallOption) (*ListRankingPointsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRankingPointsOutput)
	err := c.cc.Invoke(ctx, RankingService_ListRankingPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingServiceServer is the server API for RankingService service.
// All implementations should embed UnimplementedRankingServiceServer
// for forward compatibility
type RankingServiceServer interface {
	CreateRankingEvent(context.Context, *CreateRankingEventInput) (*CreateRankingEventOutput, error)
	UpdateRankingEvent(context.Context, *UpdateRankingEventInput) (*UpdateRankingEventOutput, error)
	DeleteRankingEvent(context.Context, *DeleteRankingEventInput) (*DeleteRankingEventOutput, error)
	DescribeRankingEvent(context.Context, *DescribeRankingEventInput) (*DescribeRankingEventOutput, error)
	ListRankingEvents(context.Context, *ListRankingEventsInput) (*ListRankingEventsOutput, error)
	UpdateRankingPoint(context.Context, *UpdateRankingPointInput) (*UpdateRankingPointOutput, error)
	DeleteRankingPoint(context.Context, *DeleteRankingPointInput) (*DeleteRankingPointOutput, error)
	DescribeRankingPoint(context.Context, *DescribeRankingPointInput) (*DescribeRankingPointOutput, error)
	ListRankingPoints(context.Context, *ListRankingPointsInput) (*ListRankingPointsOutput, error)
}

// UnimplementedRankingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRankingServiceServer struct {
}

func (UnimplementedRankingServiceServer) CreateRankingEvent(context.Context, *CreateRankingEventInput) (*CreateRankingEventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRankingEvent not implemented")
}
func (UnimplementedRankingServiceServer) UpdateRankingEvent(context.Context, *UpdateRankingEventInput) (*UpdateRankingEventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRankingEvent not implemented")
}
func (UnimplementedRankingServiceServer) DeleteRankingEvent(context.Context, *DeleteRankingEventInput) (*DeleteRankingEventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRankingEvent not implemented")
}
func (UnimplementedRankingServiceServer) DescribeRankingEvent(context.Context, *DescribeRankingEventInput) (*DescribeRankingEventOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRankingEvent not implemented")
}
func (UnimplementedRankingServiceServer) ListRankingEvents(context.Context, *ListRankingEventsInput) (*ListRankingEventsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRankingEvents not implemented")
}
func (UnimplementedRankingServiceServer) UpdateRankingPoint(context.Context, *UpdateRankingPointInput) (*UpdateRankingPointOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRankingPoint not implemented")
}
func (UnimplementedRankingServiceServer) DeleteRankingPoint(context.Context, *DeleteRankingPointInput) (*DeleteRankingPointOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRankingPoint not implemented")
}
func (UnimplementedRankingServiceServer) DescribeRankingPoint(context.Context, *DescribeRankingPointInput) (*DescribeRankingPointOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRankingPoint not implemented")
}
func (UnimplementedRankingServiceServer) ListRankingPoints(context.Context, *ListRankingPointsInput) (*ListRankingPointsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRankingPoints not implemented")
}

// UnsafeRankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankingServiceServer will
// result in compilation errors.
type UnsafeRankingServiceServer interface {
	mustEmbedUnimplementedRankingServiceServer()
}

func RegisterRankingServiceServer(s grpc.ServiceRegistrar, srv RankingServiceServer) {
	s.RegisterService(&RankingService_ServiceDesc, srv)
}

func _RankingService_CreateRankingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRankingEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).CreateRankingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_CreateRankingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).CreateRankingEvent(ctx, req.(*CreateRankingEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_UpdateRankingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankingEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).UpdateRankingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_UpdateRankingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).UpdateRankingEvent(ctx, req.(*UpdateRankingEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DeleteRankingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRankingEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DeleteRankingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_DeleteRankingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DeleteRankingEvent(ctx, req.(*DeleteRankingEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DescribeRankingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRankingEventInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DescribeRankingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_DescribeRankingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DescribeRankingEvent(ctx, req.(*DescribeRankingEventInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_ListRankingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRankingEventsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).ListRankingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_ListRankingEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).ListRankingEvents(ctx, req.(*ListRankingEventsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_UpdateRankingPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankingPointInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).UpdateRankingPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_UpdateRankingPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).UpdateRankingPoint(ctx, req.(*UpdateRankingPointInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DeleteRankingPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRankingPointInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DeleteRankingPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_DeleteRankingPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DeleteRankingPoint(ctx, req.(*DeleteRankingPointInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_DescribeRankingPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRankingPointInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).DescribeRankingPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_DescribeRankingPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).DescribeRankingPoint(ctx, req.(*DescribeRankingPointInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankingService_ListRankingPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRankingPointsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).ListRankingPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankingService_ListRankingPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).ListRankingPoints(ctx, req.(*ListRankingPointsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// RankingService_ServiceDesc is the grpc.ServiceDesc for RankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.RankingService",
	HandlerType: (*RankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRankingEvent",
			Handler:    _RankingService_CreateRankingEvent_Handler,
		},
		{
			MethodName: "UpdateRankingEvent",
			Handler:    _RankingService_UpdateRankingEvent_Handler,
		},
		{
			MethodName: "DeleteRankingEvent",
			Handler:    _RankingService_DeleteRankingEvent_Handler,
		},
		{
			MethodName: "DescribeRankingEvent",
			Handler:    _RankingService_DescribeRankingEvent_Handler,
		},
		{
			MethodName: "ListRankingEvents",
			Handler:    _RankingService_ListRankingEvents_Handler,
		},
		{
			MethodName: "UpdateRankingPoint",
			Handler:    _RankingService_UpdateRankingPoint_Handler,
		},
		{
			MethodName: "DeleteRankingPoint",
			Handler:    _RankingService_DeleteRankingPoint_Handler,
		},
		{
			MethodName: "DescribeRankingPoint",
			Handler:    _RankingService_DescribeRankingPoint_Handler,
		},
		{
			MethodName: "ListRankingPoints",
			Handler:    _RankingService_ListRankingPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/ranking_service.proto",
}
