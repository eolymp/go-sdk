// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package community

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _AttributeService_HTTPReadQueryString parses body into proto.Message
func _AttributeService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _AttributeService_HTTPReadRequestBody parses body into proto.Message
func _AttributeService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _AttributeService_HTTPWriteResponse writes proto.Message to HTTP response
func _AttributeService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_AttributeService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _AttributeService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _AttributeService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterAttributeServiceHttpHandlers adds handlers for for AttributeServiceClient
func RegisterAttributeServiceHttpHandlers(router *mux.Router, prefix string, cli AttributeServiceClient) {
	router.Handle(prefix+"/attributes", _AttributeService_CreateAttribute_Rule0(cli)).
		Methods("POST").
		Name("eolymp.community.AttributeService.CreateAttribute")
	router.Handle(prefix+"/attributes/{attribute_key}", _AttributeService_UpdateAttribute_Rule0(cli)).
		Methods("POST").
		Name("eolymp.community.AttributeService.UpdateAttribute")
	router.Handle(prefix+"/attributes/{attribute_key}", _AttributeService_RemoveAttribute_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.community.AttributeService.RemoveAttribute")
	router.Handle(prefix+"/attributes/{attribute_key}", _AttributeService_DescribeAttribute_Rule0(cli)).
		Methods("GET").
		Name("eolymp.community.AttributeService.DescribeAttribute")
	router.Handle(prefix+"/attributes", _AttributeService_ListAttributes_Rule0(cli)).
		Methods("GET").
		Name("eolymp.community.AttributeService.ListAttributes")
}

// RegisterAttributeServiceHttpProxy adds proxy handlers for for AttributeServiceClient
func RegisterAttributeServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterAttributeServiceHttpHandlers(router, prefix, NewAttributeServiceClient(conn))
}

func _AttributeService_CreateAttribute_Rule0(cli AttributeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAttributeInput{}

		if err := _AttributeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateAttribute(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttributeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _AttributeService_UpdateAttribute_Rule0(cli AttributeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAttributeInput{}

		if err := _AttributeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttributeKey = vars["attribute_key"]

		var header, trailer metadata.MD

		out, err := cli.UpdateAttribute(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttributeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _AttributeService_RemoveAttribute_Rule0(cli AttributeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveAttributeInput{}

		if err := _AttributeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttributeKey = vars["attribute_key"]

		var header, trailer metadata.MD

		out, err := cli.RemoveAttribute(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttributeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _AttributeService_DescribeAttribute_Rule0(cli AttributeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAttributeInput{}

		if err := _AttributeService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttributeKey = vars["attribute_key"]

		var header, trailer metadata.MD

		out, err := cli.DescribeAttribute(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttributeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _AttributeService_ListAttributes_Rule0(cli AttributeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttributesInput{}

		if err := _AttributeService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListAttributes(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_AttributeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttributeService_HTTPWriteResponse(w, out, header, trailer)
	})
}
