// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: eolymp/community/community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	// Add yourself to the space
	JoinSpace(ctx context.Context, in *JoinSpaceInput, opts ...grpc.CallOption) (*JoinSpaceOutput, error)
	// Remove yourself from the space
	LeaveSpace(ctx context.Context, in *LeaveSpaceInput, opts ...grpc.CallOption) (*LeaveSpaceOutput, error)
	// Update registration data (attribute values) about yourself
	RegisterMember(ctx context.Context, in *RegisterMemberInput, opts ...grpc.CallOption) (*RegisterMemberOutput, error)
	// Introspect member data
	IntrospectMember(ctx context.Context, in *IntrospectMemberInput, opts ...grpc.CallOption) (*IntrospectMemberOutput, error)
	AddMember(ctx context.Context, in *AddMemberInput, opts ...grpc.CallOption) (*AddMemberOutput, error)
	UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error)
	RemoveMember(ctx context.Context, in *RemoveMemberInput, opts ...grpc.CallOption) (*RemoveMemberOutput, error)
	DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error)
	ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error)
	AddAttribute(ctx context.Context, in *AddAttributeInput, opts ...grpc.CallOption) (*AddAttributeOutput, error)
	UpdateAttribute(ctx context.Context, in *UpdateAttributeInput, opts ...grpc.CallOption) (*UpdateAttributeOutput, error)
	RemoveAttribute(ctx context.Context, in *RemoveAttributeInput, opts ...grpc.CallOption) (*RemoveAttributeOutput, error)
	DescribeAttribute(ctx context.Context, in *DescribeAttributeInput, opts ...grpc.CallOption) (*DescribeAttributeOutput, error)
	ListAttributes(ctx context.Context, in *ListAttributesInput, opts ...grpc.CallOption) (*ListAttributesOutput, error)
	// Describe identity provider configuration
	DescribeIdentityProvider(ctx context.Context, in *DescribeIdentityProviderInput, opts ...grpc.CallOption) (*DescribeIdentityProviderOutput, error)
	// Update identity provider configuration
	ConfigureIdentityProvider(ctx context.Context, in *ConfigureIdentityProviderInput, opts ...grpc.CallOption) (*ConfigureIdentityProviderOutput, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) JoinSpace(ctx context.Context, in *JoinSpaceInput, opts ...grpc.CallOption) (*JoinSpaceOutput, error) {
	out := new(JoinSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/JoinSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) LeaveSpace(ctx context.Context, in *LeaveSpaceInput, opts ...grpc.CallOption) (*LeaveSpaceOutput, error) {
	out := new(LeaveSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/LeaveSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) RegisterMember(ctx context.Context, in *RegisterMemberInput, opts ...grpc.CallOption) (*RegisterMemberOutput, error) {
	out := new(RegisterMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/RegisterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) IntrospectMember(ctx context.Context, in *IntrospectMemberInput, opts ...grpc.CallOption) (*IntrospectMemberOutput, error) {
	out := new(IntrospectMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/IntrospectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddMember(ctx context.Context, in *AddMemberInput, opts ...grpc.CallOption) (*AddMemberOutput, error) {
	out := new(AddMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error) {
	out := new(UpdateMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) RemoveMember(ctx context.Context, in *RemoveMemberInput, opts ...grpc.CallOption) (*RemoveMemberOutput, error) {
	out := new(RemoveMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error) {
	out := new(DescribeMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/DescribeMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error) {
	out := new(ListMembersOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddAttribute(ctx context.Context, in *AddAttributeInput, opts ...grpc.CallOption) (*AddAttributeOutput, error) {
	out := new(AddAttributeOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/AddAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateAttribute(ctx context.Context, in *UpdateAttributeInput, opts ...grpc.CallOption) (*UpdateAttributeOutput, error) {
	out := new(UpdateAttributeOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/UpdateAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) RemoveAttribute(ctx context.Context, in *RemoveAttributeInput, opts ...grpc.CallOption) (*RemoveAttributeOutput, error) {
	out := new(RemoveAttributeOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/RemoveAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) DescribeAttribute(ctx context.Context, in *DescribeAttributeInput, opts ...grpc.CallOption) (*DescribeAttributeOutput, error) {
	out := new(DescribeAttributeOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/DescribeAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ListAttributes(ctx context.Context, in *ListAttributesInput, opts ...grpc.CallOption) (*ListAttributesOutput, error) {
	out := new(ListAttributesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/ListAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) DescribeIdentityProvider(ctx context.Context, in *DescribeIdentityProviderInput, opts ...grpc.CallOption) (*DescribeIdentityProviderOutput, error) {
	out := new(DescribeIdentityProviderOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/DescribeIdentityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ConfigureIdentityProvider(ctx context.Context, in *ConfigureIdentityProviderInput, opts ...grpc.CallOption) (*ConfigureIdentityProviderOutput, error) {
	out := new(ConfigureIdentityProviderOutput)
	err := c.cc.Invoke(ctx, "/eolymp.community.Community/ConfigureIdentityProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations should embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	// Add yourself to the space
	JoinSpace(context.Context, *JoinSpaceInput) (*JoinSpaceOutput, error)
	// Remove yourself from the space
	LeaveSpace(context.Context, *LeaveSpaceInput) (*LeaveSpaceOutput, error)
	// Update registration data (attribute values) about yourself
	RegisterMember(context.Context, *RegisterMemberInput) (*RegisterMemberOutput, error)
	// Introspect member data
	IntrospectMember(context.Context, *IntrospectMemberInput) (*IntrospectMemberOutput, error)
	AddMember(context.Context, *AddMemberInput) (*AddMemberOutput, error)
	UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error)
	RemoveMember(context.Context, *RemoveMemberInput) (*RemoveMemberOutput, error)
	DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error)
	ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error)
	AddAttribute(context.Context, *AddAttributeInput) (*AddAttributeOutput, error)
	UpdateAttribute(context.Context, *UpdateAttributeInput) (*UpdateAttributeOutput, error)
	RemoveAttribute(context.Context, *RemoveAttributeInput) (*RemoveAttributeOutput, error)
	DescribeAttribute(context.Context, *DescribeAttributeInput) (*DescribeAttributeOutput, error)
	ListAttributes(context.Context, *ListAttributesInput) (*ListAttributesOutput, error)
	// Describe identity provider configuration
	DescribeIdentityProvider(context.Context, *DescribeIdentityProviderInput) (*DescribeIdentityProviderOutput, error)
	// Update identity provider configuration
	ConfigureIdentityProvider(context.Context, *ConfigureIdentityProviderInput) (*ConfigureIdentityProviderOutput, error)
}

// UnimplementedCommunityServer should be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) JoinSpace(context.Context, *JoinSpaceInput) (*JoinSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSpace not implemented")
}
func (UnimplementedCommunityServer) LeaveSpace(context.Context, *LeaveSpaceInput) (*LeaveSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSpace not implemented")
}
func (UnimplementedCommunityServer) RegisterMember(context.Context, *RegisterMemberInput) (*RegisterMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMember not implemented")
}
func (UnimplementedCommunityServer) IntrospectMember(context.Context, *IntrospectMemberInput) (*IntrospectMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectMember not implemented")
}
func (UnimplementedCommunityServer) AddMember(context.Context, *AddMemberInput) (*AddMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedCommunityServer) UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedCommunityServer) RemoveMember(context.Context, *RemoveMemberInput) (*RemoveMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedCommunityServer) DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMember not implemented")
}
func (UnimplementedCommunityServer) ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedCommunityServer) AddAttribute(context.Context, *AddAttributeInput) (*AddAttributeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttribute not implemented")
}
func (UnimplementedCommunityServer) UpdateAttribute(context.Context, *UpdateAttributeInput) (*UpdateAttributeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttribute not implemented")
}
func (UnimplementedCommunityServer) RemoveAttribute(context.Context, *RemoveAttributeInput) (*RemoveAttributeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAttribute not implemented")
}
func (UnimplementedCommunityServer) DescribeAttribute(context.Context, *DescribeAttributeInput) (*DescribeAttributeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAttribute not implemented")
}
func (UnimplementedCommunityServer) ListAttributes(context.Context, *ListAttributesInput) (*ListAttributesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttributes not implemented")
}
func (UnimplementedCommunityServer) DescribeIdentityProvider(context.Context, *DescribeIdentityProviderInput) (*DescribeIdentityProviderOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIdentityProvider not implemented")
}
func (UnimplementedCommunityServer) ConfigureIdentityProvider(context.Context, *ConfigureIdentityProviderInput) (*ConfigureIdentityProviderOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureIdentityProvider not implemented")
}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_JoinSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).JoinSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/JoinSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).JoinSpace(ctx, req.(*JoinSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_LeaveSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).LeaveSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/LeaveSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).LeaveSpace(ctx, req.(*LeaveSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_RegisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).RegisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/RegisterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).RegisterMember(ctx, req.(*RegisterMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_IntrospectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).IntrospectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/IntrospectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).IntrospectMember(ctx, req.(*IntrospectMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddMember(ctx, req.(*AddMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateMember(ctx, req.(*UpdateMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).RemoveMember(ctx, req.(*RemoveMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_DescribeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DescribeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/DescribeMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DescribeMember(ctx, req.(*DescribeMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ListMembers(ctx, req.(*ListMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttributeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/AddAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddAttribute(ctx, req.(*AddAttributeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttributeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/UpdateAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateAttribute(ctx, req.(*UpdateAttributeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_RemoveAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAttributeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).RemoveAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/RemoveAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).RemoveAttribute(ctx, req.(*RemoveAttributeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_DescribeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAttributeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DescribeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/DescribeAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DescribeAttribute(ctx, req.(*DescribeAttributeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ListAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttributesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ListAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/ListAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ListAttributes(ctx, req.(*ListAttributesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_DescribeIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIdentityProviderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DescribeIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/DescribeIdentityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DescribeIdentityProvider(ctx, req.(*DescribeIdentityProviderInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ConfigureIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureIdentityProviderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ConfigureIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.community.Community/ConfigureIdentityProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ConfigureIdentityProvider(ctx, req.(*ConfigureIdentityProviderInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinSpace",
			Handler:    _Community_JoinSpace_Handler,
		},
		{
			MethodName: "LeaveSpace",
			Handler:    _Community_LeaveSpace_Handler,
		},
		{
			MethodName: "RegisterMember",
			Handler:    _Community_RegisterMember_Handler,
		},
		{
			MethodName: "IntrospectMember",
			Handler:    _Community_IntrospectMember_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Community_AddMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Community_UpdateMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Community_RemoveMember_Handler,
		},
		{
			MethodName: "DescribeMember",
			Handler:    _Community_DescribeMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Community_ListMembers_Handler,
		},
		{
			MethodName: "AddAttribute",
			Handler:    _Community_AddAttribute_Handler,
		},
		{
			MethodName: "UpdateAttribute",
			Handler:    _Community_UpdateAttribute_Handler,
		},
		{
			MethodName: "RemoveAttribute",
			Handler:    _Community_RemoveAttribute_Handler,
		},
		{
			MethodName: "DescribeAttribute",
			Handler:    _Community_DescribeAttribute_Handler,
		},
		{
			MethodName: "ListAttributes",
			Handler:    _Community_ListAttributes_Handler,
		},
		{
			MethodName: "DescribeIdentityProvider",
			Handler:    _Community_DescribeIdentityProvider_Handler,
		},
		{
			MethodName: "ConfigureIdentityProvider",
			Handler:    _Community_ConfigureIdentityProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/community.proto",
}
