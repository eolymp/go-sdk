// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-mcp for more details.

package community

import (
	context "context"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
)

type _MemberServiceMCPServer interface {
	AddTool(name, desc string, confirm bool, namespaces []string, in, out proto.Message, handler func(context.Context, []byte) (any, error))
}

// RegisterMemberServiceMCPTools registers tools for MemberService
func RegisterMemberServiceMCPTools(mcp _MemberServiceMCPServer, srv MemberServiceClient) {
	mcp.AddTool("community.update_member", "Modify member by ID", false, []string{"eolymp.universe.Space"}, &UpdateMemberInput{}, &UpdateMemberOutput{}, _mcp_MemberService_UpdateMember(srv))
	mcp.AddTool("community.list_members", "Find members matching criteria", false, []string{"eolymp.universe.Space"}, &ListMembersInput{}, &ListMembersOutput{}, _mcp_MemberService_ListMembers(srv))
}

func _mcp_MemberService_UpdateMember(srv MemberServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &UpdateMemberInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.UpdateMember(ctx, in)
	}
}
func _mcp_MemberService_ListMembers(srv MemberServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &ListMembersInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.ListMembers(ctx, in)
	}
}
