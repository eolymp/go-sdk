// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/community/linked_account_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinkedAccountService_RequestLinkedAccount_FullMethodName  = "/eolymp.community.LinkedAccountService/RequestLinkedAccount"
	LinkedAccountService_CreateLinkedAccount_FullMethodName   = "/eolymp.community.LinkedAccountService/CreateLinkedAccount"
	LinkedAccountService_DeleteLinkedAccount_FullMethodName   = "/eolymp.community.LinkedAccountService/DeleteLinkedAccount"
	LinkedAccountService_DescribeLinkedAccount_FullMethodName = "/eolymp.community.LinkedAccountService/DescribeLinkedAccount"
	LinkedAccountService_ListLinkedAccounts_FullMethodName    = "/eolymp.community.LinkedAccountService/ListLinkedAccounts"
)

// LinkedAccountServiceClient is the client API for LinkedAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LinkedAccountService provides API to manage linked accounts.
type LinkedAccountServiceClient interface {
	RequestLinkedAccount(ctx context.Context, in *RequestLinkedAccountInput, opts ...grpc.CallOption) (*RequestLinkedAccountOutput, error)
	CreateLinkedAccount(ctx context.Context, in *CreateLinkedAccountInput, opts ...grpc.CallOption) (*CreateLinkedAccountOutput, error)
	DeleteLinkedAccount(ctx context.Context, in *DeleteLinkedAccountInput, opts ...grpc.CallOption) (*DeleteLinkedAccountOutput, error)
	DescribeLinkedAccount(ctx context.Context, in *DescribeLinkedAccountInput, opts ...grpc.CallOption) (*DescribeLinkedAccountOutput, error)
	ListLinkedAccounts(ctx context.Context, in *ListLinkedAccountsInput, opts ...grpc.CallOption) (*ListLinkedAccountsOutput, error)
}

type linkedAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedAccountServiceClient(cc grpc.ClientConnInterface) LinkedAccountServiceClient {
	return &linkedAccountServiceClient{cc}
}

func (c *linkedAccountServiceClient) RequestLinkedAccount(ctx context.Context, in *RequestLinkedAccountInput, opts ...grpc.CallOption) (*RequestLinkedAccountOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestLinkedAccountOutput)
	err := c.cc.Invoke(ctx, LinkedAccountService_RequestLinkedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) CreateLinkedAccount(ctx context.Context, in *CreateLinkedAccountInput, opts ...grpc.CallOption) (*CreateLinkedAccountOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLinkedAccountOutput)
	err := c.cc.Invoke(ctx, LinkedAccountService_CreateLinkedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) DeleteLinkedAccount(ctx context.Context, in *DeleteLinkedAccountInput, opts ...grpc.CallOption) (*DeleteLinkedAccountOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLinkedAccountOutput)
	err := c.cc.Invoke(ctx, LinkedAccountService_DeleteLinkedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) DescribeLinkedAccount(ctx context.Context, in *DescribeLinkedAccountInput, opts ...grpc.CallOption) (*DescribeLinkedAccountOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeLinkedAccountOutput)
	err := c.cc.Invoke(ctx, LinkedAccountService_DescribeLinkedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedAccountServiceClient) ListLinkedAccounts(ctx context.Context, in *ListLinkedAccountsInput, opts ...grpc.CallOption) (*ListLinkedAccountsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinkedAccountsOutput)
	err := c.cc.Invoke(ctx, LinkedAccountService_ListLinkedAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedAccountServiceServer is the server API for LinkedAccountService service.
// All implementations should embed UnimplementedLinkedAccountServiceServer
// for forward compatibility.
//
// LinkedAccountService provides API to manage linked accounts.
type LinkedAccountServiceServer interface {
	RequestLinkedAccount(context.Context, *RequestLinkedAccountInput) (*RequestLinkedAccountOutput, error)
	CreateLinkedAccount(context.Context, *CreateLinkedAccountInput) (*CreateLinkedAccountOutput, error)
	DeleteLinkedAccount(context.Context, *DeleteLinkedAccountInput) (*DeleteLinkedAccountOutput, error)
	DescribeLinkedAccount(context.Context, *DescribeLinkedAccountInput) (*DescribeLinkedAccountOutput, error)
	ListLinkedAccounts(context.Context, *ListLinkedAccountsInput) (*ListLinkedAccountsOutput, error)
}

// UnimplementedLinkedAccountServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkedAccountServiceServer struct{}

func (UnimplementedLinkedAccountServiceServer) RequestLinkedAccount(context.Context, *RequestLinkedAccountInput) (*RequestLinkedAccountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountServiceServer) CreateLinkedAccount(context.Context, *CreateLinkedAccountInput) (*CreateLinkedAccountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountServiceServer) DeleteLinkedAccount(context.Context, *DeleteLinkedAccountInput) (*DeleteLinkedAccountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountServiceServer) DescribeLinkedAccount(context.Context, *DescribeLinkedAccountInput) (*DescribeLinkedAccountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeLinkedAccount not implemented")
}
func (UnimplementedLinkedAccountServiceServer) ListLinkedAccounts(context.Context, *ListLinkedAccountsInput) (*ListLinkedAccountsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkedAccounts not implemented")
}
func (UnimplementedLinkedAccountServiceServer) testEmbeddedByValue() {}

// UnsafeLinkedAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkedAccountServiceServer will
// result in compilation errors.
type UnsafeLinkedAccountServiceServer interface {
	mustEmbedUnimplementedLinkedAccountServiceServer()
}

func RegisterLinkedAccountServiceServer(s grpc.ServiceRegistrar, srv LinkedAccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedLinkedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkedAccountService_ServiceDesc, srv)
}

func _LinkedAccountService_RequestLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLinkedAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).RequestLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkedAccountService_RequestLinkedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).RequestLinkedAccount(ctx, req.(*RequestLinkedAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_CreateLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkedAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).CreateLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkedAccountService_CreateLinkedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).CreateLinkedAccount(ctx, req.(*CreateLinkedAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_DeleteLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkedAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).DeleteLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkedAccountService_DeleteLinkedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).DeleteLinkedAccount(ctx, req.(*DeleteLinkedAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_DescribeLinkedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeLinkedAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).DescribeLinkedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkedAccountService_DescribeLinkedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).DescribeLinkedAccount(ctx, req.(*DescribeLinkedAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedAccountService_ListLinkedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkedAccountsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedAccountServiceServer).ListLinkedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkedAccountService_ListLinkedAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedAccountServiceServer).ListLinkedAccounts(ctx, req.(*ListLinkedAccountsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkedAccountService_ServiceDesc is the grpc.ServiceDesc for LinkedAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkedAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.LinkedAccountService",
	HandlerType: (*LinkedAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLinkedAccount",
			Handler:    _LinkedAccountService_RequestLinkedAccount_Handler,
		},
		{
			MethodName: "CreateLinkedAccount",
			Handler:    _LinkedAccountService_CreateLinkedAccount_Handler,
		},
		{
			MethodName: "DeleteLinkedAccount",
			Handler:    _LinkedAccountService_DeleteLinkedAccount_Handler,
		},
		{
			MethodName: "DescribeLinkedAccount",
			Handler:    _LinkedAccountService_DescribeLinkedAccount_Handler,
		},
		{
			MethodName: "ListLinkedAccounts",
			Handler:    _LinkedAccountService_ListLinkedAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/linked_account_service.proto",
}
