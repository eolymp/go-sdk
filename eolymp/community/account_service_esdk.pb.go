// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package community

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

type _AccountServiceHttpClient interface {
	Do(*http.Request) (*http.Response, error)
}

type AccountServiceService struct {
	base string
	cli  _AccountServiceHttpClient
}

// NewAccountServiceHttpClient constructs client for AccountService
func NewAccountServiceHttpClient(url string, cli _AccountServiceHttpClient) *AccountServiceService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &AccountServiceService{base: url, cli: cli}
}

func (s *AccountServiceService) do(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	var body io.Reader

	if in != nil {
		data, err := protojson.Marshal(in)
		if err != nil {
			return err
		}

		if verb != "GET" {
			body = bytes.NewReader(data)
		} else {
			query := url.Values{"q": []string{string(data)}}
			path = path + "?" + query.Encode()
		}
	}

	if in == nil && verb != "GET" {
		body = bytes.NewReader([]byte("{}"))
	}

	req, err := http.NewRequest(verb, s.base+path, body)
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *AccountServiceService) CreateAccount(ctx context.Context, in *CreateAccountInput) (*CreateAccountOutput, error) {
	out := &CreateAccountOutput{}
	path := "/account"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) DescribeAccount(ctx context.Context, in *DescribeAccountInput) (*DescribeAccountOutput, error) {
	out := &DescribeAccountOutput{}
	path := "/account"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) UpdateAccount(ctx context.Context, in *UpdateAccountInput) (*UpdateAccountOutput, error) {
	out := &UpdateAccountOutput{}
	path := "/account"

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) UploadPicture(ctx context.Context, in *UploadPictureInput) (*UploadPictureOutput, error) {
	out := &UploadPictureOutput{}
	path := "/account/picture"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) DeleteAccount(ctx context.Context, in *DeleteAccountInput) (*DeleteAccountOutput, error) {
	out := &DeleteAccountOutput{}
	path := "/account"

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) ResendVerification(ctx context.Context, in *ResendVerificationInput) (*ResendVerificationOutput, error) {
	out := &ResendVerificationOutput{}
	path := "/account/verification/resend"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) CompleteVerification(ctx context.Context, in *CompleteVerificationInput) (*CompleteVerificationOutput, error) {
	out := &CompleteVerificationOutput{}
	path := "/account/verification/complete"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) StartRecovery(ctx context.Context, in *StartRecoveryInput) (*StartRecoveryOutput, error) {
	out := &StartRecoveryOutput{}
	path := "/account/recovery/start"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) CompleteRecovery(ctx context.Context, in *CompleteRecoverInput) (*CompleteRecoverOutput, error) {
	out := &CompleteRecoverOutput{}
	path := "/account/recovery/complete"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) DescribeNotificationPreferences(ctx context.Context, in *DescribeNotificationPreferencesInput) (*DescribeNotificationPreferencesOutput, error) {
	out := &DescribeNotificationPreferencesOutput{}
	path := "/account/notifications"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AccountServiceService) UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesInput) (*UpdateNotificationPreferencesOutput, error) {
	out := &UpdateNotificationPreferencesOutput{}
	path := "/account/notifications"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
