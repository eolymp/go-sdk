// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/community/member_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MemberService_CreateMember_FullMethodName        = "/eolymp.community.MemberService/CreateMember"
	MemberService_UpdateMember_FullMethodName        = "/eolymp.community.MemberService/UpdateMember"
	MemberService_DeleteMember_FullMethodName        = "/eolymp.community.MemberService/DeleteMember"
	MemberService_RestoreMember_FullMethodName       = "/eolymp.community.MemberService/RestoreMember"
	MemberService_DescribeMember_FullMethodName      = "/eolymp.community.MemberService/DescribeMember"
	MemberService_ListMembers_FullMethodName         = "/eolymp.community.MemberService/ListMembers"
	MemberService_AssignMember_FullMethodName        = "/eolymp.community.MemberService/AssignMember"
	MemberService_UnassignMember_FullMethodName      = "/eolymp.community.MemberService/UnassignMember"
	MemberService_DescribeMemberUsage_FullMethodName = "/eolymp.community.MemberService/DescribeMemberUsage"
	MemberService_UnsubscribeMember_FullMethodName   = "/eolymp.community.MemberService/UnsubscribeMember"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MemberService provides API to manage space members.
type MemberServiceClient interface {
	CreateMember(ctx context.Context, in *CreateMemberInput, opts ...grpc.CallOption) (*CreateMemberOutput, error)
	UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error)
	DeleteMember(ctx context.Context, in *DeleteMemberInput, opts ...grpc.CallOption) (*DeleteMemberOutput, error)
	RestoreMember(ctx context.Context, in *RestoreMemberInput, opts ...grpc.CallOption) (*RestoreMemberOutput, error)
	DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error)
	ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error)
	AssignMember(ctx context.Context, in *AssignMemberInput, opts ...grpc.CallOption) (*AssignMemberOutput, error)
	UnassignMember(ctx context.Context, in *UnassignMemberInput, opts ...grpc.CallOption) (*UnassignMemberOutput, error)
	DescribeMemberUsage(ctx context.Context, in *DescribeMemberUsageInput, opts ...grpc.CallOption) (*DescribeMemberUsageOutput, error)
	UnsubscribeMember(ctx context.Context, in *UnsubscribeMemberInput, opts ...grpc.CallOption) (*UnsubscribeMemberOutput, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) CreateMember(ctx context.Context, in *CreateMemberInput, opts ...grpc.CallOption) (*CreateMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_CreateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberInput, opts ...grpc.CallOption) (*DeleteMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RestoreMember(ctx context.Context, in *RestoreMemberInput, opts ...grpc.CallOption) (*RestoreMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_RestoreMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_DescribeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersOutput)
	err := c.cc.Invoke(ctx, MemberService_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AssignMember(ctx context.Context, in *AssignMemberInput, opts ...grpc.CallOption) (*AssignMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_AssignMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UnassignMember(ctx context.Context, in *UnassignMemberInput, opts ...grpc.CallOption) (*UnassignMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnassignMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_UnassignMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DescribeMemberUsage(ctx context.Context, in *DescribeMemberUsageInput, opts ...grpc.CallOption) (*DescribeMemberUsageOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeMemberUsageOutput)
	err := c.cc.Invoke(ctx, MemberService_DescribeMemberUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UnsubscribeMember(ctx context.Context, in *UnsubscribeMemberInput, opts ...grpc.CallOption) (*UnsubscribeMemberOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeMemberOutput)
	err := c.cc.Invoke(ctx, MemberService_UnsubscribeMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations should embed UnimplementedMemberServiceServer
// for forward compatibility
//
// MemberService provides API to manage space members.
type MemberServiceServer interface {
	CreateMember(context.Context, *CreateMemberInput) (*CreateMemberOutput, error)
	UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error)
	DeleteMember(context.Context, *DeleteMemberInput) (*DeleteMemberOutput, error)
	RestoreMember(context.Context, *RestoreMemberInput) (*RestoreMemberOutput, error)
	DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error)
	ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error)
	AssignMember(context.Context, *AssignMemberInput) (*AssignMemberOutput, error)
	UnassignMember(context.Context, *UnassignMemberInput) (*UnassignMemberOutput, error)
	DescribeMemberUsage(context.Context, *DescribeMemberUsageInput) (*DescribeMemberUsageOutput, error)
	UnsubscribeMember(context.Context, *UnsubscribeMemberInput) (*UnsubscribeMemberOutput, error)
}

// UnimplementedMemberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) CreateMember(context.Context, *CreateMemberInput) (*CreateMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedMemberServiceServer) UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMember(context.Context, *DeleteMemberInput) (*DeleteMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMemberServiceServer) RestoreMember(context.Context, *RestoreMemberInput) (*RestoreMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMember not implemented")
}
func (UnimplementedMemberServiceServer) DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMember not implemented")
}
func (UnimplementedMemberServiceServer) ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedMemberServiceServer) AssignMember(context.Context, *AssignMemberInput) (*AssignMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMember not implemented")
}
func (UnimplementedMemberServiceServer) UnassignMember(context.Context, *UnassignMemberInput) (*UnassignMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignMember not implemented")
}
func (UnimplementedMemberServiceServer) DescribeMemberUsage(context.Context, *DescribeMemberUsageInput) (*DescribeMemberUsageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMemberUsage not implemented")
}
func (UnimplementedMemberServiceServer) UnsubscribeMember(context.Context, *UnsubscribeMemberInput) (*UnsubscribeMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeMember not implemented")
}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CreateMember(ctx, req.(*CreateMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateMember(ctx, req.(*UpdateMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RestoreMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RestoreMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RestoreMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RestoreMember(ctx, req.(*RestoreMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DescribeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DescribeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DescribeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DescribeMember(ctx, req.(*DescribeMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ListMembers(ctx, req.(*ListMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AssignMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AssignMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AssignMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AssignMember(ctx, req.(*AssignMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UnassignMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UnassignMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UnassignMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UnassignMember(ctx, req.(*UnassignMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DescribeMemberUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMemberUsageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DescribeMemberUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DescribeMemberUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DescribeMemberUsage(ctx, req.(*DescribeMemberUsageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UnsubscribeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UnsubscribeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UnsubscribeMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UnsubscribeMember(ctx, req.(*UnsubscribeMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMember",
			Handler:    _MemberService_CreateMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _MemberService_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _MemberService_DeleteMember_Handler,
		},
		{
			MethodName: "RestoreMember",
			Handler:    _MemberService_RestoreMember_Handler,
		},
		{
			MethodName: "DescribeMember",
			Handler:    _MemberService_DescribeMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _MemberService_ListMembers_Handler,
		},
		{
			MethodName: "AssignMember",
			Handler:    _MemberService_AssignMember_Handler,
		},
		{
			MethodName: "UnassignMember",
			Handler:    _MemberService_UnassignMember_Handler,
		},
		{
			MethodName: "DescribeMemberUsage",
			Handler:    _MemberService_DescribeMemberUsage_Handler,
		},
		{
			MethodName: "UnsubscribeMember",
			Handler:    _MemberService_UnsubscribeMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/member_service.proto",
}
