// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/community/penalty_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PenaltyService_CreatePenalty_FullMethodName   = "/eolymp.community.PenaltyService/CreatePenalty"
	PenaltyService_CancelPenalty_FullMethodName   = "/eolymp.community.PenaltyService/CancelPenalty"
	PenaltyService_DescribePenalty_FullMethodName = "/eolymp.community.PenaltyService/DescribePenalty"
	PenaltyService_ListPenalties_FullMethodName   = "/eolymp.community.PenaltyService/ListPenalties"
)

// PenaltyServiceClient is the client API for PenaltyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PenaltyServiceClient interface {
	CreatePenalty(ctx context.Context, in *CreatePenaltyInput, opts ...grpc.CallOption) (*CreatePenaltyOutput, error)
	CancelPenalty(ctx context.Context, in *CancelPenaltyInput, opts ...grpc.CallOption) (*CancelPenaltyOutput, error)
	DescribePenalty(ctx context.Context, in *DescribePenaltyInput, opts ...grpc.CallOption) (*DescribePenaltyOutput, error)
	ListPenalties(ctx context.Context, in *ListPenaltiesInput, opts ...grpc.CallOption) (*ListPenaltiesOutput, error)
}

type penaltyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPenaltyServiceClient(cc grpc.ClientConnInterface) PenaltyServiceClient {
	return &penaltyServiceClient{cc}
}

func (c *penaltyServiceClient) CreatePenalty(ctx context.Context, in *CreatePenaltyInput, opts ...grpc.CallOption) (*CreatePenaltyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePenaltyOutput)
	err := c.cc.Invoke(ctx, PenaltyService_CreatePenalty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penaltyServiceClient) CancelPenalty(ctx context.Context, in *CancelPenaltyInput, opts ...grpc.CallOption) (*CancelPenaltyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPenaltyOutput)
	err := c.cc.Invoke(ctx, PenaltyService_CancelPenalty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penaltyServiceClient) DescribePenalty(ctx context.Context, in *DescribePenaltyInput, opts ...grpc.CallOption) (*DescribePenaltyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribePenaltyOutput)
	err := c.cc.Invoke(ctx, PenaltyService_DescribePenalty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *penaltyServiceClient) ListPenalties(ctx context.Context, in *ListPenaltiesInput, opts ...grpc.CallOption) (*ListPenaltiesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPenaltiesOutput)
	err := c.cc.Invoke(ctx, PenaltyService_ListPenalties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PenaltyServiceServer is the server API for PenaltyService service.
// All implementations should embed UnimplementedPenaltyServiceServer
// for forward compatibility.
type PenaltyServiceServer interface {
	CreatePenalty(context.Context, *CreatePenaltyInput) (*CreatePenaltyOutput, error)
	CancelPenalty(context.Context, *CancelPenaltyInput) (*CancelPenaltyOutput, error)
	DescribePenalty(context.Context, *DescribePenaltyInput) (*DescribePenaltyOutput, error)
	ListPenalties(context.Context, *ListPenaltiesInput) (*ListPenaltiesOutput, error)
}

// UnimplementedPenaltyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPenaltyServiceServer struct{}

func (UnimplementedPenaltyServiceServer) CreatePenalty(context.Context, *CreatePenaltyInput) (*CreatePenaltyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePenalty not implemented")
}
func (UnimplementedPenaltyServiceServer) CancelPenalty(context.Context, *CancelPenaltyInput) (*CancelPenaltyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPenalty not implemented")
}
func (UnimplementedPenaltyServiceServer) DescribePenalty(context.Context, *DescribePenaltyInput) (*DescribePenaltyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePenalty not implemented")
}
func (UnimplementedPenaltyServiceServer) ListPenalties(context.Context, *ListPenaltiesInput) (*ListPenaltiesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPenalties not implemented")
}
func (UnimplementedPenaltyServiceServer) testEmbeddedByValue() {}

// UnsafePenaltyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PenaltyServiceServer will
// result in compilation errors.
type UnsafePenaltyServiceServer interface {
	mustEmbedUnimplementedPenaltyServiceServer()
}

func RegisterPenaltyServiceServer(s grpc.ServiceRegistrar, srv PenaltyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPenaltyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PenaltyService_ServiceDesc, srv)
}

func _PenaltyService_CreatePenalty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePenaltyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenaltyServiceServer).CreatePenalty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PenaltyService_CreatePenalty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenaltyServiceServer).CreatePenalty(ctx, req.(*CreatePenaltyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenaltyService_CancelPenalty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPenaltyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenaltyServiceServer).CancelPenalty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PenaltyService_CancelPenalty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenaltyServiceServer).CancelPenalty(ctx, req.(*CancelPenaltyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenaltyService_DescribePenalty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePenaltyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenaltyServiceServer).DescribePenalty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PenaltyService_DescribePenalty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenaltyServiceServer).DescribePenalty(ctx, req.(*DescribePenaltyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PenaltyService_ListPenalties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPenaltiesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PenaltyServiceServer).ListPenalties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PenaltyService_ListPenalties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PenaltyServiceServer).ListPenalties(ctx, req.(*ListPenaltiesInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PenaltyService_ServiceDesc is the grpc.ServiceDesc for PenaltyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PenaltyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.PenaltyService",
	HandlerType: (*PenaltyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePenalty",
			Handler:    _PenaltyService_CreatePenalty_Handler,
		},
		{
			MethodName: "CancelPenalty",
			Handler:    _PenaltyService_CancelPenalty_Handler,
		},
		{
			MethodName: "DescribePenalty",
			Handler:    _PenaltyService_DescribePenalty_Handler,
		},
		{
			MethodName: "ListPenalties",
			Handler:    _PenaltyService_ListPenalties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/penalty_service.proto",
}
