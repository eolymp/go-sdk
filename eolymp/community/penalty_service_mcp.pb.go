// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-mcp for more details.

package community

import (
	context "context"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
)

type _PenaltyServiceMCPServer interface {
	AddTool(name, desc string, confirm bool, namespaces []string, in, out proto.Message, handler func(context.Context, []byte) (any, error))
}

// RegisterPenaltyServiceMCPTools registers tools for PenaltyService
func RegisterPenaltyServiceMCPTools(mcp _PenaltyServiceMCPServer, srv PenaltyServiceClient) {
	mcp.AddTool("community.create_penalty", "Create new penalty for a member", true, []string{"eolymp.community.Member"}, &CreatePenaltyInput{}, &CreatePenaltyOutput{}, _mcp_PenaltyService_CreatePenalty(srv))
	mcp.AddTool("community.update_penalty", "Update existing penalty by ID", true, []string{"eolymp.community.Member"}, &UpdatePenaltyInput{}, &UpdatePenaltyOutput{}, _mcp_PenaltyService_UpdatePenalty(srv))
	mcp.AddTool("community.delete_penalty", "Delete penalty by ID", true, []string{"eolymp.community.Member"}, &DeletePenaltyInput{}, &DeletePenaltyOutput{}, _mcp_PenaltyService_DeletePenalty(srv))
	mcp.AddTool("community.list_penalties", "Find penalties for a member", false, []string{"eolymp.community.Member"}, &ListPenaltiesInput{}, &ListPenaltiesOutput{}, _mcp_PenaltyService_ListPenalties(srv))
}

func _mcp_PenaltyService_CreatePenalty(srv PenaltyServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &CreatePenaltyInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.CreatePenalty(ctx, in)
	}
}
func _mcp_PenaltyService_UpdatePenalty(srv PenaltyServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &UpdatePenaltyInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.UpdatePenalty(ctx, in)
	}
}
func _mcp_PenaltyService_DeletePenalty(srv PenaltyServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &DeletePenaltyInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.DeletePenalty(ctx, in)
	}
}
func _mcp_PenaltyService_ListPenalties(srv PenaltyServiceClient) func(ctx context.Context, raw []byte) (any, error) {
	return func(ctx context.Context, raw []byte) (any, error) {
		in := &ListPenaltiesInput{}
		if err := protojson.Unmarshal(raw, in); err != nil {
			return nil, err
		}

		return srv.ListPenalties(ctx, in)
	}
}
