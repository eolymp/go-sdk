// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/community/credit_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditService_DescribeBalance_FullMethodName = "/eolymp.community.CreditService/DescribeBalance"
	CreditService_RecordCredit_FullMethodName    = "/eolymp.community.CreditService/RecordCredit"
	CreditService_DeleteCredit_FullMethodName    = "/eolymp.community.CreditService/DeleteCredit"
	CreditService_ListCredits_FullMethodName     = "/eolymp.community.CreditService/ListCredits"
)

// CreditServiceClient is the client API for CreditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditServiceClient interface {
	DescribeBalance(ctx context.Context, in *DescribeBalanceInput, opts ...grpc.CallOption) (*DescribeBalanceOutput, error)
	RecordCredit(ctx context.Context, in *RecordCreditInput, opts ...grpc.CallOption) (*RecordCreditOutput, error)
	DeleteCredit(ctx context.Context, in *DeleteCreditInput, opts ...grpc.CallOption) (*DeleteCreditOutput, error)
	ListCredits(ctx context.Context, in *ListCreditsInput, opts ...grpc.CallOption) (*ListCreditsOutput, error)
}

type creditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditServiceClient(cc grpc.ClientConnInterface) CreditServiceClient {
	return &creditServiceClient{cc}
}

func (c *creditServiceClient) DescribeBalance(ctx context.Context, in *DescribeBalanceInput, opts ...grpc.CallOption) (*DescribeBalanceOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeBalanceOutput)
	err := c.cc.Invoke(ctx, CreditService_DescribeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) RecordCredit(ctx context.Context, in *RecordCreditInput, opts ...grpc.CallOption) (*RecordCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_RecordCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) DeleteCredit(ctx context.Context, in *DeleteCreditInput, opts ...grpc.CallOption) (*DeleteCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_DeleteCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) ListCredits(ctx context.Context, in *ListCreditsInput, opts ...grpc.CallOption) (*ListCreditsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditsOutput)
	err := c.cc.Invoke(ctx, CreditService_ListCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditServiceServer is the server API for CreditService service.
// All implementations should embed UnimplementedCreditServiceServer
// for forward compatibility.
type CreditServiceServer interface {
	DescribeBalance(context.Context, *DescribeBalanceInput) (*DescribeBalanceOutput, error)
	RecordCredit(context.Context, *RecordCreditInput) (*RecordCreditOutput, error)
	DeleteCredit(context.Context, *DeleteCreditInput) (*DeleteCreditOutput, error)
	ListCredits(context.Context, *ListCreditsInput) (*ListCreditsOutput, error)
}

// UnimplementedCreditServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditServiceServer struct{}

func (UnimplementedCreditServiceServer) DescribeBalance(context.Context, *DescribeBalanceInput) (*DescribeBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBalance not implemented")
}
func (UnimplementedCreditServiceServer) RecordCredit(context.Context, *RecordCreditInput) (*RecordCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCredit not implemented")
}
func (UnimplementedCreditServiceServer) DeleteCredit(context.Context, *DeleteCreditInput) (*DeleteCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredit not implemented")
}
func (UnimplementedCreditServiceServer) ListCredits(context.Context, *ListCreditsInput) (*ListCreditsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredits not implemented")
}
func (UnimplementedCreditServiceServer) testEmbeddedByValue() {}

// UnsafeCreditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditServiceServer will
// result in compilation errors.
type UnsafeCreditServiceServer interface {
	mustEmbedUnimplementedCreditServiceServer()
}

func RegisterCreditServiceServer(s grpc.ServiceRegistrar, srv CreditServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditService_ServiceDesc, srv)
}

func _CreditService_DescribeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).DescribeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_DescribeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).DescribeBalance(ctx, req.(*DescribeBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_RecordCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).RecordCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_RecordCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).RecordCredit(ctx, req.(*RecordCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_DeleteCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).DeleteCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_DeleteCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).DeleteCredit(ctx, req.(*DeleteCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_ListCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).ListCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_ListCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).ListCredits(ctx, req.(*ListCreditsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditService_ServiceDesc is the grpc.ServiceDesc for CreditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.CreditService",
	HandlerType: (*CreditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeBalance",
			Handler:    _CreditService_DescribeBalance_Handler,
		},
		{
			MethodName: "RecordCredit",
			Handler:    _CreditService_RecordCredit_Handler,
		},
		{
			MethodName: "DeleteCredit",
			Handler:    _CreditService_DeleteCredit_Handler,
		},
		{
			MethodName: "ListCredits",
			Handler:    _CreditService_ListCredits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/credit_service.proto",
}
