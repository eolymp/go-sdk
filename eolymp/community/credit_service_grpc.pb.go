// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/community/credit_service.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditService_DescribeBalance_FullMethodName        = "/eolymp.community.CreditService/DescribeBalance"
	CreditService_GrantCredit_FullMethodName            = "/eolymp.community.CreditService/GrantCredit"
	CreditService_CancelCredit_FullMethodName           = "/eolymp.community.CreditService/CancelCredit"
	CreditService_ListCreditGrants_FullMethodName       = "/eolymp.community.CreditService/ListCreditGrants"
	CreditService_RedeemCredit_FullMethodName           = "/eolymp.community.CreditService/RedeemCredit"
	CreditService_ListCreditTransactions_FullMethodName = "/eolymp.community.CreditService/ListCreditTransactions"
	CreditService_RefundCredit_FullMethodName           = "/eolymp.community.CreditService/RefundCredit"
)

// CreditServiceClient is the client API for CreditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CreditService provides methods to manage members "credits", a point based system of rewards.
// Members can be rewarded credits for various actions, and these credits can be redeemed for rewards.
type CreditServiceClient interface {
	// DescribeBalance returns the current balance of credits for a member.
	DescribeBalance(ctx context.Context, in *DescribeBalanceInput, opts ...grpc.CallOption) (*DescribeBalanceOutput, error)
	// GrantCredit grants new credits to a member.
	GrantCredit(ctx context.Context, in *GrantCreditInput, opts ...grpc.CallOption) (*GrantCreditOutput, error)
	// DeleteCredit allows to "erase" credit record.
	// This method should be used in rare cases, when it's necessary to leave no trace of a credit record.
	// Generally and changes in user balance should be done by creating new credit records.
	CancelCredit(ctx context.Context, in *CancelCreditInput, opts ...grpc.CallOption) (*CancelCreditOutput, error)
	// ListCredits returns a list of credit records for a member.
	ListCreditGrants(ctx context.Context, in *ListCreditGrantsInput, opts ...grpc.CallOption) (*ListCreditGrantsOutput, error)
	// RedeemCredit adds a new credit redeem for a member.
	// This can be used to reward a member with credits for specific actions (amount > 0) or redeem credits (amount < 0).
	RedeemCredit(ctx context.Context, in *RedeemCreditInput, opts ...grpc.CallOption) (*RedeemCreditOutput, error)
	// ListCredits returns a list of credit records for a member.
	ListCreditTransactions(ctx context.Context, in *ListCreditTransactionsInput, opts ...grpc.CallOption) (*ListCreditTransactionsOutput, error)
	// RefundCredit refunds a specified amount from a credit record.
	// This creates a new credit record with negative amount to reverse the original credit.
	RefundCredit(ctx context.Context, in *RefundCreditInput, opts ...grpc.CallOption) (*RefundCreditOutput, error)
}

type creditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditServiceClient(cc grpc.ClientConnInterface) CreditServiceClient {
	return &creditServiceClient{cc}
}

func (c *creditServiceClient) DescribeBalance(ctx context.Context, in *DescribeBalanceInput, opts ...grpc.CallOption) (*DescribeBalanceOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeBalanceOutput)
	err := c.cc.Invoke(ctx, CreditService_DescribeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) GrantCredit(ctx context.Context, in *GrantCreditInput, opts ...grpc.CallOption) (*GrantCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_GrantCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) CancelCredit(ctx context.Context, in *CancelCreditInput, opts ...grpc.CallOption) (*CancelCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_CancelCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) ListCreditGrants(ctx context.Context, in *ListCreditGrantsInput, opts ...grpc.CallOption) (*ListCreditGrantsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditGrantsOutput)
	err := c.cc.Invoke(ctx, CreditService_ListCreditGrants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) RedeemCredit(ctx context.Context, in *RedeemCreditInput, opts ...grpc.CallOption) (*RedeemCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_RedeemCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) ListCreditTransactions(ctx context.Context, in *ListCreditTransactionsInput, opts ...grpc.CallOption) (*ListCreditTransactionsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditTransactionsOutput)
	err := c.cc.Invoke(ctx, CreditService_ListCreditTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceClient) RefundCredit(ctx context.Context, in *RefundCreditInput, opts ...grpc.CallOption) (*RefundCreditOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundCreditOutput)
	err := c.cc.Invoke(ctx, CreditService_RefundCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditServiceServer is the server API for CreditService service.
// All implementations should embed UnimplementedCreditServiceServer
// for forward compatibility.
//
// CreditService provides methods to manage members "credits", a point based system of rewards.
// Members can be rewarded credits for various actions, and these credits can be redeemed for rewards.
type CreditServiceServer interface {
	// DescribeBalance returns the current balance of credits for a member.
	DescribeBalance(context.Context, *DescribeBalanceInput) (*DescribeBalanceOutput, error)
	// GrantCredit grants new credits to a member.
	GrantCredit(context.Context, *GrantCreditInput) (*GrantCreditOutput, error)
	// DeleteCredit allows to "erase" credit record.
	// This method should be used in rare cases, when it's necessary to leave no trace of a credit record.
	// Generally and changes in user balance should be done by creating new credit records.
	CancelCredit(context.Context, *CancelCreditInput) (*CancelCreditOutput, error)
	// ListCredits returns a list of credit records for a member.
	ListCreditGrants(context.Context, *ListCreditGrantsInput) (*ListCreditGrantsOutput, error)
	// RedeemCredit adds a new credit redeem for a member.
	// This can be used to reward a member with credits for specific actions (amount > 0) or redeem credits (amount < 0).
	RedeemCredit(context.Context, *RedeemCreditInput) (*RedeemCreditOutput, error)
	// ListCredits returns a list of credit records for a member.
	ListCreditTransactions(context.Context, *ListCreditTransactionsInput) (*ListCreditTransactionsOutput, error)
	// RefundCredit refunds a specified amount from a credit record.
	// This creates a new credit record with negative amount to reverse the original credit.
	RefundCredit(context.Context, *RefundCreditInput) (*RefundCreditOutput, error)
}

// UnimplementedCreditServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditServiceServer struct{}

func (UnimplementedCreditServiceServer) DescribeBalance(context.Context, *DescribeBalanceInput) (*DescribeBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBalance not implemented")
}
func (UnimplementedCreditServiceServer) GrantCredit(context.Context, *GrantCreditInput) (*GrantCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCredit not implemented")
}
func (UnimplementedCreditServiceServer) CancelCredit(context.Context, *CancelCreditInput) (*CancelCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCredit not implemented")
}
func (UnimplementedCreditServiceServer) ListCreditGrants(context.Context, *ListCreditGrantsInput) (*ListCreditGrantsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditGrants not implemented")
}
func (UnimplementedCreditServiceServer) RedeemCredit(context.Context, *RedeemCreditInput) (*RedeemCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemCredit not implemented")
}
func (UnimplementedCreditServiceServer) ListCreditTransactions(context.Context, *ListCreditTransactionsInput) (*ListCreditTransactionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditTransactions not implemented")
}
func (UnimplementedCreditServiceServer) RefundCredit(context.Context, *RefundCreditInput) (*RefundCreditOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCredit not implemented")
}
func (UnimplementedCreditServiceServer) testEmbeddedByValue() {}

// UnsafeCreditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditServiceServer will
// result in compilation errors.
type UnsafeCreditServiceServer interface {
	mustEmbedUnimplementedCreditServiceServer()
}

func RegisterCreditServiceServer(s grpc.ServiceRegistrar, srv CreditServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditService_ServiceDesc, srv)
}

func _CreditService_DescribeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).DescribeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_DescribeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).DescribeBalance(ctx, req.(*DescribeBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_GrantCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).GrantCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_GrantCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).GrantCredit(ctx, req.(*GrantCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_CancelCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).CancelCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_CancelCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).CancelCredit(ctx, req.(*CancelCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_ListCreditGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditGrantsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).ListCreditGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_ListCreditGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).ListCreditGrants(ctx, req.(*ListCreditGrantsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_RedeemCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).RedeemCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_RedeemCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).RedeemCredit(ctx, req.(*RedeemCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_ListCreditTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditTransactionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).ListCreditTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_ListCreditTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).ListCreditTransactions(ctx, req.(*ListCreditTransactionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditService_RefundCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundCreditInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditServiceServer).RefundCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditService_RefundCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditServiceServer).RefundCredit(ctx, req.(*RefundCreditInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditService_ServiceDesc is the grpc.ServiceDesc for CreditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.community.CreditService",
	HandlerType: (*CreditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeBalance",
			Handler:    _CreditService_DescribeBalance_Handler,
		},
		{
			MethodName: "GrantCredit",
			Handler:    _CreditService_GrantCredit_Handler,
		},
		{
			MethodName: "CancelCredit",
			Handler:    _CreditService_CancelCredit_Handler,
		},
		{
			MethodName: "ListCreditGrants",
			Handler:    _CreditService_ListCreditGrants_Handler,
		},
		{
			MethodName: "RedeemCredit",
			Handler:    _CreditService_RedeemCredit_Handler,
		},
		{
			MethodName: "ListCreditTransactions",
			Handler:    _CreditService_ListCreditTransactions_Handler,
		},
		{
			MethodName: "RefundCredit",
			Handler:    _CreditService_RefundCredit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/community/credit_service.proto",
}
