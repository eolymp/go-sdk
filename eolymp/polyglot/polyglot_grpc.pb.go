// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/polyglot/polyglot.proto

package polyglot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Polyglot_CreateTask_FullMethodName   = "/eolymp.polyglot.Polyglot/CreateTask"
	Polyglot_DescribeTask_FullMethodName = "/eolymp.polyglot.Polyglot/DescribeTask"
	Polyglot_ListTasks_FullMethodName    = "/eolymp.polyglot.Polyglot/ListTasks"
)

// PolyglotClient is the client API for Polyglot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolyglotClient interface {
	CreateTask(ctx context.Context, in *CreateTaskInput, opts ...grpc.CallOption) (*CreateTaskOutput, error)
	DescribeTask(ctx context.Context, in *DescribeTaskInput, opts ...grpc.CallOption) (*DescribeTaskOutput, error)
	ListTasks(ctx context.Context, in *ListTasksInput, opts ...grpc.CallOption) (*ListTasksOutput, error)
}

type polyglotClient struct {
	cc grpc.ClientConnInterface
}

func NewPolyglotClient(cc grpc.ClientConnInterface) PolyglotClient {
	return &polyglotClient{cc}
}

func (c *polyglotClient) CreateTask(ctx context.Context, in *CreateTaskInput, opts ...grpc.CallOption) (*CreateTaskOutput, error) {
	out := new(CreateTaskOutput)
	err := c.cc.Invoke(ctx, Polyglot_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyglotClient) DescribeTask(ctx context.Context, in *DescribeTaskInput, opts ...grpc.CallOption) (*DescribeTaskOutput, error) {
	out := new(DescribeTaskOutput)
	err := c.cc.Invoke(ctx, Polyglot_DescribeTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polyglotClient) ListTasks(ctx context.Context, in *ListTasksInput, opts ...grpc.CallOption) (*ListTasksOutput, error) {
	out := new(ListTasksOutput)
	err := c.cc.Invoke(ctx, Polyglot_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolyglotServer is the server API for Polyglot service.
// All implementations should embed UnimplementedPolyglotServer
// for forward compatibility
type PolyglotServer interface {
	CreateTask(context.Context, *CreateTaskInput) (*CreateTaskOutput, error)
	DescribeTask(context.Context, *DescribeTaskInput) (*DescribeTaskOutput, error)
	ListTasks(context.Context, *ListTasksInput) (*ListTasksOutput, error)
}

// UnimplementedPolyglotServer should be embedded to have forward compatible implementations.
type UnimplementedPolyglotServer struct {
}

func (UnimplementedPolyglotServer) CreateTask(context.Context, *CreateTaskInput) (*CreateTaskOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedPolyglotServer) DescribeTask(context.Context, *DescribeTaskInput) (*DescribeTaskOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTask not implemented")
}
func (UnimplementedPolyglotServer) ListTasks(context.Context, *ListTasksInput) (*ListTasksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}

// UnsafePolyglotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolyglotServer will
// result in compilation errors.
type UnsafePolyglotServer interface {
	mustEmbedUnimplementedPolyglotServer()
}

func RegisterPolyglotServer(s grpc.ServiceRegistrar, srv PolyglotServer) {
	s.RegisterService(&Polyglot_ServiceDesc, srv)
}

func _Polyglot_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyglotServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Polyglot_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyglotServer).CreateTask(ctx, req.(*CreateTaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polyglot_DescribeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyglotServer).DescribeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Polyglot_DescribeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyglotServer).DescribeTask(ctx, req.(*DescribeTaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polyglot_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolyglotServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Polyglot_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolyglotServer).ListTasks(ctx, req.(*ListTasksInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Polyglot_ServiceDesc is the grpc.ServiceDesc for Polyglot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Polyglot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.polyglot.Polyglot",
	HandlerType: (*PolyglotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Polyglot_CreateTask_Handler,
		},
		{
			MethodName: "DescribeTask",
			Handler:    _Polyglot_DescribeTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Polyglot_ListTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/polyglot/polyglot.proto",
}
