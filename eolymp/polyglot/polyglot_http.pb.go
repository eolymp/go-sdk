// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package polyglot

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Polyglot_HTTPReadQueryString parses body into proto.Message
func _Polyglot_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Polyglot_HTTPReadRequestBody parses body into proto.Message
func _Polyglot_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Polyglot_HTTPWriteResponse writes proto.Message to HTTP response
func _Polyglot_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Polyglot_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Polyglot_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Polyglot_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterPolyglotHttpHandlers adds handlers for for PolyglotServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterPolyglotHttpHandlers(router *mux.Router, prefix string, srv PolyglotServer) {
	router.Handle(prefix+"/polyglot/tasks", _Polyglot_CreateTask_Rule0(srv)).
		Methods("POST").
		Name("eolymp.polyglot.Polyglot.CreateTask")
	router.Handle(prefix+"/polyglot/tasks/{task_id}", _Polyglot_DescribeTask_Rule0(srv)).
		Methods("GET").
		Name("eolymp.polyglot.Polyglot.DescribeTask")
	router.Handle(prefix+"/polyglot/tasks", _Polyglot_ListTasks_Rule0(srv)).
		Methods("GET").
		Name("eolymp.polyglot.Polyglot.ListTasks")
}

func _Polyglot_CreateTask_Rule0(srv PolyglotServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTaskInput{}

		if err := _Polyglot_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTask(r.Context(), in)
		if err != nil {
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		_Polyglot_HTTPWriteResponse(w, out)
	})
}

func _Polyglot_DescribeTask_Rule0(srv PolyglotServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTaskInput{}

		if err := _Polyglot_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TaskId = vars["task_id"]

		out, err := srv.DescribeTask(r.Context(), in)
		if err != nil {
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		_Polyglot_HTTPWriteResponse(w, out)
	})
}

func _Polyglot_ListTasks_Rule0(srv PolyglotServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTasksInput{}

		if err := _Polyglot_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTasks(r.Context(), in)
		if err != nil {
			_Polyglot_HTTPWriteErrorResponse(w, err)
			return
		}

		_Polyglot_HTTPWriteResponse(w, out)
	})
}

type _PolyglotHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _PolyglotMiddleware = func(ctx context.Context, method string, in proto.Message, handler _PolyglotHandler) (out proto.Message, err error)
type PolyglotInterceptor struct {
	middleware []_PolyglotMiddleware
	server     PolyglotServer
}

// NewPolyglotInterceptor constructs additional middleware for a server based on annotations in proto files
func NewPolyglotInterceptor(srv PolyglotServer, middleware ..._PolyglotMiddleware) *PolyglotInterceptor {
	return &PolyglotInterceptor{server: srv, middleware: middleware}
}

func (i *PolyglotInterceptor) CreateTask(ctx context.Context, in *CreateTaskInput) (*CreateTaskOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTaskInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTaskInput, got %T", in))
		}

		return i.server.CreateTask(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.polyglot.Polyglot.CreateTask", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTaskOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTaskOutput, got %T", out))
	}

	return message, err
}

func (i *PolyglotInterceptor) DescribeTask(ctx context.Context, in *DescribeTaskInput) (*DescribeTaskOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTaskInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTaskInput, got %T", in))
		}

		return i.server.DescribeTask(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.polyglot.Polyglot.DescribeTask", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTaskOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTaskOutput, got %T", out))
	}

	return message, err
}

func (i *PolyglotInterceptor) ListTasks(ctx context.Context, in *ListTasksInput) (*ListTasksOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTasksInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTasksInput, got %T", in))
		}

		return i.server.ListTasks(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.polyglot.Polyglot.ListTasks", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTasksOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTasksOutput, got %T", out))
	}

	return message, err
}
