// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package universe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniverseClient is the client API for Universe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniverseClient interface {
	// Create a space
	CreateSpace(ctx context.Context, in *CreateSpaceInput, opts ...grpc.CallOption) (*CreateSpaceOutput, error)
	// Update existing space
	UpdateSpace(ctx context.Context, in *UpdateSpaceInput, opts ...grpc.CallOption) (*UpdateSpaceOutput, error)
	// Delete space
	DeleteSpace(ctx context.Context, in *DeleteSpaceInput, opts ...grpc.CallOption) (*DeleteSpaceOutput, error)
	// Lookup space by domain key
	LookupSpace(ctx context.Context, in *LookupSpaceInput, opts ...grpc.CallOption) (*LookupSpaceOutput, error)
	// Describe space
	DescribeSpace(ctx context.Context, in *DescribeSpaceInput, opts ...grpc.CallOption) (*DescribeSpaceOutput, error)
	// List spaces of a contest
	ListSpaces(ctx context.Context, in *ListSpacesInput, opts ...grpc.CallOption) (*ListSpacesOutput, error)
	// Add space member
	AddMember(ctx context.Context, in *AddMemberInput, opts ...grpc.CallOption) (*AddMemberOutput, error)
	// Update space member's details
	UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error)
	// Delete space member
	RemoveMember(ctx context.Context, in *RemoveMemberInput, opts ...grpc.CallOption) (*RemoveMemberOutput, error)
	// Describe space member
	DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error)
	// Describe space member
	IntrospectMember(ctx context.Context, in *IntrospectMemberInput, opts ...grpc.CallOption) (*IntrospectMemberOutput, error)
	// List members in a space
	ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error)
}

type universeClient struct {
	cc grpc.ClientConnInterface
}

func NewUniverseClient(cc grpc.ClientConnInterface) UniverseClient {
	return &universeClient{cc}
}

func (c *universeClient) CreateSpace(ctx context.Context, in *CreateSpaceInput, opts ...grpc.CallOption) (*CreateSpaceOutput, error) {
	out := new(CreateSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) UpdateSpace(ctx context.Context, in *UpdateSpaceInput, opts ...grpc.CallOption) (*UpdateSpaceOutput, error) {
	out := new(UpdateSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/UpdateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) DeleteSpace(ctx context.Context, in *DeleteSpaceInput, opts ...grpc.CallOption) (*DeleteSpaceOutput, error) {
	out := new(DeleteSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) LookupSpace(ctx context.Context, in *LookupSpaceInput, opts ...grpc.CallOption) (*LookupSpaceOutput, error) {
	out := new(LookupSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/LookupSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) DescribeSpace(ctx context.Context, in *DescribeSpaceInput, opts ...grpc.CallOption) (*DescribeSpaceOutput, error) {
	out := new(DescribeSpaceOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/DescribeSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) ListSpaces(ctx context.Context, in *ListSpacesInput, opts ...grpc.CallOption) (*ListSpacesOutput, error) {
	out := new(ListSpacesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/ListSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) AddMember(ctx context.Context, in *AddMemberInput, opts ...grpc.CallOption) (*AddMemberOutput, error) {
	out := new(AddMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) UpdateMember(ctx context.Context, in *UpdateMemberInput, opts ...grpc.CallOption) (*UpdateMemberOutput, error) {
	out := new(UpdateMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) RemoveMember(ctx context.Context, in *RemoveMemberInput, opts ...grpc.CallOption) (*RemoveMemberOutput, error) {
	out := new(RemoveMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) DescribeMember(ctx context.Context, in *DescribeMemberInput, opts ...grpc.CallOption) (*DescribeMemberOutput, error) {
	out := new(DescribeMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/DescribeMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) IntrospectMember(ctx context.Context, in *IntrospectMemberInput, opts ...grpc.CallOption) (*IntrospectMemberOutput, error) {
	out := new(IntrospectMemberOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/IntrospectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeClient) ListMembers(ctx context.Context, in *ListMembersInput, opts ...grpc.CallOption) (*ListMembersOutput, error) {
	out := new(ListMembersOutput)
	err := c.cc.Invoke(ctx, "/eolymp.universe.Universe/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniverseServer is the server API for Universe service.
// All implementations must embed UnimplementedUniverseServer
// for forward compatibility
type UniverseServer interface {
	// Create a space
	CreateSpace(context.Context, *CreateSpaceInput) (*CreateSpaceOutput, error)
	// Update existing space
	UpdateSpace(context.Context, *UpdateSpaceInput) (*UpdateSpaceOutput, error)
	// Delete space
	DeleteSpace(context.Context, *DeleteSpaceInput) (*DeleteSpaceOutput, error)
	// Lookup space by domain key
	LookupSpace(context.Context, *LookupSpaceInput) (*LookupSpaceOutput, error)
	// Describe space
	DescribeSpace(context.Context, *DescribeSpaceInput) (*DescribeSpaceOutput, error)
	// List spaces of a contest
	ListSpaces(context.Context, *ListSpacesInput) (*ListSpacesOutput, error)
	// Add space member
	AddMember(context.Context, *AddMemberInput) (*AddMemberOutput, error)
	// Update space member's details
	UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error)
	// Delete space member
	RemoveMember(context.Context, *RemoveMemberInput) (*RemoveMemberOutput, error)
	// Describe space member
	DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error)
	// Describe space member
	IntrospectMember(context.Context, *IntrospectMemberInput) (*IntrospectMemberOutput, error)
	// List members in a space
	ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error)
	mustEmbedUnimplementedUniverseServer()
}

// UnimplementedUniverseServer must be embedded to have forward compatible implementations.
type UnimplementedUniverseServer struct {
}

func (UnimplementedUniverseServer) CreateSpace(context.Context, *CreateSpaceInput) (*CreateSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedUniverseServer) UpdateSpace(context.Context, *UpdateSpaceInput) (*UpdateSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedUniverseServer) DeleteSpace(context.Context, *DeleteSpaceInput) (*DeleteSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedUniverseServer) LookupSpace(context.Context, *LookupSpaceInput) (*LookupSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupSpace not implemented")
}
func (UnimplementedUniverseServer) DescribeSpace(context.Context, *DescribeSpaceInput) (*DescribeSpaceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSpace not implemented")
}
func (UnimplementedUniverseServer) ListSpaces(context.Context, *ListSpacesInput) (*ListSpacesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaces not implemented")
}
func (UnimplementedUniverseServer) AddMember(context.Context, *AddMemberInput) (*AddMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedUniverseServer) UpdateMember(context.Context, *UpdateMemberInput) (*UpdateMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedUniverseServer) RemoveMember(context.Context, *RemoveMemberInput) (*RemoveMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedUniverseServer) DescribeMember(context.Context, *DescribeMemberInput) (*DescribeMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMember not implemented")
}
func (UnimplementedUniverseServer) IntrospectMember(context.Context, *IntrospectMemberInput) (*IntrospectMemberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectMember not implemented")
}
func (UnimplementedUniverseServer) ListMembers(context.Context, *ListMembersInput) (*ListMembersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedUniverseServer) mustEmbedUnimplementedUniverseServer() {}

// UnsafeUniverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniverseServer will
// result in compilation errors.
type UnsafeUniverseServer interface {
	mustEmbedUnimplementedUniverseServer()
}

func RegisterUniverseServer(s grpc.ServiceRegistrar, srv UniverseServer) {
	s.RegisterService(&Universe_ServiceDesc, srv)
}

func _Universe_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).CreateSpace(ctx, req.(*CreateSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/UpdateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).UpdateSpace(ctx, req.(*UpdateSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).DeleteSpace(ctx, req.(*DeleteSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_LookupSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).LookupSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/LookupSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).LookupSpace(ctx, req.(*LookupSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_DescribeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSpaceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).DescribeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/DescribeSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).DescribeSpace(ctx, req.(*DescribeSpaceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_ListSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpacesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).ListSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/ListSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).ListSpaces(ctx, req.(*ListSpacesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).AddMember(ctx, req.(*AddMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).UpdateMember(ctx, req.(*UpdateMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).RemoveMember(ctx, req.(*RemoveMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_DescribeMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).DescribeMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/DescribeMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).DescribeMember(ctx, req.(*DescribeMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_IntrospectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectMemberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).IntrospectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/IntrospectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).IntrospectMember(ctx, req.(*IntrospectMemberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Universe_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.universe.Universe/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseServer).ListMembers(ctx, req.(*ListMembersInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Universe_ServiceDesc is the grpc.ServiceDesc for Universe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Universe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.universe.Universe",
	HandlerType: (*UniverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _Universe_CreateSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _Universe_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _Universe_DeleteSpace_Handler,
		},
		{
			MethodName: "LookupSpace",
			Handler:    _Universe_LookupSpace_Handler,
		},
		{
			MethodName: "DescribeSpace",
			Handler:    _Universe_DescribeSpace_Handler,
		},
		{
			MethodName: "ListSpaces",
			Handler:    _Universe_ListSpaces_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Universe_AddMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Universe_UpdateMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Universe_RemoveMember_Handler,
		},
		{
			MethodName: "DescribeMember",
			Handler:    _Universe_DescribeMember_Handler,
		},
		{
			MethodName: "IntrospectMember",
			Handler:    _Universe_IntrospectMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Universe_ListMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/universe/universe.proto",
}
