// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package universe

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _BillingService_HTTPReadQueryString parses body into proto.Message
func _BillingService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _BillingService_HTTPReadRequestBody parses body into proto.Message
func _BillingService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _BillingService_HTTPWriteResponse writes proto.Message to HTTP response
func _BillingService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_BillingService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _BillingService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _BillingService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _BillingService_WebsocketErrorResponse writes error to websocket connection
func _BillingService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _BillingService_WebsocketCodec implements protobuf codec for websockets package
var _BillingService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterBillingServiceHttpHandlers adds handlers for for BillingServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterBillingServiceHttpHandlers(router *mux.Router, prefix string, cli BillingServiceClient) {
	router.Handle(prefix+"/billing/info", _BillingService_DescribeBillingInformation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.universe.BillingService.DescribeBillingInformation")
	router.Handle(prefix+"/billing/info", _BillingService_UpdateBillingInformation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.universe.BillingService.UpdateBillingInformation")
	router.Handle(prefix+"/billing/subscription", _BillingService_DescribeSubscription_Rule0(cli)).
		Methods("GET").
		Name("eolymp.universe.BillingService.DescribeSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_CreateSubscription_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.CreateSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_UpdateSubscription_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.universe.BillingService.UpdateSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_CancelSubscription_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.universe.BillingService.CancelSubscription")
	router.Handle(prefix+"/billing/trial/start", _BillingService_StartSubscriptionTrial_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.StartSubscriptionTrial")
	router.Handle(prefix+"/billing/trial/end", _BillingService_EndSubscriptionTrial_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.EndSubscriptionTrial")
	router.Handle(prefix+"/billing/subscription/simulate", _BillingService_SimulateSubscription_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.SimulateSubscription")
	router.Handle(prefix+"/billing/portal-link", _BillingService_CreatePortalLink_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.CreatePortalLink")
	router.Handle(prefix+"/billing/upcoming", _BillingService_UpcomingInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.UpcomingInvoice")
	router.Handle(prefix+"/billing/invoice/{invoice_id}", _BillingService_DescribeInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.DescribeInvoice")
	router.Handle(prefix+"/billing/invoice/{invoice_id}/pay", _BillingService_PayInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.PayInvoice")
	router.Handle(prefix+"/billing/invoices", _BillingService_ListInvoices_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.ListInvoices")
	router.Handle(prefix+"/billing/plans", _BillingService_ListAvailablePlans_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.ListAvailablePlans")
}

func _BillingService_DescribeBillingInformation_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeBillingInformationInput{}

		if err := _BillingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeBillingInformation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpdateBillingInformation_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateBillingInformationInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpdateBillingInformation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_DescribeSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubscriptionInput{}

		if err := _BillingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CreateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpdateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpdateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CancelSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CancelSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CancelSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_StartSubscriptionTrial_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartSubscriptionTrialInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.StartSubscriptionTrial(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_EndSubscriptionTrial_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EndSubscriptionTrialInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.EndSubscriptionTrial(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_SimulateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SimulateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.SimulateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CreatePortalLink_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreatePortalLinkInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreatePortalLink(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpcomingInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpcomingInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpcomingInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_DescribeInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.InvoiceId = vars["invoice_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_PayInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PayInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.InvoiceId = vars["invoice_id"]

		var header, trailer metadata.MD

		out, err := cli.PayInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_ListInvoices_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListInvoicesInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListInvoices(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_ListAvailablePlans_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAvailablePlansInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListAvailablePlans(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _BillingServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _BillingServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _BillingServiceHandler) (out proto.Message, err error)
type BillingServiceInterceptor struct {
	middleware []_BillingServiceMiddleware
	client     BillingServiceClient
}

// NewBillingServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewBillingServiceInterceptor(cli BillingServiceClient, middleware ..._BillingServiceMiddleware) *BillingServiceInterceptor {
	return &BillingServiceInterceptor{client: cli, middleware: middleware}
}

func (i *BillingServiceInterceptor) DescribeBillingInformation(ctx context.Context, in *DescribeBillingInformationInput, opts ...grpc.CallOption) (*DescribeBillingInformationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeBillingInformationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeBillingInformationInput, got %T", in))
		}

		return i.client.DescribeBillingInformation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.DescribeBillingInformation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeBillingInformationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeBillingInformationOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) UpdateBillingInformation(ctx context.Context, in *UpdateBillingInformationInput, opts ...grpc.CallOption) (*UpdateBillingInformationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateBillingInformationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateBillingInformationInput, got %T", in))
		}

		return i.client.UpdateBillingInformation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.UpdateBillingInformation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateBillingInformationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateBillingInformationOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) DescribeSubscription(ctx context.Context, in *DescribeSubscriptionInput, opts ...grpc.CallOption) (*DescribeSubscriptionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeSubscriptionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeSubscriptionInput, got %T", in))
		}

		return i.client.DescribeSubscription(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.DescribeSubscription", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeSubscriptionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeSubscriptionOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) CreateSubscription(ctx context.Context, in *CreateSubscriptionInput, opts ...grpc.CallOption) (*CreateSubscriptionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateSubscriptionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateSubscriptionInput, got %T", in))
		}

		return i.client.CreateSubscription(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.CreateSubscription", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateSubscriptionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateSubscriptionOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionInput, opts ...grpc.CallOption) (*UpdateSubscriptionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateSubscriptionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateSubscriptionInput, got %T", in))
		}

		return i.client.UpdateSubscription(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.UpdateSubscription", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateSubscriptionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateSubscriptionOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) CancelSubscription(ctx context.Context, in *CancelSubscriptionInput, opts ...grpc.CallOption) (*CancelSubscriptionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CancelSubscriptionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CancelSubscriptionInput, got %T", in))
		}

		return i.client.CancelSubscription(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.CancelSubscription", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CancelSubscriptionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CancelSubscriptionOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) StartSubscriptionTrial(ctx context.Context, in *StartSubscriptionTrialInput, opts ...grpc.CallOption) (*StartSubscriptionTrialOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*StartSubscriptionTrialInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *StartSubscriptionTrialInput, got %T", in))
		}

		return i.client.StartSubscriptionTrial(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.StartSubscriptionTrial", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*StartSubscriptionTrialOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *StartSubscriptionTrialOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) EndSubscriptionTrial(ctx context.Context, in *EndSubscriptionTrialInput, opts ...grpc.CallOption) (*EndSubscriptionTrialOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EndSubscriptionTrialInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EndSubscriptionTrialInput, got %T", in))
		}

		return i.client.EndSubscriptionTrial(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.EndSubscriptionTrial", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EndSubscriptionTrialOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EndSubscriptionTrialOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) SimulateSubscription(ctx context.Context, in *SimulateSubscriptionInput, opts ...grpc.CallOption) (*SimulateSubscriptionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SimulateSubscriptionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SimulateSubscriptionInput, got %T", in))
		}

		return i.client.SimulateSubscription(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.SimulateSubscription", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SimulateSubscriptionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SimulateSubscriptionOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) CreatePortalLink(ctx context.Context, in *CreatePortalLinkInput, opts ...grpc.CallOption) (*CreatePortalLinkOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreatePortalLinkInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreatePortalLinkInput, got %T", in))
		}

		return i.client.CreatePortalLink(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.CreatePortalLink", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreatePortalLinkOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreatePortalLinkOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) UpcomingInvoice(ctx context.Context, in *UpcomingInvoiceInput, opts ...grpc.CallOption) (*UpcomingInvoiceOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpcomingInvoiceInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpcomingInvoiceInput, got %T", in))
		}

		return i.client.UpcomingInvoice(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.UpcomingInvoice", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpcomingInvoiceOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpcomingInvoiceOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) DescribeInvoice(ctx context.Context, in *DescribeInvoiceInput, opts ...grpc.CallOption) (*DescribeInvoiceOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeInvoiceInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeInvoiceInput, got %T", in))
		}

		return i.client.DescribeInvoice(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.DescribeInvoice", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeInvoiceOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeInvoiceOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) PayInvoice(ctx context.Context, in *PayInvoiceInput, opts ...grpc.CallOption) (*PayInvoiceOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*PayInvoiceInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *PayInvoiceInput, got %T", in))
		}

		return i.client.PayInvoice(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.PayInvoice", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*PayInvoiceOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *PayInvoiceOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) ListInvoices(ctx context.Context, in *ListInvoicesInput, opts ...grpc.CallOption) (*ListInvoicesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListInvoicesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListInvoicesInput, got %T", in))
		}

		return i.client.ListInvoices(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.ListInvoices", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListInvoicesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListInvoicesOutput, got %T", out))
	}

	return message, err
}

func (i *BillingServiceInterceptor) ListAvailablePlans(ctx context.Context, in *ListAvailablePlansInput, opts ...grpc.CallOption) (*ListAvailablePlansOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAvailablePlansInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAvailablePlansInput, got %T", in))
		}

		return i.client.ListAvailablePlans(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.universe.BillingService.ListAvailablePlans", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAvailablePlansOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAvailablePlansOutput, got %T", out))
	}

	return message, err
}
