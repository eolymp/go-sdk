// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package universe

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _BillingService_HTTPReadQueryString parses body into proto.Message
func _BillingService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _BillingService_HTTPReadRequestBody parses body into proto.Message
func _BillingService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _BillingService_HTTPWriteResponse writes proto.Message to HTTP response
func _BillingService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_BillingService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _BillingService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _BillingService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterBillingServiceHttpHandlers adds handlers for for BillingServiceClient
func RegisterBillingServiceHttpHandlers(router *mux.Router, prefix string, cli BillingServiceClient) {
	router.Handle(prefix+"/billing/info", _BillingService_DescribeBillingInformation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.universe.BillingService.DescribeBillingInformation")
	router.Handle(prefix+"/billing/info", _BillingService_UpdateBillingInformation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.universe.BillingService.UpdateBillingInformation")
	router.Handle(prefix+"/billing/subscription", _BillingService_DescribeSubscription_Rule0(cli)).
		Methods("GET").
		Name("eolymp.universe.BillingService.DescribeSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_CreateSubscription_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.CreateSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_UpdateSubscription_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.universe.BillingService.UpdateSubscription")
	router.Handle(prefix+"/billing/subscription", _BillingService_CancelSubscription_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.universe.BillingService.CancelSubscription")
	router.Handle(prefix+"/billing/trial/start", _BillingService_StartSubscriptionTrial_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.StartSubscriptionTrial")
	router.Handle(prefix+"/billing/trial/end", _BillingService_EndSubscriptionTrial_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.EndSubscriptionTrial")
	router.Handle(prefix+"/billing/subscription/simulate", _BillingService_SimulateSubscription_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.SimulateSubscription")
	router.Handle(prefix+"/billing/portal-link", _BillingService_CreatePortalLink_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.CreatePortalLink")
	router.Handle(prefix+"/billing/upcoming", _BillingService_UpcomingInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.UpcomingInvoice")
	router.Handle(prefix+"/billing/invoice/{invoice_id}", _BillingService_DescribeInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.DescribeInvoice")
	router.Handle(prefix+"/billing/invoice/{invoice_id}/pay", _BillingService_PayInvoice_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.PayInvoice")
	router.Handle(prefix+"/billing/invoices", _BillingService_ListInvoices_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.ListInvoices")
	router.Handle(prefix+"/billing/plans", _BillingService_ListAvailablePlans_Rule0(cli)).
		Methods("POST").
		Name("eolymp.universe.BillingService.ListAvailablePlans")
}

// RegisterBillingServiceHttpProxy adds proxy handlers for for BillingServiceClient
func RegisterBillingServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterBillingServiceHttpHandlers(router, prefix, NewBillingServiceClient(conn))
}

func _BillingService_DescribeBillingInformation_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeBillingInformationInput{}

		if err := _BillingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeBillingInformation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpdateBillingInformation_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateBillingInformationInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpdateBillingInformation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_DescribeSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubscriptionInput{}

		if err := _BillingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CreateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpdateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpdateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CancelSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CancelSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CancelSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_StartSubscriptionTrial_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartSubscriptionTrialInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.StartSubscriptionTrial(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_EndSubscriptionTrial_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EndSubscriptionTrialInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.EndSubscriptionTrial(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_SimulateSubscription_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SimulateSubscriptionInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.SimulateSubscription(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_CreatePortalLink_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreatePortalLinkInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreatePortalLink(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_UpcomingInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpcomingInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UpcomingInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_DescribeInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.InvoiceId = vars["invoice_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_PayInvoice_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PayInvoiceInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.InvoiceId = vars["invoice_id"]

		var header, trailer metadata.MD

		out, err := cli.PayInvoice(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_ListInvoices_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListInvoicesInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListInvoices(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _BillingService_ListAvailablePlans_Rule0(cli BillingServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAvailablePlansInput{}

		if err := _BillingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListAvailablePlans(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_BillingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_BillingService_HTTPWriteResponse(w, out, header, trailer)
	})
}
