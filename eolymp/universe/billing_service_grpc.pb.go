// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/universe/billing_service.proto

package universe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BillingService_DescribeBillingInformation_FullMethodName = "/eolymp.universe.BillingService/DescribeBillingInformation"
	BillingService_UpdateBillingInformation_FullMethodName   = "/eolymp.universe.BillingService/UpdateBillingInformation"
	BillingService_DescribeCurrentPlan_FullMethodName        = "/eolymp.universe.BillingService/DescribeCurrentPlan"
	BillingService_UpdateCurrentPlan_FullMethodName          = "/eolymp.universe.BillingService/UpdateCurrentPlan"
	BillingService_CancelCurrentPlan_FullMethodName          = "/eolymp.universe.BillingService/CancelCurrentPlan"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	DescribeBillingInformation(ctx context.Context, in *DescribeBillingInformationInput, opts ...grpc.CallOption) (*DescribeBillingInformationOutput, error)
	UpdateBillingInformation(ctx context.Context, in *UpdateBillingInformationInput, opts ...grpc.CallOption) (*UpdateBillingInformationOutput, error)
	DescribeCurrentPlan(ctx context.Context, in *DescribeCurrentPlanInput, opts ...grpc.CallOption) (*DescribeCurrentPlanOutput, error)
	UpdateCurrentPlan(ctx context.Context, in *UpdateCurrentPlanInput, opts ...grpc.CallOption) (*UpdateCurrentPlanOutput, error)
	CancelCurrentPlan(ctx context.Context, in *CancelCurrentPlanInput, opts ...grpc.CallOption) (*CancelCurrentPlanOutput, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) DescribeBillingInformation(ctx context.Context, in *DescribeBillingInformationInput, opts ...grpc.CallOption) (*DescribeBillingInformationOutput, error) {
	out := new(DescribeBillingInformationOutput)
	err := c.cc.Invoke(ctx, BillingService_DescribeBillingInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateBillingInformation(ctx context.Context, in *UpdateBillingInformationInput, opts ...grpc.CallOption) (*UpdateBillingInformationOutput, error) {
	out := new(UpdateBillingInformationOutput)
	err := c.cc.Invoke(ctx, BillingService_UpdateBillingInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DescribeCurrentPlan(ctx context.Context, in *DescribeCurrentPlanInput, opts ...grpc.CallOption) (*DescribeCurrentPlanOutput, error) {
	out := new(DescribeCurrentPlanOutput)
	err := c.cc.Invoke(ctx, BillingService_DescribeCurrentPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateCurrentPlan(ctx context.Context, in *UpdateCurrentPlanInput, opts ...grpc.CallOption) (*UpdateCurrentPlanOutput, error) {
	out := new(UpdateCurrentPlanOutput)
	err := c.cc.Invoke(ctx, BillingService_UpdateCurrentPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CancelCurrentPlan(ctx context.Context, in *CancelCurrentPlanInput, opts ...grpc.CallOption) (*CancelCurrentPlanOutput, error) {
	out := new(CancelCurrentPlanOutput)
	err := c.cc.Invoke(ctx, BillingService_CancelCurrentPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations should embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	DescribeBillingInformation(context.Context, *DescribeBillingInformationInput) (*DescribeBillingInformationOutput, error)
	UpdateBillingInformation(context.Context, *UpdateBillingInformationInput) (*UpdateBillingInformationOutput, error)
	DescribeCurrentPlan(context.Context, *DescribeCurrentPlanInput) (*DescribeCurrentPlanOutput, error)
	UpdateCurrentPlan(context.Context, *UpdateCurrentPlanInput) (*UpdateCurrentPlanOutput, error)
	CancelCurrentPlan(context.Context, *CancelCurrentPlanInput) (*CancelCurrentPlanOutput, error)
}

// UnimplementedBillingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) DescribeBillingInformation(context.Context, *DescribeBillingInformationInput) (*DescribeBillingInformationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBillingInformation not implemented")
}
func (UnimplementedBillingServiceServer) UpdateBillingInformation(context.Context, *UpdateBillingInformationInput) (*UpdateBillingInformationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingInformation not implemented")
}
func (UnimplementedBillingServiceServer) DescribeCurrentPlan(context.Context, *DescribeCurrentPlanInput) (*DescribeCurrentPlanOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCurrentPlan not implemented")
}
func (UnimplementedBillingServiceServer) UpdateCurrentPlan(context.Context, *UpdateCurrentPlanInput) (*UpdateCurrentPlanOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentPlan not implemented")
}
func (UnimplementedBillingServiceServer) CancelCurrentPlan(context.Context, *CancelCurrentPlanInput) (*CancelCurrentPlanOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCurrentPlan not implemented")
}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_DescribeBillingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBillingInformationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DescribeBillingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DescribeBillingInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DescribeBillingInformation(ctx, req.(*DescribeBillingInformationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateBillingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingInformationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateBillingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateBillingInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateBillingInformation(ctx, req.(*UpdateBillingInformationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DescribeCurrentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCurrentPlanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DescribeCurrentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DescribeCurrentPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DescribeCurrentPlan(ctx, req.(*DescribeCurrentPlanInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateCurrentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentPlanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateCurrentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateCurrentPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateCurrentPlan(ctx, req.(*UpdateCurrentPlanInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CancelCurrentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCurrentPlanInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CancelCurrentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CancelCurrentPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CancelCurrentPlan(ctx, req.(*CancelCurrentPlanInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.universe.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeBillingInformation",
			Handler:    _BillingService_DescribeBillingInformation_Handler,
		},
		{
			MethodName: "UpdateBillingInformation",
			Handler:    _BillingService_UpdateBillingInformation_Handler,
		},
		{
			MethodName: "DescribeCurrentPlan",
			Handler:    _BillingService_DescribeCurrentPlan_Handler,
		},
		{
			MethodName: "UpdateCurrentPlan",
			Handler:    _BillingService_UpdateCurrentPlan_Handler,
		},
		{
			MethodName: "CancelCurrentPlan",
			Handler:    _BillingService_CancelCurrentPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/universe/billing_service.proto",
}
