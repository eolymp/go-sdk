// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package workspace

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

// NewWorkspace constructs client for Workspace
func NewWorkspaceService(url string, cli WorkspaceHTTPClient) *WorkspaceService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &WorkspaceService{base: url, cli: cli}
}

type WorkspaceHTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type WorkspaceService struct {
	base string
	cli  WorkspaceHTTPClient
}

// invoke RPC method using twirp-like protocol
func (s *WorkspaceService) invoke(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	input := []byte("{}")

	if in != nil {
		input, err = protojson.Marshal(in)
		if err != nil {
			return err
		}
	}

	req, err := http.NewRequest(verb, s.base+"/"+path, bytes.NewReader(input))
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *WorkspaceService) DescribeProject(ctx context.Context, in *DescribeProjectInput) (*DescribeProjectOutput, error) {
	out := &DescribeProjectOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
	}

	if err := s.invoke(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) ListProjects(ctx context.Context, in *ListProjectsInput) (*ListProjectsOutput, error) {
	out := &ListProjectsOutput{}
	path := "/workspace/projects"

	if err := s.invoke(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) CreateProject(ctx context.Context, in *CreateProjectInput) (*CreateProjectOutput, error) {
	out := &CreateProjectOutput{}
	path := "/workspace/projects"

	if err := s.invoke(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) UpdateProject(ctx context.Context, in *UpdateProjectInput) (*UpdateProjectOutput, error) {
	out := &UpdateProjectOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
	}

	if err := s.invoke(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) DeleteProject(ctx context.Context, in *DeleteProjectInput) (*DeleteProjectOutput, error) {
	out := &DeleteProjectOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
	}

	if err := s.invoke(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) ListFiles(ctx context.Context, in *ListFilesInput) (*ListFilesOutput, error) {
	out := &ListFilesOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId()) + "/files"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
	}

	if err := s.invoke(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) DescribeFile(ctx context.Context, in *DescribeFileInput) (*DescribeFileOutput, error) {
	out := &DescribeFileOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId()) + "/files/" + url.PathEscape(in.GetName())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
		in.Name = ""
	}

	if err := s.invoke(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) UploadFile(ctx context.Context, in *UploadFileInput) (*UploadFileOutput, error) {
	out := &UploadFileOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId()) + "/files"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
	}

	if err := s.invoke(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *WorkspaceService) RemoveFile(ctx context.Context, in *RemoveFileInput) (*RemoveFileOutput, error) {
	out := &RemoveFileOutput{}
	path := "/workspace/projects/" + url.PathEscape(in.GetProjectId()) + "/files/" + url.PathEscape(in.GetName())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProjectId = ""
		in.Name = ""
	}

	if err := s.invoke(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
