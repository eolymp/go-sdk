// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/newsletter/recipient_service.proto

package newsletter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecipientService_DescribeRecipient_FullMethodName = "/eolymp.newsletter.RecipientService/DescribeRecipient"
	RecipientService_ImportRecipients_FullMethodName  = "/eolymp.newsletter.RecipientService/ImportRecipients"
	RecipientService_ListRecipients_FullMethodName    = "/eolymp.newsletter.RecipientService/ListRecipients"
	RecipientService_CreateRecipient_FullMethodName   = "/eolymp.newsletter.RecipientService/CreateRecipient"
	RecipientService_RemoveRecipient_FullMethodName   = "/eolymp.newsletter.RecipientService/RemoveRecipient"
)

// RecipientServiceClient is the client API for RecipientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipientServiceClient interface {
	DescribeRecipient(ctx context.Context, in *DescribeRecipientInput, opts ...grpc.CallOption) (*DescribeRecipientOutput, error)
	ImportRecipients(ctx context.Context, in *ImportRecipientsInput, opts ...grpc.CallOption) (*ImportRecipientsOutput, error)
	ListRecipients(ctx context.Context, in *ListRecipientsInput, opts ...grpc.CallOption) (*ListRecipientsOutput, error)
	CreateRecipient(ctx context.Context, in *CreateRecipientInput, opts ...grpc.CallOption) (*CreateRecipientOutput, error)
	RemoveRecipient(ctx context.Context, in *RemoveRecipientInput, opts ...grpc.CallOption) (*RemoveRecipientOutput, error)
}

type recipientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipientServiceClient(cc grpc.ClientConnInterface) RecipientServiceClient {
	return &recipientServiceClient{cc}
}

func (c *recipientServiceClient) DescribeRecipient(ctx context.Context, in *DescribeRecipientInput, opts ...grpc.CallOption) (*DescribeRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRecipientOutput)
	err := c.cc.Invoke(ctx, RecipientService_DescribeRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipientServiceClient) ImportRecipients(ctx context.Context, in *ImportRecipientsInput, opts ...grpc.CallOption) (*ImportRecipientsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRecipientsOutput)
	err := c.cc.Invoke(ctx, RecipientService_ImportRecipients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipientServiceClient) ListRecipients(ctx context.Context, in *ListRecipientsInput, opts ...grpc.CallOption) (*ListRecipientsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecipientsOutput)
	err := c.cc.Invoke(ctx, RecipientService_ListRecipients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipientServiceClient) CreateRecipient(ctx context.Context, in *CreateRecipientInput, opts ...grpc.CallOption) (*CreateRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecipientOutput)
	err := c.cc.Invoke(ctx, RecipientService_CreateRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipientServiceClient) RemoveRecipient(ctx context.Context, in *RemoveRecipientInput, opts ...grpc.CallOption) (*RemoveRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRecipientOutput)
	err := c.cc.Invoke(ctx, RecipientService_RemoveRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipientServiceServer is the server API for RecipientService service.
// All implementations should embed UnimplementedRecipientServiceServer
// for forward compatibility.
type RecipientServiceServer interface {
	DescribeRecipient(context.Context, *DescribeRecipientInput) (*DescribeRecipientOutput, error)
	ImportRecipients(context.Context, *ImportRecipientsInput) (*ImportRecipientsOutput, error)
	ListRecipients(context.Context, *ListRecipientsInput) (*ListRecipientsOutput, error)
	CreateRecipient(context.Context, *CreateRecipientInput) (*CreateRecipientOutput, error)
	RemoveRecipient(context.Context, *RemoveRecipientInput) (*RemoveRecipientOutput, error)
}

// UnimplementedRecipientServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipientServiceServer struct{}

func (UnimplementedRecipientServiceServer) DescribeRecipient(context.Context, *DescribeRecipientInput) (*DescribeRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRecipient not implemented")
}
func (UnimplementedRecipientServiceServer) ImportRecipients(context.Context, *ImportRecipientsInput) (*ImportRecipientsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRecipients not implemented")
}
func (UnimplementedRecipientServiceServer) ListRecipients(context.Context, *ListRecipientsInput) (*ListRecipientsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipients not implemented")
}
func (UnimplementedRecipientServiceServer) CreateRecipient(context.Context, *CreateRecipientInput) (*CreateRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipient not implemented")
}
func (UnimplementedRecipientServiceServer) RemoveRecipient(context.Context, *RemoveRecipientInput) (*RemoveRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRecipient not implemented")
}
func (UnimplementedRecipientServiceServer) testEmbeddedByValue() {}

// UnsafeRecipientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipientServiceServer will
// result in compilation errors.
type UnsafeRecipientServiceServer interface {
	mustEmbedUnimplementedRecipientServiceServer()
}

func RegisterRecipientServiceServer(s grpc.ServiceRegistrar, srv RecipientServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipientService_ServiceDesc, srv)
}

func _RecipientService_DescribeRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServiceServer).DescribeRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipientService_DescribeRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServiceServer).DescribeRecipient(ctx, req.(*DescribeRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipientService_ImportRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRecipientsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServiceServer).ImportRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipientService_ImportRecipients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServiceServer).ImportRecipients(ctx, req.(*ImportRecipientsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipientService_ListRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipientsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServiceServer).ListRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipientService_ListRecipients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServiceServer).ListRecipients(ctx, req.(*ListRecipientsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipientService_CreateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServiceServer).CreateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipientService_CreateRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServiceServer).CreateRecipient(ctx, req.(*CreateRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipientService_RemoveRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServiceServer).RemoveRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipientService_RemoveRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServiceServer).RemoveRecipient(ctx, req.(*RemoveRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipientService_ServiceDesc is the grpc.ServiceDesc for RecipientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.newsletter.RecipientService",
	HandlerType: (*RecipientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeRecipient",
			Handler:    _RecipientService_DescribeRecipient_Handler,
		},
		{
			MethodName: "ImportRecipients",
			Handler:    _RecipientService_ImportRecipients_Handler,
		},
		{
			MethodName: "ListRecipients",
			Handler:    _RecipientService_ListRecipients_Handler,
		},
		{
			MethodName: "CreateRecipient",
			Handler:    _RecipientService_CreateRecipient_Handler,
		},
		{
			MethodName: "RemoveRecipient",
			Handler:    _RecipientService_RemoveRecipient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/newsletter/recipient_service.proto",
}
