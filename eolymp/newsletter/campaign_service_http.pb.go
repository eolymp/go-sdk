// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package newsletter

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _CampaignService_HTTPReadQueryString parses body into proto.Message
func _CampaignService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _CampaignService_HTTPReadRequestBody parses body into proto.Message
func _CampaignService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _CampaignService_HTTPWriteResponse writes proto.Message to HTTP response
func _CampaignService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_CampaignService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _CampaignService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _CampaignService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterCampaignServiceHttpHandlers adds handlers for for CampaignServiceClient
func RegisterCampaignServiceHttpHandlers(router *mux.Router, prefix string, cli CampaignServiceClient) {
	router.Handle(prefix+"/campaigns", _CampaignService_CreateCampaign_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.CampaignService.CreateCampaign")
	router.Handle(prefix+"/campaigns/{campaign_id}", _CampaignService_UpdateCampaign_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.newsletter.CampaignService.UpdateCampaign")
	router.Handle(prefix+"/campaigns/{campaign_id}", _CampaignService_DeleteCampaign_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.newsletter.CampaignService.DeleteCampaign")
	router.Handle(prefix+"/campaigns/{campaign_id}", _CampaignService_DescribeCampaign_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.DescribeCampaign")
	router.Handle(prefix+"/campaigns", _CampaignService_ListCampaigns_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.ListCampaigns")
	router.Handle(prefix+"/campaigns/{campaign_id}/test", _CampaignService_TestCampaign_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.CampaignService.TestCampaign")
	router.Handle(prefix+"/campaigns/{campaign_id}/send", _CampaignService_SendCampaign_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.CampaignService.SendCampaign")
	router.Handle(prefix+"/campaigns/{campaign_id}/translations", _CampaignService_CreateTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.CampaignService.CreateTranslation")
	router.Handle(prefix+"/campaigns/{campaign_id}/translations/{translation_id}", _CampaignService_UpdateTranslation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.newsletter.CampaignService.UpdateTranslation")
	router.Handle(prefix+"/campaigns/{campaign_id}/translations/{translation_id}", _CampaignService_DeleteTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.newsletter.CampaignService.DeleteTranslation")
	router.Handle(prefix+"/campaigns/{campaign_id}/translations/{translation_id}", _CampaignService_DescribeTranslation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.DescribeTranslation")
	router.Handle(prefix+"/campaigns/{campaign_id}/translations", _CampaignService_ListTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.ListTranslations")
	router.Handle(prefix+"/campaigns/{campaign_id}/recipients", _CampaignService_CreateRecipient_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.CampaignService.CreateRecipient")
	router.Handle(prefix+"/campaigns/{campaign_id}/recipients/{recipient_id}", _CampaignService_DeleteRecipient_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.newsletter.CampaignService.DeleteRecipient")
	router.Handle(prefix+"/campaigns/{campaign_id}/recipients", _CampaignService_ListRecipients_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.ListRecipients")
	router.Handle(prefix+"/campaigns/{campaign_id}/recipients/{recipient_id}", _CampaignService_DescribeRecipient_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.CampaignService.DescribeRecipient")
}

// RegisterCampaignServiceHttpProxy adds proxy handlers for for CampaignServiceClient
func RegisterCampaignServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterCampaignServiceHttpHandlers(router, prefix, NewCampaignServiceClient(conn))
}

func _CampaignService_CreateCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCampaignInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_UpdateCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCampaignInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DeleteCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCampaignInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DescribeCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCampaignInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_ListCampaigns_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCampaignsInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListCampaigns(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_TestCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TestCampaignInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.TestCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_SendCampaign_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SendCampaignInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.SendCampaign(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_CreateTranslation_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTranslationInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_UpdateTranslation_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTranslationInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DeleteTranslation_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTranslationInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DescribeTranslation_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTranslationInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_ListTranslations_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationsInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.ListTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_CreateRecipient_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateRecipientInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateRecipient(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DeleteRecipient_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteRecipientInput{}

		if err := _CampaignService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]
		in.RecipientId = vars["recipient_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteRecipient(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_ListRecipients_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRecipientsInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]

		var header, trailer metadata.MD

		out, err := cli.ListRecipients(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _CampaignService_DescribeRecipient_Rule0(cli CampaignServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRecipientInput{}

		if err := _CampaignService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CampaignId = vars["campaign_id"]
		in.RecipientId = vars["recipient_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeRecipient(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_CampaignService_HTTPWriteErrorResponse(w, err)
			return
		}

		_CampaignService_HTTPWriteResponse(w, out, header, trailer)
	})
}
