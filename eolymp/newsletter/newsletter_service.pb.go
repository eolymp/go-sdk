// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: eolymp/newsletter/newsletter_service.proto

package newsletter

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateNewsletterInput_Patch int32

const (
	UpdateNewsletterInput_ALL     UpdateNewsletterInput_Patch = 0
	UpdateNewsletterInput_TYPE    UpdateNewsletterInput_Patch = 1
	UpdateNewsletterInput_SUBJECT UpdateNewsletterInput_Patch = 2
	UpdateNewsletterInput_CONTENT UpdateNewsletterInput_Patch = 3
)

// Enum value maps for UpdateNewsletterInput_Patch.
var (
	UpdateNewsletterInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "TYPE",
		2: "SUBJECT",
		3: "CONTENT",
	}
	UpdateNewsletterInput_Patch_value = map[string]int32{
		"ALL":     0,
		"TYPE":    1,
		"SUBJECT": 2,
		"CONTENT": 3,
	}
)

func (x UpdateNewsletterInput_Patch) Enum() *UpdateNewsletterInput_Patch {
	p := new(UpdateNewsletterInput_Patch)
	*p = x
	return p
}

func (x UpdateNewsletterInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateNewsletterInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_newsletter_newsletter_service_proto_enumTypes[0].Descriptor()
}

func (UpdateNewsletterInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_newsletter_newsletter_service_proto_enumTypes[0]
}

func (x UpdateNewsletterInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateNewsletterInput_Patch.Descriptor instead.
func (UpdateNewsletterInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{6, 0}
}

type UpdateNewsletterTranslationInput_Patch int32

const (
	UpdateNewsletterTranslationInput_ALL     UpdateNewsletterTranslationInput_Patch = 0
	UpdateNewsletterTranslationInput_SUBJECT UpdateNewsletterTranslationInput_Patch = 1
	UpdateNewsletterTranslationInput_CONTENT UpdateNewsletterTranslationInput_Patch = 2
	UpdateNewsletterTranslationInput_LOCALE  UpdateNewsletterTranslationInput_Patch = 3
)

// Enum value maps for UpdateNewsletterTranslationInput_Patch.
var (
	UpdateNewsletterTranslationInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "SUBJECT",
		2: "CONTENT",
		3: "LOCALE",
	}
	UpdateNewsletterTranslationInput_Patch_value = map[string]int32{
		"ALL":     0,
		"SUBJECT": 1,
		"CONTENT": 2,
		"LOCALE":  3,
	}
)

func (x UpdateNewsletterTranslationInput_Patch) Enum() *UpdateNewsletterTranslationInput_Patch {
	p := new(UpdateNewsletterTranslationInput_Patch)
	*p = x
	return p
}

func (x UpdateNewsletterTranslationInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateNewsletterTranslationInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_newsletter_newsletter_service_proto_enumTypes[1].Descriptor()
}

func (UpdateNewsletterTranslationInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_newsletter_newsletter_service_proto_enumTypes[1]
}

func (x UpdateNewsletterTranslationInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateNewsletterTranslationInput_Patch.Descriptor instead.
func (UpdateNewsletterTranslationInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{20, 0}
}

type DescribeNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
}

func (x *DescribeNewsletterInput) Reset() {
	*x = DescribeNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNewsletterInput) ProtoMessage() {}

func (x *DescribeNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNewsletterInput.ProtoReflect.Descriptor instead.
func (*DescribeNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeNewsletterInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

type DescribeNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newsletter *Newsletter `protobuf:"bytes,1,opt,name=newsletter,proto3" json:"newsletter,omitempty"`
}

func (x *DescribeNewsletterOutput) Reset() {
	*x = DescribeNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNewsletterOutput) ProtoMessage() {}

func (x *DescribeNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNewsletterOutput.ProtoReflect.Descriptor instead.
func (*DescribeNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{1}
}

func (x *DescribeNewsletterOutput) GetNewsletter() *Newsletter {
	if x != nil {
		return x.Newsletter
	}
	return nil
}

type ListNewslettersInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNewslettersInput) Reset() {
	*x = ListNewslettersInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewslettersInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewslettersInput) ProtoMessage() {}

func (x *ListNewslettersInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewslettersInput.ProtoReflect.Descriptor instead.
func (*ListNewslettersInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListNewslettersInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNewslettersInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNewslettersOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Newsletter `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListNewslettersOutput) Reset() {
	*x = ListNewslettersOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewslettersOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewslettersOutput) ProtoMessage() {}

func (x *ListNewslettersOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewslettersOutput.ProtoReflect.Descriptor instead.
func (*ListNewslettersOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListNewslettersOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNewslettersOutput) GetItems() []*Newsletter {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newsletter *Newsletter `protobuf:"bytes,1,opt,name=newsletter,proto3" json:"newsletter,omitempty"`
}

func (x *CreateNewsletterInput) Reset() {
	*x = CreateNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsletterInput) ProtoMessage() {}

func (x *CreateNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsletterInput.ProtoReflect.Descriptor instead.
func (*CreateNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNewsletterInput) GetNewsletter() *Newsletter {
	if x != nil {
		return x.Newsletter
	}
	return nil
}

type CreateNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
}

func (x *CreateNewsletterOutput) Reset() {
	*x = CreateNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsletterOutput) ProtoMessage() {}

func (x *CreateNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsletterOutput.ProtoReflect.Descriptor instead.
func (*CreateNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNewsletterOutput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

type UpdateNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patch        []UpdateNewsletterInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.newsletter.UpdateNewsletterInput_Patch" json:"patch,omitempty"`
	NewsletterId string                        `protobuf:"bytes,2,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	Newsletter   *Newsletter                   `protobuf:"bytes,3,opt,name=newsletter,proto3" json:"newsletter,omitempty"`
}

func (x *UpdateNewsletterInput) Reset() {
	*x = UpdateNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsletterInput) ProtoMessage() {}

func (x *UpdateNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsletterInput.ProtoReflect.Descriptor instead.
func (*UpdateNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNewsletterInput) GetPatch() []UpdateNewsletterInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateNewsletterInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *UpdateNewsletterInput) GetNewsletter() *Newsletter {
	if x != nil {
		return x.Newsletter
	}
	return nil
}

type UpdateNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNewsletterOutput) Reset() {
	*x = UpdateNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsletterOutput) ProtoMessage() {}

func (x *UpdateNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsletterOutput.ProtoReflect.Descriptor instead.
func (*UpdateNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{7}
}

type DeleteNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
}

func (x *DeleteNewsletterInput) Reset() {
	*x = DeleteNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsletterInput) ProtoMessage() {}

func (x *DeleteNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsletterInput.ProtoReflect.Descriptor instead.
func (*DeleteNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteNewsletterInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

type DeleteNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNewsletterOutput) Reset() {
	*x = DeleteNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsletterOutput) ProtoMessage() {}

func (x *DeleteNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsletterOutput.ProtoReflect.Descriptor instead.
func (*DeleteNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{9}
}

type SendNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
}

func (x *SendNewsletterInput) Reset() {
	*x = SendNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNewsletterInput) ProtoMessage() {}

func (x *SendNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNewsletterInput.ProtoReflect.Descriptor instead.
func (*SendNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{10}
}

func (x *SendNewsletterInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

type SendNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendNewsletterOutput) Reset() {
	*x = SendNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNewsletterOutput) ProtoMessage() {}

func (x *SendNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNewsletterOutput.ProtoReflect.Descriptor instead.
func (*SendNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{11}
}

type TestNewsletterInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Locale       string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *TestNewsletterInput) Reset() {
	*x = TestNewsletterInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestNewsletterInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNewsletterInput) ProtoMessage() {}

func (x *TestNewsletterInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNewsletterInput.ProtoReflect.Descriptor instead.
func (*TestNewsletterInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{12}
}

func (x *TestNewsletterInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *TestNewsletterInput) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TestNewsletterInput) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type TestNewsletterOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestNewsletterOutput) Reset() {
	*x = TestNewsletterOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestNewsletterOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNewsletterOutput) ProtoMessage() {}

func (x *TestNewsletterOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNewsletterOutput.ProtoReflect.Descriptor instead.
func (*TestNewsletterOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{13}
}

type DescribeNewsletterTranslationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId  string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	TranslationId string `protobuf:"bytes,2,opt,name=translation_id,json=translationId,proto3" json:"translation_id,omitempty"`
}

func (x *DescribeNewsletterTranslationInput) Reset() {
	*x = DescribeNewsletterTranslationInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNewsletterTranslationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNewsletterTranslationInput) ProtoMessage() {}

func (x *DescribeNewsletterTranslationInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNewsletterTranslationInput.ProtoReflect.Descriptor instead.
func (*DescribeNewsletterTranslationInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeNewsletterTranslationInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *DescribeNewsletterTranslationInput) GetTranslationId() string {
	if x != nil {
		return x.TranslationId
	}
	return ""
}

type DescribeNewsletterTranslationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Translation *Newsletter_Translation `protobuf:"bytes,1,opt,name=translation,proto3" json:"translation,omitempty"`
}

func (x *DescribeNewsletterTranslationOutput) Reset() {
	*x = DescribeNewsletterTranslationOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeNewsletterTranslationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNewsletterTranslationOutput) ProtoMessage() {}

func (x *DescribeNewsletterTranslationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeNewsletterTranslationOutput.ProtoReflect.Descriptor instead.
func (*DescribeNewsletterTranslationOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeNewsletterTranslationOutput) GetTranslation() *Newsletter_Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

type ListNewsletterTranslationsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string `protobuf:"bytes,2,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListNewsletterTranslationsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListNewsletterTranslationsInput) Reset() {
	*x = ListNewsletterTranslationsInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewsletterTranslationsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsletterTranslationsInput) ProtoMessage() {}

func (x *ListNewsletterTranslationsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsletterTranslationsInput.ProtoReflect.Descriptor instead.
func (*ListNewsletterTranslationsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListNewsletterTranslationsInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *ListNewsletterTranslationsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNewsletterTranslationsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListNewsletterTranslationsInput) GetFilters() *ListNewsletterTranslationsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListNewsletterTranslationsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Newsletter_Translation `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListNewsletterTranslationsOutput) Reset() {
	*x = ListNewsletterTranslationsOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewsletterTranslationsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsletterTranslationsOutput) ProtoMessage() {}

func (x *ListNewsletterTranslationsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsletterTranslationsOutput.ProtoReflect.Descriptor instead.
func (*ListNewsletterTranslationsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListNewsletterTranslationsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNewsletterTranslationsOutput) GetItems() []*Newsletter_Translation {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateNewsletterTranslationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId string                  `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	Translation  *Newsletter_Translation `protobuf:"bytes,2,opt,name=translation,proto3" json:"translation,omitempty"`
}

func (x *CreateNewsletterTranslationInput) Reset() {
	*x = CreateNewsletterTranslationInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewsletterTranslationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsletterTranslationInput) ProtoMessage() {}

func (x *CreateNewsletterTranslationInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsletterTranslationInput.ProtoReflect.Descriptor instead.
func (*CreateNewsletterTranslationInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{18}
}

func (x *CreateNewsletterTranslationInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *CreateNewsletterTranslationInput) GetTranslation() *Newsletter_Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

type CreateNewsletterTranslationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationId string `protobuf:"bytes,1,opt,name=translation_id,json=translationId,proto3" json:"translation_id,omitempty"`
}

func (x *CreateNewsletterTranslationOutput) Reset() {
	*x = CreateNewsletterTranslationOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNewsletterTranslationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewsletterTranslationOutput) ProtoMessage() {}

func (x *CreateNewsletterTranslationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewsletterTranslationOutput.ProtoReflect.Descriptor instead.
func (*CreateNewsletterTranslationOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{19}
}

func (x *CreateNewsletterTranslationOutput) GetTranslationId() string {
	if x != nil {
		return x.TranslationId
	}
	return ""
}

type UpdateNewsletterTranslationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patch         []UpdateNewsletterTranslationInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.newsletter.UpdateNewsletterTranslationInput_Patch" json:"patch,omitempty"`
	NewsletterId  string                                   `protobuf:"bytes,2,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	TranslationId string                                   `protobuf:"bytes,3,opt,name=translation_id,json=translationId,proto3" json:"translation_id,omitempty"`
	Translation   *Newsletter_Translation                  `protobuf:"bytes,4,opt,name=translation,proto3" json:"translation,omitempty"`
}

func (x *UpdateNewsletterTranslationInput) Reset() {
	*x = UpdateNewsletterTranslationInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsletterTranslationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsletterTranslationInput) ProtoMessage() {}

func (x *UpdateNewsletterTranslationInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsletterTranslationInput.ProtoReflect.Descriptor instead.
func (*UpdateNewsletterTranslationInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateNewsletterTranslationInput) GetPatch() []UpdateNewsletterTranslationInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateNewsletterTranslationInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *UpdateNewsletterTranslationInput) GetTranslationId() string {
	if x != nil {
		return x.TranslationId
	}
	return ""
}

func (x *UpdateNewsletterTranslationInput) GetTranslation() *Newsletter_Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

type UpdateNewsletterTranslationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNewsletterTranslationOutput) Reset() {
	*x = UpdateNewsletterTranslationOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNewsletterTranslationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewsletterTranslationOutput) ProtoMessage() {}

func (x *UpdateNewsletterTranslationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewsletterTranslationOutput.ProtoReflect.Descriptor instead.
func (*UpdateNewsletterTranslationOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{21}
}

type DeleteNewsletterTranslationInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewsletterId  string `protobuf:"bytes,1,opt,name=newsletter_id,json=newsletterId,proto3" json:"newsletter_id,omitempty"`
	TranslationId string `protobuf:"bytes,2,opt,name=translation_id,json=translationId,proto3" json:"translation_id,omitempty"`
}

func (x *DeleteNewsletterTranslationInput) Reset() {
	*x = DeleteNewsletterTranslationInput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNewsletterTranslationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsletterTranslationInput) ProtoMessage() {}

func (x *DeleteNewsletterTranslationInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsletterTranslationInput.ProtoReflect.Descriptor instead.
func (*DeleteNewsletterTranslationInput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteNewsletterTranslationInput) GetNewsletterId() string {
	if x != nil {
		return x.NewsletterId
	}
	return ""
}

func (x *DeleteNewsletterTranslationInput) GetTranslationId() string {
	if x != nil {
		return x.TranslationId
	}
	return ""
}

type DeleteNewsletterTranslationOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNewsletterTranslationOutput) Reset() {
	*x = DeleteNewsletterTranslationOutput{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNewsletterTranslationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsletterTranslationOutput) ProtoMessage() {}

func (x *DeleteNewsletterTranslationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsletterTranslationOutput.ProtoReflect.Descriptor instead.
func (*DeleteNewsletterTranslationOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{23}
}

type ListNewsletterTranslationsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string                      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Id     []*wellknown.ExpressionID   `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
	Locale []*wellknown.ExpressionEnum `protobuf:"bytes,4,rep,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ListNewsletterTranslationsInput_Filter) Reset() {
	*x = ListNewsletterTranslationsInput_Filter{}
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNewsletterTranslationsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewsletterTranslationsInput_Filter) ProtoMessage() {}

func (x *ListNewsletterTranslationsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_newsletter_newsletter_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewsletterTranslationsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListNewsletterTranslationsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListNewsletterTranslationsInput_Filter) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListNewsletterTranslationsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListNewsletterTranslationsInput_Filter) GetLocale() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Locale
	}
	return nil
}

var File_eolymp_newsletter_newsletter_service_proto protoreflect.FileDescriptor

var file_eolymp_newsletter_newsletter_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x1a,
	0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77,
	0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x17, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x18, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x62, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x44, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x18, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3c, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x3a, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x68, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x70, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4b,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x02, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x53, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x79, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc4,
	0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a,
	0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6e, 0x0a, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32,
	0xd6, 0x13, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x33, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0xf4, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x22, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2,
	0x0a, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x45, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x03,
	0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x0b, 0x2f, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x55, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a,
	0x05, 0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x55, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2,
	0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6e,
	0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5a, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x02, 0x82, 0xe3, 0x0a,
	0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x12, 0xbd, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x73,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5a, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x02, 0x82, 0xe3, 0x0a,
	0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x83, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x36, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x73, 0xea, 0xe2, 0x0a, 0x0c, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0xf4, 0x03, 0x82, 0xe3, 0x0a, 0x1e, 0x8a,
	0xe3, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe8,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x33, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x61, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x1e, 0x8a, 0xe3, 0x0a, 0x1a, 0x6e,
	0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65,
	0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x34,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x62, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x40, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28,
	0x2f, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x34, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x73, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40,
	0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x1a, 0x39, 0x2f,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xfd, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x34, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x73, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40,
	0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x1f, 0x8a, 0xe3, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3a, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x2a, 0x39, 0x2f,
	0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6e, 0x65, 0x77, 0x73,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_newsletter_newsletter_service_proto_rawDescOnce sync.Once
	file_eolymp_newsletter_newsletter_service_proto_rawDescData = file_eolymp_newsletter_newsletter_service_proto_rawDesc
)

func file_eolymp_newsletter_newsletter_service_proto_rawDescGZIP() []byte {
	file_eolymp_newsletter_newsletter_service_proto_rawDescOnce.Do(func() {
		file_eolymp_newsletter_newsletter_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_newsletter_newsletter_service_proto_rawDescData)
	})
	return file_eolymp_newsletter_newsletter_service_proto_rawDescData
}

var file_eolymp_newsletter_newsletter_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_newsletter_newsletter_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_eolymp_newsletter_newsletter_service_proto_goTypes = []any{
	(UpdateNewsletterInput_Patch)(0),               // 0: eolymp.newsletter.UpdateNewsletterInput.Patch
	(UpdateNewsletterTranslationInput_Patch)(0),    // 1: eolymp.newsletter.UpdateNewsletterTranslationInput.Patch
	(*DescribeNewsletterInput)(nil),                // 2: eolymp.newsletter.DescribeNewsletterInput
	(*DescribeNewsletterOutput)(nil),               // 3: eolymp.newsletter.DescribeNewsletterOutput
	(*ListNewslettersInput)(nil),                   // 4: eolymp.newsletter.ListNewslettersInput
	(*ListNewslettersOutput)(nil),                  // 5: eolymp.newsletter.ListNewslettersOutput
	(*CreateNewsletterInput)(nil),                  // 6: eolymp.newsletter.CreateNewsletterInput
	(*CreateNewsletterOutput)(nil),                 // 7: eolymp.newsletter.CreateNewsletterOutput
	(*UpdateNewsletterInput)(nil),                  // 8: eolymp.newsletter.UpdateNewsletterInput
	(*UpdateNewsletterOutput)(nil),                 // 9: eolymp.newsletter.UpdateNewsletterOutput
	(*DeleteNewsletterInput)(nil),                  // 10: eolymp.newsletter.DeleteNewsletterInput
	(*DeleteNewsletterOutput)(nil),                 // 11: eolymp.newsletter.DeleteNewsletterOutput
	(*SendNewsletterInput)(nil),                    // 12: eolymp.newsletter.SendNewsletterInput
	(*SendNewsletterOutput)(nil),                   // 13: eolymp.newsletter.SendNewsletterOutput
	(*TestNewsletterInput)(nil),                    // 14: eolymp.newsletter.TestNewsletterInput
	(*TestNewsletterOutput)(nil),                   // 15: eolymp.newsletter.TestNewsletterOutput
	(*DescribeNewsletterTranslationInput)(nil),     // 16: eolymp.newsletter.DescribeNewsletterTranslationInput
	(*DescribeNewsletterTranslationOutput)(nil),    // 17: eolymp.newsletter.DescribeNewsletterTranslationOutput
	(*ListNewsletterTranslationsInput)(nil),        // 18: eolymp.newsletter.ListNewsletterTranslationsInput
	(*ListNewsletterTranslationsOutput)(nil),       // 19: eolymp.newsletter.ListNewsletterTranslationsOutput
	(*CreateNewsletterTranslationInput)(nil),       // 20: eolymp.newsletter.CreateNewsletterTranslationInput
	(*CreateNewsletterTranslationOutput)(nil),      // 21: eolymp.newsletter.CreateNewsletterTranslationOutput
	(*UpdateNewsletterTranslationInput)(nil),       // 22: eolymp.newsletter.UpdateNewsletterTranslationInput
	(*UpdateNewsletterTranslationOutput)(nil),      // 23: eolymp.newsletter.UpdateNewsletterTranslationOutput
	(*DeleteNewsletterTranslationInput)(nil),       // 24: eolymp.newsletter.DeleteNewsletterTranslationInput
	(*DeleteNewsletterTranslationOutput)(nil),      // 25: eolymp.newsletter.DeleteNewsletterTranslationOutput
	(*ListNewsletterTranslationsInput_Filter)(nil), // 26: eolymp.newsletter.ListNewsletterTranslationsInput.Filter
	(*Newsletter)(nil),                             // 27: eolymp.newsletter.Newsletter
	(*Newsletter_Translation)(nil),                 // 28: eolymp.newsletter.Newsletter.Translation
	(*wellknown.ExpressionID)(nil),                 // 29: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionEnum)(nil),               // 30: eolymp.wellknown.ExpressionEnum
}
var file_eolymp_newsletter_newsletter_service_proto_depIdxs = []int32{
	27, // 0: eolymp.newsletter.DescribeNewsletterOutput.newsletter:type_name -> eolymp.newsletter.Newsletter
	27, // 1: eolymp.newsletter.ListNewslettersOutput.items:type_name -> eolymp.newsletter.Newsletter
	27, // 2: eolymp.newsletter.CreateNewsletterInput.newsletter:type_name -> eolymp.newsletter.Newsletter
	0,  // 3: eolymp.newsletter.UpdateNewsletterInput.patch:type_name -> eolymp.newsletter.UpdateNewsletterInput.Patch
	27, // 4: eolymp.newsletter.UpdateNewsletterInput.newsletter:type_name -> eolymp.newsletter.Newsletter
	28, // 5: eolymp.newsletter.DescribeNewsletterTranslationOutput.translation:type_name -> eolymp.newsletter.Newsletter.Translation
	26, // 6: eolymp.newsletter.ListNewsletterTranslationsInput.filters:type_name -> eolymp.newsletter.ListNewsletterTranslationsInput.Filter
	28, // 7: eolymp.newsletter.ListNewsletterTranslationsOutput.items:type_name -> eolymp.newsletter.Newsletter.Translation
	28, // 8: eolymp.newsletter.CreateNewsletterTranslationInput.translation:type_name -> eolymp.newsletter.Newsletter.Translation
	1,  // 9: eolymp.newsletter.UpdateNewsletterTranslationInput.patch:type_name -> eolymp.newsletter.UpdateNewsletterTranslationInput.Patch
	28, // 10: eolymp.newsletter.UpdateNewsletterTranslationInput.translation:type_name -> eolymp.newsletter.Newsletter.Translation
	29, // 11: eolymp.newsletter.ListNewsletterTranslationsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	30, // 12: eolymp.newsletter.ListNewsletterTranslationsInput.Filter.locale:type_name -> eolymp.wellknown.ExpressionEnum
	2,  // 13: eolymp.newsletter.NewsletterService.DescribeNewsletter:input_type -> eolymp.newsletter.DescribeNewsletterInput
	4,  // 14: eolymp.newsletter.NewsletterService.ListNewsletters:input_type -> eolymp.newsletter.ListNewslettersInput
	6,  // 15: eolymp.newsletter.NewsletterService.CreateNewsletter:input_type -> eolymp.newsletter.CreateNewsletterInput
	8,  // 16: eolymp.newsletter.NewsletterService.UpdateNewsletter:input_type -> eolymp.newsletter.UpdateNewsletterInput
	10, // 17: eolymp.newsletter.NewsletterService.DeleteNewsletter:input_type -> eolymp.newsletter.DeleteNewsletterInput
	12, // 18: eolymp.newsletter.NewsletterService.SendNewsletter:input_type -> eolymp.newsletter.SendNewsletterInput
	14, // 19: eolymp.newsletter.NewsletterService.TestNewsletter:input_type -> eolymp.newsletter.TestNewsletterInput
	16, // 20: eolymp.newsletter.NewsletterService.DescribeNewsletterTranslation:input_type -> eolymp.newsletter.DescribeNewsletterTranslationInput
	18, // 21: eolymp.newsletter.NewsletterService.ListNewsletterTranslations:input_type -> eolymp.newsletter.ListNewsletterTranslationsInput
	20, // 22: eolymp.newsletter.NewsletterService.CreateNewsletterTranslation:input_type -> eolymp.newsletter.CreateNewsletterTranslationInput
	22, // 23: eolymp.newsletter.NewsletterService.UpdateNewsletterTranslation:input_type -> eolymp.newsletter.UpdateNewsletterTranslationInput
	24, // 24: eolymp.newsletter.NewsletterService.DeleteNewsletterTranslation:input_type -> eolymp.newsletter.DeleteNewsletterTranslationInput
	3,  // 25: eolymp.newsletter.NewsletterService.DescribeNewsletter:output_type -> eolymp.newsletter.DescribeNewsletterOutput
	5,  // 26: eolymp.newsletter.NewsletterService.ListNewsletters:output_type -> eolymp.newsletter.ListNewslettersOutput
	7,  // 27: eolymp.newsletter.NewsletterService.CreateNewsletter:output_type -> eolymp.newsletter.CreateNewsletterOutput
	9,  // 28: eolymp.newsletter.NewsletterService.UpdateNewsletter:output_type -> eolymp.newsletter.UpdateNewsletterOutput
	11, // 29: eolymp.newsletter.NewsletterService.DeleteNewsletter:output_type -> eolymp.newsletter.DeleteNewsletterOutput
	13, // 30: eolymp.newsletter.NewsletterService.SendNewsletter:output_type -> eolymp.newsletter.SendNewsletterOutput
	15, // 31: eolymp.newsletter.NewsletterService.TestNewsletter:output_type -> eolymp.newsletter.TestNewsletterOutput
	17, // 32: eolymp.newsletter.NewsletterService.DescribeNewsletterTranslation:output_type -> eolymp.newsletter.DescribeNewsletterTranslationOutput
	19, // 33: eolymp.newsletter.NewsletterService.ListNewsletterTranslations:output_type -> eolymp.newsletter.ListNewsletterTranslationsOutput
	21, // 34: eolymp.newsletter.NewsletterService.CreateNewsletterTranslation:output_type -> eolymp.newsletter.CreateNewsletterTranslationOutput
	23, // 35: eolymp.newsletter.NewsletterService.UpdateNewsletterTranslation:output_type -> eolymp.newsletter.UpdateNewsletterTranslationOutput
	25, // 36: eolymp.newsletter.NewsletterService.DeleteNewsletterTranslation:output_type -> eolymp.newsletter.DeleteNewsletterTranslationOutput
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_eolymp_newsletter_newsletter_service_proto_init() }
func file_eolymp_newsletter_newsletter_service_proto_init() {
	if File_eolymp_newsletter_newsletter_service_proto != nil {
		return
	}
	file_eolymp_newsletter_newsletter_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_newsletter_newsletter_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_newsletter_newsletter_service_proto_goTypes,
		DependencyIndexes: file_eolymp_newsletter_newsletter_service_proto_depIdxs,
		EnumInfos:         file_eolymp_newsletter_newsletter_service_proto_enumTypes,
		MessageInfos:      file_eolymp_newsletter_newsletter_service_proto_msgTypes,
	}.Build()
	File_eolymp_newsletter_newsletter_service_proto = out.File
	file_eolymp_newsletter_newsletter_service_proto_rawDesc = nil
	file_eolymp_newsletter_newsletter_service_proto_goTypes = nil
	file_eolymp_newsletter_newsletter_service_proto_depIdxs = nil
}
