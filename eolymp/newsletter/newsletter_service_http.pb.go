// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package newsletter

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _NewsletterService_HTTPReadQueryString parses body into proto.Message
func _NewsletterService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _NewsletterService_HTTPReadRequestBody parses body into proto.Message
func _NewsletterService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _NewsletterService_HTTPWriteResponse writes proto.Message to HTTP response
func _NewsletterService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_NewsletterService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _NewsletterService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _NewsletterService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterNewsletterServiceHttpHandlers adds handlers for for NewsletterServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterNewsletterServiceHttpHandlers(router *mux.Router, prefix string, cli NewsletterServiceClient) {
	router.Handle(prefix+"/newsletter/{newsletter_id}", _NewsletterService_DescribeNewsletter_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.NewsletterService.DescribeNewsletter")
	router.Handle(prefix+"/newsletter", _NewsletterService_ListNewsletters_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.NewsletterService.ListNewsletters")
	router.Handle(prefix+"/newsletter", _NewsletterService_CreateNewsletter_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.NewsletterService.CreateNewsletter")
	router.Handle(prefix+"/newsletter/{newsletter_id}", _NewsletterService_UpdateNewsletter_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.newsletter.NewsletterService.UpdateNewsletter")
	router.Handle(prefix+"/newsletter/{newsletter_id}", _NewsletterService_DeleteNewsletter_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.newsletter.NewsletterService.DeleteNewsletter")
	router.Handle(prefix+"/newsletter/{newsletter_id}/send", _NewsletterService_SendNewsletter_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.NewsletterService.SendNewsletter")
	router.Handle(prefix+"/newsletter/{newsletter_id}/test", _NewsletterService_TestNewsletter_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.NewsletterService.TestNewsletter")
	router.Handle(prefix+"/newsletter/{newsletter_id}/translations/{translation_id}", _NewsletterService_DescribeNewsletterTranslation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.NewsletterService.DescribeNewsletterTranslation")
	router.Handle(prefix+"/newsletter/{newsletter_id}/translations", _NewsletterService_ListNewsletterTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.newsletter.NewsletterService.ListNewsletterTranslations")
	router.Handle(prefix+"/newsletter/{newsletter_id}/translations", _NewsletterService_CreateNewsletterTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.newsletter.NewsletterService.CreateNewsletterTranslation")
	router.Handle(prefix+"/newsletter/{newsletter_id}/translations/{translation_id}", _NewsletterService_UpdateNewsletterTranslation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.newsletter.NewsletterService.UpdateNewsletterTranslation")
	router.Handle(prefix+"/newsletter/{newsletter_id}/translations/{translation_id}", _NewsletterService_DeleteNewsletterTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.newsletter.NewsletterService.DeleteNewsletterTranslation")
}

func _NewsletterService_DescribeNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeNewsletterInput{}

		if err := _NewsletterService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_ListNewsletters_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListNewslettersInput{}

		if err := _NewsletterService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListNewsletters(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_CreateNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateNewsletterInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_UpdateNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateNewsletterInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_DeleteNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteNewsletterInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_SendNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SendNewsletterInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.SendNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_TestNewsletter_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TestNewsletterInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.TestNewsletter(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_DescribeNewsletterTranslation_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeNewsletterTranslationInput{}

		if err := _NewsletterService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeNewsletterTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_ListNewsletterTranslations_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListNewsletterTranslationsInput{}

		if err := _NewsletterService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.ListNewsletterTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_CreateNewsletterTranslation_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateNewsletterTranslationInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateNewsletterTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_UpdateNewsletterTranslation_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateNewsletterTranslationInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateNewsletterTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _NewsletterService_DeleteNewsletterTranslation_Rule0(cli NewsletterServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteNewsletterTranslationInput{}

		if err := _NewsletterService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.NewsletterId = vars["newsletter_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteNewsletterTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_NewsletterService_HTTPWriteErrorResponse(w, err)
			return
		}

		_NewsletterService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _NewsletterServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _NewsletterServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _NewsletterServiceHandler) (out proto.Message, err error)
type NewsletterServiceInterceptor struct {
	middleware []_NewsletterServiceMiddleware
	client     NewsletterServiceClient
}

// NewNewsletterServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewNewsletterServiceInterceptor(cli NewsletterServiceClient, middleware ..._NewsletterServiceMiddleware) *NewsletterServiceInterceptor {
	return &NewsletterServiceInterceptor{client: cli, middleware: middleware}
}

func (i *NewsletterServiceInterceptor) DescribeNewsletter(ctx context.Context, in *DescribeNewsletterInput, opts ...grpc.CallOption) (*DescribeNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeNewsletterInput, got %T", in))
		}

		return i.client.DescribeNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.DescribeNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) ListNewsletters(ctx context.Context, in *ListNewslettersInput, opts ...grpc.CallOption) (*ListNewslettersOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListNewslettersInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListNewslettersInput, got %T", in))
		}

		return i.client.ListNewsletters(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.ListNewsletters", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListNewslettersOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListNewslettersOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) CreateNewsletter(ctx context.Context, in *CreateNewsletterInput, opts ...grpc.CallOption) (*CreateNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateNewsletterInput, got %T", in))
		}

		return i.client.CreateNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.CreateNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) UpdateNewsletter(ctx context.Context, in *UpdateNewsletterInput, opts ...grpc.CallOption) (*UpdateNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateNewsletterInput, got %T", in))
		}

		return i.client.UpdateNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.UpdateNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) DeleteNewsletter(ctx context.Context, in *DeleteNewsletterInput, opts ...grpc.CallOption) (*DeleteNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteNewsletterInput, got %T", in))
		}

		return i.client.DeleteNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.DeleteNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) SendNewsletter(ctx context.Context, in *SendNewsletterInput, opts ...grpc.CallOption) (*SendNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SendNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SendNewsletterInput, got %T", in))
		}

		return i.client.SendNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.SendNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SendNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SendNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) TestNewsletter(ctx context.Context, in *TestNewsletterInput, opts ...grpc.CallOption) (*TestNewsletterOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*TestNewsletterInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *TestNewsletterInput, got %T", in))
		}

		return i.client.TestNewsletter(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.TestNewsletter", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*TestNewsletterOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *TestNewsletterOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) DescribeNewsletterTranslation(ctx context.Context, in *DescribeNewsletterTranslationInput, opts ...grpc.CallOption) (*DescribeNewsletterTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeNewsletterTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeNewsletterTranslationInput, got %T", in))
		}

		return i.client.DescribeNewsletterTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.DescribeNewsletterTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeNewsletterTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeNewsletterTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) ListNewsletterTranslations(ctx context.Context, in *ListNewsletterTranslationsInput, opts ...grpc.CallOption) (*ListNewsletterTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListNewsletterTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListNewsletterTranslationsInput, got %T", in))
		}

		return i.client.ListNewsletterTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.ListNewsletterTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListNewsletterTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListNewsletterTranslationsOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) CreateNewsletterTranslation(ctx context.Context, in *CreateNewsletterTranslationInput, opts ...grpc.CallOption) (*CreateNewsletterTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateNewsletterTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateNewsletterTranslationInput, got %T", in))
		}

		return i.client.CreateNewsletterTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.CreateNewsletterTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateNewsletterTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateNewsletterTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) UpdateNewsletterTranslation(ctx context.Context, in *UpdateNewsletterTranslationInput, opts ...grpc.CallOption) (*UpdateNewsletterTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateNewsletterTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateNewsletterTranslationInput, got %T", in))
		}

		return i.client.UpdateNewsletterTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.UpdateNewsletterTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateNewsletterTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateNewsletterTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *NewsletterServiceInterceptor) DeleteNewsletterTranslation(ctx context.Context, in *DeleteNewsletterTranslationInput, opts ...grpc.CallOption) (*DeleteNewsletterTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteNewsletterTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteNewsletterTranslationInput, got %T", in))
		}

		return i.client.DeleteNewsletterTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.newsletter.NewsletterService.DeleteNewsletterTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteNewsletterTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteNewsletterTranslationOutput, got %T", out))
	}

	return message, err
}
