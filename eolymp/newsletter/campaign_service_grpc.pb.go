// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/newsletter/campaign_service.proto

package newsletter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CampaignService_CreateCampaign_FullMethodName      = "/eolymp.newsletter.CampaignService/CreateCampaign"
	CampaignService_UpdateCampaign_FullMethodName      = "/eolymp.newsletter.CampaignService/UpdateCampaign"
	CampaignService_DeleteCampaign_FullMethodName      = "/eolymp.newsletter.CampaignService/DeleteCampaign"
	CampaignService_DescribeCampaign_FullMethodName    = "/eolymp.newsletter.CampaignService/DescribeCampaign"
	CampaignService_ListCampaigns_FullMethodName       = "/eolymp.newsletter.CampaignService/ListCampaigns"
	CampaignService_TestCampaign_FullMethodName        = "/eolymp.newsletter.CampaignService/TestCampaign"
	CampaignService_SendCampaign_FullMethodName        = "/eolymp.newsletter.CampaignService/SendCampaign"
	CampaignService_CreateTranslation_FullMethodName   = "/eolymp.newsletter.CampaignService/CreateTranslation"
	CampaignService_UpdateTranslation_FullMethodName   = "/eolymp.newsletter.CampaignService/UpdateTranslation"
	CampaignService_DeleteTranslation_FullMethodName   = "/eolymp.newsletter.CampaignService/DeleteTranslation"
	CampaignService_DescribeTranslation_FullMethodName = "/eolymp.newsletter.CampaignService/DescribeTranslation"
	CampaignService_ListTranslations_FullMethodName    = "/eolymp.newsletter.CampaignService/ListTranslations"
	CampaignService_CreateRecipient_FullMethodName     = "/eolymp.newsletter.CampaignService/CreateRecipient"
	CampaignService_DeleteRecipient_FullMethodName     = "/eolymp.newsletter.CampaignService/DeleteRecipient"
	CampaignService_ListRecipients_FullMethodName      = "/eolymp.newsletter.CampaignService/ListRecipients"
	CampaignService_DescribeRecipient_FullMethodName   = "/eolymp.newsletter.CampaignService/DescribeRecipient"
)

// CampaignServiceClient is the client API for CampaignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignServiceClient interface {
	CreateCampaign(ctx context.Context, in *CreateCampaignInput, opts ...grpc.CallOption) (*CreateCampaignOutput, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignInput, opts ...grpc.CallOption) (*UpdateCampaignOutput, error)
	DeleteCampaign(ctx context.Context, in *DeleteCampaignInput, opts ...grpc.CallOption) (*DeleteCampaignOutput, error)
	DescribeCampaign(ctx context.Context, in *DescribeCampaignInput, opts ...grpc.CallOption) (*DescribeCampaignOutput, error)
	ListCampaigns(ctx context.Context, in *ListCampaignsInput, opts ...grpc.CallOption) (*ListCampaignsOutput, error)
	TestCampaign(ctx context.Context, in *TestCampaignInput, opts ...grpc.CallOption) (*TestCampaignOutput, error)
	SendCampaign(ctx context.Context, in *SendCampaignInput, opts ...grpc.CallOption) (*SendCampaignOutput, error)
	CreateTranslation(ctx context.Context, in *CreateTranslationInput, opts ...grpc.CallOption) (*CreateTranslationOutput, error)
	UpdateTranslation(ctx context.Context, in *UpdateTranslationInput, opts ...grpc.CallOption) (*UpdateTranslationOutput, error)
	DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error)
	DescribeTranslation(ctx context.Context, in *DescribeTranslationInput, opts ...grpc.CallOption) (*DescribeTranslationOutput, error)
	ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error)
	CreateRecipient(ctx context.Context, in *CreateRecipientInput, opts ...grpc.CallOption) (*CreateRecipientOutput, error)
	DeleteRecipient(ctx context.Context, in *DeleteRecipientInput, opts ...grpc.CallOption) (*DeleteRecipientOutput, error)
	ListRecipients(ctx context.Context, in *ListRecipientsInput, opts ...grpc.CallOption) (*ListRecipientsOutput, error)
	DescribeRecipient(ctx context.Context, in *DescribeRecipientInput, opts ...grpc.CallOption) (*DescribeRecipientOutput, error)
}

type campaignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignServiceClient(cc grpc.ClientConnInterface) CampaignServiceClient {
	return &campaignServiceClient{cc}
}

func (c *campaignServiceClient) CreateCampaign(ctx context.Context, in *CreateCampaignInput, opts ...grpc.CallOption) (*CreateCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignInput, opts ...grpc.CallOption) (*UpdateCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_UpdateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteCampaign(ctx context.Context, in *DeleteCampaignInput, opts ...grpc.CallOption) (*DeleteCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DescribeCampaign(ctx context.Context, in *DescribeCampaignInput, opts ...grpc.CallOption) (*DescribeCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_DescribeCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListCampaigns(ctx context.Context, in *ListCampaignsInput, opts ...grpc.CallOption) (*ListCampaignsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignsOutput)
	err := c.cc.Invoke(ctx, CampaignService_ListCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) TestCampaign(ctx context.Context, in *TestCampaignInput, opts ...grpc.CallOption) (*TestCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_TestCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) SendCampaign(ctx context.Context, in *SendCampaignInput, opts ...grpc.CallOption) (*SendCampaignOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCampaignOutput)
	err := c.cc.Invoke(ctx, CampaignService_SendCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) CreateTranslation(ctx context.Context, in *CreateTranslationInput, opts ...grpc.CallOption) (*CreateTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTranslationOutput)
	err := c.cc.Invoke(ctx, CampaignService_CreateTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateTranslation(ctx context.Context, in *UpdateTranslationInput, opts ...grpc.CallOption) (*UpdateTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTranslationOutput)
	err := c.cc.Invoke(ctx, CampaignService_UpdateTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTranslationOutput)
	err := c.cc.Invoke(ctx, CampaignService_DeleteTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DescribeTranslation(ctx context.Context, in *DescribeTranslationInput, opts ...grpc.CallOption) (*DescribeTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTranslationOutput)
	err := c.cc.Invoke(ctx, CampaignService_DescribeTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTranslationsOutput)
	err := c.cc.Invoke(ctx, CampaignService_ListTranslations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) CreateRecipient(ctx context.Context, in *CreateRecipientInput, opts ...grpc.CallOption) (*CreateRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecipientOutput)
	err := c.cc.Invoke(ctx, CampaignService_CreateRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteRecipient(ctx context.Context, in *DeleteRecipientInput, opts ...grpc.CallOption) (*DeleteRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecipientOutput)
	err := c.cc.Invoke(ctx, CampaignService_DeleteRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListRecipients(ctx context.Context, in *ListRecipientsInput, opts ...grpc.CallOption) (*ListRecipientsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecipientsOutput)
	err := c.cc.Invoke(ctx, CampaignService_ListRecipients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DescribeRecipient(ctx context.Context, in *DescribeRecipientInput, opts ...grpc.CallOption) (*DescribeRecipientOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeRecipientOutput)
	err := c.cc.Invoke(ctx, CampaignService_DescribeRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignServiceServer is the server API for CampaignService service.
// All implementations should embed UnimplementedCampaignServiceServer
// for forward compatibility.
type CampaignServiceServer interface {
	CreateCampaign(context.Context, *CreateCampaignInput) (*CreateCampaignOutput, error)
	UpdateCampaign(context.Context, *UpdateCampaignInput) (*UpdateCampaignOutput, error)
	DeleteCampaign(context.Context, *DeleteCampaignInput) (*DeleteCampaignOutput, error)
	DescribeCampaign(context.Context, *DescribeCampaignInput) (*DescribeCampaignOutput, error)
	ListCampaigns(context.Context, *ListCampaignsInput) (*ListCampaignsOutput, error)
	TestCampaign(context.Context, *TestCampaignInput) (*TestCampaignOutput, error)
	SendCampaign(context.Context, *SendCampaignInput) (*SendCampaignOutput, error)
	CreateTranslation(context.Context, *CreateTranslationInput) (*CreateTranslationOutput, error)
	UpdateTranslation(context.Context, *UpdateTranslationInput) (*UpdateTranslationOutput, error)
	DeleteTranslation(context.Context, *DeleteTranslationInput) (*DeleteTranslationOutput, error)
	DescribeTranslation(context.Context, *DescribeTranslationInput) (*DescribeTranslationOutput, error)
	ListTranslations(context.Context, *ListTranslationsInput) (*ListTranslationsOutput, error)
	CreateRecipient(context.Context, *CreateRecipientInput) (*CreateRecipientOutput, error)
	DeleteRecipient(context.Context, *DeleteRecipientInput) (*DeleteRecipientOutput, error)
	ListRecipients(context.Context, *ListRecipientsInput) (*ListRecipientsOutput, error)
	DescribeRecipient(context.Context, *DescribeRecipientInput) (*DescribeRecipientOutput, error)
}

// UnimplementedCampaignServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCampaignServiceServer struct{}

func (UnimplementedCampaignServiceServer) CreateCampaign(context.Context, *CreateCampaignInput) (*CreateCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateCampaign(context.Context, *UpdateCampaignInput) (*UpdateCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteCampaign(context.Context, *DeleteCampaignInput) (*DeleteCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) DescribeCampaign(context.Context, *DescribeCampaignInput) (*DescribeCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) ListCampaigns(context.Context, *ListCampaignsInput) (*ListCampaignsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedCampaignServiceServer) TestCampaign(context.Context, *TestCampaignInput) (*TestCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) SendCampaign(context.Context, *SendCampaignInput) (*SendCampaignOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCampaign not implemented")
}
func (UnimplementedCampaignServiceServer) CreateTranslation(context.Context, *CreateTranslationInput) (*CreateTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranslation not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateTranslation(context.Context, *UpdateTranslationInput) (*UpdateTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTranslation not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteTranslation(context.Context, *DeleteTranslationInput) (*DeleteTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranslation not implemented")
}
func (UnimplementedCampaignServiceServer) DescribeTranslation(context.Context, *DescribeTranslationInput) (*DescribeTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTranslation not implemented")
}
func (UnimplementedCampaignServiceServer) ListTranslations(context.Context, *ListTranslationsInput) (*ListTranslationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranslations not implemented")
}
func (UnimplementedCampaignServiceServer) CreateRecipient(context.Context, *CreateRecipientInput) (*CreateRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipient not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteRecipient(context.Context, *DeleteRecipientInput) (*DeleteRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipient not implemented")
}
func (UnimplementedCampaignServiceServer) ListRecipients(context.Context, *ListRecipientsInput) (*ListRecipientsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipients not implemented")
}
func (UnimplementedCampaignServiceServer) DescribeRecipient(context.Context, *DescribeRecipientInput) (*DescribeRecipientOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRecipient not implemented")
}
func (UnimplementedCampaignServiceServer) testEmbeddedByValue() {}

// UnsafeCampaignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignServiceServer will
// result in compilation errors.
type UnsafeCampaignServiceServer interface {
	mustEmbedUnimplementedCampaignServiceServer()
}

func RegisterCampaignServiceServer(s grpc.ServiceRegistrar, srv CampaignServiceServer) {
	// If the following call pancis, it indicates UnimplementedCampaignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CampaignService_ServiceDesc, srv)
}

func _CampaignService_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateCampaign(ctx, req.(*CreateCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateCampaign(ctx, req.(*UpdateCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteCampaign(ctx, req.(*DeleteCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DescribeCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DescribeCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DescribeCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DescribeCampaign(ctx, req.(*DescribeCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListCampaigns(ctx, req.(*ListCampaignsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_TestCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).TestCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_TestCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).TestCampaign(ctx, req.(*TestCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_SendCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCampaignInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).SendCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_SendCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).SendCampaign(ctx, req.(*SendCampaignInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_CreateTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateTranslation(ctx, req.(*CreateTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateTranslation(ctx, req.(*UpdateTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteTranslation(ctx, req.(*DeleteTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DescribeTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DescribeTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DescribeTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DescribeTranslation(ctx, req.(*DescribeTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranslationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListTranslations(ctx, req.(*ListTranslationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_CreateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateRecipient(ctx, req.(*CreateRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteRecipient(ctx, req.(*DeleteRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipientsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListRecipients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListRecipients(ctx, req.(*ListRecipientsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DescribeRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRecipientInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DescribeRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DescribeRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DescribeRecipient(ctx, req.(*DescribeRecipientInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignService_ServiceDesc is the grpc.ServiceDesc for CampaignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.newsletter.CampaignService",
	HandlerType: (*CampaignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaign",
			Handler:    _CampaignService_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _CampaignService_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _CampaignService_DeleteCampaign_Handler,
		},
		{
			MethodName: "DescribeCampaign",
			Handler:    _CampaignService_DescribeCampaign_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _CampaignService_ListCampaigns_Handler,
		},
		{
			MethodName: "TestCampaign",
			Handler:    _CampaignService_TestCampaign_Handler,
		},
		{
			MethodName: "SendCampaign",
			Handler:    _CampaignService_SendCampaign_Handler,
		},
		{
			MethodName: "CreateTranslation",
			Handler:    _CampaignService_CreateTranslation_Handler,
		},
		{
			MethodName: "UpdateTranslation",
			Handler:    _CampaignService_UpdateTranslation_Handler,
		},
		{
			MethodName: "DeleteTranslation",
			Handler:    _CampaignService_DeleteTranslation_Handler,
		},
		{
			MethodName: "DescribeTranslation",
			Handler:    _CampaignService_DescribeTranslation_Handler,
		},
		{
			MethodName: "ListTranslations",
			Handler:    _CampaignService_ListTranslations_Handler,
		},
		{
			MethodName: "CreateRecipient",
			Handler:    _CampaignService_CreateRecipient_Handler,
		},
		{
			MethodName: "DeleteRecipient",
			Handler:    _CampaignService_DeleteRecipient_Handler,
		},
		{
			MethodName: "ListRecipients",
			Handler:    _CampaignService_ListRecipients_Handler,
		},
		{
			MethodName: "DescribeRecipient",
			Handler:    _CampaignService_DescribeRecipient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/newsletter/campaign_service.proto",
}
