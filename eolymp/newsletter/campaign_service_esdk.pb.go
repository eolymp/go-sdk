// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package newsletter

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

type _CampaignServiceHttpClient interface {
	Do(*http.Request) (*http.Response, error)
}

type CampaignServiceService struct {
	base string
	cli  _CampaignServiceHttpClient
}

// NewCampaignServiceHttpClient constructs client for CampaignService
func NewCampaignServiceHttpClient(url string, cli _CampaignServiceHttpClient) *CampaignServiceService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &CampaignServiceService{base: url, cli: cli}
}

func (s *CampaignServiceService) do(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	var body io.Reader

	if in != nil {
		data, err := protojson.Marshal(in)
		if err != nil {
			return err
		}

		if verb != "GET" {
			body = bytes.NewReader(data)
		} else {
			query := url.Values{"q": []string{string(data)}}
			path = path + "?" + query.Encode()
		}
	}

	if in == nil && verb != "GET" {
		body = bytes.NewReader([]byte("{}"))
	}

	req, err := http.NewRequest(verb, s.base+path, body)
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *CampaignServiceService) CreateCampaign(ctx context.Context, in *CreateCampaignInput) (*CreateCampaignOutput, error) {
	out := &CreateCampaignOutput{}
	path := "/campaigns"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) UpdateCampaign(ctx context.Context, in *UpdateCampaignInput) (*UpdateCampaignOutput, error) {
	out := &UpdateCampaignOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DeleteCampaign(ctx context.Context, in *DeleteCampaignInput) (*DeleteCampaignOutput, error) {
	out := &DeleteCampaignOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DescribeCampaign(ctx context.Context, in *DescribeCampaignInput) (*DescribeCampaignOutput, error) {
	out := &DescribeCampaignOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) ListCampaigns(ctx context.Context, in *ListCampaignsInput) (*ListCampaignsOutput, error) {
	out := &ListCampaignsOutput{}
	path := "/campaigns"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) TestCampaign(ctx context.Context, in *TestCampaignInput) (*TestCampaignOutput, error) {
	out := &TestCampaignOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/test"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) SendCampaign(ctx context.Context, in *SendCampaignInput) (*SendCampaignOutput, error) {
	out := &SendCampaignOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/send"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) CreateTranslation(ctx context.Context, in *CreateTranslationInput) (*CreateTranslationOutput, error) {
	out := &CreateTranslationOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/translations"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) UpdateTranslation(ctx context.Context, in *UpdateTranslationInput) (*UpdateTranslationOutput, error) {
	out := &UpdateTranslationOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/translations/" + url.PathEscape(in.GetTranslationId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
		in.TranslationId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DeleteTranslation(ctx context.Context, in *DeleteTranslationInput) (*DeleteTranslationOutput, error) {
	out := &DeleteTranslationOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/translations/" + url.PathEscape(in.GetTranslationId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
		in.TranslationId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DescribeTranslation(ctx context.Context, in *DescribeTranslationInput) (*DescribeTranslationOutput, error) {
	out := &DescribeTranslationOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/translations/" + url.PathEscape(in.GetTranslationId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
		in.TranslationId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) ListTranslations(ctx context.Context, in *ListTranslationsInput) (*ListTranslationsOutput, error) {
	out := &ListTranslationsOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/translations"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) CreateRecipient(ctx context.Context, in *CreateRecipientInput) (*CreateRecipientOutput, error) {
	out := &CreateRecipientOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/recipients"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DeleteRecipient(ctx context.Context, in *DeleteRecipientInput) (*DeleteRecipientOutput, error) {
	out := &DeleteRecipientOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/recipients/" + url.PathEscape(in.GetRecipientId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
		in.RecipientId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) ListRecipients(ctx context.Context, in *ListRecipientsInput) (*ListRecipientsOutput, error) {
	out := &ListRecipientsOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/recipients"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CampaignServiceService) DescribeRecipient(ctx context.Context, in *DescribeRecipientInput) (*DescribeRecipientOutput, error) {
	out := &DescribeRecipientOutput{}
	path := "/campaigns/" + url.PathEscape(in.GetCampaignId()) + "/recipients/" + url.PathEscape(in.GetRecipientId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.CampaignId = ""
		in.RecipientId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
