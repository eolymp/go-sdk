// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/webhook/webhook_service.proto

package webhook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebhookService_CreateWebhook_FullMethodName   = "/eolymp.webhook.WebhookService/CreateWebhook"
	WebhookService_UpdateWebhook_FullMethodName   = "/eolymp.webhook.WebhookService/UpdateWebhook"
	WebhookService_DeleteWebhook_FullMethodName   = "/eolymp.webhook.WebhookService/DeleteWebhook"
	WebhookService_DescribeWebhook_FullMethodName = "/eolymp.webhook.WebhookService/DescribeWebhook"
	WebhookService_ListWebhooks_FullMethodName    = "/eolymp.webhook.WebhookService/ListWebhooks"
	WebhookService_TestWebhook_FullMethodName     = "/eolymp.webhook.WebhookService/TestWebhook"
)

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	CreateWebhook(ctx context.Context, in *CreateWebhookInput, opts ...grpc.CallOption) (*CreateWebhookOutput, error)
	UpdateWebhook(ctx context.Context, in *UpdateWebhookInput, opts ...grpc.CallOption) (*UpdateWebhookOutput, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookInput, opts ...grpc.CallOption) (*DeleteWebhookOutput, error)
	DescribeWebhook(ctx context.Context, in *DescribeWebhookInput, opts ...grpc.CallOption) (*DescribeWebhookOutput, error)
	ListWebhooks(ctx context.Context, in *ListWebhooksInput, opts ...grpc.CallOption) (*ListWebhooksOutput, error)
	TestWebhook(ctx context.Context, in *TestWebhookInput, opts ...grpc.CallOption) (*TestWebhookOutput, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) CreateWebhook(ctx context.Context, in *CreateWebhookInput, opts ...grpc.CallOption) (*CreateWebhookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWebhookOutput)
	err := c.cc.Invoke(ctx, WebhookService_CreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) UpdateWebhook(ctx context.Context, in *UpdateWebhookInput, opts ...grpc.CallOption) (*UpdateWebhookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWebhookOutput)
	err := c.cc.Invoke(ctx, WebhookService_UpdateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookInput, opts ...grpc.CallOption) (*DeleteWebhookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWebhookOutput)
	err := c.cc.Invoke(ctx, WebhookService_DeleteWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) DescribeWebhook(ctx context.Context, in *DescribeWebhookInput, opts ...grpc.CallOption) (*DescribeWebhookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeWebhookOutput)
	err := c.cc.Invoke(ctx, WebhookService_DescribeWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksInput, opts ...grpc.CallOption) (*ListWebhooksOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksOutput)
	err := c.cc.Invoke(ctx, WebhookService_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) TestWebhook(ctx context.Context, in *TestWebhookInput, opts ...grpc.CallOption) (*TestWebhookOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestWebhookOutput)
	err := c.cc.Invoke(ctx, WebhookService_TestWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations should embed UnimplementedWebhookServiceServer
// for forward compatibility.
type WebhookServiceServer interface {
	CreateWebhook(context.Context, *CreateWebhookInput) (*CreateWebhookOutput, error)
	UpdateWebhook(context.Context, *UpdateWebhookInput) (*UpdateWebhookOutput, error)
	DeleteWebhook(context.Context, *DeleteWebhookInput) (*DeleteWebhookOutput, error)
	DescribeWebhook(context.Context, *DescribeWebhookInput) (*DescribeWebhookOutput, error)
	ListWebhooks(context.Context, *ListWebhooksInput) (*ListWebhooksOutput, error)
	TestWebhook(context.Context, *TestWebhookInput) (*TestWebhookOutput, error)
}

// UnimplementedWebhookServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebhookServiceServer struct{}

func (UnimplementedWebhookServiceServer) CreateWebhook(context.Context, *CreateWebhookInput) (*CreateWebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) UpdateWebhook(context.Context, *UpdateWebhookInput) (*UpdateWebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) DeleteWebhook(context.Context, *DeleteWebhookInput) (*DeleteWebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) DescribeWebhook(context.Context, *DescribeWebhookInput) (*DescribeWebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) ListWebhooks(context.Context, *ListWebhooksInput) (*ListWebhooksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedWebhookServiceServer) TestWebhook(context.Context, *TestWebhookInput) (*TestWebhookOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) testEmbeddedByValue() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebhookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_CreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).CreateWebhook(ctx, req.(*CreateWebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_UpdateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).UpdateWebhook(ctx, req.(*UpdateWebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_DeleteWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_DescribeWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeWebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).DescribeWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_DescribeWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).DescribeWebhook(ctx, req.(*DescribeWebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).ListWebhooks(ctx, req.(*ListWebhooksInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_TestWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).TestWebhook(ctx, req.(*TestWebhookInput))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.webhook.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhook",
			Handler:    _WebhookService_CreateWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _WebhookService_UpdateWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _WebhookService_DeleteWebhook_Handler,
		},
		{
			MethodName: "DescribeWebhook",
			Handler:    _WebhookService_DescribeWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _WebhookService_ListWebhooks_Handler,
		},
		{
			MethodName: "TestWebhook",
			Handler:    _WebhookService_TestWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/webhook/webhook_service.proto",
}
