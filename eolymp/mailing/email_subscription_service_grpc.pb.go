// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/mailing/email_subscription_service.proto

package mailing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailSubscriptionService_DescribeEmailSubscription_FullMethodName = "/eolymp.mailing.EmailSubscriptionService/DescribeEmailSubscription"
	EmailSubscriptionService_UpdateEmailSubscription_FullMethodName   = "/eolymp.mailing.EmailSubscriptionService/UpdateEmailSubscription"
)

// EmailSubscriptionServiceClient is the client API for EmailSubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailSubscriptionService provides API to manage email subscriptions using secret token from email.
// This service is designed to be used for unsubscribe link in emails.
type EmailSubscriptionServiceClient interface {
	DescribeEmailSubscription(ctx context.Context, in *DescribeEmailSubscriptionInput, opts ...grpc.CallOption) (*DescribeEmailSubscriptionOutput, error)
	UpdateEmailSubscription(ctx context.Context, in *UpdateEmailSubscriptionInput, opts ...grpc.CallOption) (*UpdateEmailSubscriptionOutput, error)
}

type emailSubscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSubscriptionServiceClient(cc grpc.ClientConnInterface) EmailSubscriptionServiceClient {
	return &emailSubscriptionServiceClient{cc}
}

func (c *emailSubscriptionServiceClient) DescribeEmailSubscription(ctx context.Context, in *DescribeEmailSubscriptionInput, opts ...grpc.CallOption) (*DescribeEmailSubscriptionOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEmailSubscriptionOutput)
	err := c.cc.Invoke(ctx, EmailSubscriptionService_DescribeEmailSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSubscriptionServiceClient) UpdateEmailSubscription(ctx context.Context, in *UpdateEmailSubscriptionInput, opts ...grpc.CallOption) (*UpdateEmailSubscriptionOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailSubscriptionOutput)
	err := c.cc.Invoke(ctx, EmailSubscriptionService_UpdateEmailSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSubscriptionServiceServer is the server API for EmailSubscriptionService service.
// All implementations should embed UnimplementedEmailSubscriptionServiceServer
// for forward compatibility.
//
// EmailSubscriptionService provides API to manage email subscriptions using secret token from email.
// This service is designed to be used for unsubscribe link in emails.
type EmailSubscriptionServiceServer interface {
	DescribeEmailSubscription(context.Context, *DescribeEmailSubscriptionInput) (*DescribeEmailSubscriptionOutput, error)
	UpdateEmailSubscription(context.Context, *UpdateEmailSubscriptionInput) (*UpdateEmailSubscriptionOutput, error)
}

// UnimplementedEmailSubscriptionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailSubscriptionServiceServer struct{}

func (UnimplementedEmailSubscriptionServiceServer) DescribeEmailSubscription(context.Context, *DescribeEmailSubscriptionInput) (*DescribeEmailSubscriptionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEmailSubscription not implemented")
}
func (UnimplementedEmailSubscriptionServiceServer) UpdateEmailSubscription(context.Context, *UpdateEmailSubscriptionInput) (*UpdateEmailSubscriptionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailSubscription not implemented")
}
func (UnimplementedEmailSubscriptionServiceServer) testEmbeddedByValue() {}

// UnsafeEmailSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSubscriptionServiceServer will
// result in compilation errors.
type UnsafeEmailSubscriptionServiceServer interface {
	mustEmbedUnimplementedEmailSubscriptionServiceServer()
}

func RegisterEmailSubscriptionServiceServer(s grpc.ServiceRegistrar, srv EmailSubscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailSubscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailSubscriptionService_ServiceDesc, srv)
}

func _EmailSubscriptionService_DescribeEmailSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEmailSubscriptionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSubscriptionServiceServer).DescribeEmailSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailSubscriptionService_DescribeEmailSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSubscriptionServiceServer).DescribeEmailSubscription(ctx, req.(*DescribeEmailSubscriptionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSubscriptionService_UpdateEmailSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailSubscriptionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSubscriptionServiceServer).UpdateEmailSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailSubscriptionService_UpdateEmailSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSubscriptionServiceServer).UpdateEmailSubscription(ctx, req.(*UpdateEmailSubscriptionInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSubscriptionService_ServiceDesc is the grpc.ServiceDesc for EmailSubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.mailing.EmailSubscriptionService",
	HandlerType: (*EmailSubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeEmailSubscription",
			Handler:    _EmailSubscriptionService_DescribeEmailSubscription_Handler,
		},
		{
			MethodName: "UpdateEmailSubscription",
			Handler:    _EmailSubscriptionService_UpdateEmailSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/mailing/email_subscription_service.proto",
}
