// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/acl/acl.proto

package acl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Acl_Grant_FullMethodName      = "/eolymp.acl.Acl/Grant"
	Acl_Revoke_FullMethodName     = "/eolymp.acl.Acl/Revoke"
	Acl_Describe_FullMethodName   = "/eolymp.acl.Acl/Describe"
	Acl_List_FullMethodName       = "/eolymp.acl.Acl/List"
	Acl_Introspect_FullMethodName = "/eolymp.acl.Acl/Introspect"
)

// AclClient is the client API for Acl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclClient interface {
	Grant(ctx context.Context, in *GrantInput, opts ...grpc.CallOption) (*GrantOutput, error)
	Revoke(ctx context.Context, in *RevokeInput, opts ...grpc.CallOption) (*RevokeOutput, error)
	Describe(ctx context.Context, in *DescribeInput, opts ...grpc.CallOption) (*DescribeOutput, error)
	List(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (*ListOutput, error)
	Introspect(ctx context.Context, in *IntrospectInput, opts ...grpc.CallOption) (*IntrospectOutput, error)
}

type aclClient struct {
	cc grpc.ClientConnInterface
}

func NewAclClient(cc grpc.ClientConnInterface) AclClient {
	return &aclClient{cc}
}

func (c *aclClient) Grant(ctx context.Context, in *GrantInput, opts ...grpc.CallOption) (*GrantOutput, error) {
	out := new(GrantOutput)
	err := c.cc.Invoke(ctx, Acl_Grant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) Revoke(ctx context.Context, in *RevokeInput, opts ...grpc.CallOption) (*RevokeOutput, error) {
	out := new(RevokeOutput)
	err := c.cc.Invoke(ctx, Acl_Revoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) Describe(ctx context.Context, in *DescribeInput, opts ...grpc.CallOption) (*DescribeOutput, error) {
	out := new(DescribeOutput)
	err := c.cc.Invoke(ctx, Acl_Describe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) List(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (*ListOutput, error) {
	out := new(ListOutput)
	err := c.cc.Invoke(ctx, Acl_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) Introspect(ctx context.Context, in *IntrospectInput, opts ...grpc.CallOption) (*IntrospectOutput, error) {
	out := new(IntrospectOutput)
	err := c.cc.Invoke(ctx, Acl_Introspect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServer is the server API for Acl service.
// All implementations should embed UnimplementedAclServer
// for forward compatibility
type AclServer interface {
	Grant(context.Context, *GrantInput) (*GrantOutput, error)
	Revoke(context.Context, *RevokeInput) (*RevokeOutput, error)
	Describe(context.Context, *DescribeInput) (*DescribeOutput, error)
	List(context.Context, *ListInput) (*ListOutput, error)
	Introspect(context.Context, *IntrospectInput) (*IntrospectOutput, error)
}

// UnimplementedAclServer should be embedded to have forward compatible implementations.
type UnimplementedAclServer struct {
}

func (UnimplementedAclServer) Grant(context.Context, *GrantInput) (*GrantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (UnimplementedAclServer) Revoke(context.Context, *RevokeInput) (*RevokeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedAclServer) Describe(context.Context, *DescribeInput) (*DescribeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedAclServer) List(context.Context, *ListInput) (*ListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAclServer) Introspect(context.Context, *IntrospectInput) (*IntrospectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introspect not implemented")
}

// UnsafeAclServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServer will
// result in compilation errors.
type UnsafeAclServer interface {
	mustEmbedUnimplementedAclServer()
}

func RegisterAclServer(s grpc.ServiceRegistrar, srv AclServer) {
	s.RegisterService(&Acl_ServiceDesc, srv)
}

func _Acl_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_Grant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Grant(ctx, req.(*GrantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_Revoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Revoke(ctx, req.(*RevokeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Describe(ctx, req.(*DescribeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).List(ctx, req.(*ListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_Introspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).Introspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_Introspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).Introspect(ctx, req.(*IntrospectInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Acl_ServiceDesc is the grpc.ServiceDesc for Acl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.acl.Acl",
	HandlerType: (*AclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grant",
			Handler:    _Acl_Grant_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _Acl_Revoke_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Acl_Describe_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Acl_List_Handler,
		},
		{
			MethodName: "Introspect",
			Handler:    _Acl_Introspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/acl/acl.proto",
}
