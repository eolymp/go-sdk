// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.4
// source: eolymp/acl/action.proto

package acl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_UNKNOWN_ACTION   Action = 0
	Action_SPACE_LIST       Action = 10 // if set, the space will appear in the ListSpaces API, automatically assigned if user has any permissions in the space
	Action_SPACE_READ       Action = 11
	Action_SPACE_WRITE      Action = 13
	Action_SPACE_DELETE     Action = 16
	Action_BILLING_READ     Action = 12
	Action_BILLING_WRITE    Action = 15
	Action_POLICY_LIST      Action = 22 // allows to list policies, automatically assigned if user has read access to any of the policies
	Action_POLICY_READ      Action = 20 // view/list space permissions
	Action_POLICY_WRITE     Action = 21 // create/update space permissions
	Action_PROBLEM_LIST     Action = 30 // allows to list problems, automatically assigned if user has read access to any of the problems
	Action_PROBLEM_READ     Action = 31
	Action_PROBLEM_WRITE    Action = 36
	Action_PROBLEM_TESTING  Action = 34 // access to testing configuration, tests, solutions, submissions etc
	Action_CONTEST_LIST     Action = 50 // allows to list contests, automatically assigned if user has read access to any of the contests
	Action_CONTEST_READ     Action = 51
	Action_CONTEST_WRITE    Action = 62
	Action_CONTEST_ADMIT    Action = 63 // allows to admit participants to the contest (CONTEST_WRITE also allows to admit)
	Action_TICKET_LIST      Action = 72 // allows to list tickets, automatically assigned if user has read access to any of the tickets
	Action_TICKET_READ      Action = 70
	Action_TICKET_WRITE     Action = 71 // modify tickets: reply, close etc
	Action_MEMBER_LIST      Action = 90 // allows to list members, automatically assigned if user has read access to any of the members
	Action_MEMBER_READ      Action = 91
	Action_MEMBER_WRITE     Action = 92
	Action_SCOREBOARD_LIST  Action = 110 // allows to list scoreboards, automatically assigned if user has read access to any of the scoreboards
	Action_SCOREBOARD_READ  Action = 111
	Action_SCOREBOARD_WRITE Action = 112
	Action_CONTENT_LIST     Action = 122 // allows to list fragments, automatically assigned if user has read access to any of the fragments
	Action_CONTENT_READ     Action = 120
	Action_CONTENT_WRITE    Action = 121
	Action_COURSE_LIST      Action = 133 // allows to list courses, automatically assigned if user has read access to any of the courses
	Action_COURSE_READ      Action = 130
	Action_COURSE_WRITE     Action = 131
	Action_COURSE_ASSIGN    Action = 132 // limited write permission to add students to the course and manage assignments
	Action_POST_LIST        Action = 142 // allows to list posts, automatically assigned if user has read access to any of the posts
	Action_POST_READ        Action = 140
	Action_POST_WRITE       Action = 141
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:   "UNKNOWN_ACTION",
		10:  "SPACE_LIST",
		11:  "SPACE_READ",
		13:  "SPACE_WRITE",
		16:  "SPACE_DELETE",
		12:  "BILLING_READ",
		15:  "BILLING_WRITE",
		22:  "POLICY_LIST",
		20:  "POLICY_READ",
		21:  "POLICY_WRITE",
		30:  "PROBLEM_LIST",
		31:  "PROBLEM_READ",
		36:  "PROBLEM_WRITE",
		34:  "PROBLEM_TESTING",
		50:  "CONTEST_LIST",
		51:  "CONTEST_READ",
		62:  "CONTEST_WRITE",
		63:  "CONTEST_ADMIT",
		72:  "TICKET_LIST",
		70:  "TICKET_READ",
		71:  "TICKET_WRITE",
		90:  "MEMBER_LIST",
		91:  "MEMBER_READ",
		92:  "MEMBER_WRITE",
		110: "SCOREBOARD_LIST",
		111: "SCOREBOARD_READ",
		112: "SCOREBOARD_WRITE",
		122: "CONTENT_LIST",
		120: "CONTENT_READ",
		121: "CONTENT_WRITE",
		133: "COURSE_LIST",
		130: "COURSE_READ",
		131: "COURSE_WRITE",
		132: "COURSE_ASSIGN",
		142: "POST_LIST",
		140: "POST_READ",
		141: "POST_WRITE",
	}
	Action_value = map[string]int32{
		"UNKNOWN_ACTION":   0,
		"SPACE_LIST":       10,
		"SPACE_READ":       11,
		"SPACE_WRITE":      13,
		"SPACE_DELETE":     16,
		"BILLING_READ":     12,
		"BILLING_WRITE":    15,
		"POLICY_LIST":      22,
		"POLICY_READ":      20,
		"POLICY_WRITE":     21,
		"PROBLEM_LIST":     30,
		"PROBLEM_READ":     31,
		"PROBLEM_WRITE":    36,
		"PROBLEM_TESTING":  34,
		"CONTEST_LIST":     50,
		"CONTEST_READ":     51,
		"CONTEST_WRITE":    62,
		"CONTEST_ADMIT":    63,
		"TICKET_LIST":      72,
		"TICKET_READ":      70,
		"TICKET_WRITE":     71,
		"MEMBER_LIST":      90,
		"MEMBER_READ":      91,
		"MEMBER_WRITE":     92,
		"SCOREBOARD_LIST":  110,
		"SCOREBOARD_READ":  111,
		"SCOREBOARD_WRITE": 112,
		"CONTENT_LIST":     122,
		"CONTENT_READ":     120,
		"CONTENT_WRITE":    121,
		"COURSE_LIST":      133,
		"COURSE_READ":      130,
		"COURSE_WRITE":     131,
		"COURSE_ASSIGN":    132,
		"POST_LIST":        142,
		"POST_READ":        140,
		"POST_WRITE":       141,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_acl_action_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_eolymp_acl_action_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_acl_action_proto_rawDescGZIP(), []int{0}
}

var File_eolymp_acl_action_proto protoreflect.FileDescriptor

const file_eolymp_acl_action_proto_rawDesc = "" +
	"\n" +
	"\x17eolymp/acl/action.proto\x12\n" +
	"eolymp.acl*\xa9\x05\n" +
	"\x06Action\x12\x12\n" +
	"\x0eUNKNOWN_ACTION\x10\x00\x12\x0e\n" +
	"\n" +
	"SPACE_LIST\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"SPACE_READ\x10\v\x12\x0f\n" +
	"\vSPACE_WRITE\x10\r\x12\x10\n" +
	"\fSPACE_DELETE\x10\x10\x12\x10\n" +
	"\fBILLING_READ\x10\f\x12\x11\n" +
	"\rBILLING_WRITE\x10\x0f\x12\x0f\n" +
	"\vPOLICY_LIST\x10\x16\x12\x0f\n" +
	"\vPOLICY_READ\x10\x14\x12\x10\n" +
	"\fPOLICY_WRITE\x10\x15\x12\x10\n" +
	"\fPROBLEM_LIST\x10\x1e\x12\x10\n" +
	"\fPROBLEM_READ\x10\x1f\x12\x11\n" +
	"\rPROBLEM_WRITE\x10$\x12\x13\n" +
	"\x0fPROBLEM_TESTING\x10\"\x12\x10\n" +
	"\fCONTEST_LIST\x102\x12\x10\n" +
	"\fCONTEST_READ\x103\x12\x11\n" +
	"\rCONTEST_WRITE\x10>\x12\x11\n" +
	"\rCONTEST_ADMIT\x10?\x12\x0f\n" +
	"\vTICKET_LIST\x10H\x12\x0f\n" +
	"\vTICKET_READ\x10F\x12\x10\n" +
	"\fTICKET_WRITE\x10G\x12\x0f\n" +
	"\vMEMBER_LIST\x10Z\x12\x0f\n" +
	"\vMEMBER_READ\x10[\x12\x10\n" +
	"\fMEMBER_WRITE\x10\\\x12\x13\n" +
	"\x0fSCOREBOARD_LIST\x10n\x12\x13\n" +
	"\x0fSCOREBOARD_READ\x10o\x12\x14\n" +
	"\x10SCOREBOARD_WRITE\x10p\x12\x10\n" +
	"\fCONTENT_LIST\x10z\x12\x10\n" +
	"\fCONTENT_READ\x10x\x12\x11\n" +
	"\rCONTENT_WRITE\x10y\x12\x10\n" +
	"\vCOURSE_LIST\x10\x85\x01\x12\x10\n" +
	"\vCOURSE_READ\x10\x82\x01\x12\x11\n" +
	"\fCOURSE_WRITE\x10\x83\x01\x12\x12\n" +
	"\rCOURSE_ASSIGN\x10\x84\x01\x12\x0e\n" +
	"\tPOST_LIST\x10\x8e\x01\x12\x0e\n" +
	"\tPOST_READ\x10\x8c\x01\x12\x0f\n" +
	"\n" +
	"POST_WRITE\x10\x8d\x01B)Z'github.com/eolymp/go-sdk/eolymp/acl;aclb\x06proto3"

var (
	file_eolymp_acl_action_proto_rawDescOnce sync.Once
	file_eolymp_acl_action_proto_rawDescData []byte
)

func file_eolymp_acl_action_proto_rawDescGZIP() []byte {
	file_eolymp_acl_action_proto_rawDescOnce.Do(func() {
		file_eolymp_acl_action_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_acl_action_proto_rawDesc), len(file_eolymp_acl_action_proto_rawDesc)))
	})
	return file_eolymp_acl_action_proto_rawDescData
}

var file_eolymp_acl_action_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_acl_action_proto_goTypes = []any{
	(Action)(0), // 0: eolymp.acl.Action
}
var file_eolymp_acl_action_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eolymp_acl_action_proto_init() }
func file_eolymp_acl_action_proto_init() {
	if File_eolymp_acl_action_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_acl_action_proto_rawDesc), len(file_eolymp_acl_action_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_acl_action_proto_goTypes,
		DependencyIndexes: file_eolymp_acl_action_proto_depIdxs,
		EnumInfos:         file_eolymp_acl_action_proto_enumTypes,
	}.Build()
	File_eolymp_acl_action_proto = out.File
	file_eolymp_acl_action_proto_goTypes = nil
	file_eolymp_acl_action_proto_depIdxs = nil
}
