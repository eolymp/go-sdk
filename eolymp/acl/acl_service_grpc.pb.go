// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/acl/acl_service.proto

package acl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Acl_GrantPermission_FullMethodName      = "/eolymp.acl.Acl/GrantPermission"
	Acl_RevokePermission_FullMethodName     = "/eolymp.acl.Acl/RevokePermission"
	Acl_DescribePermission_FullMethodName   = "/eolymp.acl.Acl/DescribePermission"
	Acl_ListPermissions_FullMethodName      = "/eolymp.acl.Acl/ListPermissions"
	Acl_IntrospectPermission_FullMethodName = "/eolymp.acl.Acl/IntrospectPermission"
)

// AclClient is the client API for Acl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclClient interface {
	GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error)
	RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error)
	DescribePermission(ctx context.Context, in *DescribePermissionInput, opts ...grpc.CallOption) (*DescribePermissionOutput, error)
	ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error)
	IntrospectPermission(ctx context.Context, in *IntrospectPermissionInput, opts ...grpc.CallOption) (*IntrospectPermissionOutput, error)
}

type aclClient struct {
	cc grpc.ClientConnInterface
}

func NewAclClient(cc grpc.ClientConnInterface) AclClient {
	return &aclClient{cc}
}

func (c *aclClient) GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error) {
	out := new(GrantPermissionOutput)
	err := c.cc.Invoke(ctx, Acl_GrantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error) {
	out := new(RevokePermissionOutput)
	err := c.cc.Invoke(ctx, Acl_RevokePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) DescribePermission(ctx context.Context, in *DescribePermissionInput, opts ...grpc.CallOption) (*DescribePermissionOutput, error) {
	out := new(DescribePermissionOutput)
	err := c.cc.Invoke(ctx, Acl_DescribePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error) {
	out := new(ListPermissionsOutput)
	err := c.cc.Invoke(ctx, Acl_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) IntrospectPermission(ctx context.Context, in *IntrospectPermissionInput, opts ...grpc.CallOption) (*IntrospectPermissionOutput, error) {
	out := new(IntrospectPermissionOutput)
	err := c.cc.Invoke(ctx, Acl_IntrospectPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServer is the server API for Acl service.
// All implementations should embed UnimplementedAclServer
// for forward compatibility
type AclServer interface {
	GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error)
	RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error)
	DescribePermission(context.Context, *DescribePermissionInput) (*DescribePermissionOutput, error)
	ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error)
	IntrospectPermission(context.Context, *IntrospectPermissionInput) (*IntrospectPermissionOutput, error)
}

// UnimplementedAclServer should be embedded to have forward compatible implementations.
type UnimplementedAclServer struct {
}

func (UnimplementedAclServer) GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPermission not implemented")
}
func (UnimplementedAclServer) RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermission not implemented")
}
func (UnimplementedAclServer) DescribePermission(context.Context, *DescribePermissionInput) (*DescribePermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePermission not implemented")
}
func (UnimplementedAclServer) ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAclServer) IntrospectPermission(context.Context, *IntrospectPermissionInput) (*IntrospectPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectPermission not implemented")
}

// UnsafeAclServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServer will
// result in compilation errors.
type UnsafeAclServer interface {
	mustEmbedUnimplementedAclServer()
}

func RegisterAclServer(s grpc.ServiceRegistrar, srv AclServer) {
	s.RegisterService(&Acl_ServiceDesc, srv)
}

func _Acl_GrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantPermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GrantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GrantPermission(ctx, req.(*GrantPermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RevokePermission(ctx, req.(*RevokePermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_DescribePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).DescribePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_DescribePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).DescribePermission(ctx, req.(*DescribePermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).ListPermissions(ctx, req.(*ListPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_IntrospectPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectPermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).IntrospectPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_IntrospectPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).IntrospectPermission(ctx, req.(*IntrospectPermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Acl_ServiceDesc is the grpc.ServiceDesc for Acl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.acl.Acl",
	HandlerType: (*AclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantPermission",
			Handler:    _Acl_GrantPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _Acl_RevokePermission_Handler,
		},
		{
			MethodName: "DescribePermission",
			Handler:    _Acl_DescribePermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _Acl_ListPermissions_Handler,
		},
		{
			MethodName: "IntrospectPermission",
			Handler:    _Acl_IntrospectPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/acl/acl_service.proto",
}

const (
	AclService_GrantPermission_FullMethodName      = "/eolymp.acl.AclService/GrantPermission"
	AclService_RevokePermission_FullMethodName     = "/eolymp.acl.AclService/RevokePermission"
	AclService_DescribePermission_FullMethodName   = "/eolymp.acl.AclService/DescribePermission"
	AclService_ListPermissions_FullMethodName      = "/eolymp.acl.AclService/ListPermissions"
	AclService_IntrospectPermission_FullMethodName = "/eolymp.acl.AclService/IntrospectPermission"
)

// AclServiceClient is the client API for AclService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclServiceClient interface {
	GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error)
	RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error)
	DescribePermission(ctx context.Context, in *DescribePermissionInput, opts ...grpc.CallOption) (*DescribePermissionOutput, error)
	ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error)
	IntrospectPermission(ctx context.Context, in *IntrospectPermissionInput, opts ...grpc.CallOption) (*IntrospectPermissionOutput, error)
}

type aclServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAclServiceClient(cc grpc.ClientConnInterface) AclServiceClient {
	return &aclServiceClient{cc}
}

func (c *aclServiceClient) GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error) {
	out := new(GrantPermissionOutput)
	err := c.cc.Invoke(ctx, AclService_GrantPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error) {
	out := new(RevokePermissionOutput)
	err := c.cc.Invoke(ctx, AclService_RevokePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) DescribePermission(ctx context.Context, in *DescribePermissionInput, opts ...grpc.CallOption) (*DescribePermissionOutput, error) {
	out := new(DescribePermissionOutput)
	err := c.cc.Invoke(ctx, AclService_DescribePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error) {
	out := new(ListPermissionsOutput)
	err := c.cc.Invoke(ctx, AclService_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) IntrospectPermission(ctx context.Context, in *IntrospectPermissionInput, opts ...grpc.CallOption) (*IntrospectPermissionOutput, error) {
	out := new(IntrospectPermissionOutput)
	err := c.cc.Invoke(ctx, AclService_IntrospectPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServiceServer is the server API for AclService service.
// All implementations should embed UnimplementedAclServiceServer
// for forward compatibility
type AclServiceServer interface {
	GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error)
	RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error)
	DescribePermission(context.Context, *DescribePermissionInput) (*DescribePermissionOutput, error)
	ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error)
	IntrospectPermission(context.Context, *IntrospectPermissionInput) (*IntrospectPermissionOutput, error)
}

// UnimplementedAclServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAclServiceServer struct {
}

func (UnimplementedAclServiceServer) GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPermission not implemented")
}
func (UnimplementedAclServiceServer) RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermission not implemented")
}
func (UnimplementedAclServiceServer) DescribePermission(context.Context, *DescribePermissionInput) (*DescribePermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePermission not implemented")
}
func (UnimplementedAclServiceServer) ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAclServiceServer) IntrospectPermission(context.Context, *IntrospectPermissionInput) (*IntrospectPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectPermission not implemented")
}

// UnsafeAclServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServiceServer will
// result in compilation errors.
type UnsafeAclServiceServer interface {
	mustEmbedUnimplementedAclServiceServer()
}

func RegisterAclServiceServer(s grpc.ServiceRegistrar, srv AclServiceServer) {
	s.RegisterService(&AclService_ServiceDesc, srv)
}

func _AclService_GrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantPermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).GrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_GrantPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).GrantPermission(ctx, req.(*GrantPermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_RevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).RevokePermission(ctx, req.(*RevokePermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_DescribePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).DescribePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_DescribePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).DescribePermission(ctx, req.(*DescribePermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).ListPermissions(ctx, req.(*ListPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_IntrospectPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectPermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).IntrospectPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_IntrospectPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).IntrospectPermission(ctx, req.(*IntrospectPermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AclService_ServiceDesc is the grpc.ServiceDesc for AclService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AclService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.acl.AclService",
	HandlerType: (*AclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantPermission",
			Handler:    _AclService_GrantPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _AclService_RevokePermission_Handler,
		},
		{
			MethodName: "DescribePermission",
			Handler:    _AclService_DescribePermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _AclService_ListPermissions_Handler,
		},
		{
			MethodName: "IntrospectPermission",
			Handler:    _AclService_IntrospectPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/acl/acl_service.proto",
}
