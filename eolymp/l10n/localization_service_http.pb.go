// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package l10n

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _LocalizationService_HTTPReadQueryString parses body into proto.Message
func _LocalizationService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _LocalizationService_HTTPReadRequestBody parses body into proto.Message
func _LocalizationService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _LocalizationService_HTTPWriteResponse writes proto.Message to HTTP response
func _LocalizationService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_LocalizationService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _LocalizationService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _LocalizationService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _LocalizationService_WebsocketErrorResponse writes error to websocket connection
func _LocalizationService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _LocalizationService_WebsocketCodec implements protobuf codec for websockets package
var _LocalizationService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterLocalizationServiceHttpHandlers adds handlers for for LocalizationServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterLocalizationServiceHttpHandlers(router *mux.Router, prefix string, cli LocalizationServiceClient) {
	router.Handle(prefix+"/terms", _LocalizationService_CreateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.CreateTerm")
	router.Handle(prefix+"/terms", _LocalizationService_ListTerms_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTerms")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_UpdateTerm_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.UpdateTerm")
	router.Handle(prefix+"/terms/{term_id}/restore", _LocalizationService_RestoreTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.RestoreTerm")
	router.Handle(prefix+"/terms/{term_id}/deprecate", _LocalizationService_DeprecateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.DeprecateTerm")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_DeleteTerm_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.DeleteTerm")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_DescribeTerm_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.DescribeTerm")
	router.Handle(prefix+"/terms", _LocalizationService_ImportTerms_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.ImportTerms")
	router.Handle(prefix+"/locales/{locale_code}", _LocalizationService_AddLocale_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.AddLocale")
	router.Handle(prefix+"/locales/{locale_code}", _LocalizationService_RemoveLocale_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.RemoveLocale")
	router.Handle(prefix+"/locales", _LocalizationService_ListLocales_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListLocales")
	router.Handle(prefix+"/terms/{term_id}/translations", _LocalizationService_TranslateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.TranslateTerm")
	router.Handle(prefix+"/terms/{term_id}/translations", _LocalizationService_ListTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTranslations")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}", _LocalizationService_DeleteTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.DeleteTranslation")
	router.Handle(prefix+"/terms/{term_id}/suggestions/{locale}", _LocalizationService_SuggestTranslation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.SuggestTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}", _LocalizationService_UpdateTranslation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.UpdateTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}/approve", _LocalizationService_ApproveTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.ApproveTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}/reject", _LocalizationService_RejectTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.RejectTranslation")
	router.Handle(prefix+"/translations/{locale}", _LocalizationService_ImportTranslations_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.ImportTranslations")
	router.Handle(prefix+"/translations/{locale}", _LocalizationService_ExportTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ExportTranslations")
	router.Handle(prefix+"/translate/{locale}", _LocalizationService_ListTranslationPairs_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTranslationPairs")
}

func _LocalizationService_CreateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.CreateTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ListTerms_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTermsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.ListTerms(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_UpdateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.UpdateTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_RestoreTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RestoreTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.RestoreTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_DeprecateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeprecateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.DeprecateTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_DeleteTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.DeleteTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_DescribeTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTermInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.DescribeTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ImportTerms_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportTermsInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.ImportTerms(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_AddLocale_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddLocaleInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.LocaleCode = vars["locale_code"]

		out, err := cli.AddLocale(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_RemoveLocale_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveLocaleInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.LocaleCode = vars["locale_code"]

		out, err := cli.RemoveLocale(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ListLocales_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListLocalesInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.ListLocales(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_TranslateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.TranslateTerm(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ListTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		out, err := cli.ListTranslations(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_DeleteTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		out, err := cli.DeleteTranslation(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_SuggestTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuggestTranslationInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.Locale = vars["locale"]

		out, err := cli.SuggestTranslation(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_UpdateTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		out, err := cli.UpdateTranslation(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ApproveTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		out, err := cli.ApproveTranslation(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_RejectTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RejectTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		out, err := cli.RejectTranslation(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ImportTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportTranslationsInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		out, err := cli.ImportTranslations(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ExportTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ExportTranslationsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		out, err := cli.ExportTranslations(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

func _LocalizationService_ListTranslationPairs_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationPairsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		out, err := cli.ListTranslationPairs(r.Context(), in)
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out)
	})
}

type _LocalizationServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _LocalizationServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _LocalizationServiceHandler) (out proto.Message, err error)
type LocalizationServiceInterceptor struct {
	middleware []_LocalizationServiceMiddleware
	client     LocalizationServiceClient
}

// NewLocalizationServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewLocalizationServiceInterceptor(cli LocalizationServiceClient, middleware ..._LocalizationServiceMiddleware) *LocalizationServiceInterceptor {
	return &LocalizationServiceInterceptor{client: cli, middleware: middleware}
}

func (i *LocalizationServiceInterceptor) CreateTerm(ctx context.Context, in *CreateTermInput, opts ...grpc.CallOption) (*CreateTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTermInput, got %T", in))
		}

		return i.client.CreateTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.CreateTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ListTerms(ctx context.Context, in *ListTermsInput, opts ...grpc.CallOption) (*ListTermsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTermsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTermsInput, got %T", in))
		}

		return i.client.ListTerms(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ListTerms", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTermsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTermsOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) UpdateTerm(ctx context.Context, in *UpdateTermInput, opts ...grpc.CallOption) (*UpdateTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTermInput, got %T", in))
		}

		return i.client.UpdateTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.UpdateTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) RestoreTerm(ctx context.Context, in *RestoreTermInput, opts ...grpc.CallOption) (*RestoreTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RestoreTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RestoreTermInput, got %T", in))
		}

		return i.client.RestoreTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.RestoreTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RestoreTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RestoreTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) DeprecateTerm(ctx context.Context, in *DeprecateTermInput, opts ...grpc.CallOption) (*DeprecateTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeprecateTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeprecateTermInput, got %T", in))
		}

		return i.client.DeprecateTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.DeprecateTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeprecateTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeprecateTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) DeleteTerm(ctx context.Context, in *DeleteTermInput, opts ...grpc.CallOption) (*DeleteTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTermInput, got %T", in))
		}

		return i.client.DeleteTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.DeleteTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) DescribeTerm(ctx context.Context, in *DescribeTermInput, opts ...grpc.CallOption) (*DescribeTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTermInput, got %T", in))
		}

		return i.client.DescribeTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.DescribeTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ImportTerms(ctx context.Context, in *ImportTermsInput, opts ...grpc.CallOption) (*ImportTermsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ImportTermsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ImportTermsInput, got %T", in))
		}

		return i.client.ImportTerms(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ImportTerms", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ImportTermsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ImportTermsOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) AddLocale(ctx context.Context, in *AddLocaleInput, opts ...grpc.CallOption) (*AddLocaleOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*AddLocaleInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *AddLocaleInput, got %T", in))
		}

		return i.client.AddLocale(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.AddLocale", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*AddLocaleOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *AddLocaleOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) RemoveLocale(ctx context.Context, in *RemoveLocaleInput, opts ...grpc.CallOption) (*RemoveLocaleOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemoveLocaleInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemoveLocaleInput, got %T", in))
		}

		return i.client.RemoveLocale(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.RemoveLocale", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemoveLocaleOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemoveLocaleOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ListLocales(ctx context.Context, in *ListLocalesInput, opts ...grpc.CallOption) (*ListLocalesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListLocalesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListLocalesInput, got %T", in))
		}

		return i.client.ListLocales(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ListLocales", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListLocalesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListLocalesOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) TranslateTerm(ctx context.Context, in *TranslateTermInput, opts ...grpc.CallOption) (*TranslateTermOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*TranslateTermInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *TranslateTermInput, got %T", in))
		}

		return i.client.TranslateTerm(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.TranslateTerm", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*TranslateTermOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *TranslateTermOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ListTranslations(ctx context.Context, in *ListTranslationsInput, opts ...grpc.CallOption) (*ListTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTranslationsInput, got %T", in))
		}

		return i.client.ListTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ListTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTranslationsOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) DeleteTranslation(ctx context.Context, in *DeleteTranslationInput, opts ...grpc.CallOption) (*DeleteTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTranslationInput, got %T", in))
		}

		return i.client.DeleteTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.DeleteTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) SuggestTranslation(ctx context.Context, in *SuggestTranslationInput, opts ...grpc.CallOption) (*SuggestTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SuggestTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SuggestTranslationInput, got %T", in))
		}

		return i.client.SuggestTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.SuggestTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SuggestTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SuggestTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) UpdateTranslation(ctx context.Context, in *UpdateTranslationInput, opts ...grpc.CallOption) (*UpdateTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTranslationInput, got %T", in))
		}

		return i.client.UpdateTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.UpdateTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ApproveTranslation(ctx context.Context, in *ApproveTranslationInput, opts ...grpc.CallOption) (*ApproveTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ApproveTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ApproveTranslationInput, got %T", in))
		}

		return i.client.ApproveTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ApproveTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ApproveTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ApproveTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) RejectTranslation(ctx context.Context, in *RejectTranslationInput, opts ...grpc.CallOption) (*RejectTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RejectTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RejectTranslationInput, got %T", in))
		}

		return i.client.RejectTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.RejectTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RejectTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RejectTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ImportTranslations(ctx context.Context, in *ImportTranslationsInput, opts ...grpc.CallOption) (*ImportTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ImportTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ImportTranslationsInput, got %T", in))
		}

		return i.client.ImportTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ImportTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ImportTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ImportTranslationsOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ExportTranslations(ctx context.Context, in *ExportTranslationsInput, opts ...grpc.CallOption) (*ExportTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ExportTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ExportTranslationsInput, got %T", in))
		}

		return i.client.ExportTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ExportTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ExportTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ExportTranslationsOutput, got %T", out))
	}

	return message, err
}

func (i *LocalizationServiceInterceptor) ListTranslationPairs(ctx context.Context, in *ListTranslationPairsInput, opts ...grpc.CallOption) (*ListTranslationPairsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTranslationPairsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTranslationPairsInput, got %T", in))
		}

		return i.client.ListTranslationPairs(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.l10n.LocalizationService.ListTranslationPairs", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTranslationPairsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTranslationPairsOutput, got %T", out))
	}

	return message, err
}
