// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package l10n

import (
	go_querystring "github.com/eolymp/go-querystring"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	strconv "strconv"
)

// _LocalizationService_HTTPReadQueryString parses body into proto.Message
func _LocalizationService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	if h := r.Header.Values("Strict-Parsing"); len(h) > 0 {
		strict, err := strconv.ParseBool(h[len(h)-1])
		if err != nil {
			return err
		}

		if strict {
			query, err := url.ParseQuery(r.URL.RawQuery)
			if err != nil {
				return err
			}

			return go_querystring.UnmarshalStrict(query, v)
		}
	}

	return go_querystring.Unmarshal(r.URL.Query(), v)
}

// _LocalizationService_HTTPReadRequestBody parses body into proto.Message
func _LocalizationService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _LocalizationService_HTTPWriteResponse writes proto.Message to HTTP response
func _LocalizationService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_LocalizationService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _LocalizationService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _LocalizationService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterLocalizationServiceHttpHandlers adds handlers for for LocalizationServiceClient
func RegisterLocalizationServiceHttpHandlers(router *mux.Router, prefix string, cli LocalizationServiceClient) {
	router.Handle(prefix+"/terms", _LocalizationService_CreateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.CreateTerm")
	router.Handle(prefix+"/terms", _LocalizationService_ListTerms_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTerms")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_UpdateTerm_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.UpdateTerm")
	router.Handle(prefix+"/terms/{term_id}/restore", _LocalizationService_RestoreTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.RestoreTerm")
	router.Handle(prefix+"/terms/{term_id}/deprecate", _LocalizationService_DeprecateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.DeprecateTerm")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_DeleteTerm_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.DeleteTerm")
	router.Handle(prefix+"/terms/{term_id}", _LocalizationService_DescribeTerm_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.DescribeTerm")
	router.Handle(prefix+"/terms", _LocalizationService_ImportTerms_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.ImportTerms")
	router.Handle(prefix+"/locales/{locale_code}", _LocalizationService_AddLocale_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.AddLocale")
	router.Handle(prefix+"/locales/{locale_code}", _LocalizationService_RemoveLocale_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.RemoveLocale")
	router.Handle(prefix+"/locales", _LocalizationService_ListLocales_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListLocales")
	router.Handle(prefix+"/terms/{term_id}/translations", _LocalizationService_TranslateTerm_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.TranslateTerm")
	router.Handle(prefix+"/terms/{term_id}/translations", _LocalizationService_ListTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTranslations")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}", _LocalizationService_DeleteTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.l10n.LocalizationService.DeleteTranslation")
	router.Handle(prefix+"/terms/{term_id}/suggestions/{locale}", _LocalizationService_SuggestTranslation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.SuggestTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}", _LocalizationService_UpdateTranslation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.UpdateTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}/approve", _LocalizationService_ApproveTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.ApproveTranslation")
	router.Handle(prefix+"/terms/{term_id}/translations/{translation_id}/reject", _LocalizationService_RejectTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.l10n.LocalizationService.RejectTranslation")
	router.Handle(prefix+"/translations/{locale}", _LocalizationService_ImportTranslations_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.l10n.LocalizationService.ImportTranslations")
	router.Handle(prefix+"/translations/{locale}", _LocalizationService_ExportTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ExportTranslations")
	router.Handle(prefix+"/translate/{locale}", _LocalizationService_ListTranslationPairs_Rule0(cli)).
		Methods("GET").
		Name("eolymp.l10n.LocalizationService.ListTranslationPairs")
}

// RegisterLocalizationServiceHttpProxy adds proxy handlers for for LocalizationServiceClient
func RegisterLocalizationServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterLocalizationServiceHttpHandlers(router, prefix, NewLocalizationServiceClient(conn))
}

func _LocalizationService_CreateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ListTerms_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTermsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListTerms(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_UpdateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_RestoreTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RestoreTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.RestoreTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_DeprecateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeprecateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.DeprecateTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_DeleteTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_DescribeTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTermInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ImportTerms_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportTermsInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ImportTerms(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_AddLocale_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddLocaleInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.LocaleCode = vars["locale_code"]

		var header, trailer metadata.MD

		out, err := cli.AddLocale(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_RemoveLocale_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveLocaleInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.LocaleCode = vars["locale_code"]

		var header, trailer metadata.MD

		out, err := cli.RemoveLocale(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ListLocales_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListLocalesInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListLocales(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_TranslateTerm_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslateTermInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.TranslateTerm(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ListTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]

		var header, trailer metadata.MD

		out, err := cli.ListTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_DeleteTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_SuggestTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuggestTranslationInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.SuggestTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_UpdateTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ApproveTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.ApproveTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_RejectTranslation_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RejectTranslationInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TermId = vars["term_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.RejectTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ImportTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportTranslationsInput{}

		if err := _LocalizationService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.ImportTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ExportTranslations_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ExportTranslationsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.ExportTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _LocalizationService_ListTranslationPairs_Rule0(cli LocalizationServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTranslationPairsInput{}

		if err := _LocalizationService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.Locale = vars["locale"]

		var header, trailer metadata.MD

		out, err := cli.ListTranslationPairs(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_LocalizationService_HTTPWriteErrorResponse(w, err)
			return
		}

		_LocalizationService_HTTPWriteResponse(w, out, header, trailer)
	})
}
