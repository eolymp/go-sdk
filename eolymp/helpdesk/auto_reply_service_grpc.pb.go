// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/helpdesk/auto_reply_service.proto

package helpdesk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AutoReplyService_CreateAutoReply_FullMethodName   = "/eolymp.helpdesk.AutoReplyService/CreateAutoReply"
	AutoReplyService_UpdateAutoReply_FullMethodName   = "/eolymp.helpdesk.AutoReplyService/UpdateAutoReply"
	AutoReplyService_DeleteAutoReply_FullMethodName   = "/eolymp.helpdesk.AutoReplyService/DeleteAutoReply"
	AutoReplyService_ListAutoReplies_FullMethodName   = "/eolymp.helpdesk.AutoReplyService/ListAutoReplies"
	AutoReplyService_DescribeAutoReply_FullMethodName = "/eolymp.helpdesk.AutoReplyService/DescribeAutoReply"
)

// AutoReplyServiceClient is the client API for AutoReplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoReplyServiceClient interface {
	CreateAutoReply(ctx context.Context, in *CreateAutoReplyInput, opts ...grpc.CallOption) (*CreateAutoReplyOutput, error)
	UpdateAutoReply(ctx context.Context, in *UpdateAutoReplyInput, opts ...grpc.CallOption) (*UpdateAutoReplyOutput, error)
	DeleteAutoReply(ctx context.Context, in *DeleteAutoReplyInput, opts ...grpc.CallOption) (*DeleteAutoReplyOutput, error)
	ListAutoReplies(ctx context.Context, in *ListAutoRepliesInput, opts ...grpc.CallOption) (*ListAutoRepliesOutput, error)
	DescribeAutoReply(ctx context.Context, in *DescribeAutoReplyInput, opts ...grpc.CallOption) (*DescribeAutoReplyOutput, error)
}

type autoReplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoReplyServiceClient(cc grpc.ClientConnInterface) AutoReplyServiceClient {
	return &autoReplyServiceClient{cc}
}

func (c *autoReplyServiceClient) CreateAutoReply(ctx context.Context, in *CreateAutoReplyInput, opts ...grpc.CallOption) (*CreateAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAutoReplyOutput)
	err := c.cc.Invoke(ctx, AutoReplyService_CreateAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoReplyServiceClient) UpdateAutoReply(ctx context.Context, in *UpdateAutoReplyInput, opts ...grpc.CallOption) (*UpdateAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAutoReplyOutput)
	err := c.cc.Invoke(ctx, AutoReplyService_UpdateAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoReplyServiceClient) DeleteAutoReply(ctx context.Context, in *DeleteAutoReplyInput, opts ...grpc.CallOption) (*DeleteAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAutoReplyOutput)
	err := c.cc.Invoke(ctx, AutoReplyService_DeleteAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoReplyServiceClient) ListAutoReplies(ctx context.Context, in *ListAutoRepliesInput, opts ...grpc.CallOption) (*ListAutoRepliesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAutoRepliesOutput)
	err := c.cc.Invoke(ctx, AutoReplyService_ListAutoReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoReplyServiceClient) DescribeAutoReply(ctx context.Context, in *DescribeAutoReplyInput, opts ...grpc.CallOption) (*DescribeAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeAutoReplyOutput)
	err := c.cc.Invoke(ctx, AutoReplyService_DescribeAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoReplyServiceServer is the server API for AutoReplyService service.
// All implementations should embed UnimplementedAutoReplyServiceServer
// for forward compatibility.
type AutoReplyServiceServer interface {
	CreateAutoReply(context.Context, *CreateAutoReplyInput) (*CreateAutoReplyOutput, error)
	UpdateAutoReply(context.Context, *UpdateAutoReplyInput) (*UpdateAutoReplyOutput, error)
	DeleteAutoReply(context.Context, *DeleteAutoReplyInput) (*DeleteAutoReplyOutput, error)
	ListAutoReplies(context.Context, *ListAutoRepliesInput) (*ListAutoRepliesOutput, error)
	DescribeAutoReply(context.Context, *DescribeAutoReplyInput) (*DescribeAutoReplyOutput, error)
}

// UnimplementedAutoReplyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutoReplyServiceServer struct{}

func (UnimplementedAutoReplyServiceServer) CreateAutoReply(context.Context, *CreateAutoReplyInput) (*CreateAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoReply not implemented")
}
func (UnimplementedAutoReplyServiceServer) UpdateAutoReply(context.Context, *UpdateAutoReplyInput) (*UpdateAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoReply not implemented")
}
func (UnimplementedAutoReplyServiceServer) DeleteAutoReply(context.Context, *DeleteAutoReplyInput) (*DeleteAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoReply not implemented")
}
func (UnimplementedAutoReplyServiceServer) ListAutoReplies(context.Context, *ListAutoRepliesInput) (*ListAutoRepliesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoReplies not implemented")
}
func (UnimplementedAutoReplyServiceServer) DescribeAutoReply(context.Context, *DescribeAutoReplyInput) (*DescribeAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAutoReply not implemented")
}
func (UnimplementedAutoReplyServiceServer) testEmbeddedByValue() {}

// UnsafeAutoReplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoReplyServiceServer will
// result in compilation errors.
type UnsafeAutoReplyServiceServer interface {
	mustEmbedUnimplementedAutoReplyServiceServer()
}

func RegisterAutoReplyServiceServer(s grpc.ServiceRegistrar, srv AutoReplyServiceServer) {
	// If the following call pancis, it indicates UnimplementedAutoReplyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AutoReplyService_ServiceDesc, srv)
}

func _AutoReplyService_CreateAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoReplyServiceServer).CreateAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoReplyService_CreateAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoReplyServiceServer).CreateAutoReply(ctx, req.(*CreateAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoReplyService_UpdateAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoReplyServiceServer).UpdateAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoReplyService_UpdateAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoReplyServiceServer).UpdateAutoReply(ctx, req.(*UpdateAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoReplyService_DeleteAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoReplyServiceServer).DeleteAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoReplyService_DeleteAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoReplyServiceServer).DeleteAutoReply(ctx, req.(*DeleteAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoReplyService_ListAutoReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoRepliesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoReplyServiceServer).ListAutoReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoReplyService_ListAutoReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoReplyServiceServer).ListAutoReplies(ctx, req.(*ListAutoRepliesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoReplyService_DescribeAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoReplyServiceServer).DescribeAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutoReplyService_DescribeAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoReplyServiceServer).DescribeAutoReply(ctx, req.(*DescribeAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AutoReplyService_ServiceDesc is the grpc.ServiceDesc for AutoReplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutoReplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.helpdesk.AutoReplyService",
	HandlerType: (*AutoReplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoReply",
			Handler:    _AutoReplyService_CreateAutoReply_Handler,
		},
		{
			MethodName: "UpdateAutoReply",
			Handler:    _AutoReplyService_UpdateAutoReply_Handler,
		},
		{
			MethodName: "DeleteAutoReply",
			Handler:    _AutoReplyService_DeleteAutoReply_Handler,
		},
		{
			MethodName: "ListAutoReplies",
			Handler:    _AutoReplyService_ListAutoReplies_Handler,
		},
		{
			MethodName: "DescribeAutoReply",
			Handler:    _AutoReplyService_DescribeAutoReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/helpdesk/auto_reply_service.proto",
}
