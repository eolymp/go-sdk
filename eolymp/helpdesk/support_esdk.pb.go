// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package helpdesk

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

type _SupportHttpClient interface {
	Do(*http.Request) (*http.Response, error)
}

type SupportService struct {
	base string
	cli  _SupportHttpClient
}

// NewSupportHttpClient constructs client for Support
func NewSupportHttpClient(url string, cli _SupportHttpClient) *SupportService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &SupportService{base: url, cli: cli}
}

func (s *SupportService) do(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	var body io.Reader

	if in != nil {
		data, err := protojson.Marshal(in)
		if err != nil {
			return err
		}

		if verb != "GET" {
			body = bytes.NewReader(data)
		} else {
			query := url.Values{"q": []string{string(data)}}
			path = path + "?" + query.Encode()
		}
	}

	if in == nil && verb != "GET" {
		body = bytes.NewReader([]byte("{}"))
	}

	req, err := http.NewRequest(verb, s.base+path, body)
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *SupportService) CreateTicket(ctx context.Context, in *CreateTicketInput) (*CreateTicketOutput, error) {
	out := &CreateTicketOutput{}
	path := "/helpdesk/tickets"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) UpdateTicket(ctx context.Context, in *UpdateTicketInput) (*UpdateTicketOutput, error) {
	out := &UpdateTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DeleteTicket(ctx context.Context, in *DeleteTicketInput) (*DeleteTicketOutput, error) {
	out := &DeleteTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DescribeTicket(ctx context.Context, in *DescribeTicketInput) (*DescribeTicketOutput, error) {
	out := &DescribeTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) ListTickets(ctx context.Context, in *ListTicketsInput) (*ListTicketsOutput, error) {
	out := &ListTicketsOutput{}
	path := "/helpdesk/tickets"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) ApproveTicket(ctx context.Context, in *ApproveTicketInput) (*ApproveTicketOutput, error) {
	out := &ApproveTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/approve"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) RejectTicket(ctx context.Context, in *RejectTicketInput) (*RejectTicketOutput, error) {
	out := &RejectTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/reject"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) CloseTicket(ctx context.Context, in *CloseTicketInput) (*CloseTicketOutput, error) {
	out := &CloseTicketOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/close"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) AddComment(ctx context.Context, in *AddCommentInput) (*AddCommentOutput, error) {
	out := &AddCommentOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/comments"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) UpdateComment(ctx context.Context, in *UpdateCommentInput) (*UpdateCommentOutput, error) {
	out := &UpdateCommentOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/comments/" + url.PathEscape(in.GetCommentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
		in.CommentId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DeleteComment(ctx context.Context, in *DeleteCommentInput) (*DeleteCommentOutput, error) {
	out := &DeleteCommentOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/comments/" + url.PathEscape(in.GetCommentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
		in.CommentId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) ListComments(ctx context.Context, in *ListCommentsInput) (*ListCommentsOutput, error) {
	out := &ListCommentsOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/comments"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DescribeComment(ctx context.Context, in *DescribeCommentInput) (*DescribeCommentOutput, error) {
	out := &DescribeCommentOutput{}
	path := "/helpdesk/tickets/" + url.PathEscape(in.GetTicketId()) + "/comments/" + url.PathEscape(in.GetCommentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.TicketId = ""
		in.CommentId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) CreateAutoReply(ctx context.Context, in *CreateAutoReplyInput) (*CreateAutoReplyOutput, error) {
	out := &CreateAutoReplyOutput{}
	path := "/helpdesk/autoreplies"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) UpdateAutoReply(ctx context.Context, in *UpdateAutoReplyInput) (*UpdateAutoReplyOutput, error) {
	out := &UpdateAutoReplyOutput{}
	path := "/helpdesk/autoreplies/" + url.PathEscape(in.GetReplyId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ReplyId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DeleteAutoReply(ctx context.Context, in *DeleteAutoReplyInput) (*DeleteAutoReplyOutput, error) {
	out := &DeleteAutoReplyOutput{}
	path := "/helpdesk/autoreplies/" + url.PathEscape(in.GetReplyId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ReplyId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) ListAutoReplies(ctx context.Context, in *ListAutoRepliesInput) (*ListAutoRepliesOutput, error) {
	out := &ListAutoRepliesOutput{}
	path := "/helpdesk/autoreplies"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *SupportService) DescribeAutoReply(ctx context.Context, in *DescribeAutoReplyInput) (*DescribeAutoReplyOutput, error) {
	out := &DescribeAutoReplyOutput{}
	path := "/helpdesk/autoreplies/" + url.PathEscape(in.GetReplyId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ReplyId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
