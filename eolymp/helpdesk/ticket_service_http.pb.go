// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package helpdesk

import (
	go_querystring "github.com/eolymp/go-querystring"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	strconv "strconv"
)

// _TicketService_HTTPReadQueryString parses body into proto.Message
func _TicketService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	if h := r.Header.Values("Strict-Parsing"); len(h) > 0 {
		strict, err := strconv.ParseBool(h[len(h)-1])
		if err != nil {
			return err
		}

		if strict {
			query, err := url.ParseQuery(r.URL.RawQuery)
			if err != nil {
				return err
			}

			return go_querystring.UnmarshalStrict(query, v)
		}
	}

	return go_querystring.Unmarshal(r.URL.Query(), v)
}

// _TicketService_HTTPReadRequestBody parses body into proto.Message
func _TicketService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _TicketService_HTTPWriteResponse writes proto.Message to HTTP response
func _TicketService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_TicketService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _TicketService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _TicketService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterTicketServiceHttpHandlers adds handlers for for TicketServiceClient
func RegisterTicketServiceHttpHandlers(router *mux.Router, prefix string, cli TicketServiceClient) {
	router.Handle(prefix+"/helpdesk/tickets", _TicketService_CreateTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.CreateTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}", _TicketService_UpdateTicket_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.helpdesk.TicketService.UpdateTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}", _TicketService_DeleteTicket_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.helpdesk.TicketService.DeleteTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}", _TicketService_DescribeTicket_Rule0(cli)).
		Methods("GET").
		Name("eolymp.helpdesk.TicketService.DescribeTicket")
	router.Handle(prefix+"/helpdesk/tickets", _TicketService_ListTickets_Rule0(cli)).
		Methods("GET").
		Name("eolymp.helpdesk.TicketService.ListTickets")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/approve", _TicketService_ApproveTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.ApproveTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/reject", _TicketService_RejectTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.RejectTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/close", _TicketService_CloseTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.CloseTicket")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/comments", _TicketService_AddComment_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.AddComment")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/comments/{comment_id}", _TicketService_UpdateComment_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.helpdesk.TicketService.UpdateComment")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/comments/{comment_id}", _TicketService_DeleteComment_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.helpdesk.TicketService.DeleteComment")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/comments", _TicketService_ListComments_Rule0(cli)).
		Methods("GET").
		Name("eolymp.helpdesk.TicketService.ListComments")
	router.Handle(prefix+"/helpdesk/tickets/{ticket_id}/comments/{comment_id}", _TicketService_DescribeComment_Rule0(cli)).
		Methods("GET").
		Name("eolymp.helpdesk.TicketService.DescribeComment")
	router.Handle(prefix+"/helpdesk/attachments", _TicketService_UploadAttachment_Rule0(cli)).
		Methods("POST").
		Name("eolymp.helpdesk.TicketService.UploadAttachment")
}

// RegisterTicketServiceHttpProxy adds proxy handlers for for TicketServiceClient
func RegisterTicketServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterTicketServiceHttpHandlers(router, prefix, NewTicketServiceClient(conn))
}

func _TicketService_CreateTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_UpdateTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DeleteTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DescribeTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ListTickets_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListTickets(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ApproveTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.ApproveTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_RejectTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RejectTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.RejectTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_CloseTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.CloseTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_AddComment_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddCommentInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.AddComment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_UpdateComment_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCommentInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.CommentId = vars["comment_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateComment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DeleteComment_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCommentInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.CommentId = vars["comment_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteComment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ListComments_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCommentsInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.ListComments(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DescribeComment_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCommentInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.CommentId = vars["comment_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeComment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_UploadAttachment_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadAttachmentInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.UploadAttachment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}
