// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: eolymp/helpdesk/support.proto

package helpdesk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupportClient is the client API for Support service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketInput, opts ...grpc.CallOption) (*CreateTicketOutput, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketInput, opts ...grpc.CallOption) (*UpdateTicketOutput, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketInput, opts ...grpc.CallOption) (*DeleteTicketOutput, error)
	DescribeTicket(ctx context.Context, in *DescribeTicketInput, opts ...grpc.CallOption) (*DescribeTicketOutput, error)
	ListTickets(ctx context.Context, in *ListTicketsInput, opts ...grpc.CallOption) (*ListTicketsOutput, error)
	ApproveTicket(ctx context.Context, in *ApproveTicketInput, opts ...grpc.CallOption) (*ApproveTicketOutput, error)
	RejectTicket(ctx context.Context, in *RejectTicketInput, opts ...grpc.CallOption) (*RejectTicketOutput, error)
	CloseTicket(ctx context.Context, in *CloseTicketInput, opts ...grpc.CallOption) (*CloseTicketOutput, error)
}

type supportClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportClient(cc grpc.ClientConnInterface) SupportClient {
	return &supportClient{cc}
}

func (c *supportClient) CreateTicket(ctx context.Context, in *CreateTicketInput, opts ...grpc.CallOption) (*CreateTicketOutput, error) {
	out := new(CreateTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) UpdateTicket(ctx context.Context, in *UpdateTicketInput, opts ...grpc.CallOption) (*UpdateTicketOutput, error) {
	out := new(UpdateTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/UpdateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DeleteTicket(ctx context.Context, in *DeleteTicketInput, opts ...grpc.CallOption) (*DeleteTicketOutput, error) {
	out := new(DeleteTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DescribeTicket(ctx context.Context, in *DescribeTicketInput, opts ...grpc.CallOption) (*DescribeTicketOutput, error) {
	out := new(DescribeTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/DescribeTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ListTickets(ctx context.Context, in *ListTicketsInput, opts ...grpc.CallOption) (*ListTicketsOutput, error) {
	out := new(ListTicketsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/ListTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ApproveTicket(ctx context.Context, in *ApproveTicketInput, opts ...grpc.CallOption) (*ApproveTicketOutput, error) {
	out := new(ApproveTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/ApproveTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) RejectTicket(ctx context.Context, in *RejectTicketInput, opts ...grpc.CallOption) (*RejectTicketOutput, error) {
	out := new(RejectTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/RejectTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CloseTicket(ctx context.Context, in *CloseTicketInput, opts ...grpc.CallOption) (*CloseTicketOutput, error) {
	out := new(CloseTicketOutput)
	err := c.cc.Invoke(ctx, "/eolymp.helpdesk.Support/CloseTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportServer is the server API for Support service.
// All implementations should embed UnimplementedSupportServer
// for forward compatibility
type SupportServer interface {
	CreateTicket(context.Context, *CreateTicketInput) (*CreateTicketOutput, error)
	UpdateTicket(context.Context, *UpdateTicketInput) (*UpdateTicketOutput, error)
	DeleteTicket(context.Context, *DeleteTicketInput) (*DeleteTicketOutput, error)
	DescribeTicket(context.Context, *DescribeTicketInput) (*DescribeTicketOutput, error)
	ListTickets(context.Context, *ListTicketsInput) (*ListTicketsOutput, error)
	ApproveTicket(context.Context, *ApproveTicketInput) (*ApproveTicketOutput, error)
	RejectTicket(context.Context, *RejectTicketInput) (*RejectTicketOutput, error)
	CloseTicket(context.Context, *CloseTicketInput) (*CloseTicketOutput, error)
}

// UnimplementedSupportServer should be embedded to have forward compatible implementations.
type UnimplementedSupportServer struct {
}

func (UnimplementedSupportServer) CreateTicket(context.Context, *CreateTicketInput) (*CreateTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedSupportServer) UpdateTicket(context.Context, *UpdateTicketInput) (*UpdateTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedSupportServer) DeleteTicket(context.Context, *DeleteTicketInput) (*DeleteTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedSupportServer) DescribeTicket(context.Context, *DescribeTicketInput) (*DescribeTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTicket not implemented")
}
func (UnimplementedSupportServer) ListTickets(context.Context, *ListTicketsInput) (*ListTicketsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedSupportServer) ApproveTicket(context.Context, *ApproveTicketInput) (*ApproveTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTicket not implemented")
}
func (UnimplementedSupportServer) RejectTicket(context.Context, *RejectTicketInput) (*RejectTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTicket not implemented")
}
func (UnimplementedSupportServer) CloseTicket(context.Context, *CloseTicketInput) (*CloseTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}

// UnsafeSupportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportServer will
// result in compilation errors.
type UnsafeSupportServer interface {
	mustEmbedUnimplementedSupportServer()
}

func RegisterSupportServer(s grpc.ServiceRegistrar, srv SupportServer) {
	s.RegisterService(&Support_ServiceDesc, srv)
}

func _Support_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CreateTicket(ctx, req.(*CreateTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/UpdateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).UpdateTicket(ctx, req.(*UpdateTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DeleteTicket(ctx, req.(*DeleteTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DescribeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DescribeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/DescribeTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DescribeTicket(ctx, req.(*DescribeTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/ListTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ListTickets(ctx, req.(*ListTicketsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ApproveTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ApproveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/ApproveTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ApproveTicket(ctx, req.(*ApproveTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_RejectTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).RejectTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/RejectTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).RejectTicket(ctx, req.(*RejectTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.helpdesk.Support/CloseTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CloseTicket(ctx, req.(*CloseTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Support_ServiceDesc is the grpc.ServiceDesc for Support service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Support_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.helpdesk.Support",
	HandlerType: (*SupportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _Support_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _Support_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _Support_DeleteTicket_Handler,
		},
		{
			MethodName: "DescribeTicket",
			Handler:    _Support_DescribeTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _Support_ListTickets_Handler,
		},
		{
			MethodName: "ApproveTicket",
			Handler:    _Support_ApproveTicket_Handler,
		},
		{
			MethodName: "RejectTicket",
			Handler:    _Support_RejectTicket_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _Support_CloseTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/helpdesk/support.proto",
}
