// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: eolymp/helpdesk/support.proto

package helpdesk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Support_CreateTicket_FullMethodName      = "/eolymp.helpdesk.Support/CreateTicket"
	Support_UpdateTicket_FullMethodName      = "/eolymp.helpdesk.Support/UpdateTicket"
	Support_DeleteTicket_FullMethodName      = "/eolymp.helpdesk.Support/DeleteTicket"
	Support_DescribeTicket_FullMethodName    = "/eolymp.helpdesk.Support/DescribeTicket"
	Support_ListTickets_FullMethodName       = "/eolymp.helpdesk.Support/ListTickets"
	Support_ApproveTicket_FullMethodName     = "/eolymp.helpdesk.Support/ApproveTicket"
	Support_RejectTicket_FullMethodName      = "/eolymp.helpdesk.Support/RejectTicket"
	Support_CloseTicket_FullMethodName       = "/eolymp.helpdesk.Support/CloseTicket"
	Support_AddComment_FullMethodName        = "/eolymp.helpdesk.Support/AddComment"
	Support_UpdateComment_FullMethodName     = "/eolymp.helpdesk.Support/UpdateComment"
	Support_DeleteComment_FullMethodName     = "/eolymp.helpdesk.Support/DeleteComment"
	Support_ListComments_FullMethodName      = "/eolymp.helpdesk.Support/ListComments"
	Support_DescribeComment_FullMethodName   = "/eolymp.helpdesk.Support/DescribeComment"
	Support_CreateAutoReply_FullMethodName   = "/eolymp.helpdesk.Support/CreateAutoReply"
	Support_UpdateAutoReply_FullMethodName   = "/eolymp.helpdesk.Support/UpdateAutoReply"
	Support_DeleteAutoReply_FullMethodName   = "/eolymp.helpdesk.Support/DeleteAutoReply"
	Support_ListAutoReplies_FullMethodName   = "/eolymp.helpdesk.Support/ListAutoReplies"
	Support_DescribeAutoReply_FullMethodName = "/eolymp.helpdesk.Support/DescribeAutoReply"
	Support_UploadAttachment_FullMethodName  = "/eolymp.helpdesk.Support/UploadAttachment"
)

// SupportClient is the client API for Support service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketInput, opts ...grpc.CallOption) (*CreateTicketOutput, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketInput, opts ...grpc.CallOption) (*UpdateTicketOutput, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketInput, opts ...grpc.CallOption) (*DeleteTicketOutput, error)
	DescribeTicket(ctx context.Context, in *DescribeTicketInput, opts ...grpc.CallOption) (*DescribeTicketOutput, error)
	ListTickets(ctx context.Context, in *ListTicketsInput, opts ...grpc.CallOption) (*ListTicketsOutput, error)
	ApproveTicket(ctx context.Context, in *ApproveTicketInput, opts ...grpc.CallOption) (*ApproveTicketOutput, error)
	RejectTicket(ctx context.Context, in *RejectTicketInput, opts ...grpc.CallOption) (*RejectTicketOutput, error)
	CloseTicket(ctx context.Context, in *CloseTicketInput, opts ...grpc.CallOption) (*CloseTicketOutput, error)
	AddComment(ctx context.Context, in *AddCommentInput, opts ...grpc.CallOption) (*AddCommentOutput, error)
	UpdateComment(ctx context.Context, in *UpdateCommentInput, opts ...grpc.CallOption) (*UpdateCommentOutput, error)
	DeleteComment(ctx context.Context, in *DeleteCommentInput, opts ...grpc.CallOption) (*DeleteCommentOutput, error)
	ListComments(ctx context.Context, in *ListCommentsInput, opts ...grpc.CallOption) (*ListCommentsOutput, error)
	DescribeComment(ctx context.Context, in *DescribeCommentInput, opts ...grpc.CallOption) (*DescribeCommentOutput, error)
	CreateAutoReply(ctx context.Context, in *CreateAutoReplyInput, opts ...grpc.CallOption) (*CreateAutoReplyOutput, error)
	UpdateAutoReply(ctx context.Context, in *UpdateAutoReplyInput, opts ...grpc.CallOption) (*UpdateAutoReplyOutput, error)
	DeleteAutoReply(ctx context.Context, in *DeleteAutoReplyInput, opts ...grpc.CallOption) (*DeleteAutoReplyOutput, error)
	ListAutoReplies(ctx context.Context, in *ListAutoRepliesInput, opts ...grpc.CallOption) (*ListAutoRepliesOutput, error)
	DescribeAutoReply(ctx context.Context, in *DescribeAutoReplyInput, opts ...grpc.CallOption) (*DescribeAutoReplyOutput, error)
	UploadAttachment(ctx context.Context, in *UploadAttachmentInput, opts ...grpc.CallOption) (*UploadAttachmentOutput, error)
}

type supportClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportClient(cc grpc.ClientConnInterface) SupportClient {
	return &supportClient{cc}
}

func (c *supportClient) CreateTicket(ctx context.Context, in *CreateTicketInput, opts ...grpc.CallOption) (*CreateTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketOutput)
	err := c.cc.Invoke(ctx, Support_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) UpdateTicket(ctx context.Context, in *UpdateTicketInput, opts ...grpc.CallOption) (*UpdateTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTicketOutput)
	err := c.cc.Invoke(ctx, Support_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DeleteTicket(ctx context.Context, in *DeleteTicketInput, opts ...grpc.CallOption) (*DeleteTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTicketOutput)
	err := c.cc.Invoke(ctx, Support_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DescribeTicket(ctx context.Context, in *DescribeTicketInput, opts ...grpc.CallOption) (*DescribeTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTicketOutput)
	err := c.cc.Invoke(ctx, Support_DescribeTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ListTickets(ctx context.Context, in *ListTicketsInput, opts ...grpc.CallOption) (*ListTicketsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketsOutput)
	err := c.cc.Invoke(ctx, Support_ListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ApproveTicket(ctx context.Context, in *ApproveTicketInput, opts ...grpc.CallOption) (*ApproveTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveTicketOutput)
	err := c.cc.Invoke(ctx, Support_ApproveTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) RejectTicket(ctx context.Context, in *RejectTicketInput, opts ...grpc.CallOption) (*RejectTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectTicketOutput)
	err := c.cc.Invoke(ctx, Support_RejectTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CloseTicket(ctx context.Context, in *CloseTicketInput, opts ...grpc.CallOption) (*CloseTicketOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTicketOutput)
	err := c.cc.Invoke(ctx, Support_CloseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) AddComment(ctx context.Context, in *AddCommentInput, opts ...grpc.CallOption) (*AddCommentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentOutput)
	err := c.cc.Invoke(ctx, Support_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) UpdateComment(ctx context.Context, in *UpdateCommentInput, opts ...grpc.CallOption) (*UpdateCommentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentOutput)
	err := c.cc.Invoke(ctx, Support_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DeleteComment(ctx context.Context, in *DeleteCommentInput, opts ...grpc.CallOption) (*DeleteCommentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentOutput)
	err := c.cc.Invoke(ctx, Support_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ListComments(ctx context.Context, in *ListCommentsInput, opts ...grpc.CallOption) (*ListCommentsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsOutput)
	err := c.cc.Invoke(ctx, Support_ListComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DescribeComment(ctx context.Context, in *DescribeCommentInput, opts ...grpc.CallOption) (*DescribeCommentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCommentOutput)
	err := c.cc.Invoke(ctx, Support_DescribeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) CreateAutoReply(ctx context.Context, in *CreateAutoReplyInput, opts ...grpc.CallOption) (*CreateAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAutoReplyOutput)
	err := c.cc.Invoke(ctx, Support_CreateAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) UpdateAutoReply(ctx context.Context, in *UpdateAutoReplyInput, opts ...grpc.CallOption) (*UpdateAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAutoReplyOutput)
	err := c.cc.Invoke(ctx, Support_UpdateAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DeleteAutoReply(ctx context.Context, in *DeleteAutoReplyInput, opts ...grpc.CallOption) (*DeleteAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAutoReplyOutput)
	err := c.cc.Invoke(ctx, Support_DeleteAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) ListAutoReplies(ctx context.Context, in *ListAutoRepliesInput, opts ...grpc.CallOption) (*ListAutoRepliesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAutoRepliesOutput)
	err := c.cc.Invoke(ctx, Support_ListAutoReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) DescribeAutoReply(ctx context.Context, in *DescribeAutoReplyInput, opts ...grpc.CallOption) (*DescribeAutoReplyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeAutoReplyOutput)
	err := c.cc.Invoke(ctx, Support_DescribeAutoReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportClient) UploadAttachment(ctx context.Context, in *UploadAttachmentInput, opts ...grpc.CallOption) (*UploadAttachmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAttachmentOutput)
	err := c.cc.Invoke(ctx, Support_UploadAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportServer is the server API for Support service.
// All implementations should embed UnimplementedSupportServer
// for forward compatibility
type SupportServer interface {
	CreateTicket(context.Context, *CreateTicketInput) (*CreateTicketOutput, error)
	UpdateTicket(context.Context, *UpdateTicketInput) (*UpdateTicketOutput, error)
	DeleteTicket(context.Context, *DeleteTicketInput) (*DeleteTicketOutput, error)
	DescribeTicket(context.Context, *DescribeTicketInput) (*DescribeTicketOutput, error)
	ListTickets(context.Context, *ListTicketsInput) (*ListTicketsOutput, error)
	ApproveTicket(context.Context, *ApproveTicketInput) (*ApproveTicketOutput, error)
	RejectTicket(context.Context, *RejectTicketInput) (*RejectTicketOutput, error)
	CloseTicket(context.Context, *CloseTicketInput) (*CloseTicketOutput, error)
	AddComment(context.Context, *AddCommentInput) (*AddCommentOutput, error)
	UpdateComment(context.Context, *UpdateCommentInput) (*UpdateCommentOutput, error)
	DeleteComment(context.Context, *DeleteCommentInput) (*DeleteCommentOutput, error)
	ListComments(context.Context, *ListCommentsInput) (*ListCommentsOutput, error)
	DescribeComment(context.Context, *DescribeCommentInput) (*DescribeCommentOutput, error)
	CreateAutoReply(context.Context, *CreateAutoReplyInput) (*CreateAutoReplyOutput, error)
	UpdateAutoReply(context.Context, *UpdateAutoReplyInput) (*UpdateAutoReplyOutput, error)
	DeleteAutoReply(context.Context, *DeleteAutoReplyInput) (*DeleteAutoReplyOutput, error)
	ListAutoReplies(context.Context, *ListAutoRepliesInput) (*ListAutoRepliesOutput, error)
	DescribeAutoReply(context.Context, *DescribeAutoReplyInput) (*DescribeAutoReplyOutput, error)
	UploadAttachment(context.Context, *UploadAttachmentInput) (*UploadAttachmentOutput, error)
}

// UnimplementedSupportServer should be embedded to have forward compatible implementations.
type UnimplementedSupportServer struct {
}

func (UnimplementedSupportServer) CreateTicket(context.Context, *CreateTicketInput) (*CreateTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedSupportServer) UpdateTicket(context.Context, *UpdateTicketInput) (*UpdateTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedSupportServer) DeleteTicket(context.Context, *DeleteTicketInput) (*DeleteTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedSupportServer) DescribeTicket(context.Context, *DescribeTicketInput) (*DescribeTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTicket not implemented")
}
func (UnimplementedSupportServer) ListTickets(context.Context, *ListTicketsInput) (*ListTicketsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedSupportServer) ApproveTicket(context.Context, *ApproveTicketInput) (*ApproveTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTicket not implemented")
}
func (UnimplementedSupportServer) RejectTicket(context.Context, *RejectTicketInput) (*RejectTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTicket not implemented")
}
func (UnimplementedSupportServer) CloseTicket(context.Context, *CloseTicketInput) (*CloseTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}
func (UnimplementedSupportServer) AddComment(context.Context, *AddCommentInput) (*AddCommentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedSupportServer) UpdateComment(context.Context, *UpdateCommentInput) (*UpdateCommentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedSupportServer) DeleteComment(context.Context, *DeleteCommentInput) (*DeleteCommentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSupportServer) ListComments(context.Context, *ListCommentsInput) (*ListCommentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedSupportServer) DescribeComment(context.Context, *DescribeCommentInput) (*DescribeCommentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeComment not implemented")
}
func (UnimplementedSupportServer) CreateAutoReply(context.Context, *CreateAutoReplyInput) (*CreateAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoReply not implemented")
}
func (UnimplementedSupportServer) UpdateAutoReply(context.Context, *UpdateAutoReplyInput) (*UpdateAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoReply not implemented")
}
func (UnimplementedSupportServer) DeleteAutoReply(context.Context, *DeleteAutoReplyInput) (*DeleteAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoReply not implemented")
}
func (UnimplementedSupportServer) ListAutoReplies(context.Context, *ListAutoRepliesInput) (*ListAutoRepliesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutoReplies not implemented")
}
func (UnimplementedSupportServer) DescribeAutoReply(context.Context, *DescribeAutoReplyInput) (*DescribeAutoReplyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAutoReply not implemented")
}
func (UnimplementedSupportServer) UploadAttachment(context.Context, *UploadAttachmentInput) (*UploadAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}

// UnsafeSupportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportServer will
// result in compilation errors.
type UnsafeSupportServer interface {
	mustEmbedUnimplementedSupportServer()
}

func RegisterSupportServer(s grpc.ServiceRegistrar, srv SupportServer) {
	s.RegisterService(&Support_ServiceDesc, srv)
}

func _Support_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CreateTicket(ctx, req.(*CreateTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).UpdateTicket(ctx, req.(*UpdateTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DeleteTicket(ctx, req.(*DeleteTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DescribeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DescribeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DescribeTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DescribeTicket(ctx, req.(*DescribeTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ListTickets(ctx, req.(*ListTicketsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ApproveTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ApproveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ApproveTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ApproveTicket(ctx, req.(*ApproveTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_RejectTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).RejectTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_RejectTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).RejectTicket(ctx, req.(*RejectTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CloseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CloseTicket(ctx, req.(*CloseTicketInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).AddComment(ctx, req.(*AddCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).UpdateComment(ctx, req.(*UpdateCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DeleteComment(ctx, req.(*DeleteCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ListComments(ctx, req.(*ListCommentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DescribeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DescribeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DescribeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DescribeComment(ctx, req.(*DescribeCommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_CreateAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).CreateAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_CreateAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).CreateAutoReply(ctx, req.(*CreateAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_UpdateAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).UpdateAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_UpdateAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).UpdateAutoReply(ctx, req.(*UpdateAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DeleteAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DeleteAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DeleteAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DeleteAutoReply(ctx, req.(*DeleteAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_ListAutoReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutoRepliesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).ListAutoReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_ListAutoReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).ListAutoReplies(ctx, req.(*ListAutoRepliesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_DescribeAutoReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAutoReplyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).DescribeAutoReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_DescribeAutoReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).DescribeAutoReply(ctx, req.(*DescribeAutoReplyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Support_UploadAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportServer).UploadAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Support_UploadAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportServer).UploadAttachment(ctx, req.(*UploadAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Support_ServiceDesc is the grpc.ServiceDesc for Support service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Support_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.helpdesk.Support",
	HandlerType: (*SupportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _Support_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _Support_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _Support_DeleteTicket_Handler,
		},
		{
			MethodName: "DescribeTicket",
			Handler:    _Support_DescribeTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _Support_ListTickets_Handler,
		},
		{
			MethodName: "ApproveTicket",
			Handler:    _Support_ApproveTicket_Handler,
		},
		{
			MethodName: "RejectTicket",
			Handler:    _Support_RejectTicket_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _Support_CloseTicket_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _Support_AddComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Support_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Support_DeleteComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Support_ListComments_Handler,
		},
		{
			MethodName: "DescribeComment",
			Handler:    _Support_DescribeComment_Handler,
		},
		{
			MethodName: "CreateAutoReply",
			Handler:    _Support_CreateAutoReply_Handler,
		},
		{
			MethodName: "UpdateAutoReply",
			Handler:    _Support_UpdateAutoReply_Handler,
		},
		{
			MethodName: "DeleteAutoReply",
			Handler:    _Support_DeleteAutoReply_Handler,
		},
		{
			MethodName: "ListAutoReplies",
			Handler:    _Support_ListAutoReplies_Handler,
		},
		{
			MethodName: "DescribeAutoReply",
			Handler:    _Support_DescribeAutoReply_Handler,
		},
		{
			MethodName: "UploadAttachment",
			Handler:    _Support_UploadAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/helpdesk/support.proto",
}
