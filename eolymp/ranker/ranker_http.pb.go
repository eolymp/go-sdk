// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package ranker

import (
	context "context"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Ranker_HTTPReadQueryString parses body into proto.Message
func _Ranker_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Ranker_HTTPReadRequestBody parses body into proto.Message
func _Ranker_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Ranker_HTTPWriteResponse writes proto.Message to HTTP response
func _Ranker_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Ranker_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Ranker_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Ranker_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewRankerHandler constructs new http.Handler for RankerServer
func NewRankerHandler(srv RankerServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.ranker.Ranker/CreateScoreboard", _Ranker_CreateScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/UpdateScoreboard", _Ranker_UpdateScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/RebuildScoreboard", _Ranker_RebuildScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/DeleteScoreboard", _Ranker_DeleteScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/DescribeScoreboard", _Ranker_DescribeScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/ListScoreboards", _Ranker_ListScoreboards(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/DescribeScoreboardRow", _Ranker_DescribeScoreboardRow(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/ListScoreboardRows", _Ranker_ListScoreboardRows(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/AddScoreboardColumn", _Ranker_AddScoreboardColumn(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/DeleteScoreboardColumn", _Ranker_DeleteScoreboardColumn(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/DescribeScoreboardColumn", _Ranker_DescribeScoreboardColumn(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/ListScoreboardColumns", _Ranker_ListScoreboardColumns(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.ranker.Ranker/ListActivities", _Ranker_ListActivities(srv)).Methods(http.MethodPost)
	return router
}

// NewRankerHandlerHttp constructs new http.Handler for RankerServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewRankerHandlerHttp(srv RankerServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/scoreboards", _Ranker_CreateScoreboard_Rule0(srv)).
		Methods("POST").
		Name("eolymp.ranker.Ranker.CreateScoreboard")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}", _Ranker_UpdateScoreboard_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.ranker.Ranker.UpdateScoreboard")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/rebuild", _Ranker_RebuildScoreboard_Rule0(srv)).
		Methods("POST").
		Name("eolymp.ranker.Ranker.RebuildScoreboard")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}", _Ranker_DeleteScoreboard_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.ranker.Ranker.DeleteScoreboard")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}", _Ranker_DescribeScoreboard_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.DescribeScoreboard")

	router.Handle(prefix+"/scoreboards", _Ranker_ListScoreboards_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.ListScoreboards")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/rows/{member_id}", _Ranker_DescribeScoreboardRow_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.DescribeScoreboardRow")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/rows", _Ranker_ListScoreboardRows_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.ListScoreboardRows")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/columns", _Ranker_AddScoreboardColumn_Rule0(srv)).
		Methods("POST").
		Name("eolymp.ranker.Ranker.AddScoreboardColumn")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/columns/{column_id}", _Ranker_DeleteScoreboardColumn_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.ranker.Ranker.DeleteScoreboardColumn")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/columns/{column_id}", _Ranker_DescribeScoreboardColumn_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.DescribeScoreboardColumn")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/columns", _Ranker_ListScoreboardColumns_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.ListScoreboardColumns")

	router.Handle(prefix+"/scoreboards/{scoreboard_id}/activities", _Ranker_ListActivities_Rule0(srv)).
		Methods("GET").
		Name("eolymp.ranker.Ranker.ListActivities")

	return router
}

func _Ranker_CreateScoreboard(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_UpdateScoreboard(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_RebuildScoreboard(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RebuildScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DeleteScoreboard(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboard(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboards(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardsInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboards(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboardRow(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardRowInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoreboardRow(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboardRows(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardRowsInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboardRows(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_AddScoreboardColumn(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddScoreboardColumnInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AddScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DeleteScoreboardColumn(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteScoreboardColumnInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboardColumn(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardColumnInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboardColumns(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardColumnsInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboardColumns(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListActivities(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_CreateScoreboard_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_UpdateScoreboard_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.UpdateScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_RebuildScoreboard_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.RebuildScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DeleteScoreboard_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteScoreboardInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.DeleteScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboard_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.DescribeScoreboard(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboards_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardsInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboards(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboardRow_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardRowInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]
		in.MemberId = vars["member_id"]

		out, err := srv.DescribeScoreboardRow(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboardRows_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardRowsInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.ListScoreboardRows(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_AddScoreboardColumn_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddScoreboardColumnInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.AddScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DeleteScoreboardColumn_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteScoreboardColumnInput{}

		if err := _Ranker_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]
		in.ColumnId = vars["column_id"]

		out, err := srv.DeleteScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_DescribeScoreboardColumn_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardColumnInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]
		in.ColumnId = vars["column_id"]

		out, err := srv.DescribeScoreboardColumn(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListScoreboardColumns_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardColumnsInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.ListScoreboardColumns(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

func _Ranker_ListActivities_Rule0(srv RankerServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Ranker_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ScoreboardId = vars["scoreboard_id"]

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Ranker_HTTPWriteErrorResponse(w, err)
			return
		}

		_Ranker_HTTPWriteResponse(w, out)
	})
}

type _RankerMiddleware = func(ctx context.Context, method string, in proto.Message, next func() (out proto.Message, err error))
type RankerInterceptor struct {
	middleware []_RankerMiddleware
	server     RankerServer
}

// NewRankerInterceptor constructs additional middleware for a server based on annotations in proto files
func NewRankerInterceptor(srv RankerServer, middleware ..._RankerMiddleware) *RankerInterceptor {
	return &RankerInterceptor{server: srv, middleware: middleware}
}

func (i *RankerInterceptor) CreateScoreboard(ctx context.Context, in *CreateScoreboardInput) (out *CreateScoreboardOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CreateScoreboard(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/CreateScoreboard", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput) (out *UpdateScoreboardOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateScoreboard(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/UpdateScoreboard", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput) (out *RebuildScoreboardOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RebuildScoreboard(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/RebuildScoreboard", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput) (out *DeleteScoreboardOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteScoreboard(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/DeleteScoreboard", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput) (out *DescribeScoreboardOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeScoreboard(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/DescribeScoreboard", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) ListScoreboards(ctx context.Context, in *ListScoreboardsInput) (out *ListScoreboardsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListScoreboards(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/ListScoreboards", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) DescribeScoreboardRow(ctx context.Context, in *DescribeScoreboardRowInput) (out *DescribeScoreboardRowOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeScoreboardRow(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/DescribeScoreboardRow", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput) (out *ListScoreboardRowsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListScoreboardRows(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/ListScoreboardRows", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) AddScoreboardColumn(ctx context.Context, in *AddScoreboardColumnInput) (out *AddScoreboardColumnOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.AddScoreboardColumn(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/AddScoreboardColumn", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) DeleteScoreboardColumn(ctx context.Context, in *DeleteScoreboardColumnInput) (out *DeleteScoreboardColumnOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteScoreboardColumn(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/DeleteScoreboardColumn", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) DescribeScoreboardColumn(ctx context.Context, in *DescribeScoreboardColumnInput) (out *DescribeScoreboardColumnOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeScoreboardColumn(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/DescribeScoreboardColumn", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) ListScoreboardColumns(ctx context.Context, in *ListScoreboardColumnsInput) (out *ListScoreboardColumnsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListScoreboardColumns(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/ListScoreboardColumns", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *RankerInterceptor) ListActivities(ctx context.Context, in *ListActivitiesInput) (out *ListActivitiesOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListActivities(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.ranker.Ranker/ListActivities", in, handler)
			return out, err
		}
	}

	next()
	return
}
