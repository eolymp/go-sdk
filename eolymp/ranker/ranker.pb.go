// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.18.1
// source: eolymp/ranker/ranker.proto

package ranker

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateScoreboardInput_Patch int32

const (
	UpdateScoreboardInput_ALL          UpdateScoreboardInput_Patch = 0
	UpdateScoreboardInput_KEY          UpdateScoreboardInput_Patch = 1
	UpdateScoreboardInput_NAME         UpdateScoreboardInput_Patch = 2
	UpdateScoreboardInput_DEFAULT_SORT UpdateScoreboardInput_Patch = 3
	UpdateScoreboardInput_HISTORICAL   UpdateScoreboardInput_Patch = 4
)

// Enum value maps for UpdateScoreboardInput_Patch.
var (
	UpdateScoreboardInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "KEY",
		2: "NAME",
		3: "DEFAULT_SORT",
		4: "HISTORICAL",
	}
	UpdateScoreboardInput_Patch_value = map[string]int32{
		"ALL":          0,
		"KEY":          1,
		"NAME":         2,
		"DEFAULT_SORT": 3,
		"HISTORICAL":   4,
	}
)

func (x UpdateScoreboardInput_Patch) Enum() *UpdateScoreboardInput_Patch {
	p := new(UpdateScoreboardInput_Patch)
	*p = x
	return p
}

func (x UpdateScoreboardInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateScoreboardInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_ranker_ranker_proto_enumTypes[0].Descriptor()
}

func (UpdateScoreboardInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_ranker_ranker_proto_enumTypes[0]
}

func (x UpdateScoreboardInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateScoreboardInput_Patch.Descriptor instead.
func (UpdateScoreboardInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateScoreboardColumnInput_Patch int32

const (
	UpdateScoreboardColumnInput_ALL        UpdateScoreboardColumnInput_Patch = 0
	UpdateScoreboardColumnInput_PARENT_ID  UpdateScoreboardColumnInput_Patch = 1
	UpdateScoreboardColumnInput_KEY        UpdateScoreboardColumnInput_Patch = 2
	UpdateScoreboardColumnInput_NAME       UpdateScoreboardColumnInput_Patch = 3
	UpdateScoreboardColumnInput_SHORT_NAME UpdateScoreboardColumnInput_Patch = 4
	UpdateScoreboardColumnInput_INDEX      UpdateScoreboardColumnInput_Patch = 5
	UpdateScoreboardColumnInput_VISIBLE    UpdateScoreboardColumnInput_Patch = 6
	UpdateScoreboardColumnInput_FILTERABLE UpdateScoreboardColumnInput_Patch = 7
	UpdateScoreboardColumnInput_SORTABLE   UpdateScoreboardColumnInput_Patch = 8
)

// Enum value maps for UpdateScoreboardColumnInput_Patch.
var (
	UpdateScoreboardColumnInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "PARENT_ID",
		2: "KEY",
		3: "NAME",
		4: "SHORT_NAME",
		5: "INDEX",
		6: "VISIBLE",
		7: "FILTERABLE",
		8: "SORTABLE",
	}
	UpdateScoreboardColumnInput_Patch_value = map[string]int32{
		"ALL":        0,
		"PARENT_ID":  1,
		"KEY":        2,
		"NAME":       3,
		"SHORT_NAME": 4,
		"INDEX":      5,
		"VISIBLE":    6,
		"FILTERABLE": 7,
		"SORTABLE":   8,
	}
)

func (x UpdateScoreboardColumnInput_Patch) Enum() *UpdateScoreboardColumnInput_Patch {
	p := new(UpdateScoreboardColumnInput_Patch)
	*p = x
	return p
}

func (x UpdateScoreboardColumnInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateScoreboardColumnInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_ranker_ranker_proto_enumTypes[1].Descriptor()
}

func (UpdateScoreboardColumnInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_ranker_ranker_proto_enumTypes[1]
}

func (x UpdateScoreboardColumnInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateScoreboardColumnInput_Patch.Descriptor instead.
func (UpdateScoreboardColumnInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{18, 0}
}

type CreateScoreboardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scoreboard        *Scoreboard `protobuf:"bytes,1,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
	AddDefaultColumns bool        `protobuf:"varint,2,opt,name=add_default_columns,json=addDefaultColumns,proto3" json:"add_default_columns,omitempty"`
}

func (x *CreateScoreboardInput) Reset() {
	*x = CreateScoreboardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScoreboardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScoreboardInput) ProtoMessage() {}

func (x *CreateScoreboardInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScoreboardInput.ProtoReflect.Descriptor instead.
func (*CreateScoreboardInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{0}
}

func (x *CreateScoreboardInput) GetScoreboard() *Scoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

func (x *CreateScoreboardInput) GetAddDefaultColumns() bool {
	if x != nil {
		return x.AddDefaultColumns
	}
	return false
}

type CreateScoreboardOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
}

func (x *CreateScoreboardOutput) Reset() {
	*x = CreateScoreboardOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScoreboardOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScoreboardOutput) ProtoMessage() {}

func (x *CreateScoreboardOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScoreboardOutput.ProtoReflect.Descriptor instead.
func (*CreateScoreboardOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{1}
}

func (x *CreateScoreboardOutput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

type UpdateScoreboardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patch        []UpdateScoreboardInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.ranker.UpdateScoreboardInput_Patch" json:"patch,omitempty"`
	ScoreboardId string                        `protobuf:"bytes,2,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	Scoreboard   *Scoreboard                   `protobuf:"bytes,3,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
}

func (x *UpdateScoreboardInput) Reset() {
	*x = UpdateScoreboardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScoreboardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreboardInput) ProtoMessage() {}

func (x *UpdateScoreboardInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreboardInput.ProtoReflect.Descriptor instead.
func (*UpdateScoreboardInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateScoreboardInput) GetPatch() []UpdateScoreboardInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateScoreboardInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *UpdateScoreboardInput) GetScoreboard() *Scoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

type UpdateScoreboardOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScoreboardOutput) Reset() {
	*x = UpdateScoreboardOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScoreboardOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreboardOutput) ProtoMessage() {}

func (x *UpdateScoreboardOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreboardOutput.ProtoReflect.Descriptor instead.
func (*UpdateScoreboardOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{3}
}

type RebuildScoreboardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
}

func (x *RebuildScoreboardInput) Reset() {
	*x = RebuildScoreboardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildScoreboardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildScoreboardInput) ProtoMessage() {}

func (x *RebuildScoreboardInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildScoreboardInput.ProtoReflect.Descriptor instead.
func (*RebuildScoreboardInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{4}
}

func (x *RebuildScoreboardInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

type RebuildScoreboardOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *RebuildScoreboardOutput) Reset() {
	*x = RebuildScoreboardOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildScoreboardOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildScoreboardOutput) ProtoMessage() {}

func (x *RebuildScoreboardOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildScoreboardOutput.ProtoReflect.Descriptor instead.
func (*RebuildScoreboardOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{5}
}

func (x *RebuildScoreboardOutput) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type DeleteScoreboardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
}

func (x *DeleteScoreboardInput) Reset() {
	*x = DeleteScoreboardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScoreboardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScoreboardInput) ProtoMessage() {}

func (x *DeleteScoreboardInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScoreboardInput.ProtoReflect.Descriptor instead.
func (*DeleteScoreboardInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteScoreboardInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

type DeleteScoreboardOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScoreboardOutput) Reset() {
	*x = DeleteScoreboardOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScoreboardOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScoreboardOutput) ProtoMessage() {}

func (x *DeleteScoreboardOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScoreboardOutput.ProtoReflect.Descriptor instead.
func (*DeleteScoreboardOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{7}
}

type DescribeScoreboardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId  string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	ScoreboardKey string `protobuf:"bytes,2,opt,name=scoreboard_key,json=scoreboardKey,proto3" json:"scoreboard_key,omitempty"`
}

func (x *DescribeScoreboardInput) Reset() {
	*x = DescribeScoreboardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardInput) ProtoMessage() {}

func (x *DescribeScoreboardInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardInput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeScoreboardInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *DescribeScoreboardInput) GetScoreboardKey() string {
	if x != nil {
		return x.ScoreboardKey
	}
	return ""
}

type DescribeScoreboardOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scoreboard *Scoreboard `protobuf:"bytes,1,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
}

func (x *DescribeScoreboardOutput) Reset() {
	*x = DescribeScoreboardOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardOutput) ProtoMessage() {}

func (x *DescribeScoreboardOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardOutput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeScoreboardOutput) GetScoreboard() *Scoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

type ListScoreboardsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset  int32                        `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int32                        `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Filters *ListScoreboardsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListScoreboardsInput) Reset() {
	*x = ListScoreboardsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardsInput) ProtoMessage() {}

func (x *ListScoreboardsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardsInput.ProtoReflect.Descriptor instead.
func (*ListScoreboardsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{10}
}

func (x *ListScoreboardsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListScoreboardsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListScoreboardsInput) GetFilters() *ListScoreboardsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListScoreboardsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Scoreboard `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListScoreboardsOutput) Reset() {
	*x = ListScoreboardsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardsOutput) ProtoMessage() {}

func (x *ListScoreboardsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardsOutput.ProtoReflect.Descriptor instead.
func (*ListScoreboardsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{11}
}

func (x *ListScoreboardsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListScoreboardsOutput) GetItems() []*Scoreboard {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeScoreboardRowInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode for fetching score value (see enum description).
	Mode Scoreboard_FetchingMode `protobuf:"varint,10,opt,name=mode,proto3,enum=eolymp.ranker.Scoreboard_FetchingMode" json:"mode,omitempty"`
	// For PUNCTUAL fetch mode this parameter sets time of interest.
	PunctualTime uint32 `protobuf:"varint,11,opt,name=punctual_time,json=punctualTime,proto3" json:"punctual_time,omitempty"`
	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	MemberId     string `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
}

func (x *DescribeScoreboardRowInput) Reset() {
	*x = DescribeScoreboardRowInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardRowInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardRowInput) ProtoMessage() {}

func (x *DescribeScoreboardRowInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardRowInput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardRowInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeScoreboardRowInput) GetMode() Scoreboard_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Scoreboard_LATEST
}

func (x *DescribeScoreboardRowInput) GetPunctualTime() uint32 {
	if x != nil {
		return x.PunctualTime
	}
	return 0
}

func (x *DescribeScoreboardRowInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *DescribeScoreboardRowInput) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type DescribeScoreboardRowOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row    *Scoreboard_Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	Frozen bool            `protobuf:"varint,10,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *DescribeScoreboardRowOutput) Reset() {
	*x = DescribeScoreboardRowOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardRowOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardRowOutput) ProtoMessage() {}

func (x *DescribeScoreboardRowOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardRowOutput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardRowOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeScoreboardRowOutput) GetRow() *Scoreboard_Row {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *DescribeScoreboardRowOutput) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

type ListScoreboardRowsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	// Mode for fetching score value (see enum description).
	Mode Scoreboard_FetchingMode `protobuf:"varint,2,opt,name=mode,proto3,enum=eolymp.ranker.Scoreboard_FetchingMode" json:"mode,omitempty"`
	// For PUNCTUAL fetch mode this parameter sets time of interest.
	PunctualTime uint32                          `protobuf:"varint,3,opt,name=punctual_time,json=punctualTime,proto3" json:"punctual_time,omitempty"`
	Offset       int32                           `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size         int32                           `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Filters      *ListScoreboardRowsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	Sort         string                          `protobuf:"bytes,50,opt,name=sort,proto3" json:"sort,omitempty"`
	Order        wellknown.Direction             `protobuf:"varint,51,opt,name=order,proto3,enum=eolymp.wellknown.Direction" json:"order,omitempty"`
}

func (x *ListScoreboardRowsInput) Reset() {
	*x = ListScoreboardRowsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardRowsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardRowsInput) ProtoMessage() {}

func (x *ListScoreboardRowsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardRowsInput.ProtoReflect.Descriptor instead.
func (*ListScoreboardRowsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{14}
}

func (x *ListScoreboardRowsInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *ListScoreboardRowsInput) GetMode() Scoreboard_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Scoreboard_LATEST
}

func (x *ListScoreboardRowsInput) GetPunctualTime() uint32 {
	if x != nil {
		return x.PunctualTime
	}
	return 0
}

func (x *ListScoreboardRowsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListScoreboardRowsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListScoreboardRowsInput) GetFilters() *ListScoreboardRowsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListScoreboardRowsInput) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListScoreboardRowsInput) GetOrder() wellknown.Direction {
	if x != nil {
		return x.Order
	}
	return wellknown.Direction(0)
}

type ListScoreboardRowsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items  []*Scoreboard_Row `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Frozen bool              `protobuf:"varint,10,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *ListScoreboardRowsOutput) Reset() {
	*x = ListScoreboardRowsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardRowsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardRowsOutput) ProtoMessage() {}

func (x *ListScoreboardRowsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardRowsOutput.ProtoReflect.Descriptor instead.
func (*ListScoreboardRowsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{15}
}

func (x *ListScoreboardRowsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListScoreboardRowsOutput) GetItems() []*Scoreboard_Row {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListScoreboardRowsOutput) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

type AddScoreboardColumnInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string             `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	Column       *Scoreboard_Column `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *AddScoreboardColumnInput) Reset() {
	*x = AddScoreboardColumnInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddScoreboardColumnInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScoreboardColumnInput) ProtoMessage() {}

func (x *AddScoreboardColumnInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScoreboardColumnInput.ProtoReflect.Descriptor instead.
func (*AddScoreboardColumnInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{16}
}

func (x *AddScoreboardColumnInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *AddScoreboardColumnInput) GetColumn() *Scoreboard_Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type AddScoreboardColumnOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId string `protobuf:"bytes,1,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *AddScoreboardColumnOutput) Reset() {
	*x = AddScoreboardColumnOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddScoreboardColumnOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScoreboardColumnOutput) ProtoMessage() {}

func (x *AddScoreboardColumnOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScoreboardColumnOutput.ProtoReflect.Descriptor instead.
func (*AddScoreboardColumnOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{17}
}

func (x *AddScoreboardColumnOutput) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

type UpdateScoreboardColumnInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patch        []UpdateScoreboardColumnInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.ranker.UpdateScoreboardColumnInput_Patch" json:"patch,omitempty"`
	ScoreboardId string                              `protobuf:"bytes,2,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	ColumnId     string                              `protobuf:"bytes,3,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	Column       *Scoreboard_Column                  `protobuf:"bytes,4,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *UpdateScoreboardColumnInput) Reset() {
	*x = UpdateScoreboardColumnInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScoreboardColumnInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreboardColumnInput) ProtoMessage() {}

func (x *UpdateScoreboardColumnInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreboardColumnInput.ProtoReflect.Descriptor instead.
func (*UpdateScoreboardColumnInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateScoreboardColumnInput) GetPatch() []UpdateScoreboardColumnInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateScoreboardColumnInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *UpdateScoreboardColumnInput) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *UpdateScoreboardColumnInput) GetColumn() *Scoreboard_Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type UpdateScoreboardColumnOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScoreboardColumnOutput) Reset() {
	*x = UpdateScoreboardColumnOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScoreboardColumnOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreboardColumnOutput) ProtoMessage() {}

func (x *UpdateScoreboardColumnOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreboardColumnOutput.ProtoReflect.Descriptor instead.
func (*UpdateScoreboardColumnOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{19}
}

type DeleteScoreboardColumnInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	ColumnId     string `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *DeleteScoreboardColumnInput) Reset() {
	*x = DeleteScoreboardColumnInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScoreboardColumnInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScoreboardColumnInput) ProtoMessage() {}

func (x *DeleteScoreboardColumnInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScoreboardColumnInput.ProtoReflect.Descriptor instead.
func (*DeleteScoreboardColumnInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteScoreboardColumnInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *DeleteScoreboardColumnInput) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

type DeleteScoreboardColumnOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteScoreboardColumnOutput) Reset() {
	*x = DeleteScoreboardColumnOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteScoreboardColumnOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScoreboardColumnOutput) ProtoMessage() {}

func (x *DeleteScoreboardColumnOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScoreboardColumnOutput.ProtoReflect.Descriptor instead.
func (*DeleteScoreboardColumnOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{21}
}

type DescribeScoreboardColumnInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	ColumnId     string `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
}

func (x *DescribeScoreboardColumnInput) Reset() {
	*x = DescribeScoreboardColumnInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardColumnInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardColumnInput) ProtoMessage() {}

func (x *DescribeScoreboardColumnInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardColumnInput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardColumnInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{22}
}

func (x *DescribeScoreboardColumnInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *DescribeScoreboardColumnInput) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

type DescribeScoreboardColumnOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column *Scoreboard_Column `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *DescribeScoreboardColumnOutput) Reset() {
	*x = DescribeScoreboardColumnOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreboardColumnOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreboardColumnOutput) ProtoMessage() {}

func (x *DescribeScoreboardColumnOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreboardColumnOutput.ProtoReflect.Descriptor instead.
func (*DescribeScoreboardColumnOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{23}
}

func (x *DescribeScoreboardColumnOutput) GetColumn() *Scoreboard_Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type ListScoreboardColumnsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
}

func (x *ListScoreboardColumnsInput) Reset() {
	*x = ListScoreboardColumnsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardColumnsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardColumnsInput) ProtoMessage() {}

func (x *ListScoreboardColumnsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardColumnsInput.ProtoReflect.Descriptor instead.
func (*ListScoreboardColumnsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{24}
}

func (x *ListScoreboardColumnsInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

type ListScoreboardColumnsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Scoreboard_Column `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListScoreboardColumnsOutput) Reset() {
	*x = ListScoreboardColumnsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardColumnsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardColumnsOutput) ProtoMessage() {}

func (x *ListScoreboardColumnsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardColumnsOutput.ProtoReflect.Descriptor instead.
func (*ListScoreboardColumnsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{25}
}

func (x *ListScoreboardColumnsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListScoreboardColumnsOutput) GetItems() []*Scoreboard_Column {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListActivitiesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	Offset       int32  `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size         int32  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListActivitiesInput) Reset() {
	*x = ListActivitiesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivitiesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesInput) ProtoMessage() {}

func (x *ListActivitiesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesInput.ProtoReflect.Descriptor instead.
func (*ListActivitiesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{26}
}

func (x *ListActivitiesInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *ListActivitiesInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListActivitiesInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListActivitiesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Activity `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListActivitiesOutput) Reset() {
	*x = ListActivitiesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivitiesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesOutput) ProtoMessage() {}

func (x *ListActivitiesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesOutput.ProtoReflect.Descriptor instead.
func (*ListActivitiesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{27}
}

func (x *ListActivitiesOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListActivitiesOutput) GetItems() []*Activity {
	if x != nil {
		return x.Items
	}
	return nil
}

type ScheduleActionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string             `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	Action       *Scoreboard_Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ScheduleActionInput) Reset() {
	*x = ScheduleActionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActionInput) ProtoMessage() {}

func (x *ScheduleActionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActionInput.ProtoReflect.Descriptor instead.
func (*ScheduleActionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{28}
}

func (x *ScheduleActionInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *ScheduleActionInput) GetAction() *Scoreboard_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type ScheduleActionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *ScheduleActionOutput) Reset() {
	*x = ScheduleActionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleActionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleActionOutput) ProtoMessage() {}

func (x *ScheduleActionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleActionOutput.ProtoReflect.Descriptor instead.
func (*ScheduleActionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{29}
}

func (x *ScheduleActionOutput) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type UnscheduleActionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
	ActionId     string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *UnscheduleActionInput) Reset() {
	*x = UnscheduleActionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleActionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleActionInput) ProtoMessage() {}

func (x *UnscheduleActionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleActionInput.ProtoReflect.Descriptor instead.
func (*UnscheduleActionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{30}
}

func (x *UnscheduleActionInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

func (x *UnscheduleActionInput) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

type UnscheduleActionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnscheduleActionOutput) Reset() {
	*x = UnscheduleActionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnscheduleActionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnscheduleActionOutput) ProtoMessage() {}

func (x *UnscheduleActionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnscheduleActionOutput.ProtoReflect.Descriptor instead.
func (*UnscheduleActionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{31}
}

type ListScheduledActionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoreboardId string `protobuf:"bytes,1,opt,name=scoreboard_id,json=scoreboardId,proto3" json:"scoreboard_id,omitempty"`
}

func (x *ListScheduledActionsInput) Reset() {
	*x = ListScheduledActionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledActionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledActionsInput) ProtoMessage() {}

func (x *ListScheduledActionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledActionsInput.ProtoReflect.Descriptor instead.
func (*ListScheduledActionsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{32}
}

func (x *ListScheduledActionsInput) GetScoreboardId() string {
	if x != nil {
		return x.ScoreboardId
	}
	return ""
}

type ListScheduledActionsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Scoreboard_Action `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListScheduledActionsOutput) Reset() {
	*x = ListScheduledActionsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScheduledActionsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScheduledActionsOutput) ProtoMessage() {}

func (x *ListScheduledActionsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScheduledActionsOutput.ProtoReflect.Descriptor instead.
func (*ListScheduledActionsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{33}
}

func (x *ListScheduledActionsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListScheduledActionsOutput) GetItems() []*Scoreboard_Action {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListScoreboardsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []*wellknown.ExpressionID `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *ListScoreboardsInput_Filter) Reset() {
	*x = ListScoreboardsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardsInput_Filter) ProtoMessage() {}

func (x *ListScoreboardsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListScoreboardsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListScoreboardsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListScoreboardRowsInput_ExpressionColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	String_ *wellknown.ExpressionString `protobuf:"bytes,10,opt,name=string,proto3" json:"string,omitempty"`
	Number  *wellknown.ExpressionInt    `protobuf:"bytes,11,opt,name=number,proto3" json:"number,omitempty"`
	Enum    *wellknown.ExpressionEnum   `protobuf:"bytes,12,opt,name=enum,proto3" json:"enum,omitempty"`
}

func (x *ListScoreboardRowsInput_ExpressionColumn) Reset() {
	*x = ListScoreboardRowsInput_ExpressionColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardRowsInput_ExpressionColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardRowsInput_ExpressionColumn) ProtoMessage() {}

func (x *ListScoreboardRowsInput_ExpressionColumn) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardRowsInput_ExpressionColumn.ProtoReflect.Descriptor instead.
func (*ListScoreboardRowsInput_ExpressionColumn) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ListScoreboardRowsInput_ExpressionColumn) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListScoreboardRowsInput_ExpressionColumn) GetString_() *wellknown.ExpressionString {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *ListScoreboardRowsInput_ExpressionColumn) GetNumber() *wellknown.ExpressionInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ListScoreboardRowsInput_ExpressionColumn) GetEnum() *wellknown.ExpressionEnum {
	if x != nil {
		return x.Enum
	}
	return nil
}

type ListScoreboardRowsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId []*wellknown.ExpressionID                   `protobuf:"bytes,1,rep,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	Column   []*ListScoreboardRowsInput_ExpressionColumn `protobuf:"bytes,2,rep,name=column,proto3" json:"column,omitempty"`
}

func (x *ListScoreboardRowsInput_Filter) Reset() {
	*x = ListScoreboardRowsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_ranker_ranker_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScoreboardRowsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScoreboardRowsInput_Filter) ProtoMessage() {}

func (x *ListScoreboardRowsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_ranker_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScoreboardRowsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListScoreboardRowsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_ranker_proto_rawDescGZIP(), []int{14, 1}
}

func (x *ListScoreboardRowsInput_Filter) GetMemberId() []*wellknown.ExpressionID {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *ListScoreboardRowsInput_Filter) GetColumn() []*ListScoreboardRowsInput_ExpressionColumn {
	if x != nil {
		return x.Column
	}
	return nil
}

var File_eolymp_ranker_ranker_proto protoreflect.FileDescriptor

var file_eolymp_ranker_ranker_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2f,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x1a, 0x1d, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x45, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x3d, 0x0a, 0x16, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x3a, 0x0a, 0x17, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3c, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x55, 0x0a, 0x18,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x38,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x22, 0xc6, 0x05, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0xcf, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c,
	0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x7d, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77,
	0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x18, 0x41, 0x64,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x38, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22,
	0xdb, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x46, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x22, 0x78, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x22, 0x1e, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5f, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x61,
	0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x22, 0x5a, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x41, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x22, 0x6b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x66, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x74, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a,
	0x15, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x6e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x40, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x32, 0xfe, 0x19, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x42, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3,
	0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x52, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f,
	0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x1c, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5a, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a,
	0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x22, 0x24, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x1b, 0x8a,
	0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x2a, 0x1c, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb8,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x41, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a,
	0x16, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x62, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a,
	0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x12, 0x2d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x6f, 0x77, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xbd, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f,
	0x77, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x56, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a,
	0x16, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0xc4, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5a, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1b,
	0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x24, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2b,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x66, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1b,
	0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x1a, 0x30, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x66, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a,
	0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xde, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2c, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x65, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3,
	0x0a, 0x16, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30,
	0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xc9, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x59, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2,
	0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0xb3, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x58, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5b,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82,
	0xe3, 0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x10,
	0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x2e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x67, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3,
	0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x5b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x1b, 0x8a, 0xe3, 0x0a, 0x17, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x3a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x3b, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_ranker_ranker_proto_rawDescOnce sync.Once
	file_eolymp_ranker_ranker_proto_rawDescData = file_eolymp_ranker_ranker_proto_rawDesc
)

func file_eolymp_ranker_ranker_proto_rawDescGZIP() []byte {
	file_eolymp_ranker_ranker_proto_rawDescOnce.Do(func() {
		file_eolymp_ranker_ranker_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_ranker_ranker_proto_rawDescData)
	})
	return file_eolymp_ranker_ranker_proto_rawDescData
}

var file_eolymp_ranker_ranker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_ranker_ranker_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_eolymp_ranker_ranker_proto_goTypes = []interface{}{
	(UpdateScoreboardInput_Patch)(0),                 // 0: eolymp.ranker.UpdateScoreboardInput.Patch
	(UpdateScoreboardColumnInput_Patch)(0),           // 1: eolymp.ranker.UpdateScoreboardColumnInput.Patch
	(*CreateScoreboardInput)(nil),                    // 2: eolymp.ranker.CreateScoreboardInput
	(*CreateScoreboardOutput)(nil),                   // 3: eolymp.ranker.CreateScoreboardOutput
	(*UpdateScoreboardInput)(nil),                    // 4: eolymp.ranker.UpdateScoreboardInput
	(*UpdateScoreboardOutput)(nil),                   // 5: eolymp.ranker.UpdateScoreboardOutput
	(*RebuildScoreboardInput)(nil),                   // 6: eolymp.ranker.RebuildScoreboardInput
	(*RebuildScoreboardOutput)(nil),                  // 7: eolymp.ranker.RebuildScoreboardOutput
	(*DeleteScoreboardInput)(nil),                    // 8: eolymp.ranker.DeleteScoreboardInput
	(*DeleteScoreboardOutput)(nil),                   // 9: eolymp.ranker.DeleteScoreboardOutput
	(*DescribeScoreboardInput)(nil),                  // 10: eolymp.ranker.DescribeScoreboardInput
	(*DescribeScoreboardOutput)(nil),                 // 11: eolymp.ranker.DescribeScoreboardOutput
	(*ListScoreboardsInput)(nil),                     // 12: eolymp.ranker.ListScoreboardsInput
	(*ListScoreboardsOutput)(nil),                    // 13: eolymp.ranker.ListScoreboardsOutput
	(*DescribeScoreboardRowInput)(nil),               // 14: eolymp.ranker.DescribeScoreboardRowInput
	(*DescribeScoreboardRowOutput)(nil),              // 15: eolymp.ranker.DescribeScoreboardRowOutput
	(*ListScoreboardRowsInput)(nil),                  // 16: eolymp.ranker.ListScoreboardRowsInput
	(*ListScoreboardRowsOutput)(nil),                 // 17: eolymp.ranker.ListScoreboardRowsOutput
	(*AddScoreboardColumnInput)(nil),                 // 18: eolymp.ranker.AddScoreboardColumnInput
	(*AddScoreboardColumnOutput)(nil),                // 19: eolymp.ranker.AddScoreboardColumnOutput
	(*UpdateScoreboardColumnInput)(nil),              // 20: eolymp.ranker.UpdateScoreboardColumnInput
	(*UpdateScoreboardColumnOutput)(nil),             // 21: eolymp.ranker.UpdateScoreboardColumnOutput
	(*DeleteScoreboardColumnInput)(nil),              // 22: eolymp.ranker.DeleteScoreboardColumnInput
	(*DeleteScoreboardColumnOutput)(nil),             // 23: eolymp.ranker.DeleteScoreboardColumnOutput
	(*DescribeScoreboardColumnInput)(nil),            // 24: eolymp.ranker.DescribeScoreboardColumnInput
	(*DescribeScoreboardColumnOutput)(nil),           // 25: eolymp.ranker.DescribeScoreboardColumnOutput
	(*ListScoreboardColumnsInput)(nil),               // 26: eolymp.ranker.ListScoreboardColumnsInput
	(*ListScoreboardColumnsOutput)(nil),              // 27: eolymp.ranker.ListScoreboardColumnsOutput
	(*ListActivitiesInput)(nil),                      // 28: eolymp.ranker.ListActivitiesInput
	(*ListActivitiesOutput)(nil),                     // 29: eolymp.ranker.ListActivitiesOutput
	(*ScheduleActionInput)(nil),                      // 30: eolymp.ranker.ScheduleActionInput
	(*ScheduleActionOutput)(nil),                     // 31: eolymp.ranker.ScheduleActionOutput
	(*UnscheduleActionInput)(nil),                    // 32: eolymp.ranker.UnscheduleActionInput
	(*UnscheduleActionOutput)(nil),                   // 33: eolymp.ranker.UnscheduleActionOutput
	(*ListScheduledActionsInput)(nil),                // 34: eolymp.ranker.ListScheduledActionsInput
	(*ListScheduledActionsOutput)(nil),               // 35: eolymp.ranker.ListScheduledActionsOutput
	(*ListScoreboardsInput_Filter)(nil),              // 36: eolymp.ranker.ListScoreboardsInput.Filter
	(*ListScoreboardRowsInput_ExpressionColumn)(nil), // 37: eolymp.ranker.ListScoreboardRowsInput.ExpressionColumn
	(*ListScoreboardRowsInput_Filter)(nil),           // 38: eolymp.ranker.ListScoreboardRowsInput.Filter
	(*Scoreboard)(nil),                               // 39: eolymp.ranker.Scoreboard
	(Scoreboard_FetchingMode)(0),                     // 40: eolymp.ranker.Scoreboard.FetchingMode
	(*Scoreboard_Row)(nil),                           // 41: eolymp.ranker.Scoreboard.Row
	(wellknown.Direction)(0),                         // 42: eolymp.wellknown.Direction
	(*Scoreboard_Column)(nil),                        // 43: eolymp.ranker.Scoreboard.Column
	(*Activity)(nil),                                 // 44: eolymp.ranker.Activity
	(*Scoreboard_Action)(nil),                        // 45: eolymp.ranker.Scoreboard.Action
	(*wellknown.ExpressionID)(nil),                   // 46: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionString)(nil),               // 47: eolymp.wellknown.ExpressionString
	(*wellknown.ExpressionInt)(nil),                  // 48: eolymp.wellknown.ExpressionInt
	(*wellknown.ExpressionEnum)(nil),                 // 49: eolymp.wellknown.ExpressionEnum
}
var file_eolymp_ranker_ranker_proto_depIdxs = []int32{
	39, // 0: eolymp.ranker.CreateScoreboardInput.scoreboard:type_name -> eolymp.ranker.Scoreboard
	0,  // 1: eolymp.ranker.UpdateScoreboardInput.patch:type_name -> eolymp.ranker.UpdateScoreboardInput.Patch
	39, // 2: eolymp.ranker.UpdateScoreboardInput.scoreboard:type_name -> eolymp.ranker.Scoreboard
	39, // 3: eolymp.ranker.DescribeScoreboardOutput.scoreboard:type_name -> eolymp.ranker.Scoreboard
	36, // 4: eolymp.ranker.ListScoreboardsInput.filters:type_name -> eolymp.ranker.ListScoreboardsInput.Filter
	39, // 5: eolymp.ranker.ListScoreboardsOutput.items:type_name -> eolymp.ranker.Scoreboard
	40, // 6: eolymp.ranker.DescribeScoreboardRowInput.mode:type_name -> eolymp.ranker.Scoreboard.FetchingMode
	41, // 7: eolymp.ranker.DescribeScoreboardRowOutput.row:type_name -> eolymp.ranker.Scoreboard.Row
	40, // 8: eolymp.ranker.ListScoreboardRowsInput.mode:type_name -> eolymp.ranker.Scoreboard.FetchingMode
	38, // 9: eolymp.ranker.ListScoreboardRowsInput.filters:type_name -> eolymp.ranker.ListScoreboardRowsInput.Filter
	42, // 10: eolymp.ranker.ListScoreboardRowsInput.order:type_name -> eolymp.wellknown.Direction
	41, // 11: eolymp.ranker.ListScoreboardRowsOutput.items:type_name -> eolymp.ranker.Scoreboard.Row
	43, // 12: eolymp.ranker.AddScoreboardColumnInput.column:type_name -> eolymp.ranker.Scoreboard.Column
	1,  // 13: eolymp.ranker.UpdateScoreboardColumnInput.patch:type_name -> eolymp.ranker.UpdateScoreboardColumnInput.Patch
	43, // 14: eolymp.ranker.UpdateScoreboardColumnInput.column:type_name -> eolymp.ranker.Scoreboard.Column
	43, // 15: eolymp.ranker.DescribeScoreboardColumnOutput.column:type_name -> eolymp.ranker.Scoreboard.Column
	43, // 16: eolymp.ranker.ListScoreboardColumnsOutput.items:type_name -> eolymp.ranker.Scoreboard.Column
	44, // 17: eolymp.ranker.ListActivitiesOutput.items:type_name -> eolymp.ranker.Activity
	45, // 18: eolymp.ranker.ScheduleActionInput.action:type_name -> eolymp.ranker.Scoreboard.Action
	45, // 19: eolymp.ranker.ListScheduledActionsOutput.items:type_name -> eolymp.ranker.Scoreboard.Action
	46, // 20: eolymp.ranker.ListScoreboardsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	47, // 21: eolymp.ranker.ListScoreboardRowsInput.ExpressionColumn.string:type_name -> eolymp.wellknown.ExpressionString
	48, // 22: eolymp.ranker.ListScoreboardRowsInput.ExpressionColumn.number:type_name -> eolymp.wellknown.ExpressionInt
	49, // 23: eolymp.ranker.ListScoreboardRowsInput.ExpressionColumn.enum:type_name -> eolymp.wellknown.ExpressionEnum
	46, // 24: eolymp.ranker.ListScoreboardRowsInput.Filter.member_id:type_name -> eolymp.wellknown.ExpressionID
	37, // 25: eolymp.ranker.ListScoreboardRowsInput.Filter.column:type_name -> eolymp.ranker.ListScoreboardRowsInput.ExpressionColumn
	2,  // 26: eolymp.ranker.Ranker.CreateScoreboard:input_type -> eolymp.ranker.CreateScoreboardInput
	4,  // 27: eolymp.ranker.Ranker.UpdateScoreboard:input_type -> eolymp.ranker.UpdateScoreboardInput
	6,  // 28: eolymp.ranker.Ranker.RebuildScoreboard:input_type -> eolymp.ranker.RebuildScoreboardInput
	8,  // 29: eolymp.ranker.Ranker.DeleteScoreboard:input_type -> eolymp.ranker.DeleteScoreboardInput
	10, // 30: eolymp.ranker.Ranker.DescribeScoreboard:input_type -> eolymp.ranker.DescribeScoreboardInput
	12, // 31: eolymp.ranker.Ranker.ListScoreboards:input_type -> eolymp.ranker.ListScoreboardsInput
	14, // 32: eolymp.ranker.Ranker.DescribeScoreboardRow:input_type -> eolymp.ranker.DescribeScoreboardRowInput
	16, // 33: eolymp.ranker.Ranker.ListScoreboardRows:input_type -> eolymp.ranker.ListScoreboardRowsInput
	18, // 34: eolymp.ranker.Ranker.AddScoreboardColumn:input_type -> eolymp.ranker.AddScoreboardColumnInput
	20, // 35: eolymp.ranker.Ranker.UpdateScoreboardColumn:input_type -> eolymp.ranker.UpdateScoreboardColumnInput
	22, // 36: eolymp.ranker.Ranker.DeleteScoreboardColumn:input_type -> eolymp.ranker.DeleteScoreboardColumnInput
	24, // 37: eolymp.ranker.Ranker.DescribeScoreboardColumn:input_type -> eolymp.ranker.DescribeScoreboardColumnInput
	26, // 38: eolymp.ranker.Ranker.ListScoreboardColumns:input_type -> eolymp.ranker.ListScoreboardColumnsInput
	28, // 39: eolymp.ranker.Ranker.ListActivities:input_type -> eolymp.ranker.ListActivitiesInput
	30, // 40: eolymp.ranker.Ranker.ScheduleAction:input_type -> eolymp.ranker.ScheduleActionInput
	32, // 41: eolymp.ranker.Ranker.UnscheduleAction:input_type -> eolymp.ranker.UnscheduleActionInput
	34, // 42: eolymp.ranker.Ranker.ListScheduledActions:input_type -> eolymp.ranker.ListScheduledActionsInput
	3,  // 43: eolymp.ranker.Ranker.CreateScoreboard:output_type -> eolymp.ranker.CreateScoreboardOutput
	5,  // 44: eolymp.ranker.Ranker.UpdateScoreboard:output_type -> eolymp.ranker.UpdateScoreboardOutput
	7,  // 45: eolymp.ranker.Ranker.RebuildScoreboard:output_type -> eolymp.ranker.RebuildScoreboardOutput
	9,  // 46: eolymp.ranker.Ranker.DeleteScoreboard:output_type -> eolymp.ranker.DeleteScoreboardOutput
	11, // 47: eolymp.ranker.Ranker.DescribeScoreboard:output_type -> eolymp.ranker.DescribeScoreboardOutput
	13, // 48: eolymp.ranker.Ranker.ListScoreboards:output_type -> eolymp.ranker.ListScoreboardsOutput
	15, // 49: eolymp.ranker.Ranker.DescribeScoreboardRow:output_type -> eolymp.ranker.DescribeScoreboardRowOutput
	17, // 50: eolymp.ranker.Ranker.ListScoreboardRows:output_type -> eolymp.ranker.ListScoreboardRowsOutput
	19, // 51: eolymp.ranker.Ranker.AddScoreboardColumn:output_type -> eolymp.ranker.AddScoreboardColumnOutput
	21, // 52: eolymp.ranker.Ranker.UpdateScoreboardColumn:output_type -> eolymp.ranker.UpdateScoreboardColumnOutput
	23, // 53: eolymp.ranker.Ranker.DeleteScoreboardColumn:output_type -> eolymp.ranker.DeleteScoreboardColumnOutput
	25, // 54: eolymp.ranker.Ranker.DescribeScoreboardColumn:output_type -> eolymp.ranker.DescribeScoreboardColumnOutput
	27, // 55: eolymp.ranker.Ranker.ListScoreboardColumns:output_type -> eolymp.ranker.ListScoreboardColumnsOutput
	29, // 56: eolymp.ranker.Ranker.ListActivities:output_type -> eolymp.ranker.ListActivitiesOutput
	31, // 57: eolymp.ranker.Ranker.ScheduleAction:output_type -> eolymp.ranker.ScheduleActionOutput
	33, // 58: eolymp.ranker.Ranker.UnscheduleAction:output_type -> eolymp.ranker.UnscheduleActionOutput
	35, // 59: eolymp.ranker.Ranker.ListScheduledActions:output_type -> eolymp.ranker.ListScheduledActionsOutput
	43, // [43:60] is the sub-list for method output_type
	26, // [26:43] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_eolymp_ranker_ranker_proto_init() }
func file_eolymp_ranker_ranker_proto_init() {
	if File_eolymp_ranker_ranker_proto != nil {
		return
	}
	file_eolymp_ranker_activity_proto_init()
	file_eolymp_ranker_scoreboard_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_ranker_ranker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScoreboardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScoreboardOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScoreboardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScoreboardOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildScoreboardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildScoreboardOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScoreboardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScoreboardOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardRowInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardRowOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardRowsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardRowsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddScoreboardColumnInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddScoreboardColumnOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScoreboardColumnInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScoreboardColumnOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScoreboardColumnInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteScoreboardColumnOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardColumnInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreboardColumnOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardColumnsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardColumnsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivitiesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivitiesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleActionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleActionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnscheduleActionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledActionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScheduledActionsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardRowsInput_ExpressionColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_ranker_ranker_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScoreboardRowsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_ranker_ranker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_ranker_ranker_proto_goTypes,
		DependencyIndexes: file_eolymp_ranker_ranker_proto_depIdxs,
		EnumInfos:         file_eolymp_ranker_ranker_proto_enumTypes,
		MessageInfos:      file_eolymp_ranker_ranker_proto_msgTypes,
	}.Build()
	File_eolymp_ranker_ranker_proto = out.File
	file_eolymp_ranker_ranker_proto_rawDesc = nil
	file_eolymp_ranker_ranker_proto_goTypes = nil
	file_eolymp_ranker_ranker_proto_depIdxs = nil
}
