// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ranker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankerClient is the client API for Ranker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankerClient interface {
	// Create a scoreboard
	CreateScoreboard(ctx context.Context, in *CreateScoreboardInput, opts ...grpc.CallOption) (*CreateScoreboardOutput, error)
	// Update existing scoreboard in a contest
	UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput, opts ...grpc.CallOption) (*UpdateScoreboardOutput, error)
	// Rebuild scoreboard: recalculate score for all participants
	RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput, opts ...grpc.CallOption) (*RebuildScoreboardOutput, error)
	// Delete scoreboard
	DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput, opts ...grpc.CallOption) (*DeleteScoreboardOutput, error)
	// Lookup scoreboard by domain key
	LookupScoreboard(ctx context.Context, in *LookupScoreboardInput, opts ...grpc.CallOption) (*LookupScoreboardOutput, error)
	// Describe scoreboard
	DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput, opts ...grpc.CallOption) (*DescribeScoreboardOutput, error)
	// List scoreboards of a contest
	ListScoreboards(ctx context.Context, in *ListScoreboardsInput, opts ...grpc.CallOption) (*ListScoreboardsOutput, error)
	// List scoreboards of a contest
	ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput, opts ...grpc.CallOption) (*ListScoreboardRowsOutput, error)
	// Assign contest to a scoreboard
	AssignContest(ctx context.Context, in *AssignContestInput, opts ...grpc.CallOption) (*AssignContestOutput, error)
	// Unassign contest to a scoreboard
	UnassignContest(ctx context.Context, in *UnassignContestInput, opts ...grpc.CallOption) (*UnassignContestOutput, error)
}

type rankerClient struct {
	cc grpc.ClientConnInterface
}

func NewRankerClient(cc grpc.ClientConnInterface) RankerClient {
	return &rankerClient{cc}
}

func (c *rankerClient) CreateScoreboard(ctx context.Context, in *CreateScoreboardInput, opts ...grpc.CallOption) (*CreateScoreboardOutput, error) {
	out := new(CreateScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/CreateScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput, opts ...grpc.CallOption) (*UpdateScoreboardOutput, error) {
	out := new(UpdateScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/UpdateScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput, opts ...grpc.CallOption) (*RebuildScoreboardOutput, error) {
	out := new(RebuildScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/RebuildScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput, opts ...grpc.CallOption) (*DeleteScoreboardOutput, error) {
	out := new(DeleteScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/DeleteScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) LookupScoreboard(ctx context.Context, in *LookupScoreboardInput, opts ...grpc.CallOption) (*LookupScoreboardOutput, error) {
	out := new(LookupScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/LookupScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput, opts ...grpc.CallOption) (*DescribeScoreboardOutput, error) {
	out := new(DescribeScoreboardOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/DescribeScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) ListScoreboards(ctx context.Context, in *ListScoreboardsInput, opts ...grpc.CallOption) (*ListScoreboardsOutput, error) {
	out := new(ListScoreboardsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/ListScoreboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput, opts ...grpc.CallOption) (*ListScoreboardRowsOutput, error) {
	out := new(ListScoreboardRowsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/ListScoreboardRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) AssignContest(ctx context.Context, in *AssignContestInput, opts ...grpc.CallOption) (*AssignContestOutput, error) {
	out := new(AssignContestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/AssignContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankerClient) UnassignContest(ctx context.Context, in *UnassignContestInput, opts ...grpc.CallOption) (*UnassignContestOutput, error) {
	out := new(UnassignContestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.ranker.Ranker/UnassignContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankerServer is the server API for Ranker service.
// All implementations must embed UnimplementedRankerServer
// for forward compatibility
type RankerServer interface {
	// Create a scoreboard
	CreateScoreboard(context.Context, *CreateScoreboardInput) (*CreateScoreboardOutput, error)
	// Update existing scoreboard in a contest
	UpdateScoreboard(context.Context, *UpdateScoreboardInput) (*UpdateScoreboardOutput, error)
	// Rebuild scoreboard: recalculate score for all participants
	RebuildScoreboard(context.Context, *RebuildScoreboardInput) (*RebuildScoreboardOutput, error)
	// Delete scoreboard
	DeleteScoreboard(context.Context, *DeleteScoreboardInput) (*DeleteScoreboardOutput, error)
	// Lookup scoreboard by domain key
	LookupScoreboard(context.Context, *LookupScoreboardInput) (*LookupScoreboardOutput, error)
	// Describe scoreboard
	DescribeScoreboard(context.Context, *DescribeScoreboardInput) (*DescribeScoreboardOutput, error)
	// List scoreboards of a contest
	ListScoreboards(context.Context, *ListScoreboardsInput) (*ListScoreboardsOutput, error)
	// List scoreboards of a contest
	ListScoreboardRows(context.Context, *ListScoreboardRowsInput) (*ListScoreboardRowsOutput, error)
	// Assign contest to a scoreboard
	AssignContest(context.Context, *AssignContestInput) (*AssignContestOutput, error)
	// Unassign contest to a scoreboard
	UnassignContest(context.Context, *UnassignContestInput) (*UnassignContestOutput, error)
	mustEmbedUnimplementedRankerServer()
}

// UnimplementedRankerServer must be embedded to have forward compatible implementations.
type UnimplementedRankerServer struct {
}

func (UnimplementedRankerServer) CreateScoreboard(context.Context, *CreateScoreboardInput) (*CreateScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScoreboard not implemented")
}
func (UnimplementedRankerServer) UpdateScoreboard(context.Context, *UpdateScoreboardInput) (*UpdateScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreboard not implemented")
}
func (UnimplementedRankerServer) RebuildScoreboard(context.Context, *RebuildScoreboardInput) (*RebuildScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildScoreboard not implemented")
}
func (UnimplementedRankerServer) DeleteScoreboard(context.Context, *DeleteScoreboardInput) (*DeleteScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScoreboard not implemented")
}
func (UnimplementedRankerServer) LookupScoreboard(context.Context, *LookupScoreboardInput) (*LookupScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupScoreboard not implemented")
}
func (UnimplementedRankerServer) DescribeScoreboard(context.Context, *DescribeScoreboardInput) (*DescribeScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScoreboard not implemented")
}
func (UnimplementedRankerServer) ListScoreboards(context.Context, *ListScoreboardsInput) (*ListScoreboardsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreboards not implemented")
}
func (UnimplementedRankerServer) ListScoreboardRows(context.Context, *ListScoreboardRowsInput) (*ListScoreboardRowsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreboardRows not implemented")
}
func (UnimplementedRankerServer) AssignContest(context.Context, *AssignContestInput) (*AssignContestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignContest not implemented")
}
func (UnimplementedRankerServer) UnassignContest(context.Context, *UnassignContestInput) (*UnassignContestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignContest not implemented")
}
func (UnimplementedRankerServer) mustEmbedUnimplementedRankerServer() {}

// UnsafeRankerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankerServer will
// result in compilation errors.
type UnsafeRankerServer interface {
	mustEmbedUnimplementedRankerServer()
}

func RegisterRankerServer(s grpc.ServiceRegistrar, srv RankerServer) {
	s.RegisterService(&Ranker_ServiceDesc, srv)
}

func _Ranker_CreateScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).CreateScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/CreateScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).CreateScoreboard(ctx, req.(*CreateScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_UpdateScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).UpdateScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/UpdateScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).UpdateScoreboard(ctx, req.(*UpdateScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_RebuildScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).RebuildScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/RebuildScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).RebuildScoreboard(ctx, req.(*RebuildScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_DeleteScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).DeleteScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/DeleteScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).DeleteScoreboard(ctx, req.(*DeleteScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_LookupScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).LookupScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/LookupScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).LookupScoreboard(ctx, req.(*LookupScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_DescribeScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).DescribeScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/DescribeScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).DescribeScoreboard(ctx, req.(*DescribeScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_ListScoreboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreboardsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).ListScoreboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/ListScoreboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).ListScoreboards(ctx, req.(*ListScoreboardsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_ListScoreboardRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreboardRowsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).ListScoreboardRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/ListScoreboardRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).ListScoreboardRows(ctx, req.(*ListScoreboardRowsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_AssignContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignContestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).AssignContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/AssignContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).AssignContest(ctx, req.(*AssignContestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranker_UnassignContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignContestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankerServer).UnassignContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.ranker.Ranker/UnassignContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankerServer).UnassignContest(ctx, req.(*UnassignContestInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Ranker_ServiceDesc is the grpc.ServiceDesc for Ranker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ranker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.ranker.Ranker",
	HandlerType: (*RankerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScoreboard",
			Handler:    _Ranker_CreateScoreboard_Handler,
		},
		{
			MethodName: "UpdateScoreboard",
			Handler:    _Ranker_UpdateScoreboard_Handler,
		},
		{
			MethodName: "RebuildScoreboard",
			Handler:    _Ranker_RebuildScoreboard_Handler,
		},
		{
			MethodName: "DeleteScoreboard",
			Handler:    _Ranker_DeleteScoreboard_Handler,
		},
		{
			MethodName: "LookupScoreboard",
			Handler:    _Ranker_LookupScoreboard_Handler,
		},
		{
			MethodName: "DescribeScoreboard",
			Handler:    _Ranker_DescribeScoreboard_Handler,
		},
		{
			MethodName: "ListScoreboards",
			Handler:    _Ranker_ListScoreboards_Handler,
		},
		{
			MethodName: "ListScoreboardRows",
			Handler:    _Ranker_ListScoreboardRows_Handler,
		},
		{
			MethodName: "AssignContest",
			Handler:    _Ranker_AssignContest_Handler,
		},
		{
			MethodName: "UnassignContest",
			Handler:    _Ranker_UnassignContest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/ranker/ranker.proto",
}
