// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/ranker/scoreboard_service.proto

package ranker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScoreboardService_CreateScoreboard_FullMethodName         = "/eolymp.ranker.ScoreboardService/CreateScoreboard"
	ScoreboardService_UpdateScoreboard_FullMethodName         = "/eolymp.ranker.ScoreboardService/UpdateScoreboard"
	ScoreboardService_RebuildScoreboard_FullMethodName        = "/eolymp.ranker.ScoreboardService/RebuildScoreboard"
	ScoreboardService_DeleteScoreboard_FullMethodName         = "/eolymp.ranker.ScoreboardService/DeleteScoreboard"
	ScoreboardService_DescribeScoreboard_FullMethodName       = "/eolymp.ranker.ScoreboardService/DescribeScoreboard"
	ScoreboardService_LookupScoreboard_FullMethodName         = "/eolymp.ranker.ScoreboardService/LookupScoreboard"
	ScoreboardService_ListScoreboards_FullMethodName          = "/eolymp.ranker.ScoreboardService/ListScoreboards"
	ScoreboardService_DescribeScoreboardRow_FullMethodName    = "/eolymp.ranker.ScoreboardService/DescribeScoreboardRow"
	ScoreboardService_ListScoreboardRows_FullMethodName       = "/eolymp.ranker.ScoreboardService/ListScoreboardRows"
	ScoreboardService_AddScoreboardColumn_FullMethodName      = "/eolymp.ranker.ScoreboardService/AddScoreboardColumn"
	ScoreboardService_UpdateScoreboardColumn_FullMethodName   = "/eolymp.ranker.ScoreboardService/UpdateScoreboardColumn"
	ScoreboardService_DeleteScoreboardColumn_FullMethodName   = "/eolymp.ranker.ScoreboardService/DeleteScoreboardColumn"
	ScoreboardService_DescribeScoreboardColumn_FullMethodName = "/eolymp.ranker.ScoreboardService/DescribeScoreboardColumn"
	ScoreboardService_ListScoreboardColumns_FullMethodName    = "/eolymp.ranker.ScoreboardService/ListScoreboardColumns"
)

// ScoreboardServiceClient is the client API for ScoreboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreboardServiceClient interface {
	// Create a scoreboard
	CreateScoreboard(ctx context.Context, in *CreateScoreboardInput, opts ...grpc.CallOption) (*CreateScoreboardOutput, error)
	// Update existing scoreboard in a contest
	UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput, opts ...grpc.CallOption) (*UpdateScoreboardOutput, error)
	// Rebuild scoreboard: recalculate score for all participants
	RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput, opts ...grpc.CallOption) (*RebuildScoreboardOutput, error)
	// Delete scoreboard
	DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput, opts ...grpc.CallOption) (*DeleteScoreboardOutput, error)
	// Describe scoreboard
	DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput, opts ...grpc.CallOption) (*DescribeScoreboardOutput, error)
	// Describe scoreboard
	LookupScoreboard(ctx context.Context, in *LookupScoreboardInput, opts ...grpc.CallOption) (*LookupScoreboardOutput, error)
	// List scoreboards of a contest
	ListScoreboards(ctx context.Context, in *ListScoreboardsInput, opts ...grpc.CallOption) (*ListScoreboardsOutput, error)
	// List scoreboards of a contest
	DescribeScoreboardRow(ctx context.Context, in *DescribeScoreboardRowInput, opts ...grpc.CallOption) (*DescribeScoreboardRowOutput, error)
	// List scoreboards of a contest
	ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput, opts ...grpc.CallOption) (*ListScoreboardRowsOutput, error)
	AddScoreboardColumn(ctx context.Context, in *AddScoreboardColumnInput, opts ...grpc.CallOption) (*AddScoreboardColumnOutput, error)
	UpdateScoreboardColumn(ctx context.Context, in *UpdateScoreboardColumnInput, opts ...grpc.CallOption) (*UpdateScoreboardColumnOutput, error)
	DeleteScoreboardColumn(ctx context.Context, in *DeleteScoreboardColumnInput, opts ...grpc.CallOption) (*DeleteScoreboardColumnOutput, error)
	DescribeScoreboardColumn(ctx context.Context, in *DescribeScoreboardColumnInput, opts ...grpc.CallOption) (*DescribeScoreboardColumnOutput, error)
	// List scoreboards of a contest
	ListScoreboardColumns(ctx context.Context, in *ListScoreboardColumnsInput, opts ...grpc.CallOption) (*ListScoreboardColumnsOutput, error)
}

type scoreboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreboardServiceClient(cc grpc.ClientConnInterface) ScoreboardServiceClient {
	return &scoreboardServiceClient{cc}
}

func (c *scoreboardServiceClient) CreateScoreboard(ctx context.Context, in *CreateScoreboardInput, opts ...grpc.CallOption) (*CreateScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_CreateScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput, opts ...grpc.CallOption) (*UpdateScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_UpdateScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput, opts ...grpc.CallOption) (*RebuildScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebuildScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_RebuildScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput, opts ...grpc.CallOption) (*DeleteScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_DeleteScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput, opts ...grpc.CallOption) (*DescribeScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_DescribeScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) LookupScoreboard(ctx context.Context, in *LookupScoreboardInput, opts ...grpc.CallOption) (*LookupScoreboardOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupScoreboardOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_LookupScoreboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) ListScoreboards(ctx context.Context, in *ListScoreboardsInput, opts ...grpc.CallOption) (*ListScoreboardsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScoreboardsOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_ListScoreboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) DescribeScoreboardRow(ctx context.Context, in *DescribeScoreboardRowInput, opts ...grpc.CallOption) (*DescribeScoreboardRowOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeScoreboardRowOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_DescribeScoreboardRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput, opts ...grpc.CallOption) (*ListScoreboardRowsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScoreboardRowsOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_ListScoreboardRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) AddScoreboardColumn(ctx context.Context, in *AddScoreboardColumnInput, opts ...grpc.CallOption) (*AddScoreboardColumnOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScoreboardColumnOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_AddScoreboardColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) UpdateScoreboardColumn(ctx context.Context, in *UpdateScoreboardColumnInput, opts ...grpc.CallOption) (*UpdateScoreboardColumnOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScoreboardColumnOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_UpdateScoreboardColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) DeleteScoreboardColumn(ctx context.Context, in *DeleteScoreboardColumnInput, opts ...grpc.CallOption) (*DeleteScoreboardColumnOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScoreboardColumnOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_DeleteScoreboardColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) DescribeScoreboardColumn(ctx context.Context, in *DescribeScoreboardColumnInput, opts ...grpc.CallOption) (*DescribeScoreboardColumnOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeScoreboardColumnOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_DescribeScoreboardColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreboardServiceClient) ListScoreboardColumns(ctx context.Context, in *ListScoreboardColumnsInput, opts ...grpc.CallOption) (*ListScoreboardColumnsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScoreboardColumnsOutput)
	err := c.cc.Invoke(ctx, ScoreboardService_ListScoreboardColumns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreboardServiceServer is the server API for ScoreboardService service.
// All implementations should embed UnimplementedScoreboardServiceServer
// for forward compatibility.
type ScoreboardServiceServer interface {
	// Create a scoreboard
	CreateScoreboard(context.Context, *CreateScoreboardInput) (*CreateScoreboardOutput, error)
	// Update existing scoreboard in a contest
	UpdateScoreboard(context.Context, *UpdateScoreboardInput) (*UpdateScoreboardOutput, error)
	// Rebuild scoreboard: recalculate score for all participants
	RebuildScoreboard(context.Context, *RebuildScoreboardInput) (*RebuildScoreboardOutput, error)
	// Delete scoreboard
	DeleteScoreboard(context.Context, *DeleteScoreboardInput) (*DeleteScoreboardOutput, error)
	// Describe scoreboard
	DescribeScoreboard(context.Context, *DescribeScoreboardInput) (*DescribeScoreboardOutput, error)
	// Describe scoreboard
	LookupScoreboard(context.Context, *LookupScoreboardInput) (*LookupScoreboardOutput, error)
	// List scoreboards of a contest
	ListScoreboards(context.Context, *ListScoreboardsInput) (*ListScoreboardsOutput, error)
	// List scoreboards of a contest
	DescribeScoreboardRow(context.Context, *DescribeScoreboardRowInput) (*DescribeScoreboardRowOutput, error)
	// List scoreboards of a contest
	ListScoreboardRows(context.Context, *ListScoreboardRowsInput) (*ListScoreboardRowsOutput, error)
	AddScoreboardColumn(context.Context, *AddScoreboardColumnInput) (*AddScoreboardColumnOutput, error)
	UpdateScoreboardColumn(context.Context, *UpdateScoreboardColumnInput) (*UpdateScoreboardColumnOutput, error)
	DeleteScoreboardColumn(context.Context, *DeleteScoreboardColumnInput) (*DeleteScoreboardColumnOutput, error)
	DescribeScoreboardColumn(context.Context, *DescribeScoreboardColumnInput) (*DescribeScoreboardColumnOutput, error)
	// List scoreboards of a contest
	ListScoreboardColumns(context.Context, *ListScoreboardColumnsInput) (*ListScoreboardColumnsOutput, error)
}

// UnimplementedScoreboardServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScoreboardServiceServer struct{}

func (UnimplementedScoreboardServiceServer) CreateScoreboard(context.Context, *CreateScoreboardInput) (*CreateScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) UpdateScoreboard(context.Context, *UpdateScoreboardInput) (*UpdateScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) RebuildScoreboard(context.Context, *RebuildScoreboardInput) (*RebuildScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) DeleteScoreboard(context.Context, *DeleteScoreboardInput) (*DeleteScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) DescribeScoreboard(context.Context, *DescribeScoreboardInput) (*DescribeScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) LookupScoreboard(context.Context, *LookupScoreboardInput) (*LookupScoreboardOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupScoreboard not implemented")
}
func (UnimplementedScoreboardServiceServer) ListScoreboards(context.Context, *ListScoreboardsInput) (*ListScoreboardsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreboards not implemented")
}
func (UnimplementedScoreboardServiceServer) DescribeScoreboardRow(context.Context, *DescribeScoreboardRowInput) (*DescribeScoreboardRowOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScoreboardRow not implemented")
}
func (UnimplementedScoreboardServiceServer) ListScoreboardRows(context.Context, *ListScoreboardRowsInput) (*ListScoreboardRowsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreboardRows not implemented")
}
func (UnimplementedScoreboardServiceServer) AddScoreboardColumn(context.Context, *AddScoreboardColumnInput) (*AddScoreboardColumnOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScoreboardColumn not implemented")
}
func (UnimplementedScoreboardServiceServer) UpdateScoreboardColumn(context.Context, *UpdateScoreboardColumnInput) (*UpdateScoreboardColumnOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreboardColumn not implemented")
}
func (UnimplementedScoreboardServiceServer) DeleteScoreboardColumn(context.Context, *DeleteScoreboardColumnInput) (*DeleteScoreboardColumnOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScoreboardColumn not implemented")
}
func (UnimplementedScoreboardServiceServer) DescribeScoreboardColumn(context.Context, *DescribeScoreboardColumnInput) (*DescribeScoreboardColumnOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScoreboardColumn not implemented")
}
func (UnimplementedScoreboardServiceServer) ListScoreboardColumns(context.Context, *ListScoreboardColumnsInput) (*ListScoreboardColumnsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScoreboardColumns not implemented")
}
func (UnimplementedScoreboardServiceServer) testEmbeddedByValue() {}

// UnsafeScoreboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreboardServiceServer will
// result in compilation errors.
type UnsafeScoreboardServiceServer interface {
	mustEmbedUnimplementedScoreboardServiceServer()
}

func RegisterScoreboardServiceServer(s grpc.ServiceRegistrar, srv ScoreboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedScoreboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScoreboardService_ServiceDesc, srv)
}

func _ScoreboardService_CreateScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).CreateScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_CreateScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).CreateScoreboard(ctx, req.(*CreateScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_UpdateScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).UpdateScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_UpdateScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).UpdateScoreboard(ctx, req.(*UpdateScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_RebuildScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).RebuildScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_RebuildScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).RebuildScoreboard(ctx, req.(*RebuildScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_DeleteScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).DeleteScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_DeleteScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).DeleteScoreboard(ctx, req.(*DeleteScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_DescribeScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).DescribeScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_DescribeScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).DescribeScoreboard(ctx, req.(*DescribeScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_LookupScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupScoreboardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).LookupScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_LookupScoreboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).LookupScoreboard(ctx, req.(*LookupScoreboardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_ListScoreboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreboardsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).ListScoreboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_ListScoreboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).ListScoreboards(ctx, req.(*ListScoreboardsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_DescribeScoreboardRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreboardRowInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).DescribeScoreboardRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_DescribeScoreboardRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).DescribeScoreboardRow(ctx, req.(*DescribeScoreboardRowInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_ListScoreboardRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreboardRowsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).ListScoreboardRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_ListScoreboardRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).ListScoreboardRows(ctx, req.(*ListScoreboardRowsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_AddScoreboardColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoreboardColumnInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).AddScoreboardColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_AddScoreboardColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).AddScoreboardColumn(ctx, req.(*AddScoreboardColumnInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_UpdateScoreboardColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreboardColumnInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).UpdateScoreboardColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_UpdateScoreboardColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).UpdateScoreboardColumn(ctx, req.(*UpdateScoreboardColumnInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_DeleteScoreboardColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoreboardColumnInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).DeleteScoreboardColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_DeleteScoreboardColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).DeleteScoreboardColumn(ctx, req.(*DeleteScoreboardColumnInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_DescribeScoreboardColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreboardColumnInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).DescribeScoreboardColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_DescribeScoreboardColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).DescribeScoreboardColumn(ctx, req.(*DescribeScoreboardColumnInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreboardService_ListScoreboardColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreboardColumnsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreboardServiceServer).ListScoreboardColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreboardService_ListScoreboardColumns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreboardServiceServer).ListScoreboardColumns(ctx, req.(*ListScoreboardColumnsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreboardService_ServiceDesc is the grpc.ServiceDesc for ScoreboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.ranker.ScoreboardService",
	HandlerType: (*ScoreboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScoreboard",
			Handler:    _ScoreboardService_CreateScoreboard_Handler,
		},
		{
			MethodName: "UpdateScoreboard",
			Handler:    _ScoreboardService_UpdateScoreboard_Handler,
		},
		{
			MethodName: "RebuildScoreboard",
			Handler:    _ScoreboardService_RebuildScoreboard_Handler,
		},
		{
			MethodName: "DeleteScoreboard",
			Handler:    _ScoreboardService_DeleteScoreboard_Handler,
		},
		{
			MethodName: "DescribeScoreboard",
			Handler:    _ScoreboardService_DescribeScoreboard_Handler,
		},
		{
			MethodName: "LookupScoreboard",
			Handler:    _ScoreboardService_LookupScoreboard_Handler,
		},
		{
			MethodName: "ListScoreboards",
			Handler:    _ScoreboardService_ListScoreboards_Handler,
		},
		{
			MethodName: "DescribeScoreboardRow",
			Handler:    _ScoreboardService_DescribeScoreboardRow_Handler,
		},
		{
			MethodName: "ListScoreboardRows",
			Handler:    _ScoreboardService_ListScoreboardRows_Handler,
		},
		{
			MethodName: "AddScoreboardColumn",
			Handler:    _ScoreboardService_AddScoreboardColumn_Handler,
		},
		{
			MethodName: "UpdateScoreboardColumn",
			Handler:    _ScoreboardService_UpdateScoreboardColumn_Handler,
		},
		{
			MethodName: "DeleteScoreboardColumn",
			Handler:    _ScoreboardService_DeleteScoreboardColumn_Handler,
		},
		{
			MethodName: "DescribeScoreboardColumn",
			Handler:    _ScoreboardService_DescribeScoreboardColumn_Handler,
		},
		{
			MethodName: "ListScoreboardColumns",
			Handler:    _ScoreboardService_ListScoreboardColumns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/ranker/scoreboard_service.proto",
}
