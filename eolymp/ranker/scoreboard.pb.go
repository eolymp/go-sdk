// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.4
// source: eolymp/ranker/scoreboard.proto

package ranker

import (
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scoreboard_FetchingMode int32

const (
	// Latest score returns the latest score recorded. This mode is intended for admins to see current scoreboard.
	// Users without admin permissions will get PermissionDenied error when requesting score in latest mode.
	Scoreboard_LATEST Scoreboard_FetchingMode = 0
	// Punctual score returns score at particular moment, use time_offset parameter to specify time. This mode is
	// intended to show historical score at a given moment. Value will be capped by freeze time if user does not
	// have admin permissions.
	Scoreboard_PUNCTUAL Scoreboard_FetchingMode = 1
	// Frozen score returns the latest score recorded before freezing time. This mode is intended for admins to see
	// frozen scoreboard.
	Scoreboard_FROZEN Scoreboard_FetchingMode = 2
	// Upsolve score
	Scoreboard_UPSOLVE Scoreboard_FetchingMode = 3
)

// Enum value maps for Scoreboard_FetchingMode.
var (
	Scoreboard_FetchingMode_name = map[int32]string{
		0: "LATEST",
		1: "PUNCTUAL",
		2: "FROZEN",
		3: "UPSOLVE",
	}
	Scoreboard_FetchingMode_value = map[string]int32{
		"LATEST":   0,
		"PUNCTUAL": 1,
		"FROZEN":   2,
		"UPSOLVE":  3,
	}
)

func (x Scoreboard_FetchingMode) Enum() *Scoreboard_FetchingMode {
	p := new(Scoreboard_FetchingMode)
	*p = x
	return p
}

func (x Scoreboard_FetchingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scoreboard_FetchingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_ranker_scoreboard_proto_enumTypes[0].Descriptor()
}

func (Scoreboard_FetchingMode) Type() protoreflect.EnumType {
	return &file_eolymp_ranker_scoreboard_proto_enumTypes[0]
}

func (x Scoreboard_FetchingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scoreboard_FetchingMode.Descriptor instead.
func (Scoreboard_FetchingMode) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 0}
}

type Scoreboard_Column_Type int32

const (
	Scoreboard_Column_NONE      Scoreboard_Column_Type = 0
	Scoreboard_Column_CONTEST   Scoreboard_Column_Type = 1
	Scoreboard_Column_PROBLEM   Scoreboard_Column_Type = 2
	Scoreboard_Column_ATTRIBUTE Scoreboard_Column_Type = 3
	Scoreboard_Column_NAME      Scoreboard_Column_Type = 4
	Scoreboard_Column_TOTAL     Scoreboard_Column_Type = 5
)

// Enum value maps for Scoreboard_Column_Type.
var (
	Scoreboard_Column_Type_name = map[int32]string{
		0: "NONE",
		1: "CONTEST",
		2: "PROBLEM",
		3: "ATTRIBUTE",
		4: "NAME",
		5: "TOTAL",
	}
	Scoreboard_Column_Type_value = map[string]int32{
		"NONE":      0,
		"CONTEST":   1,
		"PROBLEM":   2,
		"ATTRIBUTE": 3,
		"NAME":      4,
		"TOTAL":     5,
	}
)

func (x Scoreboard_Column_Type) Enum() *Scoreboard_Column_Type {
	p := new(Scoreboard_Column_Type)
	*p = x
	return p
}

func (x Scoreboard_Column_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scoreboard_Column_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_ranker_scoreboard_proto_enumTypes[1].Descriptor()
}

func (Scoreboard_Column_Type) Type() protoreflect.EnumType {
	return &file_eolymp_ranker_scoreboard_proto_enumTypes[1]
}

func (x Scoreboard_Column_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scoreboard_Column_Type.Descriptor instead.
func (Scoreboard_Column_Type) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Scoreboard_Action_Type int32

const (
	Scoreboard_Action_NONE     Scoreboard_Action_Type = 0
	Scoreboard_Action_FREEZE   Scoreboard_Action_Type = 1
	Scoreboard_Action_UNFREEZE Scoreboard_Action_Type = 2
)

// Enum value maps for Scoreboard_Action_Type.
var (
	Scoreboard_Action_Type_name = map[int32]string{
		0: "NONE",
		1: "FREEZE",
		2: "UNFREEZE",
	}
	Scoreboard_Action_Type_value = map[string]int32{
		"NONE":     0,
		"FREEZE":   1,
		"UNFREEZE": 2,
	}
)

func (x Scoreboard_Action_Type) Enum() *Scoreboard_Action_Type {
	p := new(Scoreboard_Action_Type)
	*p = x
	return p
}

func (x Scoreboard_Action_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scoreboard_Action_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_ranker_scoreboard_proto_enumTypes[2].Descriptor()
}

func (Scoreboard_Action_Type) Type() protoreflect.EnumType {
	return &file_eolymp_ranker_scoreboard_proto_enumTypes[2]
}

func (x Scoreboard_Action_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scoreboard_Action_Type.Descriptor instead.
func (Scoreboard_Action_Type) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 2, 0}
}

type Scoreboard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier. This field is readonly, it's assigned automatically when scoreboard is returned.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A user friendly identifier for the scoreboard, used as part of the domain name for the scoreboard.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// A user friendly name for the scoreboard.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Scoreboard will keep historical score data (ie. user can request score at specific point in time).
	// This flag must be set to true for scoreboard freezing to work.
	Historical bool `protobuf:"varint,7,opt,name=historical,proto3" json:"historical,omitempty"`
	// This flag means the scoreboard is currently frozen.
	Frozen     bool                   `protobuf:"varint,20,opt,name=frozen,proto3" json:"frozen,omitempty"`
	FreezeAt   *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=freeze_at,json=freezeAt,proto3" json:"freeze_at,omitempty"`
	FreezeIn   uint32                 `protobuf:"varint,22,opt,name=freeze_in,json=freezeIn,proto3" json:"freeze_in,omitempty"`
	UnfreezeAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=unfreeze_at,json=unfreezeAt,proto3" json:"unfreeze_at,omitempty"`
	UnfreezeIn uint32                 `protobuf:"varint,24,opt,name=unfreeze_in,json=unfreezeIn,proto3" json:"unfreeze_in,omitempty"`
	// Column ID used to sort records by default and to calculate row ranking.
	DefaultSortColumn string `protobuf:"bytes,40,opt,name=default_sort_column,json=defaultSortColumn,proto3" json:"default_sort_column,omitempty"`
	// Sorting direction by default.
	DefaultSortOrder wellknown.Direction `protobuf:"varint,41,opt,name=default_sort_order,json=defaultSortOrder,proto3,enum=eolymp.wellknown.Direction" json:"default_sort_order,omitempty"`
	// Scoreboard format (IOI, ICPC). Can not be modified.
	Format        Format `protobuf:"varint,10,opt,name=format,proto3,enum=eolymp.ranker.Format" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scoreboard) Reset() {
	*x = Scoreboard{}
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scoreboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoreboard) ProtoMessage() {}

func (x *Scoreboard) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoreboard.ProtoReflect.Descriptor instead.
func (*Scoreboard) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0}
}

func (x *Scoreboard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scoreboard) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Scoreboard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scoreboard) GetHistorical() bool {
	if x != nil {
		return x.Historical
	}
	return false
}

func (x *Scoreboard) GetFrozen() bool {
	if x != nil {
		return x.Frozen
	}
	return false
}

func (x *Scoreboard) GetFreezeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FreezeAt
	}
	return nil
}

func (x *Scoreboard) GetFreezeIn() uint32 {
	if x != nil {
		return x.FreezeIn
	}
	return 0
}

func (x *Scoreboard) GetUnfreezeAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UnfreezeAt
	}
	return nil
}

func (x *Scoreboard) GetUnfreezeIn() uint32 {
	if x != nil {
		return x.UnfreezeIn
	}
	return 0
}

func (x *Scoreboard) GetDefaultSortColumn() string {
	if x != nil {
		return x.DefaultSortColumn
	}
	return ""
}

func (x *Scoreboard) GetDefaultSortOrder() wellknown.Direction {
	if x != nil {
		return x.DefaultSortOrder
	}
	return wellknown.Direction(0)
}

func (x *Scoreboard) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_NONE
}

type Scoreboard_Row struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // Row unique identifier
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Participant name (identifier).
	MemberId      string                  `protobuf:"bytes,3,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // Member ID.
	Score         float32                 `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`                    // Total score.
	Penalty       float32                 `protobuf:"fixed32,11,opt,name=penalty,proto3" json:"penalty,omitempty"`                // Total penalty.
	Ghost         bool                    `protobuf:"varint,40,opt,name=ghost,proto3" json:"ghost,omitempty"`
	Unofficial    bool                    `protobuf:"varint,41,opt,name=unofficial,proto3" json:"unofficial,omitempty"`
	Rank          uint32                  `protobuf:"varint,30,opt,name=rank,proto3" json:"rank,omitempty"`                            // Rank in the scoreboard
	RankLower     uint32                  `protobuf:"varint,31,opt,name=rank_lower,json=rankLower,proto3" json:"rank_lower,omitempty"` // Lower bound of the rank (when shared)
	Values        []*Scoreboard_Row_Value `protobuf:"bytes,20,rep,name=values,proto3" json:"values,omitempty"`                         // Score breakdown by contest and problem.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scoreboard_Row) Reset() {
	*x = Scoreboard_Row{}
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scoreboard_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoreboard_Row) ProtoMessage() {}

func (x *Scoreboard_Row) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoreboard_Row.ProtoReflect.Descriptor instead.
func (*Scoreboard_Row) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Scoreboard_Row) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scoreboard_Row) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scoreboard_Row) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *Scoreboard_Row) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Scoreboard_Row) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *Scoreboard_Row) GetGhost() bool {
	if x != nil {
		return x.Ghost
	}
	return false
}

func (x *Scoreboard_Row) GetUnofficial() bool {
	if x != nil {
		return x.Unofficial
	}
	return false
}

func (x *Scoreboard_Row) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Scoreboard_Row) GetRankLower() uint32 {
	if x != nil {
		return x.RankLower
	}
	return 0
}

func (x *Scoreboard_Row) GetValues() []*Scoreboard_Row_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Scoreboard_Column struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId               string                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Key                    string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Name                   string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ShortName              string                 `protobuf:"bytes,5,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Type                   Scoreboard_Column_Type `protobuf:"varint,6,opt,name=type,proto3,enum=eolymp.ranker.Scoreboard_Column_Type" json:"type,omitempty"`
	Index                  uint32                 `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	Visible                bool                   `protobuf:"varint,8,opt,name=visible,proto3" json:"visible,omitempty"`
	Filterable             bool                   `protobuf:"varint,9,opt,name=filterable,proto3" json:"filterable,omitempty"`
	Sortable               bool                   `protobuf:"varint,10,opt,name=sortable,proto3" json:"sortable,omitempty"`
	JudgeContestId         string                 `protobuf:"bytes,20,opt,name=judge_contest_id,json=judgeContestId,proto3" json:"judge_contest_id,omitempty"`
	JudgeProblemId         string                 `protobuf:"bytes,21,opt,name=judge_problem_id,json=judgeProblemId,proto3" json:"judge_problem_id,omitempty"`
	CommunityAttributeKey  string                 `protobuf:"bytes,22,opt,name=community_attribute_key,json=communityAttributeKey,proto3" json:"community_attribute_key,omitempty"`
	CommunityAttributeType string                 `protobuf:"bytes,23,opt,name=community_attribute_type,json=communityAttributeType,proto3" json:"community_attribute_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Scoreboard_Column) Reset() {
	*x = Scoreboard_Column{}
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scoreboard_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoreboard_Column) ProtoMessage() {}

func (x *Scoreboard_Column) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoreboard_Column.ProtoReflect.Descriptor instead.
func (*Scoreboard_Column) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Scoreboard_Column) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scoreboard_Column) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Scoreboard_Column) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Scoreboard_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scoreboard_Column) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Scoreboard_Column) GetType() Scoreboard_Column_Type {
	if x != nil {
		return x.Type
	}
	return Scoreboard_Column_NONE
}

func (x *Scoreboard_Column) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Scoreboard_Column) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Scoreboard_Column) GetFilterable() bool {
	if x != nil {
		return x.Filterable
	}
	return false
}

func (x *Scoreboard_Column) GetSortable() bool {
	if x != nil {
		return x.Sortable
	}
	return false
}

func (x *Scoreboard_Column) GetJudgeContestId() string {
	if x != nil {
		return x.JudgeContestId
	}
	return ""
}

func (x *Scoreboard_Column) GetJudgeProblemId() string {
	if x != nil {
		return x.JudgeProblemId
	}
	return ""
}

func (x *Scoreboard_Column) GetCommunityAttributeKey() string {
	if x != nil {
		return x.CommunityAttributeKey
	}
	return ""
}

func (x *Scoreboard_Column) GetCommunityAttributeType() string {
	if x != nil {
		return x.CommunityAttributeType
	}
	return ""
}

type Scoreboard_Action struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExecuteAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=execute_at,json=executeAt,proto3" json:"execute_at,omitempty"`
	Type          Scoreboard_Action_Type `protobuf:"varint,3,opt,name=type,proto3,enum=eolymp.ranker.Scoreboard_Action_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scoreboard_Action) Reset() {
	*x = Scoreboard_Action{}
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scoreboard_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoreboard_Action) ProtoMessage() {}

func (x *Scoreboard_Action) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoreboard_Action.ProtoReflect.Descriptor instead.
func (*Scoreboard_Action) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Scoreboard_Action) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scoreboard_Action) GetExecuteAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecuteAt
	}
	return nil
}

func (x *Scoreboard_Action) GetType() Scoreboard_Action_Type {
	if x != nil {
		return x.Type
	}
	return Scoreboard_Action_NONE
}

type Scoreboard_Row_Value struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ColumnId string                 `protobuf:"bytes,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	// UNIX timestamp when this value was set (only populated, if scoreboard keeps historical data)
	ValidAfter uint32 `protobuf:"varint,31,opt,name=valid_after,json=validAfter,proto3" json:"valid_after,omitempty"`
	// UNIX timestamp when this value was overriden by newer value (only populated, if scoreboard keeps historical data)
	// if set to 0, means latest value
	ValidUntil uint32 `protobuf:"varint,32,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// score and related fields for CONTEST and PROBLEM columns.
	Score      float32 `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Penalty    float32 `protobuf:"fixed32,11,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Percentage float32 `protobuf:"fixed32,12,opt,name=percentage,proto3" json:"percentage,omitempty"`            // Percentage of points scored, from 0 to 1.
	Attempts   uint32  `protobuf:"varint,13,opt,name=attempts,proto3" json:"attempts,omitempty"`                 // Number of attempts before problem was solved.
	SolvedIn   uint32  `protobuf:"varint,14,opt,name=solved_in,json=solvedIn,proto3" json:"solved_in,omitempty"` // How much time it took to solve problem since beginning of the contest, in seconds.
	Upsolve    bool    `protobuf:"varint,40,opt,name=upsolve,proto3" json:"upsolve,omitempty"`
	// value for NAME and ATTRIBUTE columns.
	ValueString   string `protobuf:"bytes,20,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
	ValueNumber   int32  `protobuf:"varint,21,opt,name=value_number,json=valueNumber,proto3" json:"value_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scoreboard_Row_Value) Reset() {
	*x = Scoreboard_Row_Value{}
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scoreboard_Row_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoreboard_Row_Value) ProtoMessage() {}

func (x *Scoreboard_Row_Value) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_ranker_scoreboard_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoreboard_Row_Value.ProtoReflect.Descriptor instead.
func (*Scoreboard_Row_Value) Descriptor() ([]byte, []int) {
	return file_eolymp_ranker_scoreboard_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Scoreboard_Row_Value) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scoreboard_Row_Value) GetColumnId() string {
	if x != nil {
		return x.ColumnId
	}
	return ""
}

func (x *Scoreboard_Row_Value) GetValidAfter() uint32 {
	if x != nil {
		return x.ValidAfter
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetValidUntil() uint32 {
	if x != nil {
		return x.ValidUntil
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetSolvedIn() uint32 {
	if x != nil {
		return x.SolvedIn
	}
	return 0
}

func (x *Scoreboard_Row_Value) GetUpsolve() bool {
	if x != nil {
		return x.Upsolve
	}
	return false
}

func (x *Scoreboard_Row_Value) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *Scoreboard_Row_Value) GetValueNumber() int32 {
	if x != nil {
		return x.ValueNumber
	}
	return 0
}

var File_eolymp_ranker_scoreboard_proto protoreflect.FileDescriptor

const file_eolymp_ranker_scoreboard_proto_rawDesc = "" +
	"\n" +
	"\x1eeolymp/ranker/scoreboard.proto\x12\reolymp.ranker\x1a\x1aeolymp/ranker/format.proto\x1a eolymp/wellknown/direction.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x93\x0f\n" +
	"\n" +
	"Scoreboard\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"historical\x18\a \x01(\bR\n" +
	"historical\x12\x16\n" +
	"\x06frozen\x18\x14 \x01(\bR\x06frozen\x127\n" +
	"\tfreeze_at\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\bfreezeAt\x12\x1b\n" +
	"\tfreeze_in\x18\x16 \x01(\rR\bfreezeIn\x12;\n" +
	"\vunfreeze_at\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"unfreezeAt\x12\x1f\n" +
	"\vunfreeze_in\x18\x18 \x01(\rR\n" +
	"unfreezeIn\x12.\n" +
	"\x13default_sort_column\x18( \x01(\tR\x11defaultSortColumn\x12I\n" +
	"\x12default_sort_order\x18) \x01(\x0e2\x1b.eolymp.wellknown.DirectionR\x10defaultSortOrder\x12-\n" +
	"\x06format\x18\n" +
	" \x01(\x0e2\x15.eolymp.ranker.FormatR\x06format\x1a\xfe\x04\n" +
	"\x03Row\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tmember_id\x18\x03 \x01(\tR\bmemberId\x12\x14\n" +
	"\x05score\x18\n" +
	" \x01(\x02R\x05score\x12\x18\n" +
	"\apenalty\x18\v \x01(\x02R\apenalty\x12\x14\n" +
	"\x05ghost\x18( \x01(\bR\x05ghost\x12\x1e\n" +
	"\n" +
	"unofficial\x18) \x01(\bR\n" +
	"unofficial\x12\x12\n" +
	"\x04rank\x18\x1e \x01(\rR\x04rank\x12\x1d\n" +
	"\n" +
	"rank_lower\x18\x1f \x01(\rR\trankLower\x12;\n" +
	"\x06values\x18\x14 \x03(\v2#.eolymp.ranker.Scoreboard.Row.ValueR\x06values\x1a\xdf\x02\n" +
	"\x05Value\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tcolumn_id\x18\x02 \x01(\tR\bcolumnId\x12\x1f\n" +
	"\vvalid_after\x18\x1f \x01(\rR\n" +
	"validAfter\x12\x1f\n" +
	"\vvalid_until\x18  \x01(\rR\n" +
	"validUntil\x12\x14\n" +
	"\x05score\x18\n" +
	" \x01(\x02R\x05score\x12\x18\n" +
	"\apenalty\x18\v \x01(\x02R\apenalty\x12\x1e\n" +
	"\n" +
	"percentage\x18\f \x01(\x02R\n" +
	"percentage\x12\x1a\n" +
	"\battempts\x18\r \x01(\rR\battempts\x12\x1b\n" +
	"\tsolved_in\x18\x0e \x01(\rR\bsolvedIn\x12\x18\n" +
	"\aupsolve\x18( \x01(\bR\aupsolve\x12!\n" +
	"\fvalue_string\x18\x14 \x01(\tR\vvalueString\x12!\n" +
	"\fvalue_number\x18\x15 \x01(\x05R\vvalueNumber\x1a\xb7\x04\n" +
	"\x06Column\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"short_name\x18\x05 \x01(\tR\tshortName\x129\n" +
	"\x04type\x18\x06 \x01(\x0e2%.eolymp.ranker.Scoreboard.Column.TypeR\x04type\x12\x14\n" +
	"\x05index\x18\a \x01(\rR\x05index\x12\x18\n" +
	"\avisible\x18\b \x01(\bR\avisible\x12\x1e\n" +
	"\n" +
	"filterable\x18\t \x01(\bR\n" +
	"filterable\x12\x1a\n" +
	"\bsortable\x18\n" +
	" \x01(\bR\bsortable\x12(\n" +
	"\x10judge_contest_id\x18\x14 \x01(\tR\x0ejudgeContestId\x12(\n" +
	"\x10judge_problem_id\x18\x15 \x01(\tR\x0ejudgeProblemId\x126\n" +
	"\x17community_attribute_key\x18\x16 \x01(\tR\x15communityAttributeKey\x128\n" +
	"\x18community_attribute_type\x18\x17 \x01(\tR\x16communityAttributeType\"N\n" +
	"\x04Type\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aCONTEST\x10\x01\x12\v\n" +
	"\aPROBLEM\x10\x02\x12\r\n" +
	"\tATTRIBUTE\x10\x03\x12\b\n" +
	"\x04NAME\x10\x04\x12\t\n" +
	"\x05TOTAL\x10\x05\x1a\xba\x01\n" +
	"\x06Action\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\n" +
	"execute_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\texecuteAt\x129\n" +
	"\x04type\x18\x03 \x01(\x0e2%.eolymp.ranker.Scoreboard.Action.TypeR\x04type\"*\n" +
	"\x04Type\x12\b\n" +
	"\x04NONE\x10\x00\x12\n" +
	"\n" +
	"\x06FREEZE\x10\x01\x12\f\n" +
	"\bUNFREEZE\x10\x02\"A\n" +
	"\fFetchingMode\x12\n" +
	"\n" +
	"\x06LATEST\x10\x00\x12\f\n" +
	"\bPUNCTUAL\x10\x01\x12\n" +
	"\n" +
	"\x06FROZEN\x10\x02\x12\v\n" +
	"\aUPSOLVE\x10\x03B/Z-github.com/eolymp/go-sdk/eolymp/ranker;rankerb\x06proto3"

var (
	file_eolymp_ranker_scoreboard_proto_rawDescOnce sync.Once
	file_eolymp_ranker_scoreboard_proto_rawDescData []byte
)

func file_eolymp_ranker_scoreboard_proto_rawDescGZIP() []byte {
	file_eolymp_ranker_scoreboard_proto_rawDescOnce.Do(func() {
		file_eolymp_ranker_scoreboard_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_ranker_scoreboard_proto_rawDesc), len(file_eolymp_ranker_scoreboard_proto_rawDesc)))
	})
	return file_eolymp_ranker_scoreboard_proto_rawDescData
}

var file_eolymp_ranker_scoreboard_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_eolymp_ranker_scoreboard_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_eolymp_ranker_scoreboard_proto_goTypes = []any{
	(Scoreboard_FetchingMode)(0),  // 0: eolymp.ranker.Scoreboard.FetchingMode
	(Scoreboard_Column_Type)(0),   // 1: eolymp.ranker.Scoreboard.Column.Type
	(Scoreboard_Action_Type)(0),   // 2: eolymp.ranker.Scoreboard.Action.Type
	(*Scoreboard)(nil),            // 3: eolymp.ranker.Scoreboard
	(*Scoreboard_Row)(nil),        // 4: eolymp.ranker.Scoreboard.Row
	(*Scoreboard_Column)(nil),     // 5: eolymp.ranker.Scoreboard.Column
	(*Scoreboard_Action)(nil),     // 6: eolymp.ranker.Scoreboard.Action
	(*Scoreboard_Row_Value)(nil),  // 7: eolymp.ranker.Scoreboard.Row.Value
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(wellknown.Direction)(0),      // 9: eolymp.wellknown.Direction
	(Format)(0),                   // 10: eolymp.ranker.Format
}
var file_eolymp_ranker_scoreboard_proto_depIdxs = []int32{
	8,  // 0: eolymp.ranker.Scoreboard.freeze_at:type_name -> google.protobuf.Timestamp
	8,  // 1: eolymp.ranker.Scoreboard.unfreeze_at:type_name -> google.protobuf.Timestamp
	9,  // 2: eolymp.ranker.Scoreboard.default_sort_order:type_name -> eolymp.wellknown.Direction
	10, // 3: eolymp.ranker.Scoreboard.format:type_name -> eolymp.ranker.Format
	7,  // 4: eolymp.ranker.Scoreboard.Row.values:type_name -> eolymp.ranker.Scoreboard.Row.Value
	1,  // 5: eolymp.ranker.Scoreboard.Column.type:type_name -> eolymp.ranker.Scoreboard.Column.Type
	8,  // 6: eolymp.ranker.Scoreboard.Action.execute_at:type_name -> google.protobuf.Timestamp
	2,  // 7: eolymp.ranker.Scoreboard.Action.type:type_name -> eolymp.ranker.Scoreboard.Action.Type
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_eolymp_ranker_scoreboard_proto_init() }
func file_eolymp_ranker_scoreboard_proto_init() {
	if File_eolymp_ranker_scoreboard_proto != nil {
		return
	}
	file_eolymp_ranker_format_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_ranker_scoreboard_proto_rawDesc), len(file_eolymp_ranker_scoreboard_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_ranker_scoreboard_proto_goTypes,
		DependencyIndexes: file_eolymp_ranker_scoreboard_proto_depIdxs,
		EnumInfos:         file_eolymp_ranker_scoreboard_proto_enumTypes,
		MessageInfos:      file_eolymp_ranker_scoreboard_proto_msgTypes,
	}.Build()
	File_eolymp_ranker_scoreboard_proto = out.File
	file_eolymp_ranker_scoreboard_proto_goTypes = nil
	file_eolymp_ranker_scoreboard_proto_depIdxs = nil
}
