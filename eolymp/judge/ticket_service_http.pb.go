// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _TicketService_HTTPReadQueryString parses body into proto.Message
func _TicketService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _TicketService_HTTPReadRequestBody parses body into proto.Message
func _TicketService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _TicketService_HTTPWriteResponse writes proto.Message to HTTP response
func _TicketService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_TicketService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _TicketService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _TicketService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _TicketService_WebsocketErrorResponse writes error to websocket connection
func _TicketService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _TicketService_WebsocketCodec implements protobuf codec for websockets package
var _TicketService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

type _TicketService_WatchTicket_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_TicketService_WatchTicket_WSStream) Send(m *WatchTicketOutput) error {
	return s.SendMsg(m)
}

func (s *_TicketService_WatchTicket_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTicket_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTicket_WSStream) SetTrailer(metadata.MD) {
}

func (s *_TicketService_WatchTicket_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_TicketService_WatchTicket_WSStream) SendMsg(m interface{}) error {
	return _TicketService_WebsocketCodec.Send(s.conn, m)
}

func (s *_TicketService_WatchTicket_WSStream) RecvMsg(m interface{}) error {
	return nil
}

type _TicketService_WatchTickets_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_TicketService_WatchTickets_WSStream) Send(m *WatchTicketsOutput) error {
	return s.SendMsg(m)
}

func (s *_TicketService_WatchTickets_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTickets_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTickets_WSStream) SetTrailer(metadata.MD) {
}

func (s *_TicketService_WatchTickets_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_TicketService_WatchTickets_WSStream) SendMsg(m interface{}) error {
	return _TicketService_WebsocketCodec.Send(s.conn, m)
}

func (s *_TicketService_WatchTickets_WSStream) RecvMsg(m interface{}) error {
	return nil
}

type _TicketService_WatchTicketSummary_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_TicketService_WatchTicketSummary_WSStream) Send(m *WatchTicketSummaryOutput) error {
	return s.SendMsg(m)
}

func (s *_TicketService_WatchTicketSummary_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTicketSummary_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchTicketSummary_WSStream) SetTrailer(metadata.MD) {
}

func (s *_TicketService_WatchTicketSummary_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_TicketService_WatchTicketSummary_WSStream) SendMsg(m interface{}) error {
	return _TicketService_WebsocketCodec.Send(s.conn, m)
}

func (s *_TicketService_WatchTicketSummary_WSStream) RecvMsg(m interface{}) error {
	return nil
}

type _TicketService_WatchReplies_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_TicketService_WatchReplies_WSStream) Send(m *WatchRepliesOutput) error {
	return s.SendMsg(m)
}

func (s *_TicketService_WatchReplies_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchReplies_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_TicketService_WatchReplies_WSStream) SetTrailer(metadata.MD) {
}

func (s *_TicketService_WatchReplies_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_TicketService_WatchReplies_WSStream) SendMsg(m interface{}) error {
	return _TicketService_WebsocketCodec.Send(s.conn, m)
}

func (s *_TicketService_WatchReplies_WSStream) RecvMsg(m interface{}) error {
	return nil
}

// RegisterTicketServiceHttpHandlers adds handlers for for TicketServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterTicketServiceHttpHandlers(router *mux.Router, prefix string, cli TicketServiceClient) {
	router.Handle(prefix+"/tickets", _TicketService_CreateTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.TicketService.CreateTicket")
	router.Handle(prefix+"/tickets/{ticket_id}/close", _TicketService_UpdateTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.TicketService.UpdateTicket")
	router.Handle(prefix+"/tickets/{ticket_id}/read", _TicketService_ReadTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.TicketService.ReadTicket")
	router.Handle(prefix+"/tickets/{ticket_id}", _TicketService_DeleteTicket_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.TicketService.DeleteTicket")
	router.Handle(prefix+"/tickets/{ticket_id}", _TicketService_DescribeTicket_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.TicketService.DescribeTicket")
	router.Handle(prefix+"/tickets", _TicketService_ListTickets_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.TicketService.ListTickets")
	router.Handle(prefix+"/tickets/{ticket_id}/replies", _TicketService_ReplyTicket_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.TicketService.ReplyTicket")
	router.Handle(prefix+"/tickets/{ticket_id}/replies", _TicketService_ListReplies_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.TicketService.ListReplies")
	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _TicketService_DeleteReply_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.TicketService.DeleteReply")
	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _TicketService_UpdateReply_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.TicketService.UpdateReply")
}

func _TicketService_CreateTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_UpdateTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ReadTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.ReadTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DeleteTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DescribeTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ListTickets_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListTickets(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ReplyTicket_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.ReplyTicket(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_ListReplies_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _TicketService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		var header, trailer metadata.MD

		out, err := cli.ListReplies(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_DeleteReply_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteReply(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _TicketService_UpdateReply_Rule0(cli TicketServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _TicketService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateReply(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_TicketService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TicketService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _TicketServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _TicketServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _TicketServiceHandler) (out proto.Message, err error)
type TicketServiceInterceptor struct {
	middleware []_TicketServiceMiddleware
	client     TicketServiceClient
}

// NewTicketServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewTicketServiceInterceptor(cli TicketServiceClient, middleware ..._TicketServiceMiddleware) *TicketServiceInterceptor {
	return &TicketServiceInterceptor{client: cli, middleware: middleware}
}

func (i *TicketServiceInterceptor) CreateTicket(ctx context.Context, in *CreateTicketInput, opts ...grpc.CallOption) (*CreateTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTicketInput, got %T", in))
		}

		return i.client.CreateTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.CreateTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) UpdateTicket(ctx context.Context, in *UpdateTicketInput, opts ...grpc.CallOption) (*UpdateTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTicketInput, got %T", in))
		}

		return i.client.UpdateTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.UpdateTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) ReadTicket(ctx context.Context, in *ReadTicketInput, opts ...grpc.CallOption) (*ReadTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReadTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReadTicketInput, got %T", in))
		}

		return i.client.ReadTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.ReadTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReadTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReadTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) DeleteTicket(ctx context.Context, in *DeleteTicketInput, opts ...grpc.CallOption) (*DeleteTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTicketInput, got %T", in))
		}

		return i.client.DeleteTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.DeleteTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) DescribeTicket(ctx context.Context, in *DescribeTicketInput, opts ...grpc.CallOption) (*DescribeTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTicketInput, got %T", in))
		}

		return i.client.DescribeTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.DescribeTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) ListTickets(ctx context.Context, in *ListTicketsInput, opts ...grpc.CallOption) (*ListTicketsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTicketsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTicketsInput, got %T", in))
		}

		return i.client.ListTickets(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.ListTickets", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTicketsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTicketsOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) ReplyTicket(ctx context.Context, in *ReplyTicketInput, opts ...grpc.CallOption) (*ReplyTicketOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReplyTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReplyTicketInput, got %T", in))
		}

		return i.client.ReplyTicket(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.ReplyTicket", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReplyTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReplyTicketOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) WatchTicket(ctx context.Context, in *WatchTicketInput, opts ...grpc.CallOption) (TicketService_WatchTicketClient, error) {
	return i.client.WatchTicket(ctx, in, opts...)
}

func (i *TicketServiceInterceptor) WatchTickets(ctx context.Context, in *WatchTicketsInput, opts ...grpc.CallOption) (TicketService_WatchTicketsClient, error) {
	return i.client.WatchTickets(ctx, in, opts...)
}

func (i *TicketServiceInterceptor) WatchTicketSummary(ctx context.Context, in *WatchTicketSummaryInput, opts ...grpc.CallOption) (TicketService_WatchTicketSummaryClient, error) {
	return i.client.WatchTicketSummary(ctx, in, opts...)
}

func (i *TicketServiceInterceptor) ListReplies(ctx context.Context, in *ListRepliesInput, opts ...grpc.CallOption) (*ListRepliesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListRepliesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListRepliesInput, got %T", in))
		}

		return i.client.ListReplies(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.ListReplies", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListRepliesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListRepliesOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) DeleteReply(ctx context.Context, in *DeleteReplyInput, opts ...grpc.CallOption) (*DeleteReplyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteReplyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteReplyInput, got %T", in))
		}

		return i.client.DeleteReply(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.DeleteReply", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteReplyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteReplyOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) UpdateReply(ctx context.Context, in *UpdateReplyInput, opts ...grpc.CallOption) (*UpdateReplyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateReplyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateReplyInput, got %T", in))
		}

		return i.client.UpdateReply(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.TicketService.UpdateReply", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateReplyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateReplyOutput, got %T", out))
	}

	return message, err
}

func (i *TicketServiceInterceptor) WatchReplies(ctx context.Context, in *WatchRepliesInput, opts ...grpc.CallOption) (TicketService_WatchRepliesClient, error) {
	return i.client.WatchReplies(ctx, in, opts...)
}
