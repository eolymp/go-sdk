// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	go_querystring "github.com/eolymp/go-querystring"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	strconv "strconv"
)

// _ContestService_HTTPReadQueryString parses body into proto.Message
func _ContestService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	if h := r.Header.Values("Strict-Parsing"); len(h) > 0 {
		strict, err := strconv.ParseBool(h[len(h)-1])
		if err != nil {
			return err
		}

		if strict {
			query, err := url.ParseQuery(r.URL.RawQuery)
			if err != nil {
				return err
			}

			return go_querystring.UnmarshalStrict(query, v)
		}
	}

	return go_querystring.Unmarshal(r.URL.Query(), v)
}

// _ContestService_HTTPReadRequestBody parses body into proto.Message
func _ContestService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ContestService_HTTPWriteResponse writes proto.Message to HTTP response
func _ContestService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ContestService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ContestService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ContestService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterContestServiceHttpHandlers adds handlers for for ContestServiceClient
func RegisterContestServiceHttpHandlers(router *mux.Router, prefix string, cli ContestServiceClient) {
	router.Handle(prefix+"/contests", _ContestService_CreateContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.CreateContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_DeleteContest_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.ContestService.DeleteContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_UpdateContest_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.ContestService.UpdateContest")
	router.Handle(prefix+"/contests/{contest_id}/copy", _ContestService_CopyContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.CopyContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_DescribeContest_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.DescribeContest")
	router.Handle(prefix+"/contests", _ContestService_ListContests_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.ListContests")
	router.Handle(prefix+"/contests/{contest_id}/open", _ContestService_OpenContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.OpenContest")
	router.Handle(prefix+"/contests/{contest_id}/close", _ContestService_CloseContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.CloseContest")
	router.Handle(prefix+"/contests/{contest_id}/suspend", _ContestService_SuspendContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.SuspendContest")
	router.Handle(prefix+"/contests/{contest_id}/freeze", _ContestService_FreezeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.FreezeContest")
	router.Handle(prefix+"/contests/{contest_id}/finalize", _ContestService_FinalizeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.FinalizeContest")
	router.Handle(prefix+"/contests/{contest_id}/resume", _ContestService_ResumeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.ResumeContest")
	router.Handle(prefix+"/contests/{contest_id}/analyze", _ContestService_AnalyzeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.AnalyzeContest")
	router.Handle(prefix+"/contests/{contest_id}/activities", _ContestService_ListActivities_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.ListActivities")
	router.Handle(prefix+"/usage/contests", _ContestService_DescribeContestUsage_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.DescribeContestUsage")
}

// RegisterContestServiceHttpProxy adds proxy handlers for for ContestServiceClient
func RegisterContestServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterContestServiceHttpHandlers(router, prefix, NewContestServiceClient(conn))
}

func _ContestService_CreateContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DeleteContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_UpdateContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_CopyContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CopyContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.CopyContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DescribeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ListContests_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListContests(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_OpenContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.OpenContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_CloseContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.CloseContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_SuspendContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.SuspendContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_FreezeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.FreezeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_FinalizeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FinalizeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.FinalizeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ResumeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ResumeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_AnalyzeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AnalyzeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.AnalyzeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ListActivities_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListActivities(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DescribeContestUsage_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestUsageInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeContestUsage(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}
