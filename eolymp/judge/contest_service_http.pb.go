// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _ContestService_HTTPReadQueryString parses body into proto.Message
func _ContestService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _ContestService_HTTPReadRequestBody parses body into proto.Message
func _ContestService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ContestService_HTTPWriteResponse writes proto.Message to HTTP response
func _ContestService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ContestService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ContestService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ContestService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _ContestService_WebsocketErrorResponse writes error to websocket connection
func _ContestService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _ContestService_WebsocketCodec implements protobuf codec for websockets package
var _ContestService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

type _ContestService_WatchContest_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_ContestService_WatchContest_WSStream) Send(m *WatchContestOutput) error {
	return s.SendMsg(m)
}

func (s *_ContestService_WatchContest_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_ContestService_WatchContest_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_ContestService_WatchContest_WSStream) SetTrailer(metadata.MD) {
}

func (s *_ContestService_WatchContest_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_ContestService_WatchContest_WSStream) SendMsg(m interface{}) error {
	return _ContestService_WebsocketCodec.Send(s.conn, m)
}

func (s *_ContestService_WatchContest_WSStream) RecvMsg(m interface{}) error {
	return nil
}

// RegisterContestServiceHttpHandlers adds handlers for for ContestServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterContestServiceHttpHandlers(router *mux.Router, prefix string, cli ContestServiceClient) {
	router.Handle(prefix+"/contests", _ContestService_CreateContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.CreateContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_DeleteContest_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.ContestService.DeleteContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_UpdateContest_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.ContestService.UpdateContest")
	router.Handle(prefix+"/contests/{contest_id}", _ContestService_DescribeContest_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.DescribeContest")
	router.Handle(prefix+"/contests", _ContestService_ListContests_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.ListContests")
	router.Handle(prefix+"/contests/{contest_id}/open", _ContestService_OpenContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.OpenContest")
	router.Handle(prefix+"/contests/{contest_id}/close", _ContestService_CloseContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.CloseContest")
	router.Handle(prefix+"/contests/{contest_id}/suspend", _ContestService_SuspendContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.SuspendContest")
	router.Handle(prefix+"/contests/{contest_id}/freeze", _ContestService_FreezeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.FreezeContest")
	router.Handle(prefix+"/contests/{contest_id}/resume", _ContestService_ResumeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ContestService.ResumeContest")
	router.Handle(prefix+"/contests/{contest_id}/activities", _ContestService_ListActivities_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.ListActivities")
	router.Handle(prefix+"/usage/contests", _ContestService_DescribeContestUsage_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ContestService.DescribeContestUsage")
}

func _ContestService_CreateContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DeleteContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_UpdateContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DescribeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ListContests_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListContests(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_OpenContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.OpenContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_CloseContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.CloseContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_SuspendContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.SuspendContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_FreezeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.FreezeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ResumeContest_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _ContestService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ResumeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_ListActivities_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListActivities(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContestService_DescribeContestUsage_Rule0(cli ContestServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestUsageInput{}

		if err := _ContestService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeContestUsage(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContestService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContestService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _ContestServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _ContestServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _ContestServiceHandler) (out proto.Message, err error)
type ContestServiceInterceptor struct {
	middleware []_ContestServiceMiddleware
	client     ContestServiceClient
}

// NewContestServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewContestServiceInterceptor(cli ContestServiceClient, middleware ..._ContestServiceMiddleware) *ContestServiceInterceptor {
	return &ContestServiceInterceptor{client: cli, middleware: middleware}
}

func (i *ContestServiceInterceptor) CreateContest(ctx context.Context, in *CreateContestInput, opts ...grpc.CallOption) (*CreateContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateContestInput, got %T", in))
		}

		return i.client.CreateContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.CreateContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) DeleteContest(ctx context.Context, in *DeleteContestInput, opts ...grpc.CallOption) (*DeleteContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteContestInput, got %T", in))
		}

		return i.client.DeleteContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.DeleteContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) UpdateContest(ctx context.Context, in *UpdateContestInput, opts ...grpc.CallOption) (*UpdateContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateContestInput, got %T", in))
		}

		return i.client.UpdateContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.UpdateContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) DescribeContest(ctx context.Context, in *DescribeContestInput, opts ...grpc.CallOption) (*DescribeContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeContestInput, got %T", in))
		}

		return i.client.DescribeContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.DescribeContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) ListContests(ctx context.Context, in *ListContestsInput, opts ...grpc.CallOption) (*ListContestsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListContestsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListContestsInput, got %T", in))
		}

		return i.client.ListContests(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.ListContests", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListContestsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListContestsOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) OpenContest(ctx context.Context, in *OpenContestInput, opts ...grpc.CallOption) (*OpenContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*OpenContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *OpenContestInput, got %T", in))
		}

		return i.client.OpenContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.OpenContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*OpenContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *OpenContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) CloseContest(ctx context.Context, in *CloseContestInput, opts ...grpc.CallOption) (*CloseContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CloseContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CloseContestInput, got %T", in))
		}

		return i.client.CloseContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.CloseContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CloseContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CloseContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) SuspendContest(ctx context.Context, in *SuspendContestInput, opts ...grpc.CallOption) (*SuspendContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SuspendContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SuspendContestInput, got %T", in))
		}

		return i.client.SuspendContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.SuspendContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SuspendContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SuspendContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) FreezeContest(ctx context.Context, in *FreezeContestInput, opts ...grpc.CallOption) (*FreezeContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*FreezeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *FreezeContestInput, got %T", in))
		}

		return i.client.FreezeContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.FreezeContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*FreezeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *FreezeContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) ResumeContest(ctx context.Context, in *ResumeContestInput, opts ...grpc.CallOption) (*ResumeContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResumeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResumeContestInput, got %T", in))
		}

		return i.client.ResumeContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.ResumeContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResumeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResumeContestOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) WatchContest(ctx context.Context, in *WatchContestInput, opts ...grpc.CallOption) (ContestService_WatchContestClient, error) {
	return i.client.WatchContest(ctx, in, opts...)
}

func (i *ContestServiceInterceptor) ListActivities(ctx context.Context, in *ListActivitiesInput, opts ...grpc.CallOption) (*ListActivitiesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListActivitiesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListActivitiesInput, got %T", in))
		}

		return i.client.ListActivities(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.ListActivities", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListActivitiesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListActivitiesOutput, got %T", out))
	}

	return message, err
}

func (i *ContestServiceInterceptor) DescribeContestUsage(ctx context.Context, in *DescribeContestUsageInput, opts ...grpc.CallOption) (*DescribeContestUsageOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeContestUsageInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeContestUsageInput, got %T", in))
		}

		return i.client.DescribeContestUsage(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ContestService.DescribeContestUsage", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeContestUsageOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeContestUsageOutput, got %T", out))
	}

	return message, err
}
