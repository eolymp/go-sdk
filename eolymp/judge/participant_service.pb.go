// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.4
// source: eolymp/judge/participant_service.proto

package judge

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	ecm "github.com/eolymp/go-sdk/eolymp/ecm"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateParticipantInput_Patch int32

const (
	UpdateParticipantInput_ALL          UpdateParticipantInput_Patch = 0
	UpdateParticipantInput_DISPLAY_NAME UpdateParticipantInput_Patch = 1
	UpdateParticipantInput_BONUS_TIME   UpdateParticipantInput_Patch = 3
	UpdateParticipantInput_UNOFFICIAL   UpdateParticipantInput_Patch = 4
	UpdateParticipantInput_MEDAL        UpdateParticipantInput_Patch = 5
	UpdateParticipantInput_INACTIVE     UpdateParticipantInput_Patch = 6
	UpdateParticipantInput_PASSCODE     UpdateParticipantInput_Patch = 7
)

// Enum value maps for UpdateParticipantInput_Patch.
var (
	UpdateParticipantInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "DISPLAY_NAME",
		3: "BONUS_TIME",
		4: "UNOFFICIAL",
		5: "MEDAL",
		6: "INACTIVE",
		7: "PASSCODE",
	}
	UpdateParticipantInput_Patch_value = map[string]int32{
		"ALL":          0,
		"DISPLAY_NAME": 1,
		"BONUS_TIME":   3,
		"UNOFFICIAL":   4,
		"MEDAL":        5,
		"INACTIVE":     6,
		"PASSCODE":     7,
	}
)

func (x UpdateParticipantInput_Patch) Enum() *UpdateParticipantInput_Patch {
	p := new(UpdateParticipantInput_Patch)
	*p = x
	return p
}

func (x UpdateParticipantInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateParticipantInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_participant_service_proto_enumTypes[0].Descriptor()
}

func (UpdateParticipantInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_judge_participant_service_proto_enumTypes[0]
}

func (x UpdateParticipantInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateParticipantInput_Patch.Descriptor instead.
func (UpdateParticipantInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{6, 0}
}

type ListParticipantsInput_Sortable int32

const (
	ListParticipantsInput_DEFAULT      ListParticipantsInput_Sortable = 0
	ListParticipantsInput_DISPLAY_NAME ListParticipantsInput_Sortable = 1
	ListParticipantsInput_STARTED_AT   ListParticipantsInput_Sortable = 2
)

// Enum value maps for ListParticipantsInput_Sortable.
var (
	ListParticipantsInput_Sortable_name = map[int32]string{
		0: "DEFAULT",
		1: "DISPLAY_NAME",
		2: "STARTED_AT",
	}
	ListParticipantsInput_Sortable_value = map[string]int32{
		"DEFAULT":      0,
		"DISPLAY_NAME": 1,
		"STARTED_AT":   2,
	}
)

func (x ListParticipantsInput_Sortable) Enum() *ListParticipantsInput_Sortable {
	p := new(ListParticipantsInput_Sortable)
	*p = x
	return p
}

func (x ListParticipantsInput_Sortable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListParticipantsInput_Sortable) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_participant_service_proto_enumTypes[1].Descriptor()
}

func (ListParticipantsInput_Sortable) Type() protoreflect.EnumType {
	return &file_eolymp_judge_participant_service_proto_enumTypes[1]
}

func (x ListParticipantsInput_Sortable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListParticipantsInput_Sortable.Descriptor instead.
func (ListParticipantsInput_Sortable) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{14, 0}
}

type AssignParticipantInput struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ContestId   string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Participant *Participant           `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"` // deprecated
	// Types that are valid to be assigned to Assignee:
	//
	//	*AssignParticipantInput_MemberId
	//	*AssignParticipantInput_GroupId
	Assignee      isAssignParticipantInput_Assignee `protobuf_oneof:"assignee"`
	Unofficial    bool                              `protobuf:"varint,20,opt,name=unofficial,proto3" json:"unofficial,omitempty"`
	Inactive      bool                              `protobuf:"varint,21,opt,name=inactive,proto3" json:"inactive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignParticipantInput) Reset() {
	*x = AssignParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignParticipantInput) ProtoMessage() {}

func (x *AssignParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignParticipantInput.ProtoReflect.Descriptor instead.
func (*AssignParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{0}
}

func (x *AssignParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *AssignParticipantInput) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *AssignParticipantInput) GetAssignee() isAssignParticipantInput_Assignee {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *AssignParticipantInput) GetMemberId() string {
	if x != nil {
		if x, ok := x.Assignee.(*AssignParticipantInput_MemberId); ok {
			return x.MemberId
		}
	}
	return ""
}

func (x *AssignParticipantInput) GetGroupId() string {
	if x != nil {
		if x, ok := x.Assignee.(*AssignParticipantInput_GroupId); ok {
			return x.GroupId
		}
	}
	return ""
}

func (x *AssignParticipantInput) GetUnofficial() bool {
	if x != nil {
		return x.Unofficial
	}
	return false
}

func (x *AssignParticipantInput) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

type isAssignParticipantInput_Assignee interface {
	isAssignParticipantInput_Assignee()
}

type AssignParticipantInput_MemberId struct {
	MemberId string `protobuf:"bytes,10,opt,name=member_id,json=memberId,proto3,oneof"`
}

type AssignParticipantInput_GroupId struct {
	GroupId string `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3,oneof"`
}

func (*AssignParticipantInput_MemberId) isAssignParticipantInput_Assignee() {}

func (*AssignParticipantInput_GroupId) isAssignParticipantInput_Assignee() {}

type AssignParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParticipantId string                 `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignParticipantOutput) Reset() {
	*x = AssignParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignParticipantOutput) ProtoMessage() {}

func (x *AssignParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignParticipantOutput.ProtoReflect.Descriptor instead.
func (*AssignParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{1}
}

func (x *AssignParticipantOutput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type EnableParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableParticipantInput) Reset() {
	*x = EnableParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableParticipantInput) ProtoMessage() {}

func (x *EnableParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableParticipantInput.ProtoReflect.Descriptor instead.
func (*EnableParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{2}
}

func (x *EnableParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *EnableParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type EnableParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableParticipantOutput) Reset() {
	*x = EnableParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableParticipantOutput) ProtoMessage() {}

func (x *EnableParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableParticipantOutput.ProtoReflect.Descriptor instead.
func (*EnableParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{3}
}

type DisableParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableParticipantInput) Reset() {
	*x = DisableParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableParticipantInput) ProtoMessage() {}

func (x *DisableParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableParticipantInput.ProtoReflect.Descriptor instead.
func (*DisableParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{4}
}

func (x *DisableParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *DisableParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type DisableParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableParticipantOutput) Reset() {
	*x = DisableParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableParticipantOutput) ProtoMessage() {}

func (x *DisableParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableParticipantOutput.ProtoReflect.Descriptor instead.
func (*DisableParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{5}
}

type UpdateParticipantInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Patch request to update participant partially (all fields are updated if not specified)
	Patch []UpdateParticipantInput_Patch `protobuf:"varint,3,rep,packed,name=patch,proto3,enum=eolymp.judge.UpdateParticipantInput_Patch" json:"patch,omitempty"`
	// Participant identifier to update
	ContestId     string       `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string       `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Participant   *Participant `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateParticipantInput) Reset() {
	*x = UpdateParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParticipantInput) ProtoMessage() {}

func (x *UpdateParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParticipantInput.ProtoReflect.Descriptor instead.
func (*UpdateParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateParticipantInput) GetPatch() []UpdateParticipantInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *UpdateParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *UpdateParticipantInput) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type UpdateParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateParticipantOutput) Reset() {
	*x = UpdateParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParticipantOutput) ProtoMessage() {}

func (x *UpdateParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParticipantOutput.ProtoReflect.Descriptor instead.
func (*UpdateParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{7}
}

type DisqualifyParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Disqualify    bool                   `protobuf:"varint,3,opt,name=disqualify,proto3" json:"disqualify,omitempty"` // true to disqualify, false to un-disqualify
	Reason        *ecm.Content           `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`          // reason for disqualification
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisqualifyParticipantInput) Reset() {
	*x = DisqualifyParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisqualifyParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisqualifyParticipantInput) ProtoMessage() {}

func (x *DisqualifyParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisqualifyParticipantInput.ProtoReflect.Descriptor instead.
func (*DisqualifyParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{8}
}

func (x *DisqualifyParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *DisqualifyParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *DisqualifyParticipantInput) GetDisqualify() bool {
	if x != nil {
		return x.Disqualify
	}
	return false
}

func (x *DisqualifyParticipantInput) GetReason() *ecm.Content {
	if x != nil {
		return x.Reason
	}
	return nil
}

type DisqualifyParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisqualifyParticipantOutput) Reset() {
	*x = DisqualifyParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisqualifyParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisqualifyParticipantOutput) ProtoMessage() {}

func (x *DisqualifyParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisqualifyParticipantOutput.ProtoReflect.Descriptor instead.
func (*DisqualifyParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{9}
}

type DeleteParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteParticipantInput) Reset() {
	*x = DeleteParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParticipantInput) ProtoMessage() {}

func (x *DeleteParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParticipantInput.ProtoReflect.Descriptor instead.
func (*DeleteParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *DeleteParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type DeleteParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteParticipantOutput) Reset() {
	*x = DeleteParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParticipantOutput) ProtoMessage() {}

func (x *DeleteParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParticipantOutput.ProtoReflect.Descriptor instead.
func (*DeleteParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{11}
}

type DescribeParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeParticipantInput) Reset() {
	*x = DescribeParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeParticipantInput) ProtoMessage() {}

func (x *DescribeParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeParticipantInput.ProtoReflect.Descriptor instead.
func (*DescribeParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *DescribeParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type DescribeParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Participant   *Participant           `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeParticipantOutput) Reset() {
	*x = DescribeParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeParticipantOutput) ProtoMessage() {}

func (x *DescribeParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeParticipantOutput.ProtoReflect.Descriptor instead.
func (*DescribeParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeParticipantOutput) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type ListParticipantsInput struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ContestId     string                         `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Offset        int32                          `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int32                          `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Search        string                         `protobuf:"bytes,20,opt,name=search,proto3" json:"search,omitempty"`
	Filters       *ListParticipantsInput_Filter  `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	Sort          ListParticipantsInput_Sortable `protobuf:"varint,50,opt,name=sort,proto3,enum=eolymp.judge.ListParticipantsInput_Sortable" json:"sort,omitempty"`
	Order         wellknown.Direction            `protobuf:"varint,51,opt,name=order,proto3,enum=eolymp.wellknown.Direction" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParticipantsInput) Reset() {
	*x = ListParticipantsInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantsInput) ProtoMessage() {}

func (x *ListParticipantsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantsInput.ProtoReflect.Descriptor instead.
func (*ListParticipantsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListParticipantsInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ListParticipantsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListParticipantsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListParticipantsInput) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListParticipantsInput) GetFilters() *ListParticipantsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListParticipantsInput) GetSort() ListParticipantsInput_Sortable {
	if x != nil {
		return x.Sort
	}
	return ListParticipantsInput_DEFAULT
}

func (x *ListParticipantsInput) GetOrder() wellknown.Direction {
	if x != nil {
		return x.Order
	}
	return wellknown.Direction(0)
}

type ListParticipantsOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items         []*Participant         `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParticipantsOutput) Reset() {
	*x = ListParticipantsOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantsOutput) ProtoMessage() {}

func (x *ListParticipantsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantsOutput.ProtoReflect.Descriptor instead.
func (*ListParticipantsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListParticipantsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListParticipantsOutput) GetItems() []*Participant {
	if x != nil {
		return x.Items
	}
	return nil
}

type WatchParticipantInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchParticipantInput) Reset() {
	*x = WatchParticipantInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchParticipantInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchParticipantInput) ProtoMessage() {}

func (x *WatchParticipantInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchParticipantInput.ProtoReflect.Descriptor instead.
func (*WatchParticipantInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{16}
}

func (x *WatchParticipantInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *WatchParticipantInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type WatchParticipantOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Participant   *Participant           `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchParticipantOutput) Reset() {
	*x = WatchParticipantOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchParticipantOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchParticipantOutput) ProtoMessage() {}

func (x *WatchParticipantOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchParticipantOutput.ProtoReflect.Descriptor instead.
func (*WatchParticipantOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{17}
}

func (x *WatchParticipantOutput) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type DescribeViewerInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeViewerInput) Reset() {
	*x = DescribeViewerInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeViewerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeViewerInput) ProtoMessage() {}

func (x *DescribeViewerInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeViewerInput.ProtoReflect.Descriptor instead.
func (*DescribeViewerInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeViewerInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type DescribeViewerOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Participant   *Participant           `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeViewerOutput) Reset() {
	*x = DescribeViewerOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeViewerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeViewerOutput) ProtoMessage() {}

func (x *DescribeViewerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeViewerOutput.ProtoReflect.Descriptor instead.
func (*DescribeViewerOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeViewerOutput) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

type JoinContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinContestInput) Reset() {
	*x = JoinContestInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestInput) ProtoMessage() {}

func (x *JoinContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestInput.ProtoReflect.Descriptor instead.
func (*JoinContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{20}
}

func (x *JoinContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type JoinContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinContestOutput) Reset() {
	*x = JoinContestOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinContestOutput) ProtoMessage() {}

func (x *JoinContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinContestOutput.ProtoReflect.Descriptor instead.
func (*JoinContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{21}
}

type StartContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContestInput) Reset() {
	*x = StartContestInput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContestInput) ProtoMessage() {}

func (x *StartContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContestInput.ProtoReflect.Descriptor instead.
func (*StartContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{22}
}

func (x *StartContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type StartContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContestOutput) Reset() {
	*x = StartContestOutput{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContestOutput) ProtoMessage() {}

func (x *StartContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContestOutput.ProtoReflect.Descriptor instead.
func (*StartContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{23}
}

// complex filters to further narrow down the search
type ListParticipantsInput_Filter struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            []*wellknown.ExpressionID        `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	MemberId      []*wellknown.ExpressionID        `protobuf:"bytes,2,rep,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupId       []*wellknown.ExpressionID        `protobuf:"bytes,4,rep,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Status        []*wellknown.ExpressionEnum      `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
	StartedAt     []*wellknown.ExpressionTimestamp `protobuf:"bytes,6,rep,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Unofficial    []*wellknown.ExpressionBool      `protobuf:"bytes,10,rep,name=unofficial,proto3" json:"unofficial,omitempty"`
	Disqualified  []*wellknown.ExpressionBool      `protobuf:"bytes,11,rep,name=disqualified,proto3" json:"disqualified,omitempty"`
	Inactive      []*wellknown.ExpressionBool      `protobuf:"bytes,12,rep,name=inactive,proto3" json:"inactive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParticipantsInput_Filter) Reset() {
	*x = ListParticipantsInput_Filter{}
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParticipantsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantsInput_Filter) ProtoMessage() {}

func (x *ListParticipantsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListParticipantsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ListParticipantsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetMemberId() []*wellknown.ExpressionID {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetGroupId() []*wellknown.ExpressionID {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetStatus() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetStartedAt() []*wellknown.ExpressionTimestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetUnofficial() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Unofficial
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetDisqualified() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Disqualified
	}
	return nil
}

func (x *ListParticipantsInput_Filter) GetInactive() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Inactive
	}
	return nil
}

var File_eolymp_judge_participant_service_proto protoreflect.FileDescriptor

var file_eolymp_judge_participant_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x65, 0x63, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x5f, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc8, 0x02,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x69, 0x0a,
	0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41,
	0x53, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x65, 0x63, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x5e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x60, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x58, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xe9, 0x06, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x1a, 0xf6, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x75, 0x6e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x39, 0x0a, 0x08,
	0x53, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x22, 0x5f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x34,
	0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x10, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x32, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0xc1, 0x0f, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3f, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x57, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x58, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a,
	0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc9, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x50, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x48, 0x42, 0xf8, 0xe2,
	0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x3e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f,
	0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x1a, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0x7b, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x22, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x12, 0x0b, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x6c, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1c, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x07, 0x22, 0x05, 0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x3e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x03,
	0x82, 0xe3, 0x0a, 0x1d, 0x8a, 0xe3, 0x0a, 0x19, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x22, 0x06, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_judge_participant_service_proto_rawDescOnce sync.Once
	file_eolymp_judge_participant_service_proto_rawDescData = file_eolymp_judge_participant_service_proto_rawDesc
)

func file_eolymp_judge_participant_service_proto_rawDescGZIP() []byte {
	file_eolymp_judge_participant_service_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_participant_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_participant_service_proto_rawDescData)
	})
	return file_eolymp_judge_participant_service_proto_rawDescData
}

var file_eolymp_judge_participant_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_judge_participant_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_eolymp_judge_participant_service_proto_goTypes = []any{
	(UpdateParticipantInput_Patch)(0),     // 0: eolymp.judge.UpdateParticipantInput.Patch
	(ListParticipantsInput_Sortable)(0),   // 1: eolymp.judge.ListParticipantsInput.Sortable
	(*AssignParticipantInput)(nil),        // 2: eolymp.judge.AssignParticipantInput
	(*AssignParticipantOutput)(nil),       // 3: eolymp.judge.AssignParticipantOutput
	(*EnableParticipantInput)(nil),        // 4: eolymp.judge.EnableParticipantInput
	(*EnableParticipantOutput)(nil),       // 5: eolymp.judge.EnableParticipantOutput
	(*DisableParticipantInput)(nil),       // 6: eolymp.judge.DisableParticipantInput
	(*DisableParticipantOutput)(nil),      // 7: eolymp.judge.DisableParticipantOutput
	(*UpdateParticipantInput)(nil),        // 8: eolymp.judge.UpdateParticipantInput
	(*UpdateParticipantOutput)(nil),       // 9: eolymp.judge.UpdateParticipantOutput
	(*DisqualifyParticipantInput)(nil),    // 10: eolymp.judge.DisqualifyParticipantInput
	(*DisqualifyParticipantOutput)(nil),   // 11: eolymp.judge.DisqualifyParticipantOutput
	(*DeleteParticipantInput)(nil),        // 12: eolymp.judge.DeleteParticipantInput
	(*DeleteParticipantOutput)(nil),       // 13: eolymp.judge.DeleteParticipantOutput
	(*DescribeParticipantInput)(nil),      // 14: eolymp.judge.DescribeParticipantInput
	(*DescribeParticipantOutput)(nil),     // 15: eolymp.judge.DescribeParticipantOutput
	(*ListParticipantsInput)(nil),         // 16: eolymp.judge.ListParticipantsInput
	(*ListParticipantsOutput)(nil),        // 17: eolymp.judge.ListParticipantsOutput
	(*WatchParticipantInput)(nil),         // 18: eolymp.judge.WatchParticipantInput
	(*WatchParticipantOutput)(nil),        // 19: eolymp.judge.WatchParticipantOutput
	(*DescribeViewerInput)(nil),           // 20: eolymp.judge.DescribeViewerInput
	(*DescribeViewerOutput)(nil),          // 21: eolymp.judge.DescribeViewerOutput
	(*JoinContestInput)(nil),              // 22: eolymp.judge.JoinContestInput
	(*JoinContestOutput)(nil),             // 23: eolymp.judge.JoinContestOutput
	(*StartContestInput)(nil),             // 24: eolymp.judge.StartContestInput
	(*StartContestOutput)(nil),            // 25: eolymp.judge.StartContestOutput
	(*ListParticipantsInput_Filter)(nil),  // 26: eolymp.judge.ListParticipantsInput.Filter
	(*Participant)(nil),                   // 27: eolymp.judge.Participant
	(*ecm.Content)(nil),                   // 28: eolymp.ecm.Content
	(wellknown.Direction)(0),              // 29: eolymp.wellknown.Direction
	(*wellknown.ExpressionID)(nil),        // 30: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionEnum)(nil),      // 31: eolymp.wellknown.ExpressionEnum
	(*wellknown.ExpressionTimestamp)(nil), // 32: eolymp.wellknown.ExpressionTimestamp
	(*wellknown.ExpressionBool)(nil),      // 33: eolymp.wellknown.ExpressionBool
}
var file_eolymp_judge_participant_service_proto_depIdxs = []int32{
	27, // 0: eolymp.judge.AssignParticipantInput.participant:type_name -> eolymp.judge.Participant
	0,  // 1: eolymp.judge.UpdateParticipantInput.patch:type_name -> eolymp.judge.UpdateParticipantInput.Patch
	27, // 2: eolymp.judge.UpdateParticipantInput.participant:type_name -> eolymp.judge.Participant
	28, // 3: eolymp.judge.DisqualifyParticipantInput.reason:type_name -> eolymp.ecm.Content
	27, // 4: eolymp.judge.DescribeParticipantOutput.participant:type_name -> eolymp.judge.Participant
	26, // 5: eolymp.judge.ListParticipantsInput.filters:type_name -> eolymp.judge.ListParticipantsInput.Filter
	1,  // 6: eolymp.judge.ListParticipantsInput.sort:type_name -> eolymp.judge.ListParticipantsInput.Sortable
	29, // 7: eolymp.judge.ListParticipantsInput.order:type_name -> eolymp.wellknown.Direction
	27, // 8: eolymp.judge.ListParticipantsOutput.items:type_name -> eolymp.judge.Participant
	27, // 9: eolymp.judge.WatchParticipantOutput.participant:type_name -> eolymp.judge.Participant
	27, // 10: eolymp.judge.DescribeViewerOutput.participant:type_name -> eolymp.judge.Participant
	30, // 11: eolymp.judge.ListParticipantsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	30, // 12: eolymp.judge.ListParticipantsInput.Filter.member_id:type_name -> eolymp.wellknown.ExpressionID
	30, // 13: eolymp.judge.ListParticipantsInput.Filter.group_id:type_name -> eolymp.wellknown.ExpressionID
	31, // 14: eolymp.judge.ListParticipantsInput.Filter.status:type_name -> eolymp.wellknown.ExpressionEnum
	32, // 15: eolymp.judge.ListParticipantsInput.Filter.started_at:type_name -> eolymp.wellknown.ExpressionTimestamp
	33, // 16: eolymp.judge.ListParticipantsInput.Filter.unofficial:type_name -> eolymp.wellknown.ExpressionBool
	33, // 17: eolymp.judge.ListParticipantsInput.Filter.disqualified:type_name -> eolymp.wellknown.ExpressionBool
	33, // 18: eolymp.judge.ListParticipantsInput.Filter.inactive:type_name -> eolymp.wellknown.ExpressionBool
	2,  // 19: eolymp.judge.ParticipantService.AssignParticipant:input_type -> eolymp.judge.AssignParticipantInput
	4,  // 20: eolymp.judge.ParticipantService.EnableParticipant:input_type -> eolymp.judge.EnableParticipantInput
	6,  // 21: eolymp.judge.ParticipantService.DisableParticipant:input_type -> eolymp.judge.DisableParticipantInput
	8,  // 22: eolymp.judge.ParticipantService.UpdateParticipant:input_type -> eolymp.judge.UpdateParticipantInput
	10, // 23: eolymp.judge.ParticipantService.DisqualifyParticipant:input_type -> eolymp.judge.DisqualifyParticipantInput
	12, // 24: eolymp.judge.ParticipantService.DeleteParticipant:input_type -> eolymp.judge.DeleteParticipantInput
	14, // 25: eolymp.judge.ParticipantService.DescribeParticipant:input_type -> eolymp.judge.DescribeParticipantInput
	16, // 26: eolymp.judge.ParticipantService.ListParticipants:input_type -> eolymp.judge.ListParticipantsInput
	18, // 27: eolymp.judge.ParticipantService.WatchParticipant:input_type -> eolymp.judge.WatchParticipantInput
	20, // 28: eolymp.judge.ParticipantService.DescribeViewer:input_type -> eolymp.judge.DescribeViewerInput
	22, // 29: eolymp.judge.ParticipantService.JoinContest:input_type -> eolymp.judge.JoinContestInput
	24, // 30: eolymp.judge.ParticipantService.StartContest:input_type -> eolymp.judge.StartContestInput
	3,  // 31: eolymp.judge.ParticipantService.AssignParticipant:output_type -> eolymp.judge.AssignParticipantOutput
	5,  // 32: eolymp.judge.ParticipantService.EnableParticipant:output_type -> eolymp.judge.EnableParticipantOutput
	7,  // 33: eolymp.judge.ParticipantService.DisableParticipant:output_type -> eolymp.judge.DisableParticipantOutput
	9,  // 34: eolymp.judge.ParticipantService.UpdateParticipant:output_type -> eolymp.judge.UpdateParticipantOutput
	11, // 35: eolymp.judge.ParticipantService.DisqualifyParticipant:output_type -> eolymp.judge.DisqualifyParticipantOutput
	13, // 36: eolymp.judge.ParticipantService.DeleteParticipant:output_type -> eolymp.judge.DeleteParticipantOutput
	15, // 37: eolymp.judge.ParticipantService.DescribeParticipant:output_type -> eolymp.judge.DescribeParticipantOutput
	17, // 38: eolymp.judge.ParticipantService.ListParticipants:output_type -> eolymp.judge.ListParticipantsOutput
	19, // 39: eolymp.judge.ParticipantService.WatchParticipant:output_type -> eolymp.judge.WatchParticipantOutput
	21, // 40: eolymp.judge.ParticipantService.DescribeViewer:output_type -> eolymp.judge.DescribeViewerOutput
	23, // 41: eolymp.judge.ParticipantService.JoinContest:output_type -> eolymp.judge.JoinContestOutput
	25, // 42: eolymp.judge.ParticipantService.StartContest:output_type -> eolymp.judge.StartContestOutput
	31, // [31:43] is the sub-list for method output_type
	19, // [19:31] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_eolymp_judge_participant_service_proto_init() }
func file_eolymp_judge_participant_service_proto_init() {
	if File_eolymp_judge_participant_service_proto != nil {
		return
	}
	file_eolymp_judge_participant_proto_init()
	file_eolymp_judge_participant_service_proto_msgTypes[0].OneofWrappers = []any{
		(*AssignParticipantInput_MemberId)(nil),
		(*AssignParticipantInput_GroupId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_participant_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_judge_participant_service_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_participant_service_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_participant_service_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_participant_service_proto_msgTypes,
	}.Build()
	File_eolymp_judge_participant_service_proto = out.File
	file_eolymp_judge_participant_service_proto_rawDesc = nil
	file_eolymp_judge_participant_service_proto_goTypes = nil
	file_eolymp_judge_participant_service_proto_depIdxs = nil
}
