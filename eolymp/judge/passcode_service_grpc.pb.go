// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/judge/passcode_service.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PasscodeService_VerifyPasscode_FullMethodName = "/eolymp.judge.PasscodeService/VerifyPasscode"
	PasscodeService_EnterPasscode_FullMethodName  = "/eolymp.judge.PasscodeService/EnterPasscode"
	PasscodeService_ResetPasscode_FullMethodName  = "/eolymp.judge.PasscodeService/ResetPasscode"
	PasscodeService_SetPasscode_FullMethodName    = "/eolymp.judge.PasscodeService/SetPasscode"
	PasscodeService_RemovePasscode_FullMethodName = "/eolymp.judge.PasscodeService/RemovePasscode"
)

// PasscodeServiceClient is the client API for PasscodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasscodeServiceClient interface {
	// Verify if passcode is required for the contest and if authenticated token has entered the passcode.
	VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput, opts ...grpc.CallOption) (*VerifyPasscodeOutput, error)
	// Enter passcode marks current session as one authenticated by passcode.
	EnterPasscode(ctx context.Context, in *EnterPasscodeInput, opts ...grpc.CallOption) (*EnterPasscodeOutput, error)
	// Set a new passcode to the participant, if passcode was not set it will be now required
	ResetPasscode(ctx context.Context, in *ResetPasscodeInput, opts ...grpc.CallOption) (*ResetPasscodeOutput, error)
	// Set a new passcode to the participant, if passcode was not set it will be now required
	SetPasscode(ctx context.Context, in *SetPasscodeInput, opts ...grpc.CallOption) (*SetPasscodeOutput, error)
	// Remove passcode from participant and allow her to enter contest without passcode.
	RemovePasscode(ctx context.Context, in *RemovePasscodeInput, opts ...grpc.CallOption) (*RemovePasscodeOutput, error)
}

type passcodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasscodeServiceClient(cc grpc.ClientConnInterface) PasscodeServiceClient {
	return &passcodeServiceClient{cc}
}

func (c *passcodeServiceClient) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput, opts ...grpc.CallOption) (*VerifyPasscodeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPasscodeOutput)
	err := c.cc.Invoke(ctx, PasscodeService_VerifyPasscode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passcodeServiceClient) EnterPasscode(ctx context.Context, in *EnterPasscodeInput, opts ...grpc.CallOption) (*EnterPasscodeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterPasscodeOutput)
	err := c.cc.Invoke(ctx, PasscodeService_EnterPasscode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passcodeServiceClient) ResetPasscode(ctx context.Context, in *ResetPasscodeInput, opts ...grpc.CallOption) (*ResetPasscodeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasscodeOutput)
	err := c.cc.Invoke(ctx, PasscodeService_ResetPasscode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passcodeServiceClient) SetPasscode(ctx context.Context, in *SetPasscodeInput, opts ...grpc.CallOption) (*SetPasscodeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPasscodeOutput)
	err := c.cc.Invoke(ctx, PasscodeService_SetPasscode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passcodeServiceClient) RemovePasscode(ctx context.Context, in *RemovePasscodeInput, opts ...grpc.CallOption) (*RemovePasscodeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePasscodeOutput)
	err := c.cc.Invoke(ctx, PasscodeService_RemovePasscode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasscodeServiceServer is the server API for PasscodeService service.
// All implementations should embed UnimplementedPasscodeServiceServer
// for forward compatibility.
type PasscodeServiceServer interface {
	// Verify if passcode is required for the contest and if authenticated token has entered the passcode.
	VerifyPasscode(context.Context, *VerifyPasscodeInput) (*VerifyPasscodeOutput, error)
	// Enter passcode marks current session as one authenticated by passcode.
	EnterPasscode(context.Context, *EnterPasscodeInput) (*EnterPasscodeOutput, error)
	// Set a new passcode to the participant, if passcode was not set it will be now required
	ResetPasscode(context.Context, *ResetPasscodeInput) (*ResetPasscodeOutput, error)
	// Set a new passcode to the participant, if passcode was not set it will be now required
	SetPasscode(context.Context, *SetPasscodeInput) (*SetPasscodeOutput, error)
	// Remove passcode from participant and allow her to enter contest without passcode.
	RemovePasscode(context.Context, *RemovePasscodeInput) (*RemovePasscodeOutput, error)
}

// UnimplementedPasscodeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasscodeServiceServer struct{}

func (UnimplementedPasscodeServiceServer) VerifyPasscode(context.Context, *VerifyPasscodeInput) (*VerifyPasscodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasscode not implemented")
}
func (UnimplementedPasscodeServiceServer) EnterPasscode(context.Context, *EnterPasscodeInput) (*EnterPasscodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterPasscode not implemented")
}
func (UnimplementedPasscodeServiceServer) ResetPasscode(context.Context, *ResetPasscodeInput) (*ResetPasscodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasscode not implemented")
}
func (UnimplementedPasscodeServiceServer) SetPasscode(context.Context, *SetPasscodeInput) (*SetPasscodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPasscode not implemented")
}
func (UnimplementedPasscodeServiceServer) RemovePasscode(context.Context, *RemovePasscodeInput) (*RemovePasscodeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePasscode not implemented")
}
func (UnimplementedPasscodeServiceServer) testEmbeddedByValue() {}

// UnsafePasscodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasscodeServiceServer will
// result in compilation errors.
type UnsafePasscodeServiceServer interface {
	mustEmbedUnimplementedPasscodeServiceServer()
}

func RegisterPasscodeServiceServer(s grpc.ServiceRegistrar, srv PasscodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPasscodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PasscodeService_ServiceDesc, srv)
}

func _PasscodeService_VerifyPasscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasscodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasscodeServiceServer).VerifyPasscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasscodeService_VerifyPasscode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasscodeServiceServer).VerifyPasscode(ctx, req.(*VerifyPasscodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasscodeService_EnterPasscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterPasscodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasscodeServiceServer).EnterPasscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasscodeService_EnterPasscode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasscodeServiceServer).EnterPasscode(ctx, req.(*EnterPasscodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasscodeService_ResetPasscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasscodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasscodeServiceServer).ResetPasscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasscodeService_ResetPasscode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasscodeServiceServer).ResetPasscode(ctx, req.(*ResetPasscodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasscodeService_SetPasscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasscodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasscodeServiceServer).SetPasscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasscodeService_SetPasscode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasscodeServiceServer).SetPasscode(ctx, req.(*SetPasscodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasscodeService_RemovePasscode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePasscodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasscodeServiceServer).RemovePasscode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasscodeService_RemovePasscode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasscodeServiceServer).RemovePasscode(ctx, req.(*RemovePasscodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PasscodeService_ServiceDesc is the grpc.ServiceDesc for PasscodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasscodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.judge.PasscodeService",
	HandlerType: (*PasscodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyPasscode",
			Handler:    _PasscodeService_VerifyPasscode_Handler,
		},
		{
			MethodName: "EnterPasscode",
			Handler:    _PasscodeService_EnterPasscode_Handler,
		},
		{
			MethodName: "ResetPasscode",
			Handler:    _PasscodeService_ResetPasscode_Handler,
		},
		{
			MethodName: "SetPasscode",
			Handler:    _PasscodeService_SetPasscode_Handler,
		},
		{
			MethodName: "RemovePasscode",
			Handler:    _PasscodeService_RemovePasscode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/judge/passcode_service.proto",
}
