// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/judge/participant_service.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParticipantService_AssignParticipant_FullMethodName     = "/eolymp.judge.ParticipantService/AssignParticipant"
	ParticipantService_EnableParticipant_FullMethodName     = "/eolymp.judge.ParticipantService/EnableParticipant"
	ParticipantService_DisableParticipant_FullMethodName    = "/eolymp.judge.ParticipantService/DisableParticipant"
	ParticipantService_UpdateParticipant_FullMethodName     = "/eolymp.judge.ParticipantService/UpdateParticipant"
	ParticipantService_DisqualifyParticipant_FullMethodName = "/eolymp.judge.ParticipantService/DisqualifyParticipant"
	ParticipantService_DeleteParticipant_FullMethodName     = "/eolymp.judge.ParticipantService/DeleteParticipant"
	ParticipantService_DescribeParticipant_FullMethodName   = "/eolymp.judge.ParticipantService/DescribeParticipant"
	ParticipantService_ListParticipants_FullMethodName      = "/eolymp.judge.ParticipantService/ListParticipants"
	ParticipantService_WatchParticipant_FullMethodName      = "/eolymp.judge.ParticipantService/WatchParticipant"
	ParticipantService_DescribeViewer_FullMethodName        = "/eolymp.judge.ParticipantService/DescribeViewer"
	ParticipantService_JoinContest_FullMethodName           = "/eolymp.judge.ParticipantService/JoinContest"
	ParticipantService_StartContest_FullMethodName          = "/eolymp.judge.ParticipantService/StartContest"
)

// ParticipantServiceClient is the client API for ParticipantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipantServiceClient interface {
	AssignParticipant(ctx context.Context, in *AssignParticipantInput, opts ...grpc.CallOption) (*AssignParticipantOutput, error)
	// deprecated, use UpdateParticipant instead
	EnableParticipant(ctx context.Context, in *EnableParticipantInput, opts ...grpc.CallOption) (*EnableParticipantOutput, error)
	// deprecated, use UpdateParticipant instead
	DisableParticipant(ctx context.Context, in *DisableParticipantInput, opts ...grpc.CallOption) (*DisableParticipantOutput, error)
	UpdateParticipant(ctx context.Context, in *UpdateParticipantInput, opts ...grpc.CallOption) (*UpdateParticipantOutput, error)
	DisqualifyParticipant(ctx context.Context, in *DisqualifyParticipantInput, opts ...grpc.CallOption) (*DisqualifyParticipantOutput, error)
	DeleteParticipant(ctx context.Context, in *DeleteParticipantInput, opts ...grpc.CallOption) (*DeleteParticipantOutput, error)
	DescribeParticipant(ctx context.Context, in *DescribeParticipantInput, opts ...grpc.CallOption) (*DescribeParticipantOutput, error)
	ListParticipants(ctx context.Context, in *ListParticipantsInput, opts ...grpc.CallOption) (*ListParticipantsOutput, error)
	WatchParticipant(ctx context.Context, in *WatchParticipantInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchParticipantOutput], error)
	// DescribeViewer allows to fetch participant data for a currently authorized user.
	DescribeViewer(ctx context.Context, in *DescribeViewerInput, opts ...grpc.CallOption) (*DescribeViewerOutput, error)
	// Allows a participant (currently authorized user) to join (add himself to) a public contest.
	// deprecated: use registration service instead
	JoinContest(ctx context.Context, in *JoinContestInput, opts ...grpc.CallOption) (*JoinContestOutput, error)
	// Allows a participant (currently authorized user) to start participating in the contest, see problems and submit solutions.
	StartContest(ctx context.Context, in *StartContestInput, opts ...grpc.CallOption) (*StartContestOutput, error)
}

type participantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipantServiceClient(cc grpc.ClientConnInterface) ParticipantServiceClient {
	return &participantServiceClient{cc}
}

func (c *participantServiceClient) AssignParticipant(ctx context.Context, in *AssignParticipantInput, opts ...grpc.CallOption) (*AssignParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_AssignParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) EnableParticipant(ctx context.Context, in *EnableParticipantInput, opts ...grpc.CallOption) (*EnableParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_EnableParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) DisableParticipant(ctx context.Context, in *DisableParticipantInput, opts ...grpc.CallOption) (*DisableParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_DisableParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput, opts ...grpc.CallOption) (*UpdateParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_UpdateParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) DisqualifyParticipant(ctx context.Context, in *DisqualifyParticipantInput, opts ...grpc.CallOption) (*DisqualifyParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisqualifyParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_DisqualifyParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) DeleteParticipant(ctx context.Context, in *DeleteParticipantInput, opts ...grpc.CallOption) (*DeleteParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_DeleteParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput, opts ...grpc.CallOption) (*DescribeParticipantOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeParticipantOutput)
	err := c.cc.Invoke(ctx, ParticipantService_DescribeParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) ListParticipants(ctx context.Context, in *ListParticipantsInput, opts ...grpc.CallOption) (*ListParticipantsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListParticipantsOutput)
	err := c.cc.Invoke(ctx, ParticipantService_ListParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) WatchParticipant(ctx context.Context, in *WatchParticipantInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchParticipantOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParticipantService_ServiceDesc.Streams[0], ParticipantService_WatchParticipant_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchParticipantInput, WatchParticipantOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParticipantService_WatchParticipantClient = grpc.ServerStreamingClient[WatchParticipantOutput]

func (c *participantServiceClient) DescribeViewer(ctx context.Context, in *DescribeViewerInput, opts ...grpc.CallOption) (*DescribeViewerOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeViewerOutput)
	err := c.cc.Invoke(ctx, ParticipantService_DescribeViewer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) JoinContest(ctx context.Context, in *JoinContestInput, opts ...grpc.CallOption) (*JoinContestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinContestOutput)
	err := c.cc.Invoke(ctx, ParticipantService_JoinContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantServiceClient) StartContest(ctx context.Context, in *StartContestInput, opts ...grpc.CallOption) (*StartContestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartContestOutput)
	err := c.cc.Invoke(ctx, ParticipantService_StartContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipantServiceServer is the server API for ParticipantService service.
// All implementations should embed UnimplementedParticipantServiceServer
// for forward compatibility.
type ParticipantServiceServer interface {
	AssignParticipant(context.Context, *AssignParticipantInput) (*AssignParticipantOutput, error)
	// deprecated, use UpdateParticipant instead
	EnableParticipant(context.Context, *EnableParticipantInput) (*EnableParticipantOutput, error)
	// deprecated, use UpdateParticipant instead
	DisableParticipant(context.Context, *DisableParticipantInput) (*DisableParticipantOutput, error)
	UpdateParticipant(context.Context, *UpdateParticipantInput) (*UpdateParticipantOutput, error)
	DisqualifyParticipant(context.Context, *DisqualifyParticipantInput) (*DisqualifyParticipantOutput, error)
	DeleteParticipant(context.Context, *DeleteParticipantInput) (*DeleteParticipantOutput, error)
	DescribeParticipant(context.Context, *DescribeParticipantInput) (*DescribeParticipantOutput, error)
	ListParticipants(context.Context, *ListParticipantsInput) (*ListParticipantsOutput, error)
	WatchParticipant(*WatchParticipantInput, grpc.ServerStreamingServer[WatchParticipantOutput]) error
	// DescribeViewer allows to fetch participant data for a currently authorized user.
	DescribeViewer(context.Context, *DescribeViewerInput) (*DescribeViewerOutput, error)
	// Allows a participant (currently authorized user) to join (add himself to) a public contest.
	// deprecated: use registration service instead
	JoinContest(context.Context, *JoinContestInput) (*JoinContestOutput, error)
	// Allows a participant (currently authorized user) to start participating in the contest, see problems and submit solutions.
	StartContest(context.Context, *StartContestInput) (*StartContestOutput, error)
}

// UnimplementedParticipantServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParticipantServiceServer struct{}

func (UnimplementedParticipantServiceServer) AssignParticipant(context.Context, *AssignParticipantInput) (*AssignParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) EnableParticipant(context.Context, *EnableParticipantInput) (*EnableParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) DisableParticipant(context.Context, *DisableParticipantInput) (*DisableParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) UpdateParticipant(context.Context, *UpdateParticipantInput) (*UpdateParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) DisqualifyParticipant(context.Context, *DisqualifyParticipantInput) (*DisqualifyParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisqualifyParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) DeleteParticipant(context.Context, *DeleteParticipantInput) (*DeleteParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) DescribeParticipant(context.Context, *DescribeParticipantInput) (*DescribeParticipantOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) ListParticipants(context.Context, *ListParticipantsInput) (*ListParticipantsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipants not implemented")
}
func (UnimplementedParticipantServiceServer) WatchParticipant(*WatchParticipantInput, grpc.ServerStreamingServer[WatchParticipantOutput]) error {
	return status.Errorf(codes.Unimplemented, "method WatchParticipant not implemented")
}
func (UnimplementedParticipantServiceServer) DescribeViewer(context.Context, *DescribeViewerInput) (*DescribeViewerOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeViewer not implemented")
}
func (UnimplementedParticipantServiceServer) JoinContest(context.Context, *JoinContestInput) (*JoinContestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinContest not implemented")
}
func (UnimplementedParticipantServiceServer) StartContest(context.Context, *StartContestInput) (*StartContestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContest not implemented")
}
func (UnimplementedParticipantServiceServer) testEmbeddedByValue() {}

// UnsafeParticipantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipantServiceServer will
// result in compilation errors.
type UnsafeParticipantServiceServer interface {
	mustEmbedUnimplementedParticipantServiceServer()
}

func RegisterParticipantServiceServer(s grpc.ServiceRegistrar, srv ParticipantServiceServer) {
	// If the following call pancis, it indicates UnimplementedParticipantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParticipantService_ServiceDesc, srv)
}

func _ParticipantService_AssignParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).AssignParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_AssignParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).AssignParticipant(ctx, req.(*AssignParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_EnableParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).EnableParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_EnableParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).EnableParticipant(ctx, req.(*EnableParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_DisableParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).DisableParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_DisableParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).DisableParticipant(ctx, req.(*DisableParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_UpdateParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).UpdateParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_UpdateParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).UpdateParticipant(ctx, req.(*UpdateParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_DisqualifyParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisqualifyParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).DisqualifyParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_DisqualifyParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).DisqualifyParticipant(ctx, req.(*DisqualifyParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_DeleteParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).DeleteParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_DeleteParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).DeleteParticipant(ctx, req.(*DeleteParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_DescribeParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeParticipantInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).DescribeParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_DescribeParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).DescribeParticipant(ctx, req.(*DescribeParticipantInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_ListParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParticipantsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).ListParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_ListParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).ListParticipants(ctx, req.(*ListParticipantsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_WatchParticipant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchParticipantInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParticipantServiceServer).WatchParticipant(m, &grpc.GenericServerStream[WatchParticipantInput, WatchParticipantOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParticipantService_WatchParticipantServer = grpc.ServerStreamingServer[WatchParticipantOutput]

func _ParticipantService_DescribeViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeViewerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).DescribeViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_DescribeViewer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).DescribeViewer(ctx, req.(*DescribeViewerInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_JoinContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinContestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).JoinContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_JoinContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).JoinContest(ctx, req.(*JoinContestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParticipantService_StartContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServiceServer).StartContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParticipantService_StartContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServiceServer).StartContest(ctx, req.(*StartContestInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ParticipantService_ServiceDesc is the grpc.ServiceDesc for ParticipantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParticipantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.judge.ParticipantService",
	HandlerType: (*ParticipantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignParticipant",
			Handler:    _ParticipantService_AssignParticipant_Handler,
		},
		{
			MethodName: "EnableParticipant",
			Handler:    _ParticipantService_EnableParticipant_Handler,
		},
		{
			MethodName: "DisableParticipant",
			Handler:    _ParticipantService_DisableParticipant_Handler,
		},
		{
			MethodName: "UpdateParticipant",
			Handler:    _ParticipantService_UpdateParticipant_Handler,
		},
		{
			MethodName: "DisqualifyParticipant",
			Handler:    _ParticipantService_DisqualifyParticipant_Handler,
		},
		{
			MethodName: "DeleteParticipant",
			Handler:    _ParticipantService_DeleteParticipant_Handler,
		},
		{
			MethodName: "DescribeParticipant",
			Handler:    _ParticipantService_DescribeParticipant_Handler,
		},
		{
			MethodName: "ListParticipants",
			Handler:    _ParticipantService_ListParticipants_Handler,
		},
		{
			MethodName: "DescribeViewer",
			Handler:    _ParticipantService_DescribeViewer_Handler,
		},
		{
			MethodName: "JoinContest",
			Handler:    _ParticipantService_JoinContest_Handler,
		},
		{
			MethodName: "StartContest",
			Handler:    _ParticipantService_StartContest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchParticipant",
			Handler:       _ParticipantService_WatchParticipant_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eolymp/judge/participant_service.proto",
}
