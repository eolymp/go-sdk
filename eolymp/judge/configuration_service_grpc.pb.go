// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/judge/configuration_service.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigurationService_DescribeEnvironment_FullMethodName    = "/eolymp.judge.ConfigurationService/DescribeEnvironment"
	ConfigurationService_ConfigureEnvironment_FullMethodName   = "/eolymp.judge.ConfigurationService/ConfigureEnvironment"
	ConfigurationService_DescribeCertification_FullMethodName  = "/eolymp.judge.ConfigurationService/DescribeCertification"
	ConfigurationService_ConfigureCertification_FullMethodName = "/eolymp.judge.ConfigurationService/ConfigureCertification"
	ConfigurationService_DescribeTaxonomy_FullMethodName       = "/eolymp.judge.ConfigurationService/DescribeTaxonomy"
	ConfigurationService_ConfigureTaxonomy_FullMethodName      = "/eolymp.judge.ConfigurationService/ConfigureTaxonomy"
)

// ConfigurationServiceClient is the client API for ConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationServiceClient interface {
	DescribeEnvironment(ctx context.Context, in *DescribeEnvironmentInput, opts ...grpc.CallOption) (*DescribeEnvironmentOutput, error)
	ConfigureEnvironment(ctx context.Context, in *ConfigureEnvironmentInput, opts ...grpc.CallOption) (*ConfigureEnvironmentOutput, error)
	DescribeCertification(ctx context.Context, in *DescribeCertificationInput, opts ...grpc.CallOption) (*DescribeCertificationOutput, error)
	ConfigureCertification(ctx context.Context, in *ConfigureCertificationInput, opts ...grpc.CallOption) (*ConfigureCertificationOutput, error)
	DescribeTaxonomy(ctx context.Context, in *DescribeTaxonomyInput, opts ...grpc.CallOption) (*DescribeTaxonomyOutput, error)
	ConfigureTaxonomy(ctx context.Context, in *ConfigureTaxonomyInput, opts ...grpc.CallOption) (*ConfigureTaxonomyOutput, error)
}

type configurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationServiceClient(cc grpc.ClientConnInterface) ConfigurationServiceClient {
	return &configurationServiceClient{cc}
}

func (c *configurationServiceClient) DescribeEnvironment(ctx context.Context, in *DescribeEnvironmentInput, opts ...grpc.CallOption) (*DescribeEnvironmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEnvironmentOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_DescribeEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) ConfigureEnvironment(ctx context.Context, in *ConfigureEnvironmentInput, opts ...grpc.CallOption) (*ConfigureEnvironmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureEnvironmentOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_ConfigureEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) DescribeCertification(ctx context.Context, in *DescribeCertificationInput, opts ...grpc.CallOption) (*DescribeCertificationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCertificationOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_DescribeCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) ConfigureCertification(ctx context.Context, in *ConfigureCertificationInput, opts ...grpc.CallOption) (*ConfigureCertificationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureCertificationOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_ConfigureCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) DescribeTaxonomy(ctx context.Context, in *DescribeTaxonomyInput, opts ...grpc.CallOption) (*DescribeTaxonomyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTaxonomyOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_DescribeTaxonomy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) ConfigureTaxonomy(ctx context.Context, in *ConfigureTaxonomyInput, opts ...grpc.CallOption) (*ConfigureTaxonomyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureTaxonomyOutput)
	err := c.cc.Invoke(ctx, ConfigurationService_ConfigureTaxonomy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServiceServer is the server API for ConfigurationService service.
// All implementations should embed UnimplementedConfigurationServiceServer
// for forward compatibility.
type ConfigurationServiceServer interface {
	DescribeEnvironment(context.Context, *DescribeEnvironmentInput) (*DescribeEnvironmentOutput, error)
	ConfigureEnvironment(context.Context, *ConfigureEnvironmentInput) (*ConfigureEnvironmentOutput, error)
	DescribeCertification(context.Context, *DescribeCertificationInput) (*DescribeCertificationOutput, error)
	ConfigureCertification(context.Context, *ConfigureCertificationInput) (*ConfigureCertificationOutput, error)
	DescribeTaxonomy(context.Context, *DescribeTaxonomyInput) (*DescribeTaxonomyOutput, error)
	ConfigureTaxonomy(context.Context, *ConfigureTaxonomyInput) (*ConfigureTaxonomyOutput, error)
}

// UnimplementedConfigurationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigurationServiceServer struct{}

func (UnimplementedConfigurationServiceServer) DescribeEnvironment(context.Context, *DescribeEnvironmentInput) (*DescribeEnvironmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEnvironment not implemented")
}
func (UnimplementedConfigurationServiceServer) ConfigureEnvironment(context.Context, *ConfigureEnvironmentInput) (*ConfigureEnvironmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureEnvironment not implemented")
}
func (UnimplementedConfigurationServiceServer) DescribeCertification(context.Context, *DescribeCertificationInput) (*DescribeCertificationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCertification not implemented")
}
func (UnimplementedConfigurationServiceServer) ConfigureCertification(context.Context, *ConfigureCertificationInput) (*ConfigureCertificationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCertification not implemented")
}
func (UnimplementedConfigurationServiceServer) DescribeTaxonomy(context.Context, *DescribeTaxonomyInput) (*DescribeTaxonomyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTaxonomy not implemented")
}
func (UnimplementedConfigurationServiceServer) ConfigureTaxonomy(context.Context, *ConfigureTaxonomyInput) (*ConfigureTaxonomyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTaxonomy not implemented")
}
func (UnimplementedConfigurationServiceServer) testEmbeddedByValue() {}

// UnsafeConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServiceServer will
// result in compilation errors.
type UnsafeConfigurationServiceServer interface {
	mustEmbedUnimplementedConfigurationServiceServer()
}

func RegisterConfigurationServiceServer(s grpc.ServiceRegistrar, srv ConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigurationService_ServiceDesc, srv)
}

func _ConfigurationService_DescribeEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEnvironmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).DescribeEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_DescribeEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).DescribeEnvironment(ctx, req.(*DescribeEnvironmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_ConfigureEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureEnvironmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).ConfigureEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_ConfigureEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).ConfigureEnvironment(ctx, req.(*ConfigureEnvironmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_DescribeCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCertificationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).DescribeCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_DescribeCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).DescribeCertification(ctx, req.(*DescribeCertificationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_ConfigureCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureCertificationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).ConfigureCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_ConfigureCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).ConfigureCertification(ctx, req.(*ConfigureCertificationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_DescribeTaxonomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTaxonomyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).DescribeTaxonomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_DescribeTaxonomy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).DescribeTaxonomy(ctx, req.(*DescribeTaxonomyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_ConfigureTaxonomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTaxonomyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).ConfigureTaxonomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_ConfigureTaxonomy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).ConfigureTaxonomy(ctx, req.(*ConfigureTaxonomyInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigurationService_ServiceDesc is the grpc.ServiceDesc for ConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.judge.ConfigurationService",
	HandlerType: (*ConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeEnvironment",
			Handler:    _ConfigurationService_DescribeEnvironment_Handler,
		},
		{
			MethodName: "ConfigureEnvironment",
			Handler:    _ConfigurationService_ConfigureEnvironment_Handler,
		},
		{
			MethodName: "DescribeCertification",
			Handler:    _ConfigurationService_DescribeCertification_Handler,
		},
		{
			MethodName: "ConfigureCertification",
			Handler:    _ConfigurationService_ConfigureCertification_Handler,
		},
		{
			MethodName: "DescribeTaxonomy",
			Handler:    _ConfigurationService_DescribeTaxonomy_Handler,
		},
		{
			MethodName: "ConfigureTaxonomy",
			Handler:    _ConfigurationService_ConfigureTaxonomy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/judge/configuration_service.proto",
}
