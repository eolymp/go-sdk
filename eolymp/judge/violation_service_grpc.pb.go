// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/judge/violation_service.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ViolationService_CreateViolation_FullMethodName   = "/eolymp.judge.ViolationService/CreateViolation"
	ViolationService_UpdateViolation_FullMethodName   = "/eolymp.judge.ViolationService/UpdateViolation"
	ViolationService_DeleteViolation_FullMethodName   = "/eolymp.judge.ViolationService/DeleteViolation"
	ViolationService_DescribeViolation_FullMethodName = "/eolymp.judge.ViolationService/DescribeViolation"
	ViolationService_ListViolations_FullMethodName    = "/eolymp.judge.ViolationService/ListViolations"
)

// ViolationServiceClient is the client API for ViolationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViolationServiceClient interface {
	CreateViolation(ctx context.Context, in *CreateViolationInput, opts ...grpc.CallOption) (*CreateViolationOutput, error)
	UpdateViolation(ctx context.Context, in *UpdateViolationInput, opts ...grpc.CallOption) (*UpdateViolationOutput, error)
	DeleteViolation(ctx context.Context, in *DeleteViolationInput, opts ...grpc.CallOption) (*DeleteViolationOutput, error)
	DescribeViolation(ctx context.Context, in *DescribeViolationInput, opts ...grpc.CallOption) (*DescribeViolationOutput, error)
	ListViolations(ctx context.Context, in *ListViolationsInput, opts ...grpc.CallOption) (*ListViolationsOutput, error)
}

type violationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViolationServiceClient(cc grpc.ClientConnInterface) ViolationServiceClient {
	return &violationServiceClient{cc}
}

func (c *violationServiceClient) CreateViolation(ctx context.Context, in *CreateViolationInput, opts ...grpc.CallOption) (*CreateViolationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateViolationOutput)
	err := c.cc.Invoke(ctx, ViolationService_CreateViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) UpdateViolation(ctx context.Context, in *UpdateViolationInput, opts ...grpc.CallOption) (*UpdateViolationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViolationOutput)
	err := c.cc.Invoke(ctx, ViolationService_UpdateViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) DeleteViolation(ctx context.Context, in *DeleteViolationInput, opts ...grpc.CallOption) (*DeleteViolationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteViolationOutput)
	err := c.cc.Invoke(ctx, ViolationService_DeleteViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) DescribeViolation(ctx context.Context, in *DescribeViolationInput, opts ...grpc.CallOption) (*DescribeViolationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeViolationOutput)
	err := c.cc.Invoke(ctx, ViolationService_DescribeViolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *violationServiceClient) ListViolations(ctx context.Context, in *ListViolationsInput, opts ...grpc.CallOption) (*ListViolationsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListViolationsOutput)
	err := c.cc.Invoke(ctx, ViolationService_ListViolations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViolationServiceServer is the server API for ViolationService service.
// All implementations should embed UnimplementedViolationServiceServer
// for forward compatibility.
type ViolationServiceServer interface {
	CreateViolation(context.Context, *CreateViolationInput) (*CreateViolationOutput, error)
	UpdateViolation(context.Context, *UpdateViolationInput) (*UpdateViolationOutput, error)
	DeleteViolation(context.Context, *DeleteViolationInput) (*DeleteViolationOutput, error)
	DescribeViolation(context.Context, *DescribeViolationInput) (*DescribeViolationOutput, error)
	ListViolations(context.Context, *ListViolationsInput) (*ListViolationsOutput, error)
}

// UnimplementedViolationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedViolationServiceServer struct{}

func (UnimplementedViolationServiceServer) CreateViolation(context.Context, *CreateViolationInput) (*CreateViolationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateViolation not implemented")
}
func (UnimplementedViolationServiceServer) UpdateViolation(context.Context, *UpdateViolationInput) (*UpdateViolationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViolation not implemented")
}
func (UnimplementedViolationServiceServer) DeleteViolation(context.Context, *DeleteViolationInput) (*DeleteViolationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteViolation not implemented")
}
func (UnimplementedViolationServiceServer) DescribeViolation(context.Context, *DescribeViolationInput) (*DescribeViolationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeViolation not implemented")
}
func (UnimplementedViolationServiceServer) ListViolations(context.Context, *ListViolationsInput) (*ListViolationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViolations not implemented")
}
func (UnimplementedViolationServiceServer) testEmbeddedByValue() {}

// UnsafeViolationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViolationServiceServer will
// result in compilation errors.
type UnsafeViolationServiceServer interface {
	mustEmbedUnimplementedViolationServiceServer()
}

func RegisterViolationServiceServer(s grpc.ServiceRegistrar, srv ViolationServiceServer) {
	// If the following call pancis, it indicates UnimplementedViolationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ViolationService_ServiceDesc, srv)
}

func _ViolationService_CreateViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViolationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).CreateViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_CreateViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).CreateViolation(ctx, req.(*CreateViolationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_UpdateViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViolationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).UpdateViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_UpdateViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).UpdateViolation(ctx, req.(*UpdateViolationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_DeleteViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViolationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).DeleteViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_DeleteViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).DeleteViolation(ctx, req.(*DeleteViolationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_DescribeViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeViolationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).DescribeViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_DescribeViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).DescribeViolation(ctx, req.(*DescribeViolationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViolationService_ListViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViolationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViolationServiceServer).ListViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViolationService_ListViolations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViolationServiceServer).ListViolations(ctx, req.(*ListViolationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ViolationService_ServiceDesc is the grpc.ServiceDesc for ViolationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViolationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.judge.ViolationService",
	HandlerType: (*ViolationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateViolation",
			Handler:    _ViolationService_CreateViolation_Handler,
		},
		{
			MethodName: "UpdateViolation",
			Handler:    _ViolationService_UpdateViolation_Handler,
		},
		{
			MethodName: "DeleteViolation",
			Handler:    _ViolationService_DeleteViolation_Handler,
		},
		{
			MethodName: "DescribeViolation",
			Handler:    _ViolationService_DescribeViolation_Handler,
		},
		{
			MethodName: "ListViolations",
			Handler:    _ViolationService_ListViolations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/judge/violation_service.proto",
}
