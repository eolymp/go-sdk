// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v4.24.4
// source: eolymp/judge/problem.proto

package judge

import (
	atlas "github.com/eolymp/go-sdk/eolymp/atlas"
	ecm "github.com/eolymp/go-sdk/eolymp/ecm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Problem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // globally problem ID
	Url                string                 `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Index              uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                // problem index within contest
	Score              float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`               // score for solving problem
	BaseId             string                 `protobuf:"bytes,4,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"` // ID of the problem in database achieve
	BaseNumber         uint32                 `protobuf:"varint,45,opt,name=base_number,json=baseNumber,proto3" json:"base_number,omitempty"`
	BaseSpaceId        string                 `protobuf:"bytes,40,opt,name=base_space_id,json=baseSpaceId,proto3" json:"base_space_id,omitempty"`
	ContestId          string                 `protobuf:"bytes,5,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`                                                   // contest
	FeedbackPolicy     atlas.FeedbackPolicy   `protobuf:"varint,10,opt,name=feedback_policy,json=feedbackPolicy,proto3,enum=eolymp.atlas.FeedbackPolicy" json:"feedback_policy,omitempty"` // defines feedback policy for the problem
	TimeLimit          uint32                 `protobuf:"varint,200,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`                                                // in milliseconds
	CpuLimit           uint32                 `protobuf:"varint,204,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`                                                   // in milliseconds
	MemoryLimit        uint64                 `protobuf:"varint,201,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`                                          // in bytes
	FileSizeLimit      uint64                 `protobuf:"varint,202,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"`                                  // in bytes
	SubmitLimit        uint32                 `protobuf:"varint,203,opt,name=submit_limit,json=submitLimit,proto3" json:"submit_limit,omitempty"`                                          // in number of submits
	ScoreByBestTestset bool                   `protobuf:"varint,210,opt,name=score_by_best_testset,json=scoreByBestTestset,proto3" json:"score_by_best_testset,omitempty"`                 // problem score is calculated as sum of best score in each testset (best among all submissions)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_eolymp_judge_problem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_problem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_problem_proto_rawDescGZIP(), []int{0}
}

func (x *Problem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Problem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Problem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Problem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Problem) GetBaseId() string {
	if x != nil {
		return x.BaseId
	}
	return ""
}

func (x *Problem) GetBaseNumber() uint32 {
	if x != nil {
		return x.BaseNumber
	}
	return 0
}

func (x *Problem) GetBaseSpaceId() string {
	if x != nil {
		return x.BaseSpaceId
	}
	return ""
}

func (x *Problem) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *Problem) GetFeedbackPolicy() atlas.FeedbackPolicy {
	if x != nil {
		return x.FeedbackPolicy
	}
	return atlas.FeedbackPolicy(0)
}

func (x *Problem) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Problem) GetCpuLimit() uint32 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *Problem) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Problem) GetFileSizeLimit() uint64 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

func (x *Problem) GetSubmitLimit() uint32 {
	if x != nil {
		return x.SubmitLimit
	}
	return 0
}

func (x *Problem) GetScoreByBestTestset() bool {
	if x != nil {
		return x.ScoreByBestTestset
	}
	return false
}

// Statement is localized problem statement
type Problem_Statement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locale        string                 `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       *ecm.Node              `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	DownloadLink  string                 `protobuf:"bytes,6,opt,name=download_link,json=downloadLink,proto3" json:"download_link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Problem_Statement) Reset() {
	*x = Problem_Statement{}
	mi := &file_eolymp_judge_problem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem_Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem_Statement) ProtoMessage() {}

func (x *Problem_Statement) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_problem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem_Statement.ProtoReflect.Descriptor instead.
func (*Problem_Statement) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_problem_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Problem_Statement) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Problem_Statement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem_Statement) GetContent() *ecm.Node {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Problem_Statement) GetDownloadLink() string {
	if x != nil {
		return x.DownloadLink
	}
	return ""
}

// Test defines set of input and answer data
type Problem_Test struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Example       bool                   `protobuf:"varint,2,opt,name=example,proto3" json:"example,omitempty"`
	InputUrl      string                 `protobuf:"bytes,13,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	AnswerUrl     string                 `protobuf:"bytes,14,opt,name=answer_url,json=answerUrl,proto3" json:"answer_url,omitempty"`
	Score         float32                `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Problem_Test) Reset() {
	*x = Problem_Test{}
	mi := &file_eolymp_judge_problem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem_Test) ProtoMessage() {}

func (x *Problem_Test) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_problem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem_Test.ProtoReflect.Descriptor instead.
func (*Problem_Test) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_problem_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Problem_Test) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Problem_Test) GetExample() bool {
	if x != nil {
		return x.Example
	}
	return false
}

func (x *Problem_Test) GetInputUrl() string {
	if x != nil {
		return x.InputUrl
	}
	return ""
}

func (x *Problem_Test) GetAnswerUrl() string {
	if x != nil {
		return x.AnswerUrl
	}
	return ""
}

func (x *Problem_Test) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// attachment to the problem statement
type Problem_Attachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Link          string                 `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Problem_Attachment) Reset() {
	*x = Problem_Attachment{}
	mi := &file_eolymp_judge_problem_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem_Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem_Attachment) ProtoMessage() {}

func (x *Problem_Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_problem_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem_Attachment.ProtoReflect.Descriptor instead.
func (*Problem_Attachment) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_problem_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Problem_Attachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Problem_Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problem_Attachment) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

var File_eolymp_judge_problem_proto protoreflect.FileDescriptor

var file_eolymp_judge_problem_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x23, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65, 0x63, 0x6d, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x5f,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x42, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x1a, 0x8a, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x63,
	0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x88, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x44, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_judge_problem_proto_rawDescOnce sync.Once
	file_eolymp_judge_problem_proto_rawDescData = file_eolymp_judge_problem_proto_rawDesc
)

func file_eolymp_judge_problem_proto_rawDescGZIP() []byte {
	file_eolymp_judge_problem_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_problem_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_problem_proto_rawDescData)
	})
	return file_eolymp_judge_problem_proto_rawDescData
}

var file_eolymp_judge_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_eolymp_judge_problem_proto_goTypes = []any{
	(*Problem)(nil),            // 0: eolymp.judge.Problem
	(*Problem_Statement)(nil),  // 1: eolymp.judge.Problem.Statement
	(*Problem_Test)(nil),       // 2: eolymp.judge.Problem.Test
	(*Problem_Attachment)(nil), // 3: eolymp.judge.Problem.Attachment
	(atlas.FeedbackPolicy)(0),  // 4: eolymp.atlas.FeedbackPolicy
	(*ecm.Node)(nil),           // 5: eolymp.ecm.Node
}
var file_eolymp_judge_problem_proto_depIdxs = []int32{
	4, // 0: eolymp.judge.Problem.feedback_policy:type_name -> eolymp.atlas.FeedbackPolicy
	5, // 1: eolymp.judge.Problem.Statement.content:type_name -> eolymp.ecm.Node
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_eolymp_judge_problem_proto_init() }
func file_eolymp_judge_problem_proto_init() {
	if File_eolymp_judge_problem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_problem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_problem_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_problem_proto_depIdxs,
		MessageInfos:      file_eolymp_judge_problem_proto_msgTypes,
	}.Build()
	File_eolymp_judge_problem_proto = out.File
	file_eolymp_judge_problem_proto_rawDesc = nil
	file_eolymp_judge_problem_proto_goTypes = nil
	file_eolymp_judge_problem_proto_depIdxs = nil
}
