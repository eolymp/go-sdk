// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: eolymp/judge/result.proto

package judge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId string `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	MemberId      string `protobuf:"bytes,7,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	ContestId     string `protobuf:"bytes,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Unofficial    bool   `protobuf:"varint,4,opt,name=unofficial,proto3" json:"unofficial,omitempty"`
	Disqualified  bool   `protobuf:"varint,11,opt,name=disqualified,proto3" json:"disqualified,omitempty"`
	Ghost         bool   `protobuf:"varint,9,opt,name=ghost,proto3" json:"ghost,omitempty"`
	Medal         Medal  `protobuf:"varint,8,opt,name=medal,proto3,enum=eolymp.judge.Medal" json:"medal,omitempty"`
	Rank          uint32 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	RankLower     uint32 `protobuf:"varint,6,opt,name=rank_lower,json=rankLower,proto3" json:"rank_lower,omitempty"`
	Score         *Score `protobuf:"bytes,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_result_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *Result) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *Result) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *Result) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Result) GetUnofficial() bool {
	if x != nil {
		return x.Unofficial
	}
	return false
}

func (x *Result) GetDisqualified() bool {
	if x != nil {
		return x.Disqualified
	}
	return false
}

func (x *Result) GetGhost() bool {
	if x != nil {
		return x.Ghost
	}
	return false
}

func (x *Result) GetMedal() Medal {
	if x != nil {
		return x.Medal
	}
	return Medal_NO_MEDAL
}

func (x *Result) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Result) GetRankLower() uint32 {
	if x != nil {
		return x.RankLower
	}
	return 0
}

func (x *Result) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type ResultV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId     string                 `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	DisplayName  string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Picture      string                 `protobuf:"bytes,3,opt,name=picture,proto3" json:"picture,omitempty"`
	Country      string                 `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Unofficial   bool                   `protobuf:"varint,10,opt,name=unofficial,proto3" json:"unofficial,omitempty"`
	Disqualified bool                   `protobuf:"varint,11,opt,name=disqualified,proto3" json:"disqualified,omitempty"`
	Ghost        bool                   `protobuf:"varint,12,opt,name=ghost,proto3" json:"ghost,omitempty"`
	Medal        Medal                  `protobuf:"varint,13,opt,name=medal,proto3,enum=eolymp.judge.Medal" json:"medal,omitempty"`
	Index        uint32                 `protobuf:"varint,20,opt,name=index,proto3" json:"index,omitempty"`
	Rank         uint32                 `protobuf:"varint,21,opt,name=rank,proto3" json:"rank,omitempty"`
	RankTo       uint32                 `protobuf:"varint,22,opt,name=rank_to,json=rankTo,proto3" json:"rank_to,omitempty"`
	Score        float32                `protobuf:"fixed32,50,opt,name=score,proto3" json:"score,omitempty"`
	Penalty      float32                `protobuf:"fixed32,51,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Breakdown    []*ResultV2_RoundScore `protobuf:"bytes,52,rep,name=breakdown,proto3" json:"breakdown,omitempty"`
	Cursor       string                 `protobuf:"bytes,100,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ResultV2) Reset() {
	*x = ResultV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultV2) ProtoMessage() {}

func (x *ResultV2) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultV2.ProtoReflect.Descriptor instead.
func (*ResultV2) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_result_proto_rawDescGZIP(), []int{1}
}

func (x *ResultV2) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ResultV2) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResultV2) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *ResultV2) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ResultV2) GetUnofficial() bool {
	if x != nil {
		return x.Unofficial
	}
	return false
}

func (x *ResultV2) GetDisqualified() bool {
	if x != nil {
		return x.Disqualified
	}
	return false
}

func (x *ResultV2) GetGhost() bool {
	if x != nil {
		return x.Ghost
	}
	return false
}

func (x *ResultV2) GetMedal() Medal {
	if x != nil {
		return x.Medal
	}
	return Medal_NO_MEDAL
}

func (x *ResultV2) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResultV2) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResultV2) GetRankTo() uint32 {
	if x != nil {
		return x.RankTo
	}
	return 0
}

func (x *ResultV2) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultV2) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *ResultV2) GetBreakdown() []*ResultV2_RoundScore {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

func (x *ResultV2) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ResultV2_ProblemScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string  `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Solved    bool    `protobuf:"varint,4,opt,name=solved,proto3" json:"solved,omitempty"`
	Score     float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Penalty   float32 `protobuf:"fixed32,3,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Attempts  uint32  `protobuf:"varint,7,opt,name=attempts,proto3" json:"attempts,omitempty"`
	SolvedIn  uint32  `protobuf:"varint,9,opt,name=solved_in,json=solvedIn,proto3" json:"solved_in,omitempty"`
}

func (x *ResultV2_ProblemScore) Reset() {
	*x = ResultV2_ProblemScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultV2_ProblemScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultV2_ProblemScore) ProtoMessage() {}

func (x *ResultV2_ProblemScore) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultV2_ProblemScore.ProtoReflect.Descriptor instead.
func (*ResultV2_ProblemScore) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_result_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ResultV2_ProblemScore) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ResultV2_ProblemScore) GetSolved() bool {
	if x != nil {
		return x.Solved
	}
	return false
}

func (x *ResultV2_ProblemScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultV2_ProblemScore) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *ResultV2_ProblemScore) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *ResultV2_ProblemScore) GetSolvedIn() uint32 {
	if x != nil {
		return x.SolvedIn
	}
	return 0
}

type ResultV2_RoundScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId   string                   `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Score     float32                  `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Penalty   float32                  `protobuf:"fixed32,3,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Breakdown []*ResultV2_ProblemScore `protobuf:"bytes,10,rep,name=breakdown,proto3" json:"breakdown,omitempty"`
}

func (x *ResultV2_RoundScore) Reset() {
	*x = ResultV2_RoundScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultV2_RoundScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultV2_RoundScore) ProtoMessage() {}

func (x *ResultV2_RoundScore) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultV2_RoundScore.ProtoReflect.Descriptor instead.
func (*ResultV2_RoundScore) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_result_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ResultV2_RoundScore) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *ResultV2_RoundScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultV2_RoundScore) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *ResultV2_RoundScore) GetBreakdown() []*ResultV2_ProblemScore {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

var File_eolymp_judge_result_proto protoreflect.FileDescriptor

var file_eolymp_judge_result_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x02,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x9d, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x61,
	0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x1a, 0xae, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x1a, 0x9a, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_judge_result_proto_rawDescOnce sync.Once
	file_eolymp_judge_result_proto_rawDescData = file_eolymp_judge_result_proto_rawDesc
)

func file_eolymp_judge_result_proto_rawDescGZIP() []byte {
	file_eolymp_judge_result_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_result_proto_rawDescData)
	})
	return file_eolymp_judge_result_proto_rawDescData
}

var file_eolymp_judge_result_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_eolymp_judge_result_proto_goTypes = []any{
	(*Result)(nil),                // 0: eolymp.judge.Result
	(*ResultV2)(nil),              // 1: eolymp.judge.ResultV2
	(*ResultV2_ProblemScore)(nil), // 2: eolymp.judge.ResultV2.ProblemScore
	(*ResultV2_RoundScore)(nil),   // 3: eolymp.judge.ResultV2.RoundScore
	(Medal)(0),                    // 4: eolymp.judge.Medal
	(*Score)(nil),                 // 5: eolymp.judge.Score
}
var file_eolymp_judge_result_proto_depIdxs = []int32{
	4, // 0: eolymp.judge.Result.medal:type_name -> eolymp.judge.Medal
	5, // 1: eolymp.judge.Result.score:type_name -> eolymp.judge.Score
	4, // 2: eolymp.judge.ResultV2.medal:type_name -> eolymp.judge.Medal
	3, // 3: eolymp.judge.ResultV2.breakdown:type_name -> eolymp.judge.ResultV2.RoundScore
	2, // 4: eolymp.judge.ResultV2.RoundScore.breakdown:type_name -> eolymp.judge.ResultV2.ProblemScore
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_eolymp_judge_result_proto_init() }
func file_eolymp_judge_result_proto_init() {
	if File_eolymp_judge_result_proto != nil {
		return
	}
	file_eolymp_judge_medal_proto_init()
	file_eolymp_judge_score_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_judge_result_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_result_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResultV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_result_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ResultV2_ProblemScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_result_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResultV2_RoundScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_result_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_result_proto_depIdxs,
		MessageInfos:      file_eolymp_judge_result_proto_msgTypes,
	}.Build()
	File_eolymp_judge_result_proto = out.File
	file_eolymp_judge_result_proto_rawDesc = nil
	file_eolymp_judge_result_proto_goTypes = nil
	file_eolymp_judge_result_proto_depIdxs = nil
}
