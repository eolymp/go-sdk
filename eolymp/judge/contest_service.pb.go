// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: eolymp/judge/contest_service.proto

package judge

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateContestInput_Patch int32

const (
	UpdateContestInput_ALL                      UpdateContestInput_Patch = 0
	UpdateContestInput_NAME                     UpdateContestInput_Patch = 2
	UpdateContestInput_STARTS_AT                UpdateContestInput_Patch = 3
	UpdateContestInput_ENDS_AT                  UpdateContestInput_Patch = 4
	UpdateContestInput_DURATION                 UpdateContestInput_Patch = 5
	UpdateContestInput_VISIBILITY               UpdateContestInput_Patch = 6
	UpdateContestInput_JOIN_UNOFFICIALLY        UpdateContestInput_Patch = 7
	UpdateContestInput_PARTICIPATION_MODE       UpdateContestInput_Patch = 8
	UpdateContestInput_FORMAT                   UpdateContestInput_Patch = 10
	UpdateContestInput_KEY                      UpdateContestInput_Patch = 11
	UpdateContestInput_LOGO_URL                 UpdateContestInput_Patch = 14
	UpdateContestInput_PROBLEM_COUNT_HIDDEN     UpdateContestInput_Patch = 12
	UpdateContestInput_PARTICIPANT_COUNT_HIDDEN UpdateContestInput_Patch = 13
	UpdateContestInput_FEATURED_UNTIL           UpdateContestInput_Patch = 9
	UpdateContestInput_PRINTER                  UpdateContestInput_Patch = 15
	UpdateContestInput_TAXONOMY                 UpdateContestInput_Patch = 140
	UpdateContestInput_APPEARANCE               UpdateContestInput_Patch = 110
	UpdateContestInput_ENVIRONMENT              UpdateContestInput_Patch = 130
	UpdateContestInput_UPSOLVE                  UpdateContestInput_Patch = 120
	UpdateContestInput_SCOREBOARD               UpdateContestInput_Patch = 150
)

// Enum value maps for UpdateContestInput_Patch.
var (
	UpdateContestInput_Patch_name = map[int32]string{
		0:   "ALL",
		2:   "NAME",
		3:   "STARTS_AT",
		4:   "ENDS_AT",
		5:   "DURATION",
		6:   "VISIBILITY",
		7:   "JOIN_UNOFFICIALLY",
		8:   "PARTICIPATION_MODE",
		10:  "FORMAT",
		11:  "KEY",
		14:  "LOGO_URL",
		12:  "PROBLEM_COUNT_HIDDEN",
		13:  "PARTICIPANT_COUNT_HIDDEN",
		9:   "FEATURED_UNTIL",
		15:  "PRINTER",
		140: "TAXONOMY",
		110: "APPEARANCE",
		130: "ENVIRONMENT",
		120: "UPSOLVE",
		150: "SCOREBOARD",
	}
	UpdateContestInput_Patch_value = map[string]int32{
		"ALL":                      0,
		"NAME":                     2,
		"STARTS_AT":                3,
		"ENDS_AT":                  4,
		"DURATION":                 5,
		"VISIBILITY":               6,
		"JOIN_UNOFFICIALLY":        7,
		"PARTICIPATION_MODE":       8,
		"FORMAT":                   10,
		"KEY":                      11,
		"LOGO_URL":                 14,
		"PROBLEM_COUNT_HIDDEN":     12,
		"PARTICIPANT_COUNT_HIDDEN": 13,
		"FEATURED_UNTIL":           9,
		"PRINTER":                  15,
		"TAXONOMY":                 140,
		"APPEARANCE":               110,
		"ENVIRONMENT":              130,
		"UPSOLVE":                  120,
		"SCOREBOARD":               150,
	}
)

func (x UpdateContestInput_Patch) Enum() *UpdateContestInput_Patch {
	p := new(UpdateContestInput_Patch)
	*p = x
	return p
}

func (x UpdateContestInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateContestInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_service_proto_enumTypes[0].Descriptor()
}

func (UpdateContestInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_service_proto_enumTypes[0]
}

func (x UpdateContestInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateContestInput_Patch.Descriptor instead.
func (UpdateContestInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{4, 0}
}

type CopyContestInput_Scope int32

const (
	CopyContestInput_ALL           CopyContestInput_Scope = 0
	CopyContestInput_CONFIGURATION CopyContestInput_Scope = 1 // scoreboard, appearance, environment etc
	CopyContestInput_PROBLEMS      CopyContestInput_Scope = 2 // problems
	CopyContestInput_PARTICIPANTS  CopyContestInput_Scope = 3 // participants (without results)
	CopyContestInput_PERMISSIONS   CopyContestInput_Scope = 4 // permissions
)

// Enum value maps for CopyContestInput_Scope.
var (
	CopyContestInput_Scope_name = map[int32]string{
		0: "ALL",
		1: "CONFIGURATION",
		2: "PROBLEMS",
		3: "PARTICIPANTS",
		4: "PERMISSIONS",
	}
	CopyContestInput_Scope_value = map[string]int32{
		"ALL":           0,
		"CONFIGURATION": 1,
		"PROBLEMS":      2,
		"PARTICIPANTS":  3,
		"PERMISSIONS":   4,
	}
)

func (x CopyContestInput_Scope) Enum() *CopyContestInput_Scope {
	p := new(CopyContestInput_Scope)
	*p = x
	return p
}

func (x CopyContestInput_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyContestInput_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_service_proto_enumTypes[1].Descriptor()
}

func (CopyContestInput_Scope) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_service_proto_enumTypes[1]
}

func (x CopyContestInput_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyContestInput_Scope.Descriptor instead.
func (CopyContestInput_Scope) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{6, 0}
}

type CreateContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contest       *Contest               `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContestInput) Reset() {
	*x = CreateContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestInput) ProtoMessage() {}

func (x *CreateContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestInput.ProtoReflect.Descriptor instead.
func (*CreateContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContestInput) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type CreateContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateContestOutput) Reset() {
	*x = CreateContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContestOutput) ProtoMessage() {}

func (x *CreateContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContestOutput.ProtoReflect.Descriptor instead.
func (*CreateContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateContestOutput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type DeleteContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteContestInput) Reset() {
	*x = DeleteContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContestInput) ProtoMessage() {}

func (x *DeleteContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContestInput.ProtoReflect.Descriptor instead.
func (*DeleteContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type DeleteContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteContestOutput) Reset() {
	*x = DeleteContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContestOutput) ProtoMessage() {}

func (x *DeleteContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContestOutput.ProtoReflect.Descriptor instead.
func (*DeleteContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{3}
}

type UpdateContestInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// specify list of fields to update, if empty all fields are updated
	Patch         []UpdateContestInput_Patch `protobuf:"varint,3,rep,packed,name=patch,proto3,enum=eolymp.judge.UpdateContestInput_Patch" json:"patch,omitempty"`
	ContestId     string                     `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Contest       *Contest                   `protobuf:"bytes,2,opt,name=contest,proto3" json:"contest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContestInput) Reset() {
	*x = UpdateContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestInput) ProtoMessage() {}

func (x *UpdateContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestInput.ProtoReflect.Descriptor instead.
func (*UpdateContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateContestInput) GetPatch() []UpdateContestInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *UpdateContestInput) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type UpdateContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContestOutput) Reset() {
	*x = UpdateContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContestOutput) ProtoMessage() {}

func (x *UpdateContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContestOutput.ProtoReflect.Descriptor instead.
func (*UpdateContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{5}
}

type CopyContestInput struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	ContestId      string                   `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	CopyScope      []CopyContestInput_Scope `protobuf:"varint,2,rep,packed,name=copy_scope,json=copyScope,proto3,enum=eolymp.judge.CopyContestInput_Scope" json:"copy_scope,omitempty"`
	CopyName       string                   `protobuf:"bytes,3,opt,name=copy_name,json=copyName,proto3" json:"copy_name,omitempty"`
	CopyVisibility Contest_Visibility       `protobuf:"varint,4,opt,name=copy_visibility,json=copyVisibility,proto3,enum=eolymp.judge.Contest_Visibility" json:"copy_visibility,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CopyContestInput) Reset() {
	*x = CopyContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContestInput) ProtoMessage() {}

func (x *CopyContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContestInput.ProtoReflect.Descriptor instead.
func (*CopyContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{6}
}

func (x *CopyContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *CopyContestInput) GetCopyScope() []CopyContestInput_Scope {
	if x != nil {
		return x.CopyScope
	}
	return nil
}

func (x *CopyContestInput) GetCopyName() string {
	if x != nil {
		return x.CopyName
	}
	return ""
}

func (x *CopyContestInput) GetCopyVisibility() Contest_Visibility {
	if x != nil {
		return x.CopyVisibility
	}
	return Contest_VISIBILITY_UNKNOWN
}

type CopyContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CopyContestId string                 `protobuf:"bytes,1,opt,name=copy_contest_id,json=copyContestId,proto3" json:"copy_contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyContestOutput) Reset() {
	*x = CopyContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContestOutput) ProtoMessage() {}

func (x *CopyContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContestOutput.ProtoReflect.Descriptor instead.
func (*CopyContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{7}
}

func (x *CopyContestOutput) GetCopyContestId() string {
	if x != nil {
		return x.CopyContestId
	}
	return ""
}

type DescribeContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeContestInput) Reset() {
	*x = DescribeContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContestInput) ProtoMessage() {}

func (x *DescribeContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContestInput.ProtoReflect.Descriptor instead.
func (*DescribeContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type DescribeContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contest       *Contest               `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeContestOutput) Reset() {
	*x = DescribeContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContestOutput) ProtoMessage() {}

func (x *DescribeContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContestOutput.ProtoReflect.Descriptor instead.
func (*DescribeContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeContestOutput) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ListContestsInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Search        string                    `protobuf:"bytes,20,opt,name=search,proto3" json:"search,omitempty"`
	Filters       *ListContestsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContestsInput) Reset() {
	*x = ListContestsInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContestsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestsInput) ProtoMessage() {}

func (x *ListContestsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestsInput.ProtoReflect.Descriptor instead.
func (*ListContestsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListContestsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListContestsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListContestsInput) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListContestsInput) GetFilters() *ListContestsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListContestsOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Contest             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContestsOutput) Reset() {
	*x = ListContestsOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContestsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestsOutput) ProtoMessage() {}

func (x *ListContestsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestsOutput.ProtoReflect.Descriptor instead.
func (*ListContestsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListContestsOutput) GetItems() []*Contest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListContestsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OpenContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenContestInput) Reset() {
	*x = OpenContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContestInput) ProtoMessage() {}

func (x *OpenContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContestInput.ProtoReflect.Descriptor instead.
func (*OpenContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{12}
}

func (x *OpenContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type OpenContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenContestOutput) Reset() {
	*x = OpenContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContestOutput) ProtoMessage() {}

func (x *OpenContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContestOutput.ProtoReflect.Descriptor instead.
func (*OpenContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{13}
}

type CloseContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseContestInput) Reset() {
	*x = CloseContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseContestInput) ProtoMessage() {}

func (x *CloseContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseContestInput.ProtoReflect.Descriptor instead.
func (*CloseContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{14}
}

func (x *CloseContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type CloseContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseContestOutput) Reset() {
	*x = CloseContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseContestOutput) ProtoMessage() {}

func (x *CloseContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseContestOutput.ProtoReflect.Descriptor instead.
func (*CloseContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{15}
}

type SuspendContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendContestInput) Reset() {
	*x = SuspendContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendContestInput) ProtoMessage() {}

func (x *SuspendContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendContestInput.ProtoReflect.Descriptor instead.
func (*SuspendContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{16}
}

func (x *SuspendContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type SuspendContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendContestOutput) Reset() {
	*x = SuspendContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendContestOutput) ProtoMessage() {}

func (x *SuspendContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendContestOutput.ProtoReflect.Descriptor instead.
func (*SuspendContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{17}
}

type FreezeContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreezeContestInput) Reset() {
	*x = FreezeContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreezeContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeContestInput) ProtoMessage() {}

func (x *FreezeContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeContestInput.ProtoReflect.Descriptor instead.
func (*FreezeContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{18}
}

func (x *FreezeContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type FreezeContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreezeContestOutput) Reset() {
	*x = FreezeContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreezeContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeContestOutput) ProtoMessage() {}

func (x *FreezeContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeContestOutput.ProtoReflect.Descriptor instead.
func (*FreezeContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{19}
}

type ResumeContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeContestInput) Reset() {
	*x = ResumeContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeContestInput) ProtoMessage() {}

func (x *ResumeContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeContestInput.ProtoReflect.Descriptor instead.
func (*ResumeContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{20}
}

func (x *ResumeContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type ResumeContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeContestOutput) Reset() {
	*x = ResumeContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeContestOutput) ProtoMessage() {}

func (x *ResumeContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeContestOutput.ProtoReflect.Descriptor instead.
func (*ResumeContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{21}
}

type WatchContestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchContestInput) Reset() {
	*x = WatchContestInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchContestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContestInput) ProtoMessage() {}

func (x *WatchContestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContestInput.ProtoReflect.Descriptor instead.
func (*WatchContestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{22}
}

func (x *WatchContestInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type WatchContestOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Contest       *Contest               `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchContestOutput) Reset() {
	*x = WatchContestOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchContestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchContestOutput) ProtoMessage() {}

func (x *WatchContestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchContestOutput.ProtoReflect.Descriptor instead.
func (*WatchContestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{23}
}

func (x *WatchContestOutput) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ListActivitiesInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     string                 `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Offset        int32                  `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int32                  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActivitiesInput) Reset() {
	*x = ListActivitiesInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivitiesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesInput) ProtoMessage() {}

func (x *ListActivitiesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesInput.ProtoReflect.Descriptor instead.
func (*ListActivitiesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListActivitiesInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ListActivitiesInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListActivitiesInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListActivitiesOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items         []*Activity            `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActivitiesOutput) Reset() {
	*x = ListActivitiesOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivitiesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesOutput) ProtoMessage() {}

func (x *ListActivitiesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesOutput.ProtoReflect.Descriptor instead.
func (*ListActivitiesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListActivitiesOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListActivitiesOutput) GetItems() []*Activity {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeContestUsageInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodStart   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeContestUsageInput) Reset() {
	*x = DescribeContestUsageInput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeContestUsageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContestUsageInput) ProtoMessage() {}

func (x *DescribeContestUsageInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContestUsageInput.ProtoReflect.Descriptor instead.
func (*DescribeContestUsageInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeContestUsageInput) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *DescribeContestUsageInput) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

type DescribeContestUsageOutput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalContests   uint32                 `protobuf:"varint,1,opt,name=total_contests,json=totalContests,proto3" json:"total_contests,omitempty"`
	ActiveContests  uint32                 `protobuf:"varint,2,opt,name=active_contests,json=activeContests,proto3" json:"active_contests,omitempty"`
	MonthlyContests uint32                 `protobuf:"varint,3,opt,name=monthly_contests,json=monthlyContests,proto3" json:"monthly_contests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DescribeContestUsageOutput) Reset() {
	*x = DescribeContestUsageOutput{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeContestUsageOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeContestUsageOutput) ProtoMessage() {}

func (x *DescribeContestUsageOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeContestUsageOutput.ProtoReflect.Descriptor instead.
func (*DescribeContestUsageOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{27}
}

func (x *DescribeContestUsageOutput) GetTotalContests() uint32 {
	if x != nil {
		return x.TotalContests
	}
	return 0
}

func (x *DescribeContestUsageOutput) GetActiveContests() uint32 {
	if x != nil {
		return x.ActiveContests
	}
	return 0
}

func (x *DescribeContestUsageOutput) GetMonthlyContests() uint32 {
	if x != nil {
		return x.MonthlyContests
	}
	return 0
}

type ListContestsInput_Filter struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            []*wellknown.ExpressionID        `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Name          []*wellknown.ExpressionString    `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty"`
	StartsAt      []*wellknown.ExpressionTimestamp `protobuf:"bytes,4,rep,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	EndsAt        []*wellknown.ExpressionTimestamp `protobuf:"bytes,5,rep,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	Public        []*wellknown.ExpressionBool      `protobuf:"bytes,6,rep,name=public,proto3" json:"public,omitempty"`         // deprecated, same as visibility=PUBLIC
	Visibility    []*wellknown.ExpressionEnum      `protobuf:"bytes,7,rep,name=visibility,proto3" json:"visibility,omitempty"` // PUBLIC, UNLISTED, PRIVATE
	Format        []*wellknown.ExpressionEnum      `protobuf:"bytes,8,rep,name=format,proto3" json:"format,omitempty"`         // IOI, ICPC
	Status        []*wellknown.ExpressionEnum      `protobuf:"bytes,10,rep,name=status,proto3" json:"status,omitempty"`        // SCHEDULED, OPEN, ACTIVE, COMPLETE, UPSOLVE
	Featured      []*wellknown.ExpressionBool      `protobuf:"bytes,11,rep,name=featured,proto3" json:"featured,omitempty"`
	Year          []*wellknown.ExpressionInt       `protobuf:"bytes,100,rep,name=year,proto3" json:"year,omitempty"`
	Scale         []*wellknown.ExpressionEnum      `protobuf:"bytes,101,rep,name=scale,proto3" json:"scale,omitempty"`
	Series        []*wellknown.ExpressionEnum      `protobuf:"bytes,102,rep,name=series,proto3" json:"series,omitempty"`         // see taxonomy enumeration "contest_series"
	Difficulty    []*wellknown.ExpressionInt       `protobuf:"bytes,103,rep,name=difficulty,proto3" json:"difficulty,omitempty"` // 1 to 5
	Country       []*wellknown.ExpressionEnum      `protobuf:"bytes,104,rep,name=country,proto3" json:"country,omitempty"`
	Region        []*wellknown.ExpressionEnum      `protobuf:"bytes,105,rep,name=region,proto3" json:"region,omitempty"`
	City          []*wellknown.ExpressionString    `protobuf:"bytes,106,rep,name=city,proto3" json:"city,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContestsInput_Filter) Reset() {
	*x = ListContestsInput_Filter{}
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContestsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContestsInput_Filter) ProtoMessage() {}

func (x *ListContestsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContestsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListContestsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListContestsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListContestsInput_Filter) GetName() []*wellknown.ExpressionString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListContestsInput_Filter) GetStartsAt() []*wellknown.ExpressionTimestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *ListContestsInput_Filter) GetEndsAt() []*wellknown.ExpressionTimestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *ListContestsInput_Filter) GetPublic() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *ListContestsInput_Filter) GetVisibility() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *ListContestsInput_Filter) GetFormat() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ListContestsInput_Filter) GetStatus() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListContestsInput_Filter) GetFeatured() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Featured
	}
	return nil
}

func (x *ListContestsInput_Filter) GetYear() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Year
	}
	return nil
}

func (x *ListContestsInput_Filter) GetScale() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *ListContestsInput_Filter) GetSeries() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *ListContestsInput_Filter) GetDifficulty() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *ListContestsInput_Filter) GetCountry() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *ListContestsInput_Filter) GetRegion() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ListContestsInput_Filter) GetCity() []*wellknown.ExpressionString {
	if x != nil {
		return x.City
	}
	return nil
}

var File_eolymp_judge_contest_service_proto protoreflect.FileDescriptor

var file_eolymp_judge_contest_service_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xf3, 0x03, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x22, 0xce, 0x02, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x44, 0x53, 0x5f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x55, 0x4e, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x4f, 0x47, 0x4f, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x54, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x41, 0x58, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x10, 0x8c,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x6e, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x82, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x78,
	0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x96,
	0x01, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x70,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a,
	0x63, 0x6f, 0x70, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x22,
	0x3b, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x14,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0xd4, 0x08,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xb8, 0x07, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x31, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x13, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x32, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x34, 0x0a, 0x13, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x33, 0x0a,
	0x12, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x32, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x60, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x5a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x32, 0xfa, 0x10, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0xa3, 0x3d, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82,
	0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x48, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05,
	0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x1a, 0x16, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4d, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x2d, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x20, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12,
	0x09, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4d, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17,
	0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4e,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82,
	0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x22, 0x1c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0xa9,
	0x01, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a,
	0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x4f, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2,
	0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1a, 0x82,
	0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x26, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_eolymp_judge_contest_service_proto_rawDescOnce sync.Once
	file_eolymp_judge_contest_service_proto_rawDescData []byte
)

func file_eolymp_judge_contest_service_proto_rawDescGZIP() []byte {
	file_eolymp_judge_contest_service_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_contest_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_judge_contest_service_proto_rawDesc), len(file_eolymp_judge_contest_service_proto_rawDesc)))
	})
	return file_eolymp_judge_contest_service_proto_rawDescData
}

var file_eolymp_judge_contest_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_judge_contest_service_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_eolymp_judge_contest_service_proto_goTypes = []any{
	(UpdateContestInput_Patch)(0),         // 0: eolymp.judge.UpdateContestInput.Patch
	(CopyContestInput_Scope)(0),           // 1: eolymp.judge.CopyContestInput.Scope
	(*CreateContestInput)(nil),            // 2: eolymp.judge.CreateContestInput
	(*CreateContestOutput)(nil),           // 3: eolymp.judge.CreateContestOutput
	(*DeleteContestInput)(nil),            // 4: eolymp.judge.DeleteContestInput
	(*DeleteContestOutput)(nil),           // 5: eolymp.judge.DeleteContestOutput
	(*UpdateContestInput)(nil),            // 6: eolymp.judge.UpdateContestInput
	(*UpdateContestOutput)(nil),           // 7: eolymp.judge.UpdateContestOutput
	(*CopyContestInput)(nil),              // 8: eolymp.judge.CopyContestInput
	(*CopyContestOutput)(nil),             // 9: eolymp.judge.CopyContestOutput
	(*DescribeContestInput)(nil),          // 10: eolymp.judge.DescribeContestInput
	(*DescribeContestOutput)(nil),         // 11: eolymp.judge.DescribeContestOutput
	(*ListContestsInput)(nil),             // 12: eolymp.judge.ListContestsInput
	(*ListContestsOutput)(nil),            // 13: eolymp.judge.ListContestsOutput
	(*OpenContestInput)(nil),              // 14: eolymp.judge.OpenContestInput
	(*OpenContestOutput)(nil),             // 15: eolymp.judge.OpenContestOutput
	(*CloseContestInput)(nil),             // 16: eolymp.judge.CloseContestInput
	(*CloseContestOutput)(nil),            // 17: eolymp.judge.CloseContestOutput
	(*SuspendContestInput)(nil),           // 18: eolymp.judge.SuspendContestInput
	(*SuspendContestOutput)(nil),          // 19: eolymp.judge.SuspendContestOutput
	(*FreezeContestInput)(nil),            // 20: eolymp.judge.FreezeContestInput
	(*FreezeContestOutput)(nil),           // 21: eolymp.judge.FreezeContestOutput
	(*ResumeContestInput)(nil),            // 22: eolymp.judge.ResumeContestInput
	(*ResumeContestOutput)(nil),           // 23: eolymp.judge.ResumeContestOutput
	(*WatchContestInput)(nil),             // 24: eolymp.judge.WatchContestInput
	(*WatchContestOutput)(nil),            // 25: eolymp.judge.WatchContestOutput
	(*ListActivitiesInput)(nil),           // 26: eolymp.judge.ListActivitiesInput
	(*ListActivitiesOutput)(nil),          // 27: eolymp.judge.ListActivitiesOutput
	(*DescribeContestUsageInput)(nil),     // 28: eolymp.judge.DescribeContestUsageInput
	(*DescribeContestUsageOutput)(nil),    // 29: eolymp.judge.DescribeContestUsageOutput
	(*ListContestsInput_Filter)(nil),      // 30: eolymp.judge.ListContestsInput.Filter
	(*Contest)(nil),                       // 31: eolymp.judge.Contest
	(Contest_Visibility)(0),               // 32: eolymp.judge.Contest.Visibility
	(*Activity)(nil),                      // 33: eolymp.judge.Activity
	(*timestamppb.Timestamp)(nil),         // 34: google.protobuf.Timestamp
	(*wellknown.ExpressionID)(nil),        // 35: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionString)(nil),    // 36: eolymp.wellknown.ExpressionString
	(*wellknown.ExpressionTimestamp)(nil), // 37: eolymp.wellknown.ExpressionTimestamp
	(*wellknown.ExpressionBool)(nil),      // 38: eolymp.wellknown.ExpressionBool
	(*wellknown.ExpressionEnum)(nil),      // 39: eolymp.wellknown.ExpressionEnum
	(*wellknown.ExpressionInt)(nil),       // 40: eolymp.wellknown.ExpressionInt
}
var file_eolymp_judge_contest_service_proto_depIdxs = []int32{
	31, // 0: eolymp.judge.CreateContestInput.contest:type_name -> eolymp.judge.Contest
	0,  // 1: eolymp.judge.UpdateContestInput.patch:type_name -> eolymp.judge.UpdateContestInput.Patch
	31, // 2: eolymp.judge.UpdateContestInput.contest:type_name -> eolymp.judge.Contest
	1,  // 3: eolymp.judge.CopyContestInput.copy_scope:type_name -> eolymp.judge.CopyContestInput.Scope
	32, // 4: eolymp.judge.CopyContestInput.copy_visibility:type_name -> eolymp.judge.Contest.Visibility
	31, // 5: eolymp.judge.DescribeContestOutput.contest:type_name -> eolymp.judge.Contest
	30, // 6: eolymp.judge.ListContestsInput.filters:type_name -> eolymp.judge.ListContestsInput.Filter
	31, // 7: eolymp.judge.ListContestsOutput.items:type_name -> eolymp.judge.Contest
	31, // 8: eolymp.judge.WatchContestOutput.contest:type_name -> eolymp.judge.Contest
	33, // 9: eolymp.judge.ListActivitiesOutput.items:type_name -> eolymp.judge.Activity
	34, // 10: eolymp.judge.DescribeContestUsageInput.period_start:type_name -> google.protobuf.Timestamp
	34, // 11: eolymp.judge.DescribeContestUsageInput.period_end:type_name -> google.protobuf.Timestamp
	35, // 12: eolymp.judge.ListContestsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	36, // 13: eolymp.judge.ListContestsInput.Filter.name:type_name -> eolymp.wellknown.ExpressionString
	37, // 14: eolymp.judge.ListContestsInput.Filter.starts_at:type_name -> eolymp.wellknown.ExpressionTimestamp
	37, // 15: eolymp.judge.ListContestsInput.Filter.ends_at:type_name -> eolymp.wellknown.ExpressionTimestamp
	38, // 16: eolymp.judge.ListContestsInput.Filter.public:type_name -> eolymp.wellknown.ExpressionBool
	39, // 17: eolymp.judge.ListContestsInput.Filter.visibility:type_name -> eolymp.wellknown.ExpressionEnum
	39, // 18: eolymp.judge.ListContestsInput.Filter.format:type_name -> eolymp.wellknown.ExpressionEnum
	39, // 19: eolymp.judge.ListContestsInput.Filter.status:type_name -> eolymp.wellknown.ExpressionEnum
	38, // 20: eolymp.judge.ListContestsInput.Filter.featured:type_name -> eolymp.wellknown.ExpressionBool
	40, // 21: eolymp.judge.ListContestsInput.Filter.year:type_name -> eolymp.wellknown.ExpressionInt
	39, // 22: eolymp.judge.ListContestsInput.Filter.scale:type_name -> eolymp.wellknown.ExpressionEnum
	39, // 23: eolymp.judge.ListContestsInput.Filter.series:type_name -> eolymp.wellknown.ExpressionEnum
	40, // 24: eolymp.judge.ListContestsInput.Filter.difficulty:type_name -> eolymp.wellknown.ExpressionInt
	39, // 25: eolymp.judge.ListContestsInput.Filter.country:type_name -> eolymp.wellknown.ExpressionEnum
	39, // 26: eolymp.judge.ListContestsInput.Filter.region:type_name -> eolymp.wellknown.ExpressionEnum
	36, // 27: eolymp.judge.ListContestsInput.Filter.city:type_name -> eolymp.wellknown.ExpressionString
	2,  // 28: eolymp.judge.ContestService.CreateContest:input_type -> eolymp.judge.CreateContestInput
	4,  // 29: eolymp.judge.ContestService.DeleteContest:input_type -> eolymp.judge.DeleteContestInput
	6,  // 30: eolymp.judge.ContestService.UpdateContest:input_type -> eolymp.judge.UpdateContestInput
	8,  // 31: eolymp.judge.ContestService.CopyContest:input_type -> eolymp.judge.CopyContestInput
	10, // 32: eolymp.judge.ContestService.DescribeContest:input_type -> eolymp.judge.DescribeContestInput
	12, // 33: eolymp.judge.ContestService.ListContests:input_type -> eolymp.judge.ListContestsInput
	14, // 34: eolymp.judge.ContestService.OpenContest:input_type -> eolymp.judge.OpenContestInput
	16, // 35: eolymp.judge.ContestService.CloseContest:input_type -> eolymp.judge.CloseContestInput
	18, // 36: eolymp.judge.ContestService.SuspendContest:input_type -> eolymp.judge.SuspendContestInput
	20, // 37: eolymp.judge.ContestService.FreezeContest:input_type -> eolymp.judge.FreezeContestInput
	22, // 38: eolymp.judge.ContestService.ResumeContest:input_type -> eolymp.judge.ResumeContestInput
	24, // 39: eolymp.judge.ContestService.WatchContest:input_type -> eolymp.judge.WatchContestInput
	26, // 40: eolymp.judge.ContestService.ListActivities:input_type -> eolymp.judge.ListActivitiesInput
	28, // 41: eolymp.judge.ContestService.DescribeContestUsage:input_type -> eolymp.judge.DescribeContestUsageInput
	3,  // 42: eolymp.judge.ContestService.CreateContest:output_type -> eolymp.judge.CreateContestOutput
	5,  // 43: eolymp.judge.ContestService.DeleteContest:output_type -> eolymp.judge.DeleteContestOutput
	7,  // 44: eolymp.judge.ContestService.UpdateContest:output_type -> eolymp.judge.UpdateContestOutput
	9,  // 45: eolymp.judge.ContestService.CopyContest:output_type -> eolymp.judge.CopyContestOutput
	11, // 46: eolymp.judge.ContestService.DescribeContest:output_type -> eolymp.judge.DescribeContestOutput
	13, // 47: eolymp.judge.ContestService.ListContests:output_type -> eolymp.judge.ListContestsOutput
	15, // 48: eolymp.judge.ContestService.OpenContest:output_type -> eolymp.judge.OpenContestOutput
	17, // 49: eolymp.judge.ContestService.CloseContest:output_type -> eolymp.judge.CloseContestOutput
	19, // 50: eolymp.judge.ContestService.SuspendContest:output_type -> eolymp.judge.SuspendContestOutput
	21, // 51: eolymp.judge.ContestService.FreezeContest:output_type -> eolymp.judge.FreezeContestOutput
	23, // 52: eolymp.judge.ContestService.ResumeContest:output_type -> eolymp.judge.ResumeContestOutput
	25, // 53: eolymp.judge.ContestService.WatchContest:output_type -> eolymp.judge.WatchContestOutput
	27, // 54: eolymp.judge.ContestService.ListActivities:output_type -> eolymp.judge.ListActivitiesOutput
	29, // 55: eolymp.judge.ContestService.DescribeContestUsage:output_type -> eolymp.judge.DescribeContestUsageOutput
	42, // [42:56] is the sub-list for method output_type
	28, // [28:42] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_eolymp_judge_contest_service_proto_init() }
func file_eolymp_judge_contest_service_proto_init() {
	if File_eolymp_judge_contest_service_proto != nil {
		return
	}
	file_eolymp_judge_activity_proto_init()
	file_eolymp_judge_contest_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_judge_contest_service_proto_rawDesc), len(file_eolymp_judge_contest_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_judge_contest_service_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_contest_service_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_contest_service_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_contest_service_proto_msgTypes,
	}.Build()
	File_eolymp_judge_contest_service_proto = out.File
	file_eolymp_judge_contest_service_proto_goTypes = nil
	file_eolymp_judge_contest_service_proto_depIdxs = nil
}
