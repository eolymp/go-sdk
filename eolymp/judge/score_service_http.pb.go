// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _ScoreService_HTTPReadQueryString parses body into proto.Message
func _ScoreService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _ScoreService_HTTPReadRequestBody parses body into proto.Message
func _ScoreService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ScoreService_HTTPWriteResponse writes proto.Message to HTTP response
func _ScoreService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ScoreService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ScoreService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ScoreService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterScoreServiceHttpHandlers adds handlers for for ScoreServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterScoreServiceHttpHandlers(router *mux.Router, prefix string, cli ScoreServiceClient) {
	router.Handle(prefix+"/introspect/score", _ScoreService_IntrospectScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ScoreService.IntrospectScore")
	router.Handle(prefix+"/participants/{participant_id}/score", _ScoreService_DescribeScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ScoreService.DescribeScore")
	router.Handle(prefix+"/participants/{participant_id}/scores", _ScoreService_ImportScore_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ScoreService.ImportScore")
	router.Handle(prefix+"/participants/{participant_id}/scores", _ScoreService_ExportScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ScoreService.ExportScore")
	router.Handle(prefix+"/results", _ScoreService_ListResult_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ScoreService.ListResult")
	router.Handle(prefix+"/results-export", _ScoreService_ExportResult_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ScoreService.ExportResult")
	router.Handle(prefix+"/rebuild", _ScoreService_RebuildScore_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ScoreService.RebuildScore")
}

func _ScoreService_IntrospectScore_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _ScoreService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.IntrospectScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_DescribeScore_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _ScoreService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_ImportScore_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _ScoreService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ImportScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_ExportScore_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ExportScoreInput{}

		if err := _ScoreService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ExportScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_ListResult_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _ScoreService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListResult(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_ExportResult_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ExportResultInput{}

		if err := _ScoreService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ExportResult(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ScoreService_RebuildScore_Rule0(cli ScoreServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _ScoreService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.RebuildScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ScoreService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ScoreService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _ScoreServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _ScoreServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _ScoreServiceHandler) (out proto.Message, err error)
type ScoreServiceInterceptor struct {
	middleware []_ScoreServiceMiddleware
	client     ScoreServiceClient
}

// NewScoreServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewScoreServiceInterceptor(cli ScoreServiceClient, middleware ..._ScoreServiceMiddleware) *ScoreServiceInterceptor {
	return &ScoreServiceInterceptor{client: cli, middleware: middleware}
}

func (i *ScoreServiceInterceptor) IntrospectScore(ctx context.Context, in *IntrospectScoreInput, opts ...grpc.CallOption) (*IntrospectScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectScoreInput, got %T", in))
		}

		return i.client.IntrospectScore(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.IntrospectScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectScoreOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeScoreInput, got %T", in))
		}

		return i.client.DescribeScore(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.DescribeScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeScoreOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) ImportScore(ctx context.Context, in *ImportScoreInput, opts ...grpc.CallOption) (*ImportScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ImportScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ImportScoreInput, got %T", in))
		}

		return i.client.ImportScore(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.ImportScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ImportScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ImportScoreOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) ExportScore(ctx context.Context, in *ExportScoreInput, opts ...grpc.CallOption) (*ExportScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ExportScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ExportScoreInput, got %T", in))
		}

		return i.client.ExportScore(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.ExportScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ExportScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ExportScoreOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) ListResult(ctx context.Context, in *ListResultInput, opts ...grpc.CallOption) (*ListResultOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListResultInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListResultInput, got %T", in))
		}

		return i.client.ListResult(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.ListResult", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListResultOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListResultOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) ExportResult(ctx context.Context, in *ExportResultInput, opts ...grpc.CallOption) (*ExportResultOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ExportResultInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ExportResultInput, got %T", in))
		}

		return i.client.ExportResult(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.ExportResult", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ExportResultOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ExportResultOutput, got %T", out))
	}

	return message, err
}

func (i *ScoreServiceInterceptor) RebuildScore(ctx context.Context, in *RebuildScoreInput, opts ...grpc.CallOption) (*RebuildScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RebuildScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RebuildScoreInput, got %T", in))
		}

		return i.client.RebuildScore(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ScoreService.RebuildScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RebuildScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RebuildScoreOutput, got %T", out))
	}

	return message, err
}
