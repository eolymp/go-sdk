// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: eolymp/judge/score_service.proto

package judge

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RebuildScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *RebuildScoreInput) Reset() {
	*x = RebuildScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildScoreInput) ProtoMessage() {}

func (x *RebuildScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildScoreInput.ProtoReflect.Descriptor instead.
func (*RebuildScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{0}
}

func (x *RebuildScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type RebuildScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId string `protobuf:"bytes,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (x *RebuildScoreOutput) Reset() {
	*x = RebuildScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildScoreOutput) ProtoMessage() {}

func (x *RebuildScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildScoreOutput.ProtoReflect.Descriptor instead.
func (*RebuildScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{1}
}

func (x *RebuildScoreOutput) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type IntrospectScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
}

func (x *IntrospectScoreInput) Reset() {
	*x = IntrospectScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectScoreInput) ProtoMessage() {}

func (x *IntrospectScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectScoreInput.ProtoReflect.Descriptor instead.
func (*IntrospectScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{2}
}

func (x *IntrospectScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

type IntrospectScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *IntrospectScoreOutput) Reset() {
	*x = IntrospectScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectScoreOutput) ProtoMessage() {}

func (x *IntrospectScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectScoreOutput.ProtoReflect.Descriptor instead.
func (*IntrospectScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{3}
}

func (x *IntrospectScoreOutput) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type WatchScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId     string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	// Mode for fetching score value (see enum description).
	Mode Score_FetchingMode `protobuf:"varint,3,opt,name=mode,proto3,enum=eolymp.judge.Score_FetchingMode" json:"mode,omitempty"`
}

func (x *WatchScoreInput) Reset() {
	*x = WatchScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchScoreInput) ProtoMessage() {}

func (x *WatchScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchScoreInput.ProtoReflect.Descriptor instead.
func (*WatchScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{4}
}

func (x *WatchScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *WatchScoreInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *WatchScoreInput) GetMode() Score_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Score_ACTUAL
}

type WatchScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *WatchScoreOutput) Reset() {
	*x = WatchScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchScoreOutput) ProtoMessage() {}

func (x *WatchScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchScoreOutput.ProtoReflect.Descriptor instead.
func (*WatchScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{5}
}

func (x *WatchScoreOutput) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type DescribeScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId     string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	// Mode for fetching score value (see enum description).
	Mode Score_FetchingMode `protobuf:"varint,3,opt,name=mode,proto3,enum=eolymp.judge.Score_FetchingMode" json:"mode,omitempty"`
	// Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
	// seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
	// This value is ignored if mode is not PUNCTUAL.
	TimeOffset int32 `protobuf:"varint,4,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
}

func (x *DescribeScoreInput) Reset() {
	*x = DescribeScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreInput) ProtoMessage() {}

func (x *DescribeScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreInput.ProtoReflect.Descriptor instead.
func (*DescribeScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *DescribeScoreInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *DescribeScoreInput) GetMode() Score_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Score_ACTUAL
}

func (x *DescribeScoreInput) GetTimeOffset() int32 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

type DescribeScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DescribeScoreOutput) Reset() {
	*x = DescribeScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreOutput) ProtoMessage() {}

func (x *DescribeScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreOutput.ProtoReflect.Descriptor instead.
func (*DescribeScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeScoreOutput) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type ImportScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId     string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	// Scores is an array of score snapshots at different time relative to the starting time.
	//
	// Each entry defines a complete snapshot (they do not accumulate automatically).
	// These fields can be populated:
	//   - offset - defines when snapshot was taken, it's an amount of time in seconds since participant started contest
	//   - score - total score at the moment in time (suppose to be sum of scores in breakdown field, but not enforced)
	//   - penalty - total penalty at the moment in time (suppose to be sum of penalty in breakdown field, but not enforced)
	//   - breakdown - score breakdown by problem, nested fields are as follows:
	//   - problem_id - self explanatory
	//   - score - score as defined by contest format (for IOI: from 0 to 100, for ICPC 0 or 1)
	//   - penalty - penalty as defined by contest format (for ICPC: solved_in/60 + attempts*20)
	//   - percentage - percentage of scored points from 0 to 1 (1 means 100% or fully solved), this value does not depend on contest format
	//   - attempts - number of attempts to solve problem before successful attempt
	//   - solved_in - time in second to solve problem, since participant started contest, leave as 0 if not solved
	//
	// The rest of the fields are automatically calculated and ignored during import.
	Scores []*Score `protobuf:"bytes,10,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ImportScoreInput) Reset() {
	*x = ImportScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportScoreInput) ProtoMessage() {}

func (x *ImportScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportScoreInput.ProtoReflect.Descriptor instead.
func (*ImportScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{8}
}

func (x *ImportScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ImportScoreInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *ImportScoreInput) GetScores() []*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ImportScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportScoreOutput) Reset() {
	*x = ImportScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportScoreOutput) ProtoMessage() {}

func (x *ImportScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportScoreOutput.ProtoReflect.Descriptor instead.
func (*ImportScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{9}
}

type ExportScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId     string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ParticipantId string `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
}

func (x *ExportScoreInput) Reset() {
	*x = ExportScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportScoreInput) ProtoMessage() {}

func (x *ExportScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportScoreInput.ProtoReflect.Descriptor instead.
func (*ExportScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExportScoreInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ExportScoreInput) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type ExportScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores []*Score `protobuf:"bytes,10,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ExportScoreOutput) Reset() {
	*x = ExportScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportScoreOutput) ProtoMessage() {}

func (x *ExportScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportScoreOutput.ProtoReflect.Descriptor instead.
func (*ExportScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{11}
}

func (x *ExportScoreOutput) GetScores() []*Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

type ListResultInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	// Mode for fetching score value (see enum description).
	Mode Score_FetchingMode `protobuf:"varint,2,opt,name=mode,proto3,enum=eolymp.judge.Score_FetchingMode" json:"mode,omitempty"`
	// Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
	// seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
	// This value is ignored if mode is not PUNCTUAL.
	TimeOffset int32 `protobuf:"varint,3,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	Offset     int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListResultInput) Reset() {
	*x = ListResultInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResultInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResultInput) ProtoMessage() {}

func (x *ListResultInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResultInput.ProtoReflect.Descriptor instead.
func (*ListResultInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListResultInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ListResultInput) GetMode() Score_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Score_ACTUAL
}

func (x *ListResultInput) GetTimeOffset() int32 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

func (x *ListResultInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListResultInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListResultOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Result `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListResultOutput) Reset() {
	*x = ListResultOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResultOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResultOutput) ProtoMessage() {}

func (x *ListResultOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResultOutput.ProtoReflect.Descriptor instead.
func (*ListResultOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListResultOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListResultOutput) GetItems() []*Result {
	if x != nil {
		return x.Items
	}
	return nil
}

type ExportResultInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	// Mode for fetching score value (see enum description).
	Mode Score_FetchingMode `protobuf:"varint,2,opt,name=mode,proto3,enum=eolymp.judge.Score_FetchingMode" json:"mode,omitempty"`
	// Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
	// seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
	// This value is ignored if mode is not PUNCTUAL.
	TimeOffset int32 `protobuf:"varint,3,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
}

func (x *ExportResultInput) Reset() {
	*x = ExportResultInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResultInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResultInput) ProtoMessage() {}

func (x *ExportResultInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResultInput.ProtoReflect.Descriptor instead.
func (*ExportResultInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{14}
}

func (x *ExportResultInput) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ExportResultInput) GetMode() Score_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Score_ACTUAL
}

func (x *ExportResultInput) GetTimeOffset() int32 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

type ExportResultOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportUrl string `protobuf:"bytes,1,opt,name=export_url,json=exportUrl,proto3" json:"export_url,omitempty"`
}

func (x *ExportResultOutput) Reset() {
	*x = ExportResultOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportResultOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportResultOutput) ProtoMessage() {}

func (x *ExportResultOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportResultOutput.ProtoReflect.Descriptor instead.
func (*ExportResultOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{15}
}

func (x *ExportResultOutput) GetExportUrl() string {
	if x != nil {
		return x.ExportUrl
	}
	return ""
}

type ListResultsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode for fetching score value (see enum description).
	Mode Score_FetchingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=eolymp.judge.Score_FetchingMode" json:"mode,omitempty"`
	// Time offset allows to fetch score at particular moment in the competition. Time offset is specified as number of
	// seconds since the participant has started the competition. When time offset is 0, the latest score is returned.
	// This value is ignored if mode is not PUNCTUAL.
	TimeOffset int32 `protobuf:"varint,2,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	// Only return results for a single round
	RoundId string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	// Number of results per page, (max. 100, default 100)
	Size int32 `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	// Cursor for fetching next page
	After string `protobuf:"bytes,11,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *ListResultsInput) Reset() {
	*x = ListResultsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResultsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResultsInput) ProtoMessage() {}

func (x *ListResultsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResultsInput.ProtoReflect.Descriptor instead.
func (*ListResultsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListResultsInput) GetMode() Score_FetchingMode {
	if x != nil {
		return x.Mode
	}
	return Score_ACTUAL
}

func (x *ListResultsInput) GetTimeOffset() int32 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

func (x *ListResultsInput) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *ListResultsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListResultsInput) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

type ListResultsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*ResultV2 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListResultsOutput) Reset() {
	*x = ListResultsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_score_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResultsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResultsOutput) ProtoMessage() {}

func (x *ListResultsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResultsOutput.ProtoReflect.Descriptor instead.
func (*ListResultsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListResultsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListResultsOutput) GetItems() []*ResultV2 {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_eolymp_judge_score_service_proto protoreflect.FileDescriptor

var file_eolymp_judge_score_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x12,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3d,
	0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb1, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x58, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x34,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x32, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x32, 0xc3, 0x0a, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x28, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2,
	0x0a, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1a, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3,
	0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x56, 0xea,
	0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x48, 0x42, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82,
	0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x57, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x48, 0x42, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x57, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x48, 0x42, 0xf8, 0xe2, 0x0a,
	0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x12, 0x25, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a,
	0x00, 0x00, 0x48, 0x42, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x3d, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x48,
	0x42, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2d, 0x76, 0x32, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x40, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a,
	0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0f, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22,
	0x08, 0x2f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_judge_score_service_proto_rawDescOnce sync.Once
	file_eolymp_judge_score_service_proto_rawDescData = file_eolymp_judge_score_service_proto_rawDesc
)

func file_eolymp_judge_score_service_proto_rawDescGZIP() []byte {
	file_eolymp_judge_score_service_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_score_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_score_service_proto_rawDescData)
	})
	return file_eolymp_judge_score_service_proto_rawDescData
}

var file_eolymp_judge_score_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_eolymp_judge_score_service_proto_goTypes = []any{
	(*RebuildScoreInput)(nil),     // 0: eolymp.judge.RebuildScoreInput
	(*RebuildScoreOutput)(nil),    // 1: eolymp.judge.RebuildScoreOutput
	(*IntrospectScoreInput)(nil),  // 2: eolymp.judge.IntrospectScoreInput
	(*IntrospectScoreOutput)(nil), // 3: eolymp.judge.IntrospectScoreOutput
	(*WatchScoreInput)(nil),       // 4: eolymp.judge.WatchScoreInput
	(*WatchScoreOutput)(nil),      // 5: eolymp.judge.WatchScoreOutput
	(*DescribeScoreInput)(nil),    // 6: eolymp.judge.DescribeScoreInput
	(*DescribeScoreOutput)(nil),   // 7: eolymp.judge.DescribeScoreOutput
	(*ImportScoreInput)(nil),      // 8: eolymp.judge.ImportScoreInput
	(*ImportScoreOutput)(nil),     // 9: eolymp.judge.ImportScoreOutput
	(*ExportScoreInput)(nil),      // 10: eolymp.judge.ExportScoreInput
	(*ExportScoreOutput)(nil),     // 11: eolymp.judge.ExportScoreOutput
	(*ListResultInput)(nil),       // 12: eolymp.judge.ListResultInput
	(*ListResultOutput)(nil),      // 13: eolymp.judge.ListResultOutput
	(*ExportResultInput)(nil),     // 14: eolymp.judge.ExportResultInput
	(*ExportResultOutput)(nil),    // 15: eolymp.judge.ExportResultOutput
	(*ListResultsInput)(nil),      // 16: eolymp.judge.ListResultsInput
	(*ListResultsOutput)(nil),     // 17: eolymp.judge.ListResultsOutput
	(*Score)(nil),                 // 18: eolymp.judge.Score
	(Score_FetchingMode)(0),       // 19: eolymp.judge.Score.FetchingMode
	(*Result)(nil),                // 20: eolymp.judge.Result
	(*ResultV2)(nil),              // 21: eolymp.judge.ResultV2
}
var file_eolymp_judge_score_service_proto_depIdxs = []int32{
	18, // 0: eolymp.judge.IntrospectScoreOutput.score:type_name -> eolymp.judge.Score
	19, // 1: eolymp.judge.WatchScoreInput.mode:type_name -> eolymp.judge.Score.FetchingMode
	18, // 2: eolymp.judge.WatchScoreOutput.score:type_name -> eolymp.judge.Score
	19, // 3: eolymp.judge.DescribeScoreInput.mode:type_name -> eolymp.judge.Score.FetchingMode
	18, // 4: eolymp.judge.DescribeScoreOutput.score:type_name -> eolymp.judge.Score
	18, // 5: eolymp.judge.ImportScoreInput.scores:type_name -> eolymp.judge.Score
	18, // 6: eolymp.judge.ExportScoreOutput.scores:type_name -> eolymp.judge.Score
	19, // 7: eolymp.judge.ListResultInput.mode:type_name -> eolymp.judge.Score.FetchingMode
	20, // 8: eolymp.judge.ListResultOutput.items:type_name -> eolymp.judge.Result
	19, // 9: eolymp.judge.ExportResultInput.mode:type_name -> eolymp.judge.Score.FetchingMode
	19, // 10: eolymp.judge.ListResultsInput.mode:type_name -> eolymp.judge.Score.FetchingMode
	21, // 11: eolymp.judge.ListResultsOutput.items:type_name -> eolymp.judge.ResultV2
	2,  // 12: eolymp.judge.ScoreService.IntrospectScore:input_type -> eolymp.judge.IntrospectScoreInput
	4,  // 13: eolymp.judge.ScoreService.WatchScore:input_type -> eolymp.judge.WatchScoreInput
	6,  // 14: eolymp.judge.ScoreService.DescribeScore:input_type -> eolymp.judge.DescribeScoreInput
	8,  // 15: eolymp.judge.ScoreService.ImportScore:input_type -> eolymp.judge.ImportScoreInput
	10, // 16: eolymp.judge.ScoreService.ExportScore:input_type -> eolymp.judge.ExportScoreInput
	12, // 17: eolymp.judge.ScoreService.ListResult:input_type -> eolymp.judge.ListResultInput
	16, // 18: eolymp.judge.ScoreService.ListResults:input_type -> eolymp.judge.ListResultsInput
	14, // 19: eolymp.judge.ScoreService.ExportResult:input_type -> eolymp.judge.ExportResultInput
	0,  // 20: eolymp.judge.ScoreService.RebuildScore:input_type -> eolymp.judge.RebuildScoreInput
	3,  // 21: eolymp.judge.ScoreService.IntrospectScore:output_type -> eolymp.judge.IntrospectScoreOutput
	5,  // 22: eolymp.judge.ScoreService.WatchScore:output_type -> eolymp.judge.WatchScoreOutput
	7,  // 23: eolymp.judge.ScoreService.DescribeScore:output_type -> eolymp.judge.DescribeScoreOutput
	9,  // 24: eolymp.judge.ScoreService.ImportScore:output_type -> eolymp.judge.ImportScoreOutput
	11, // 25: eolymp.judge.ScoreService.ExportScore:output_type -> eolymp.judge.ExportScoreOutput
	13, // 26: eolymp.judge.ScoreService.ListResult:output_type -> eolymp.judge.ListResultOutput
	17, // 27: eolymp.judge.ScoreService.ListResults:output_type -> eolymp.judge.ListResultsOutput
	15, // 28: eolymp.judge.ScoreService.ExportResult:output_type -> eolymp.judge.ExportResultOutput
	1,  // 29: eolymp.judge.ScoreService.RebuildScore:output_type -> eolymp.judge.RebuildScoreOutput
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_eolymp_judge_score_service_proto_init() }
func file_eolymp_judge_score_service_proto_init() {
	if File_eolymp_judge_score_service_proto != nil {
		return
	}
	file_eolymp_judge_result_proto_init()
	file_eolymp_judge_score_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_judge_score_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RebuildScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RebuildScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IntrospectScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IntrospectScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WatchScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WatchScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ImportScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ImportScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ExportScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ExportScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListResultInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListResultOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExportResultInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ExportResultOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListResultsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_judge_score_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListResultsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_score_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_judge_score_service_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_score_service_proto_depIdxs,
		MessageInfos:      file_eolymp_judge_score_service_proto_msgTypes,
	}.Build()
	File_eolymp_judge_score_service_proto = out.File
	file_eolymp_judge_score_service_proto_rawDesc = nil
	file_eolymp_judge_score_service_proto_goTypes = nil
	file_eolymp_judge_score_service_proto_depIdxs = nil
}
