// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	oauth "github.com/eolymp/go-packages/oauth"
	mux "github.com/gorilla/mux"
	prometheus "github.com/prometheus/client_golang/prometheus"
	promauto "github.com/prometheus/client_golang/prometheus/promauto"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	time "time"
)

// _Judge_HTTPReadRequestBody parses body into proto.Message
func _Judge_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPWriteResponse writes proto.Message to HTTP response
func _Judge_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Judge_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Judge_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Judge_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewJudgeHandler constructs new http.Handler for JudgeServer
func NewJudgeHandler(srv JudgeServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.judge.Judge/CreateContest", _Judge_CreateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteContest", _Judge_DeleteContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateContest", _Judge_UpdateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/LookupContest", _Judge_LookupContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeContest", _Judge_DescribeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListContests", _Judge_ListContests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenContest", _Judge_OpenContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseContest", _Judge_CloseContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRegistrationForm", _Judge_ConfigureRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRegistrationForm", _Judge_DescribeRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRuntime", _Judge_ConfigureRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRuntime", _Judge_DescribeRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureAppearance", _Judge_ConfigureAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAppearance", _Judge_DescribeAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SubmitRegistration", _Judge_SubmitRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRegistration", _Judge_DescribeRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportProblem", _Judge_ImportProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SyncProblem", _Judge_SyncProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateProblem", _Judge_UpdateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListProblems", _Judge_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeProblem", _Judge_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeCodeTemplate", _Judge_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListStatements", _Judge_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListExamples", _Judge_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteProblem", _Judge_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestProblem", _Judge_RetestProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/AddParticipant", _Judge_AddParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnableParticipant", _Judge_EnableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DisableParticipant", _Judge_DisableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateParticipant", _Judge_UpdateParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemoveParticipant", _Judge_RemoveParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListParticipants", _Judge_ListParticipants(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeParticipant", _Judge_DescribeParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectParticipant", _Judge_IntrospectParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/JoinContest", _Judge_JoinContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/StartContest", _Judge_StartContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/VerifyPasscode", _Judge_VerifyPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnterPasscode", _Judge_EnterPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResetPasscode", _Judge_ResetPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemovePasscode", _Judge_RemovePasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateSubmission", _Judge_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListSubmissions", _Judge_ListSubmissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeSubmission", _Judge_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestSubmission", _Judge_RetestSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateTicket", _Judge_CreateTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseTicket", _Judge_CloseTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenTicket", _Judge_OpenTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadTicket", _Judge_ReadTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteTicket", _Judge_DeleteTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeTicket", _Judge_DescribeTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListTickets", _Judge_ListTickets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReplyTicket", _Judge_ReplyTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListReplies", _Judge_ListReplies(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteReply", _Judge_DeleteReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateReply", _Judge_UpdateReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateAnnouncement", _Judge_CreateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateAnnouncement", _Judge_UpdateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteAnnouncement", _Judge_DeleteAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadAnnouncement", _Judge_ReadAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncement", _Judge_DescribeAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncementStatus", _Judge_DescribeAnnouncementStatus(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAnnouncements", _Judge_ListAnnouncements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateScoreboard", _Judge_CreateScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateScoreboard", _Judge_UpdateScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RebuildScoreboard", _Judge_RebuildScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteScoreboard", _Judge_DeleteScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScoreboard", _Judge_DescribeScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeDefaultScoreboard", _Judge_DescribeDefaultScoreboard(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListScoreboards", _Judge_ListScoreboards(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScoreboardRow", _Judge_DescribeScoreboardRow(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeDefaultScoreboardRow", _Judge_DescribeDefaultScoreboardRow(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListScoreboardRows", _Judge_ListScoreboardRows(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListDefaultScoreboardRows", _Judge_ListDefaultScoreboardRows(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListEntitlements", _Judge_ListEntitlements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListActivities", _Judge_ListActivities(srv)).Methods(http.MethodPost)
	return router
}

func _Judge_CreateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRegistrationForm(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRegistrationFormInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRegistrationForm(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRegistrationForm(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRegistrationFormInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRegistrationForm(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SubmitRegistration(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SubmitRegistrationInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SubmitRegistration(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRegistration(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRegistrationInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRegistration(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RebuildScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RebuildScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeDefaultScoreboard(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeDefaultScoreboardInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeDefaultScoreboard(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListScoreboards(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboards(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoreboardRow(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreboardRowInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoreboardRow(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeDefaultScoreboardRow(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeDefaultScoreboardRowInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeDefaultScoreboardRow(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListScoreboardRows(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListScoreboardRowsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListScoreboardRows(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListDefaultScoreboardRows(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListDefaultScoreboardRowsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListDefaultScoreboardRows(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListEntitlements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListActivities(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

var promJudgeRequestLatency = promauto.NewHistogramVec(prometheus.HistogramOpts{
	Name:    "judge_request_latency",
	Help:    "Judge request latency",
	Buckets: []float64{0.1, 0.4, 1, 5},
}, []string{"method", "status"})

type _JudgeLimiter interface {
	Allow(context.Context, string, float64, int) bool
}

type JudgeInterceptor struct {
	limiter _JudgeLimiter
	server  JudgeServer
}

// NewJudgeInterceptor constructs additional middleware for a server based on annotations in proto files
func NewJudgeInterceptor(srv JudgeServer, lim _JudgeLimiter) *JudgeInterceptor {
	return &JudgeInterceptor{server: srv, limiter: lim}
}

func (i *JudgeInterceptor) CreateContest(ctx context.Context, in *CreateContestInput) (out *CreateContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CreateContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CreateContest", 0.08, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateContest(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteContest(ctx context.Context, in *DeleteContestInput) (out *DeleteContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteContest", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteContest(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateContest(ctx context.Context, in *UpdateContestInput) (out *UpdateContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateContest", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateContest(ctx, in)
	return
}

func (i *JudgeInterceptor) LookupContest(ctx context.Context, in *LookupContestInput) (out *LookupContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/LookupContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/LookupContest", 50, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.LookupContest(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeContest(ctx context.Context, in *DescribeContestInput) (out *DescribeContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeContest", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeContest(ctx, in)
	return
}

func (i *JudgeInterceptor) ListContests(ctx context.Context, in *ListContestsInput) (out *ListContestsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListContests", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListContests", 1, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListContests(ctx, in)
	return
}

func (i *JudgeInterceptor) OpenContest(ctx context.Context, in *OpenContestInput) (out *OpenContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/OpenContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/OpenContest", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.OpenContest(ctx, in)
	return
}

func (i *JudgeInterceptor) CloseContest(ctx context.Context, in *CloseContestInput) (out *CloseContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CloseContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CloseContest", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CloseContest(ctx, in)
	return
}

func (i *JudgeInterceptor) ConfigureRegistrationForm(ctx context.Context, in *ConfigureRegistrationFormInput) (out *ConfigureRegistrationFormOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ConfigureRegistrationForm", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ConfigureRegistrationForm", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ConfigureRegistrationForm(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeRegistrationForm(ctx context.Context, in *DescribeRegistrationFormInput) (out *DescribeRegistrationFormOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeRegistrationForm", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeRegistrationForm", 1, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeRegistrationForm(ctx, in)
	return
}

func (i *JudgeInterceptor) ConfigureRuntime(ctx context.Context, in *ConfigureRuntimeInput) (out *ConfigureRuntimeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ConfigureRuntime", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ConfigureRuntime", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ConfigureRuntime(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeRuntime(ctx context.Context, in *DescribeRuntimeInput) (out *DescribeRuntimeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeRuntime", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeRuntime", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeRuntime(ctx, in)
	return
}

func (i *JudgeInterceptor) ConfigureAppearance(ctx context.Context, in *ConfigureAppearanceInput) (out *ConfigureAppearanceOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ConfigureAppearance", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ConfigureAppearance", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ConfigureAppearance(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeAppearance(ctx context.Context, in *DescribeAppearanceInput) (out *DescribeAppearanceOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeAppearance", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeAppearance", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeAppearance(ctx, in)
	return
}

func (i *JudgeInterceptor) SubmitRegistration(ctx context.Context, in *SubmitRegistrationInput) (out *SubmitRegistrationOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/SubmitRegistration", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:participate") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:participate")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/SubmitRegistration", 1, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.SubmitRegistration(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeRegistration(ctx context.Context, in *DescribeRegistrationInput) (out *DescribeRegistrationOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeRegistration", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeRegistration", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeRegistration(ctx, in)
	return
}

func (i *JudgeInterceptor) ImportProblem(ctx context.Context, in *ImportProblemInput) (out *ImportProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ImportProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ImportProblem", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ImportProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) SyncProblem(ctx context.Context, in *SyncProblemInput) (out *SyncProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/SyncProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/SyncProblem", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.SyncProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateProblem(ctx context.Context, in *UpdateProblemInput) (out *UpdateProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateProblem", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) ListProblems(ctx context.Context, in *ListProblemsInput) (out *ListProblemsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListProblems", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListProblems", 3, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListProblems(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (out *DescribeProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeProblem", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (out *DescribeCodeTemplateOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeCodeTemplate", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeCodeTemplate", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeCodeTemplate(ctx, in)
	return
}

func (i *JudgeInterceptor) ListStatements(ctx context.Context, in *ListStatementsInput) (out *ListStatementsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListStatements", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListStatements", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListStatements(ctx, in)
	return
}

func (i *JudgeInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (out *ListExamplesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListExamples", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListExamples", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListExamples(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (out *DeleteProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteProblem", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) RetestProblem(ctx context.Context, in *RetestProblemInput) (out *RetestProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/RetestProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/RetestProblem", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RetestProblem(ctx, in)
	return
}

func (i *JudgeInterceptor) AddParticipant(ctx context.Context, in *AddParticipantInput) (out *AddParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/AddParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/AddParticipant", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.AddParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) EnableParticipant(ctx context.Context, in *EnableParticipantInput) (out *EnableParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/EnableParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/EnableParticipant", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.EnableParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) DisableParticipant(ctx context.Context, in *DisableParticipantInput) (out *DisableParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DisableParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DisableParticipant", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DisableParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput) (out *UpdateParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateParticipant", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) RemoveParticipant(ctx context.Context, in *RemoveParticipantInput) (out *RemoveParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/RemoveParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/RemoveParticipant", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RemoveParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) ListParticipants(ctx context.Context, in *ListParticipantsInput) (out *ListParticipantsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListParticipants", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListParticipants", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListParticipants(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput) (out *DescribeParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeParticipant", 50, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) IntrospectParticipant(ctx context.Context, in *IntrospectParticipantInput) (out *IntrospectParticipantOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/IntrospectParticipant", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/IntrospectParticipant", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.IntrospectParticipant(ctx, in)
	return
}

func (i *JudgeInterceptor) JoinContest(ctx context.Context, in *JoinContestInput) (out *JoinContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/JoinContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/JoinContest", 1, 3) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.JoinContest(ctx, in)
	return
}

func (i *JudgeInterceptor) StartContest(ctx context.Context, in *StartContestInput) (out *StartContestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/StartContest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:participate") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:participate")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/StartContest", 1, 3) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.StartContest(ctx, in)
	return
}

func (i *JudgeInterceptor) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput) (out *VerifyPasscodeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/VerifyPasscode", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/VerifyPasscode", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.VerifyPasscode(ctx, in)
	return
}

func (i *JudgeInterceptor) EnterPasscode(ctx context.Context, in *EnterPasscodeInput) (out *EnterPasscodeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/EnterPasscode", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/EnterPasscode", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.EnterPasscode(ctx, in)
	return
}

func (i *JudgeInterceptor) ResetPasscode(ctx context.Context, in *ResetPasscodeInput) (out *ResetPasscodeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ResetPasscode", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ResetPasscode", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ResetPasscode(ctx, in)
	return
}

func (i *JudgeInterceptor) RemovePasscode(ctx context.Context, in *RemovePasscodeInput) (out *RemovePasscodeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/RemovePasscode", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/RemovePasscode", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RemovePasscode(ctx, in)
	return
}

func (i *JudgeInterceptor) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (out *CreateSubmissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CreateSubmission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:participate") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:participate")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CreateSubmission", 0.16, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateSubmission(ctx, in)
	return
}

func (i *JudgeInterceptor) ListSubmissions(ctx context.Context, in *ListSubmissionsInput) (out *ListSubmissionsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListSubmissions", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListSubmissions", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListSubmissions(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (out *DescribeSubmissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeSubmission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeSubmission", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeSubmission(ctx, in)
	return
}

func (i *JudgeInterceptor) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (out *RetestSubmissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/RetestSubmission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/RetestSubmission", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RetestSubmission(ctx, in)
	return
}

func (i *JudgeInterceptor) CreateTicket(ctx context.Context, in *CreateTicketInput) (out *CreateTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CreateTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:participate") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:participate")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CreateTicket", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) CloseTicket(ctx context.Context, in *CloseTicketInput) (out *CloseTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CloseTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CloseTicket", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CloseTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) OpenTicket(ctx context.Context, in *OpenTicketInput) (out *OpenTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/OpenTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/OpenTicket", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.OpenTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) ReadTicket(ctx context.Context, in *ReadTicketInput) (out *ReadTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ReadTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ReadTicket", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ReadTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteTicket(ctx context.Context, in *DeleteTicketInput) (out *DeleteTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteTicket", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeTicket(ctx context.Context, in *DescribeTicketInput) (out *DescribeTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeTicket", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) ListTickets(ctx context.Context, in *ListTicketsInput) (out *ListTicketsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListTickets", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListTickets", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListTickets(ctx, in)
	return
}

func (i *JudgeInterceptor) ReplyTicket(ctx context.Context, in *ReplyTicketInput) (out *ReplyTicketOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ReplyTicket", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:participate") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:participate")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ReplyTicket", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ReplyTicket(ctx, in)
	return
}

func (i *JudgeInterceptor) ListReplies(ctx context.Context, in *ListRepliesInput) (out *ListRepliesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListReplies", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListReplies", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListReplies(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteReply(ctx context.Context, in *DeleteReplyInput) (out *DeleteReplyOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteReply", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteReply", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteReply(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateReply(ctx context.Context, in *UpdateReplyInput) (out *UpdateReplyOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateReply", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateReply", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateReply(ctx, in)
	return
}

func (i *JudgeInterceptor) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementInput) (out *CreateAnnouncementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CreateAnnouncement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CreateAnnouncement", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateAnnouncement(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementInput) (out *UpdateAnnouncementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateAnnouncement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateAnnouncement", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateAnnouncement(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementInput) (out *DeleteAnnouncementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteAnnouncement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteAnnouncement", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteAnnouncement(ctx, in)
	return
}

func (i *JudgeInterceptor) ReadAnnouncement(ctx context.Context, in *ReadAnnouncementInput) (out *ReadAnnouncementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ReadAnnouncement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ReadAnnouncement", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ReadAnnouncement(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeAnnouncement(ctx context.Context, in *DescribeAnnouncementInput) (out *DescribeAnnouncementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeAnnouncement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeAnnouncement", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeAnnouncement(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeAnnouncementStatus(ctx context.Context, in *DescribeAnnouncementStatusInput) (out *DescribeAnnouncementStatusOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeAnnouncementStatus", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeAnnouncementStatus", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeAnnouncementStatus(ctx, in)
	return
}

func (i *JudgeInterceptor) ListAnnouncements(ctx context.Context, in *ListAnnouncementsInput) (out *ListAnnouncementsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListAnnouncements", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListAnnouncements", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListAnnouncements(ctx, in)
	return
}

func (i *JudgeInterceptor) CreateScoreboard(ctx context.Context, in *CreateScoreboardInput) (out *CreateScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/CreateScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/CreateScoreboard", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput) (out *UpdateScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/UpdateScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/UpdateScoreboard", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) RebuildScoreboard(ctx context.Context, in *RebuildScoreboardInput) (out *RebuildScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/RebuildScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/RebuildScoreboard", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RebuildScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput) (out *DeleteScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DeleteScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DeleteScoreboard", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput) (out *DescribeScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeScoreboard", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeDefaultScoreboard(ctx context.Context, in *DescribeDefaultScoreboardInput) (out *DescribeDefaultScoreboardOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeDefaultScoreboard", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeDefaultScoreboard", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeDefaultScoreboard(ctx, in)
	return
}

func (i *JudgeInterceptor) ListScoreboards(ctx context.Context, in *ListScoreboardsInput) (out *ListScoreboardsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListScoreboards", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListScoreboards", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListScoreboards(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeScoreboardRow(ctx context.Context, in *DescribeScoreboardRowInput) (out *DescribeScoreboardRowOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeScoreboardRow", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeScoreboardRow", 50, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeScoreboardRow(ctx, in)
	return
}

func (i *JudgeInterceptor) DescribeDefaultScoreboardRow(ctx context.Context, in *DescribeDefaultScoreboardRowInput) (out *DescribeDefaultScoreboardRowOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/DescribeDefaultScoreboardRow", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/DescribeDefaultScoreboardRow", 50, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeDefaultScoreboardRow(ctx, in)
	return
}

func (i *JudgeInterceptor) ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput) (out *ListScoreboardRowsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListScoreboardRows", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListScoreboardRows", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListScoreboardRows(ctx, in)
	return
}

func (i *JudgeInterceptor) ListDefaultScoreboardRows(ctx context.Context, in *ListDefaultScoreboardRowsInput) (out *ListDefaultScoreboardRowsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListDefaultScoreboardRows", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListDefaultScoreboardRows", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListDefaultScoreboardRows(ctx, in)
	return
}

func (i *JudgeInterceptor) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (out *ListEntitlementsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListEntitlements", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListEntitlements", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListEntitlements(ctx, in)
	return
}

func (i *JudgeInterceptor) ListActivities(ctx context.Context, in *ListActivitiesInput) (out *ListActivitiesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promJudgeRequestLatency.WithLabelValues("eolymp.judge.Judge/ListActivities", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("judge:contest:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: judge:contest:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.judge.Judge/ListActivities", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListActivities(ctx, in)
	return
}
