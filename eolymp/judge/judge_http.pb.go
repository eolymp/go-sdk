// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Judge_HTTPReadQueryString parses body into proto.Message
func _Judge_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPReadRequestBody parses body into proto.Message
func _Judge_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPWriteResponse writes proto.Message to HTTP response
func _Judge_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Judge_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Judge_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Judge_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewJudgeHandler constructs new http.Handler for JudgeServer
func NewJudgeHandler(srv JudgeServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.judge.Judge/LookupContest", _Judge_LookupContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateContest", _Judge_CreateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteContest", _Judge_DeleteContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateContest", _Judge_UpdateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeContest", _Judge_DescribeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListContests", _Judge_ListContests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenContest", _Judge_OpenContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseContest", _Judge_CloseContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SuspendContest", _Judge_SuspendContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/FreezeContest", _Judge_FreezeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResumeContest", _Judge_ResumeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRuntime", _Judge_ConfigureRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRuntime", _Judge_DescribeRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureAppearance", _Judge_ConfigureAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAppearance", _Judge_DescribeAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureScoring", _Judge_ConfigureScoring(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScoring", _Judge_DescribeScoring(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportProblem", _Judge_ImportProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SyncProblem", _Judge_SyncProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateProblem", _Judge_UpdateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListProblems", _Judge_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeProblem", _Judge_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeCodeTemplate", _Judge_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/LookupCodeTemplate", _Judge_LookupCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListStatements", _Judge_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAttachments", _Judge_ListAttachments(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListExamples", _Judge_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteProblem", _Judge_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestProblem", _Judge_RetestProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/AddParticipant", _Judge_AddParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnableParticipant", _Judge_EnableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DisableParticipant", _Judge_DisableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateParticipant", _Judge_UpdateParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemoveParticipant", _Judge_RemoveParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListParticipants", _Judge_ListParticipants(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeParticipant", _Judge_DescribeParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectParticipant", _Judge_IntrospectParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/JoinContest", _Judge_JoinContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/StartContest", _Judge_StartContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/VerifyPasscode", _Judge_VerifyPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnterPasscode", _Judge_EnterPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResetPasscode", _Judge_ResetPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemovePasscode", _Judge_RemovePasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateSubmission", _Judge_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListSubmissions", _Judge_ListSubmissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeSubmission", _Judge_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestSubmission", _Judge_RetestSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateTicket", _Judge_CreateTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseTicket", _Judge_CloseTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenTicket", _Judge_OpenTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadTicket", _Judge_ReadTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteTicket", _Judge_DeleteTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeTicket", _Judge_DescribeTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListTickets", _Judge_ListTickets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReplyTicket", _Judge_ReplyTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListReplies", _Judge_ListReplies(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteReply", _Judge_DeleteReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateReply", _Judge_UpdateReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateAnnouncement", _Judge_CreateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateAnnouncement", _Judge_UpdateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteAnnouncement", _Judge_DeleteAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadAnnouncement", _Judge_ReadAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncement", _Judge_DescribeAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncementStatus", _Judge_DescribeAnnouncementStatus(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAnnouncements", _Judge_ListAnnouncements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectScore", _Judge_IntrospectScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScore", _Judge_DescribeScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportScore", _Judge_ImportScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListResult", _Judge_ListResult(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RebuildScore", _Judge_RebuildScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListEntitlements", _Judge_ListEntitlements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListActivities", _Judge_ListActivities(srv)).Methods(http.MethodPost)
	return router
}

// NewJudgeHandlerHttp constructs new http.Handler for JudgeServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewJudgeHandlerHttp(srv JudgeServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/contests/__lookup", _Judge_LookupContest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.LookupContest")

	router.Handle(prefix+"/contests", _Judge_CreateContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_DeleteContest_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_UpdateContest_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_DescribeContest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeContest")

	router.Handle(prefix+"/contests", _Judge_ListContests_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListContests")

	router.Handle(prefix+"/contests/{contest_id}/open", _Judge_OpenContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.OpenContest")

	router.Handle(prefix+"/contests/{contest_id}/close", _Judge_CloseContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CloseContest")

	router.Handle(prefix+"/contests/{contest_id}/suspend", _Judge_SuspendContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.SuspendContest")

	router.Handle(prefix+"/contests/{contest_id}/freeze", _Judge_FreezeContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.FreezeContest")

	router.Handle(prefix+"/contests/{contest_id}/resume", _Judge_ResumeContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResumeContest")

	router.Handle(prefix+"/contests/{contest_id}/runtime", _Judge_ConfigureRuntime_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureRuntime")

	router.Handle(prefix+"/contests/{contest_id}/runtime", _Judge_DescribeRuntime_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeRuntime")

	router.Handle(prefix+"/contests/{contest_id}/appearance", _Judge_ConfigureAppearance_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureAppearance")

	router.Handle(prefix+"/contests/{contest_id}/appearance", _Judge_DescribeAppearance_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAppearance")

	router.Handle(prefix+"/contests/{contest_id}/scoring", _Judge_ConfigureScoring_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureScoring")

	router.Handle(prefix+"/contests/{contest_id}/scoring", _Judge_DescribeScoring_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeScoring")

	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ImportProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/sync", _Judge_SyncProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.SyncProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_UpdateProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ListProblems_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListProblems")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DescribeProblem_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/templates/{template_id}", _Judge_DescribeCodeTemplate_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeCodeTemplate")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/lookup-template", _Judge_LookupCodeTemplate_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.LookupCodeTemplate")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/statements", _Judge_ListStatements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListStatements")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/attachments", _Judge_ListAttachments_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAttachments")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/examples", _Judge_ListExamples_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListExamples")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DeleteProblem_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/retest", _Judge_RetestProblem_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.RetestProblem")

	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_AddParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.AddParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/enable", _Judge_EnableParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnableParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/disable", _Judge_DisableParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.DisableParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_UpdateParticipant_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_RemoveParticipant_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.RemoveParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_ListParticipants_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListParticipants")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_DescribeParticipant_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeParticipant")

	router.Handle(prefix+"/contests/{contest_id}/introspect", _Judge_IntrospectParticipant_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.IntrospectParticipant")

	router.Handle(prefix+"/contests/{contest_id}/join", _Judge_JoinContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.JoinContest")

	router.Handle(prefix+"/contests/{contest_id}/start", _Judge_StartContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.StartContest")

	router.Handle(prefix+"/contests/{contest_id}/verify-passcode", _Judge_VerifyPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.VerifyPasscode")

	router.Handle(prefix+"/contests/{contest_id}/enter-passcode", _Judge_EnterPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnterPasscode")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_ResetPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResetPasscode")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_RemovePasscode_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.RemovePasscode")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/submissions", _Judge_CreateSubmission_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateSubmission")

	router.Handle(prefix+"/contests/{contest_id}/submissions", _Judge_ListSubmissions_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListSubmissions")

	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}", _Judge_DescribeSubmission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeSubmission")

	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}/retest", _Judge_RetestSubmission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.RetestSubmission")

	router.Handle(prefix+"/contests/{contest_id}/tickets", _Judge_CreateTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/close", _Judge_CloseTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CloseTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/open", _Judge_OpenTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.OpenTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/read", _Judge_ReadTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReadTicket")

	router.Handle(prefix+"/tickets/{ticket_id}", _Judge_DeleteTicket_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteTicket")

	router.Handle(prefix+"/tickets/{ticket_id}", _Judge_DescribeTicket_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeTicket")

	router.Handle(prefix+"/tickets", _Judge_ListTickets_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListTickets")

	router.Handle(prefix+"/tickets/{ticket_id}/replies", _Judge_ReplyTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReplyTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/replies", _Judge_ListReplies_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListReplies")

	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _Judge_DeleteReply_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteReply")

	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _Judge_UpdateReply_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateReply")

	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_CreateAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_UpdateAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DeleteAnnouncement_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/read", _Judge_ReadAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReadAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DescribeAnnouncement_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/status", _Judge_DescribeAnnouncementStatus_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncementStatus")

	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_ListAnnouncements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAnnouncements")

	router.Handle(prefix+"/contests/{contest_id}/introspect/score", _Judge_IntrospectScore_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.IntrospectScore")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/score", _Judge_DescribeScore_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeScore")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/scores", _Judge_ImportScore_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportScore")

	router.Handle(prefix+"/contests/{contest_id}/results", _Judge_ListResult_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListResult")

	router.Handle(prefix+"/contests/{contest_id}/rebuild", _Judge_RebuildScore_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.RebuildScore")

	router.Handle(prefix+"/__judge/entitlements", _Judge_ListEntitlements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListEntitlements")

	router.Handle(prefix+"/contests/{contest_id}/activities", _Judge_ListActivities_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListActivities")

	return router
}

func _Judge_LookupContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SuspendContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SuspendContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_FreezeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.FreezeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResumeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResumeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureScoring(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoring(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAttachments(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListResult(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListResult(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RebuildScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RebuildScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListEntitlements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListActivities(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SuspendContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.SuspendContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_FreezeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.FreezeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResumeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ResumeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureAppearance_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAppearance_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAppearanceInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureScoring_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoring_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoringInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupCodeTemplate_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.LookupCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAttachments_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.UpdateParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.IntrospectScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.ImportScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListResult_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListResult(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RebuildScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.RebuildScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListEntitlements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListActivities_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

type _JudgeHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _JudgeMiddleware = func(ctx context.Context, method string, in proto.Message, handler _JudgeHandler) (out proto.Message, err error)
type JudgeInterceptor struct {
	middleware []_JudgeMiddleware
	server     JudgeServer
}

// NewJudgeInterceptor constructs additional middleware for a server based on annotations in proto files
func NewJudgeInterceptor(srv JudgeServer, middleware ..._JudgeMiddleware) *JudgeInterceptor {
	return &JudgeInterceptor{server: srv, middleware: middleware}
}

func (i *JudgeInterceptor) LookupContest(ctx context.Context, in *LookupContestInput) (*LookupContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*LookupContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *LookupContestInput, got %T", in))
		}

		return i.server.LookupContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/LookupContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*LookupContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *LookupContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CreateContest(ctx context.Context, in *CreateContestInput) (*CreateContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateContestInput, got %T", in))
		}

		return i.server.CreateContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CreateContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DeleteContest(ctx context.Context, in *DeleteContestInput) (*DeleteContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteContestInput, got %T", in))
		}

		return i.server.DeleteContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DeleteContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) UpdateContest(ctx context.Context, in *UpdateContestInput) (*UpdateContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateContestInput, got %T", in))
		}

		return i.server.UpdateContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/UpdateContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeContest(ctx context.Context, in *DescribeContestInput) (*DescribeContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeContestInput, got %T", in))
		}

		return i.server.DescribeContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListContests(ctx context.Context, in *ListContestsInput) (*ListContestsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListContestsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListContestsInput, got %T", in))
		}

		return i.server.ListContests(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListContests", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListContestsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListContestsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) OpenContest(ctx context.Context, in *OpenContestInput) (*OpenContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*OpenContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *OpenContestInput, got %T", in))
		}

		return i.server.OpenContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/OpenContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*OpenContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *OpenContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CloseContest(ctx context.Context, in *CloseContestInput) (*CloseContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CloseContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CloseContestInput, got %T", in))
		}

		return i.server.CloseContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CloseContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CloseContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CloseContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) SuspendContest(ctx context.Context, in *SuspendContestInput) (*SuspendContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SuspendContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SuspendContestInput, got %T", in))
		}

		return i.server.SuspendContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/SuspendContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SuspendContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SuspendContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) FreezeContest(ctx context.Context, in *FreezeContestInput) (*FreezeContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*FreezeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *FreezeContestInput, got %T", in))
		}

		return i.server.FreezeContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/FreezeContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*FreezeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *FreezeContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ResumeContest(ctx context.Context, in *ResumeContestInput) (*ResumeContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResumeContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResumeContestInput, got %T", in))
		}

		return i.server.ResumeContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ResumeContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResumeContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResumeContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ConfigureRuntime(ctx context.Context, in *ConfigureRuntimeInput) (*ConfigureRuntimeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ConfigureRuntimeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ConfigureRuntimeInput, got %T", in))
		}

		return i.server.ConfigureRuntime(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ConfigureRuntime", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ConfigureRuntimeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ConfigureRuntimeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeRuntime(ctx context.Context, in *DescribeRuntimeInput) (*DescribeRuntimeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeRuntimeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeRuntimeInput, got %T", in))
		}

		return i.server.DescribeRuntime(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeRuntime", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeRuntimeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeRuntimeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ConfigureAppearance(ctx context.Context, in *ConfigureAppearanceInput) (*ConfigureAppearanceOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ConfigureAppearanceInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ConfigureAppearanceInput, got %T", in))
		}

		return i.server.ConfigureAppearance(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ConfigureAppearance", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ConfigureAppearanceOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ConfigureAppearanceOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeAppearance(ctx context.Context, in *DescribeAppearanceInput) (*DescribeAppearanceOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeAppearanceInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeAppearanceInput, got %T", in))
		}

		return i.server.DescribeAppearance(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeAppearance", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeAppearanceOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeAppearanceOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ConfigureScoring(ctx context.Context, in *ConfigureScoringInput) (*ConfigureScoringOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ConfigureScoringInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ConfigureScoringInput, got %T", in))
		}

		return i.server.ConfigureScoring(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ConfigureScoring", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ConfigureScoringOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ConfigureScoringOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeScoring(ctx context.Context, in *DescribeScoringInput) (*DescribeScoringOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeScoringInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeScoringInput, got %T", in))
		}

		return i.server.DescribeScoring(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeScoring", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeScoringOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeScoringOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ImportProblem(ctx context.Context, in *ImportProblemInput) (*ImportProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ImportProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ImportProblemInput, got %T", in))
		}

		return i.server.ImportProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ImportProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ImportProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ImportProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) SyncProblem(ctx context.Context, in *SyncProblemInput) (*SyncProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SyncProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SyncProblemInput, got %T", in))
		}

		return i.server.SyncProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/SyncProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SyncProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SyncProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) UpdateProblem(ctx context.Context, in *UpdateProblemInput) (*UpdateProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateProblemInput, got %T", in))
		}

		return i.server.UpdateProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/UpdateProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListProblems(ctx context.Context, in *ListProblemsInput) (*ListProblemsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListProblemsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListProblemsInput, got %T", in))
		}

		return i.server.ListProblems(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListProblems", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListProblemsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListProblemsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (*DescribeProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeProblemInput, got %T", in))
		}

		return i.server.DescribeProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeCodeTemplateInput, got %T", in))
		}

		return i.server.DescribeCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeCodeTemplate", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) LookupCodeTemplate(ctx context.Context, in *LookupCodeTemplateInput) (*LookupCodeTemplateOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*LookupCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *LookupCodeTemplateInput, got %T", in))
		}

		return i.server.LookupCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/LookupCodeTemplate", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*LookupCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *LookupCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListStatements(ctx context.Context, in *ListStatementsInput) (*ListStatementsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListStatementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListStatementsInput, got %T", in))
		}

		return i.server.ListStatements(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListStatements", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListStatementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListStatementsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAttachmentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAttachmentsInput, got %T", in))
		}

		return i.server.ListAttachments(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListAttachments", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAttachmentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAttachmentsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (*ListExamplesOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListExamplesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListExamplesInput, got %T", in))
		}

		return i.server.ListExamples(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListExamples", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListExamplesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListExamplesOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (*DeleteProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteProblemInput, got %T", in))
		}

		return i.server.DeleteProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DeleteProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) RetestProblem(ctx context.Context, in *RetestProblemInput) (*RetestProblemOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RetestProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RetestProblemInput, got %T", in))
		}

		return i.server.RetestProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/RetestProblem", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RetestProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RetestProblemOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) AddParticipant(ctx context.Context, in *AddParticipantInput) (*AddParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*AddParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *AddParticipantInput, got %T", in))
		}

		return i.server.AddParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/AddParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*AddParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *AddParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) EnableParticipant(ctx context.Context, in *EnableParticipantInput) (*EnableParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EnableParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EnableParticipantInput, got %T", in))
		}

		return i.server.EnableParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/EnableParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EnableParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EnableParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DisableParticipant(ctx context.Context, in *DisableParticipantInput) (*DisableParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DisableParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DisableParticipantInput, got %T", in))
		}

		return i.server.DisableParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DisableParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DisableParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DisableParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput) (*UpdateParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateParticipantInput, got %T", in))
		}

		return i.server.UpdateParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/UpdateParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) RemoveParticipant(ctx context.Context, in *RemoveParticipantInput) (*RemoveParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemoveParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemoveParticipantInput, got %T", in))
		}

		return i.server.RemoveParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/RemoveParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemoveParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemoveParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListParticipants(ctx context.Context, in *ListParticipantsInput) (*ListParticipantsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListParticipantsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListParticipantsInput, got %T", in))
		}

		return i.server.ListParticipants(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListParticipants", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListParticipantsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListParticipantsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput) (*DescribeParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeParticipantInput, got %T", in))
		}

		return i.server.DescribeParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) IntrospectParticipant(ctx context.Context, in *IntrospectParticipantInput) (*IntrospectParticipantOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectParticipantInput, got %T", in))
		}

		return i.server.IntrospectParticipant(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/IntrospectParticipant", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) JoinContest(ctx context.Context, in *JoinContestInput) (*JoinContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*JoinContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *JoinContestInput, got %T", in))
		}

		return i.server.JoinContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/JoinContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*JoinContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *JoinContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) StartContest(ctx context.Context, in *StartContestInput) (*StartContestOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*StartContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *StartContestInput, got %T", in))
		}

		return i.server.StartContest(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/StartContest", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*StartContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *StartContestOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput) (*VerifyPasscodeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*VerifyPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *VerifyPasscodeInput, got %T", in))
		}

		return i.server.VerifyPasscode(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/VerifyPasscode", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*VerifyPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *VerifyPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) EnterPasscode(ctx context.Context, in *EnterPasscodeInput) (*EnterPasscodeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EnterPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EnterPasscodeInput, got %T", in))
		}

		return i.server.EnterPasscode(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/EnterPasscode", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EnterPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EnterPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ResetPasscode(ctx context.Context, in *ResetPasscodeInput) (*ResetPasscodeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResetPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResetPasscodeInput, got %T", in))
		}

		return i.server.ResetPasscode(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ResetPasscode", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResetPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResetPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) RemovePasscode(ctx context.Context, in *RemovePasscodeInput) (*RemovePasscodeOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemovePasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemovePasscodeInput, got %T", in))
		}

		return i.server.RemovePasscode(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/RemovePasscode", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemovePasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemovePasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateSubmissionInput, got %T", in))
		}

		return i.server.CreateSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CreateSubmission", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListSubmissions(ctx context.Context, in *ListSubmissionsInput) (*ListSubmissionsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListSubmissionsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListSubmissionsInput, got %T", in))
		}

		return i.server.ListSubmissions(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListSubmissions", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListSubmissionsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListSubmissionsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeSubmissionInput, got %T", in))
		}

		return i.server.DescribeSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeSubmission", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (*RetestSubmissionOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RetestSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RetestSubmissionInput, got %T", in))
		}

		return i.server.RetestSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/RetestSubmission", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RetestSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RetestSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CreateTicket(ctx context.Context, in *CreateTicketInput) (*CreateTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTicketInput, got %T", in))
		}

		return i.server.CreateTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CreateTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CloseTicket(ctx context.Context, in *CloseTicketInput) (*CloseTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CloseTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CloseTicketInput, got %T", in))
		}

		return i.server.CloseTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CloseTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CloseTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CloseTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) OpenTicket(ctx context.Context, in *OpenTicketInput) (*OpenTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*OpenTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *OpenTicketInput, got %T", in))
		}

		return i.server.OpenTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/OpenTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*OpenTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *OpenTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ReadTicket(ctx context.Context, in *ReadTicketInput) (*ReadTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReadTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReadTicketInput, got %T", in))
		}

		return i.server.ReadTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ReadTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReadTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReadTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DeleteTicket(ctx context.Context, in *DeleteTicketInput) (*DeleteTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTicketInput, got %T", in))
		}

		return i.server.DeleteTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DeleteTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeTicket(ctx context.Context, in *DescribeTicketInput) (*DescribeTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTicketInput, got %T", in))
		}

		return i.server.DescribeTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListTickets(ctx context.Context, in *ListTicketsInput) (*ListTicketsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTicketsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTicketsInput, got %T", in))
		}

		return i.server.ListTickets(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListTickets", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTicketsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTicketsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ReplyTicket(ctx context.Context, in *ReplyTicketInput) (*ReplyTicketOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReplyTicketInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReplyTicketInput, got %T", in))
		}

		return i.server.ReplyTicket(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ReplyTicket", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReplyTicketOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReplyTicketOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListReplies(ctx context.Context, in *ListRepliesInput) (*ListRepliesOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListRepliesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListRepliesInput, got %T", in))
		}

		return i.server.ListReplies(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListReplies", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListRepliesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListRepliesOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DeleteReply(ctx context.Context, in *DeleteReplyInput) (*DeleteReplyOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteReplyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteReplyInput, got %T", in))
		}

		return i.server.DeleteReply(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DeleteReply", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteReplyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteReplyOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) UpdateReply(ctx context.Context, in *UpdateReplyInput) (*UpdateReplyOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateReplyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateReplyInput, got %T", in))
		}

		return i.server.UpdateReply(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/UpdateReply", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateReplyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateReplyOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementInput) (*CreateAnnouncementOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateAnnouncementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateAnnouncementInput, got %T", in))
		}

		return i.server.CreateAnnouncement(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/CreateAnnouncement", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateAnnouncementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateAnnouncementOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementInput) (*UpdateAnnouncementOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateAnnouncementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateAnnouncementInput, got %T", in))
		}

		return i.server.UpdateAnnouncement(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/UpdateAnnouncement", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateAnnouncementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateAnnouncementOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementInput) (*DeleteAnnouncementOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteAnnouncementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteAnnouncementInput, got %T", in))
		}

		return i.server.DeleteAnnouncement(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DeleteAnnouncement", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteAnnouncementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteAnnouncementOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ReadAnnouncement(ctx context.Context, in *ReadAnnouncementInput) (*ReadAnnouncementOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReadAnnouncementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReadAnnouncementInput, got %T", in))
		}

		return i.server.ReadAnnouncement(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ReadAnnouncement", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReadAnnouncementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReadAnnouncementOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeAnnouncement(ctx context.Context, in *DescribeAnnouncementInput) (*DescribeAnnouncementOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeAnnouncementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeAnnouncementInput, got %T", in))
		}

		return i.server.DescribeAnnouncement(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeAnnouncement", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeAnnouncementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeAnnouncementOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeAnnouncementStatus(ctx context.Context, in *DescribeAnnouncementStatusInput) (*DescribeAnnouncementStatusOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeAnnouncementStatusInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeAnnouncementStatusInput, got %T", in))
		}

		return i.server.DescribeAnnouncementStatus(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeAnnouncementStatus", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeAnnouncementStatusOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeAnnouncementStatusOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListAnnouncements(ctx context.Context, in *ListAnnouncementsInput) (*ListAnnouncementsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAnnouncementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAnnouncementsInput, got %T", in))
		}

		return i.server.ListAnnouncements(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListAnnouncements", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAnnouncementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAnnouncementsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) IntrospectScore(ctx context.Context, in *IntrospectScoreInput) (*IntrospectScoreOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectScoreInput, got %T", in))
		}

		return i.server.IntrospectScore(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/IntrospectScore", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectScoreOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) DescribeScore(ctx context.Context, in *DescribeScoreInput) (*DescribeScoreOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeScoreInput, got %T", in))
		}

		return i.server.DescribeScore(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/DescribeScore", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeScoreOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ImportScore(ctx context.Context, in *ImportScoreInput) (*ImportScoreOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ImportScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ImportScoreInput, got %T", in))
		}

		return i.server.ImportScore(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ImportScore", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ImportScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ImportScoreOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListResult(ctx context.Context, in *ListResultInput) (*ListResultOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListResultInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListResultInput, got %T", in))
		}

		return i.server.ListResult(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListResult", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListResultOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListResultOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) RebuildScore(ctx context.Context, in *RebuildScoreInput) (*RebuildScoreOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RebuildScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RebuildScoreInput, got %T", in))
		}

		return i.server.RebuildScore(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/RebuildScore", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RebuildScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RebuildScoreOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (*ListEntitlementsOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListEntitlementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListEntitlementsInput, got %T", in))
		}

		return i.server.ListEntitlements(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListEntitlements", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListEntitlementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListEntitlementsOutput, got %T", out))
	}

	return message, err
}

func (i *JudgeInterceptor) ListActivities(ctx context.Context, in *ListActivitiesInput) (*ListActivitiesOutput, error) {
	next := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListActivitiesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListActivitiesInput, got %T", in))
		}

		return i.server.ListActivities(ctx, message)
	}

	for _, mw := range i.middleware {
		handler := next

		next = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.Judge/ListActivities", in, handler)
		}
	}

	out, err := next(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListActivitiesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListActivitiesOutput, got %T", out))
	}

	return message, err
}
