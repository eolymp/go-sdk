// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Judge_HTTPReadQueryString parses body into proto.Message
func _Judge_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPReadRequestBody parses body into proto.Message
func _Judge_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPWriteResponse writes proto.Message to HTTP response
func _Judge_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Judge_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Judge_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Judge_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewJudgeHandler constructs new http.Handler for JudgeServer
func NewJudgeHandler(srv JudgeServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.judge.Judge/LookupContest", _Judge_LookupContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateContest", _Judge_CreateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteContest", _Judge_DeleteContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateContest", _Judge_UpdateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeContest", _Judge_DescribeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListContests", _Judge_ListContests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenContest", _Judge_OpenContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseContest", _Judge_CloseContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SuspendContest", _Judge_SuspendContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/FreezeContest", _Judge_FreezeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResumeContest", _Judge_ResumeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRuntime", _Judge_ConfigureRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRuntime", _Judge_DescribeRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureAppearance", _Judge_ConfigureAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAppearance", _Judge_DescribeAppearance(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureScoring", _Judge_ConfigureScoring(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScoring", _Judge_DescribeScoring(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportProblem", _Judge_ImportProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SyncProblem", _Judge_SyncProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateProblem", _Judge_UpdateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListProblems", _Judge_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeProblem", _Judge_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeCodeTemplate", _Judge_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/LookupCodeTemplate", _Judge_LookupCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListStatements", _Judge_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAttachments", _Judge_ListAttachments(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListExamples", _Judge_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteProblem", _Judge_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestProblem", _Judge_RetestProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/AddParticipant", _Judge_AddParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnableParticipant", _Judge_EnableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DisableParticipant", _Judge_DisableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateParticipant", _Judge_UpdateParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemoveParticipant", _Judge_RemoveParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListParticipants", _Judge_ListParticipants(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeParticipant", _Judge_DescribeParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectParticipant", _Judge_IntrospectParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/JoinContest", _Judge_JoinContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/StartContest", _Judge_StartContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/VerifyPasscode", _Judge_VerifyPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnterPasscode", _Judge_EnterPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResetPasscode", _Judge_ResetPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemovePasscode", _Judge_RemovePasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateSubmission", _Judge_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListSubmissions", _Judge_ListSubmissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeSubmission", _Judge_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestSubmission", _Judge_RetestSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateTicket", _Judge_CreateTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseTicket", _Judge_CloseTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenTicket", _Judge_OpenTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadTicket", _Judge_ReadTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteTicket", _Judge_DeleteTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeTicket", _Judge_DescribeTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListTickets", _Judge_ListTickets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReplyTicket", _Judge_ReplyTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListReplies", _Judge_ListReplies(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteReply", _Judge_DeleteReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateReply", _Judge_UpdateReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateAnnouncement", _Judge_CreateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateAnnouncement", _Judge_UpdateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteAnnouncement", _Judge_DeleteAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadAnnouncement", _Judge_ReadAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncement", _Judge_DescribeAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncementStatus", _Judge_DescribeAnnouncementStatus(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAnnouncements", _Judge_ListAnnouncements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectScore", _Judge_IntrospectScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeScore", _Judge_DescribeScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportScore", _Judge_ImportScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListResult", _Judge_ListResult(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RebuildScore", _Judge_RebuildScore(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListEntitlements", _Judge_ListEntitlements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListActivities", _Judge_ListActivities(srv)).Methods(http.MethodPost)
	return router
}

// NewJudgeHandlerHttp constructs new http.Handler for JudgeServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewJudgeHandlerHttp(srv JudgeServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/contests/__lookup", _Judge_LookupContest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.LookupContest")

	router.Handle(prefix+"/contests", _Judge_CreateContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_DeleteContest_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_UpdateContest_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateContest")

	router.Handle(prefix+"/contests/{contest_id}", _Judge_DescribeContest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeContest")

	router.Handle(prefix+"/contests", _Judge_ListContests_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListContests")

	router.Handle(prefix+"/contests/{contest_id}/open", _Judge_OpenContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.OpenContest")

	router.Handle(prefix+"/contests/{contest_id}/close", _Judge_CloseContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CloseContest")

	router.Handle(prefix+"/contests/{contest_id}/suspend", _Judge_SuspendContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.SuspendContest")

	router.Handle(prefix+"/contests/{contest_id}/freeze", _Judge_FreezeContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.FreezeContest")

	router.Handle(prefix+"/contests/{contest_id}/resume", _Judge_ResumeContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResumeContest")

	router.Handle(prefix+"/contests/{contest_id}/runtime", _Judge_ConfigureRuntime_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureRuntime")

	router.Handle(prefix+"/contests/{contest_id}/runtime", _Judge_DescribeRuntime_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeRuntime")

	router.Handle(prefix+"/contests/{contest_id}/appearance", _Judge_ConfigureAppearance_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureAppearance")

	router.Handle(prefix+"/contests/{contest_id}/appearance", _Judge_DescribeAppearance_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAppearance")

	router.Handle(prefix+"/contests/{contest_id}/scoring", _Judge_ConfigureScoring_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ConfigureScoring")

	router.Handle(prefix+"/contests/{contest_id}/scoring", _Judge_DescribeScoring_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeScoring")

	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ImportProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/sync", _Judge_SyncProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.SyncProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_UpdateProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ListProblems_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListProblems")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DescribeProblem_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/templates/{template_id}", _Judge_DescribeCodeTemplate_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeCodeTemplate")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/lookup-template", _Judge_LookupCodeTemplate_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.LookupCodeTemplate")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/statements", _Judge_ListStatements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListStatements")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/attachments", _Judge_ListAttachments_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAttachments")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/examples", _Judge_ListExamples_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListExamples")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DeleteProblem_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteProblem")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/retest", _Judge_RetestProblem_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.RetestProblem")

	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_AddParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.AddParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/enable", _Judge_EnableParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnableParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/disable", _Judge_DisableParticipant_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.DisableParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_UpdateParticipant_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_RemoveParticipant_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.RemoveParticipant")

	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_ListParticipants_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListParticipants")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_DescribeParticipant_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeParticipant")

	router.Handle(prefix+"/contests/{contest_id}/introspect", _Judge_IntrospectParticipant_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.IntrospectParticipant")

	router.Handle(prefix+"/contests/{contest_id}/join", _Judge_JoinContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.JoinContest")

	router.Handle(prefix+"/contests/{contest_id}/start", _Judge_StartContest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.StartContest")

	router.Handle(prefix+"/contests/{contest_id}/verify-passcode", _Judge_VerifyPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.VerifyPasscode")

	router.Handle(prefix+"/contests/{contest_id}/enter-passcode", _Judge_EnterPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnterPasscode")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_ResetPasscode_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResetPasscode")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_RemovePasscode_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.RemovePasscode")

	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/submissions", _Judge_CreateSubmission_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateSubmission")

	router.Handle(prefix+"/contests/{contest_id}/submissions", _Judge_ListSubmissions_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListSubmissions")

	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}", _Judge_DescribeSubmission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeSubmission")

	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}/retest", _Judge_RetestSubmission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.RetestSubmission")

	router.Handle(prefix+"/contests/{contest_id}/tickets", _Judge_CreateTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/close", _Judge_CloseTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CloseTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/open", _Judge_OpenTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.OpenTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/read", _Judge_ReadTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReadTicket")

	router.Handle(prefix+"/tickets/{ticket_id}", _Judge_DeleteTicket_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteTicket")

	router.Handle(prefix+"/tickets/{ticket_id}", _Judge_DescribeTicket_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeTicket")

	router.Handle(prefix+"/tickets", _Judge_ListTickets_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListTickets")

	router.Handle(prefix+"/tickets/{ticket_id}/replies", _Judge_ReplyTicket_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReplyTicket")

	router.Handle(prefix+"/tickets/{ticket_id}/replies", _Judge_ListReplies_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListReplies")

	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _Judge_DeleteReply_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteReply")

	router.Handle(prefix+"/tickets/{ticket_id}/replies/{reply_id}", _Judge_UpdateReply_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateReply")

	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_CreateAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_UpdateAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DeleteAnnouncement_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/read", _Judge_ReadAnnouncement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReadAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DescribeAnnouncement_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncement")

	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/status", _Judge_DescribeAnnouncementStatus_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncementStatus")

	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_ListAnnouncements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAnnouncements")

	router.Handle(prefix+"/contests/{contest_id}/introspect/score", _Judge_IntrospectScore_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.IntrospectScore")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/score", _Judge_DescribeScore_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeScore")

	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/scores", _Judge_ImportScore_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportScore")

	router.Handle(prefix+"/contests/{contest_id}/results", _Judge_ListResult_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListResult")

	router.Handle(prefix+"/contests/{contest_id}/rebuild", _Judge_RebuildScore_Rule0(srv)).
		Methods("POST").
		Name("eolymp.judge.Judge.RebuildScore")

	router.Handle(prefix+"/__judge/entitlements", _Judge_ListEntitlements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListEntitlements")

	router.Handle(prefix+"/contests/{contest_id}/activities", _Judge_ListActivities_Rule0(srv)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListActivities")

	return router
}

func _Judge_LookupContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SuspendContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SuspendContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_FreezeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.FreezeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResumeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResumeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAppearance(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureScoring(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoring(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAttachments(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListResult(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListResult(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RebuildScore(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RebuildScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListEntitlements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListActivities(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SuspendContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.SuspendContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_FreezeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.FreezeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResumeContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ResumeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureAppearance_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureAppearanceInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAppearance_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAppearanceInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeAppearance(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureScoring_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureScoringInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ConfigureScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScoring_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoringInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.DescribeScoring(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupCodeTemplate_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.LookupCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAttachments_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.UpdateParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TicketId = vars["ticket_id"]
		in.ReplyId = vars["reply_id"]

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.IntrospectScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		out, err := srv.ImportScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListResult_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListResult(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RebuildScore_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.RebuildScore(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListEntitlements_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListActivities_Rule0(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		out, err := srv.ListActivities(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

type _JudgeMiddleware = func(ctx context.Context, method string, in proto.Message, next func() (out proto.Message, err error))
type JudgeInterceptor struct {
	middleware []_JudgeMiddleware
	server     JudgeServer
}

// NewJudgeInterceptor constructs additional middleware for a server based on annotations in proto files
func NewJudgeInterceptor(srv JudgeServer, middleware ..._JudgeMiddleware) *JudgeInterceptor {
	return &JudgeInterceptor{server: srv, middleware: middleware}
}

func (i *JudgeInterceptor) LookupContest(ctx context.Context, in *LookupContestInput) (out *LookupContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.LookupContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/LookupContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CreateContest(ctx context.Context, in *CreateContestInput) (out *CreateContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CreateContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CreateContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DeleteContest(ctx context.Context, in *DeleteContestInput) (out *DeleteContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DeleteContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) UpdateContest(ctx context.Context, in *UpdateContestInput) (out *UpdateContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/UpdateContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeContest(ctx context.Context, in *DescribeContestInput) (out *DescribeContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListContests(ctx context.Context, in *ListContestsInput) (out *ListContestsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListContests(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListContests", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) OpenContest(ctx context.Context, in *OpenContestInput) (out *OpenContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.OpenContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/OpenContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CloseContest(ctx context.Context, in *CloseContestInput) (out *CloseContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CloseContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CloseContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) SuspendContest(ctx context.Context, in *SuspendContestInput) (out *SuspendContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.SuspendContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/SuspendContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) FreezeContest(ctx context.Context, in *FreezeContestInput) (out *FreezeContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.FreezeContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/FreezeContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ResumeContest(ctx context.Context, in *ResumeContestInput) (out *ResumeContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ResumeContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ResumeContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ConfigureRuntime(ctx context.Context, in *ConfigureRuntimeInput) (out *ConfigureRuntimeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ConfigureRuntime(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ConfigureRuntime", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeRuntime(ctx context.Context, in *DescribeRuntimeInput) (out *DescribeRuntimeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeRuntime(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeRuntime", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ConfigureAppearance(ctx context.Context, in *ConfigureAppearanceInput) (out *ConfigureAppearanceOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ConfigureAppearance(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ConfigureAppearance", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeAppearance(ctx context.Context, in *DescribeAppearanceInput) (out *DescribeAppearanceOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeAppearance(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeAppearance", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ConfigureScoring(ctx context.Context, in *ConfigureScoringInput) (out *ConfigureScoringOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ConfigureScoring(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ConfigureScoring", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeScoring(ctx context.Context, in *DescribeScoringInput) (out *DescribeScoringOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeScoring(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeScoring", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ImportProblem(ctx context.Context, in *ImportProblemInput) (out *ImportProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ImportProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ImportProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) SyncProblem(ctx context.Context, in *SyncProblemInput) (out *SyncProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.SyncProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/SyncProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) UpdateProblem(ctx context.Context, in *UpdateProblemInput) (out *UpdateProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/UpdateProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListProblems(ctx context.Context, in *ListProblemsInput) (out *ListProblemsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListProblems(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListProblems", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (out *DescribeProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (out *DescribeCodeTemplateOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeCodeTemplate(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeCodeTemplate", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) LookupCodeTemplate(ctx context.Context, in *LookupCodeTemplateInput) (out *LookupCodeTemplateOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.LookupCodeTemplate(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/LookupCodeTemplate", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListStatements(ctx context.Context, in *ListStatementsInput) (out *ListStatementsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListStatements(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListStatements", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (out *ListAttachmentsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListAttachments(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListAttachments", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (out *ListExamplesOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListExamples(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListExamples", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (out *DeleteProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DeleteProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) RetestProblem(ctx context.Context, in *RetestProblemInput) (out *RetestProblemOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RetestProblem(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/RetestProblem", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) AddParticipant(ctx context.Context, in *AddParticipantInput) (out *AddParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.AddParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/AddParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) EnableParticipant(ctx context.Context, in *EnableParticipantInput) (out *EnableParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.EnableParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/EnableParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DisableParticipant(ctx context.Context, in *DisableParticipantInput) (out *DisableParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DisableParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DisableParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput) (out *UpdateParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/UpdateParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) RemoveParticipant(ctx context.Context, in *RemoveParticipantInput) (out *RemoveParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RemoveParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/RemoveParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListParticipants(ctx context.Context, in *ListParticipantsInput) (out *ListParticipantsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListParticipants(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListParticipants", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput) (out *DescribeParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) IntrospectParticipant(ctx context.Context, in *IntrospectParticipantInput) (out *IntrospectParticipantOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.IntrospectParticipant(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/IntrospectParticipant", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) JoinContest(ctx context.Context, in *JoinContestInput) (out *JoinContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.JoinContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/JoinContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) StartContest(ctx context.Context, in *StartContestInput) (out *StartContestOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.StartContest(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/StartContest", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput) (out *VerifyPasscodeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.VerifyPasscode(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/VerifyPasscode", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) EnterPasscode(ctx context.Context, in *EnterPasscodeInput) (out *EnterPasscodeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.EnterPasscode(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/EnterPasscode", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ResetPasscode(ctx context.Context, in *ResetPasscodeInput) (out *ResetPasscodeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ResetPasscode(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ResetPasscode", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) RemovePasscode(ctx context.Context, in *RemovePasscodeInput) (out *RemovePasscodeOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RemovePasscode(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/RemovePasscode", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (out *CreateSubmissionOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CreateSubmission(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CreateSubmission", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListSubmissions(ctx context.Context, in *ListSubmissionsInput) (out *ListSubmissionsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListSubmissions(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListSubmissions", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (out *DescribeSubmissionOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeSubmission(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeSubmission", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (out *RetestSubmissionOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RetestSubmission(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/RetestSubmission", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CreateTicket(ctx context.Context, in *CreateTicketInput) (out *CreateTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CreateTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CreateTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CloseTicket(ctx context.Context, in *CloseTicketInput) (out *CloseTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CloseTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CloseTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) OpenTicket(ctx context.Context, in *OpenTicketInput) (out *OpenTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.OpenTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/OpenTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ReadTicket(ctx context.Context, in *ReadTicketInput) (out *ReadTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ReadTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ReadTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DeleteTicket(ctx context.Context, in *DeleteTicketInput) (out *DeleteTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DeleteTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeTicket(ctx context.Context, in *DescribeTicketInput) (out *DescribeTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListTickets(ctx context.Context, in *ListTicketsInput) (out *ListTicketsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListTickets(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListTickets", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ReplyTicket(ctx context.Context, in *ReplyTicketInput) (out *ReplyTicketOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ReplyTicket(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ReplyTicket", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListReplies(ctx context.Context, in *ListRepliesInput) (out *ListRepliesOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListReplies(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListReplies", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DeleteReply(ctx context.Context, in *DeleteReplyInput) (out *DeleteReplyOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteReply(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DeleteReply", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) UpdateReply(ctx context.Context, in *UpdateReplyInput) (out *UpdateReplyOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateReply(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/UpdateReply", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementInput) (out *CreateAnnouncementOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.CreateAnnouncement(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/CreateAnnouncement", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementInput) (out *UpdateAnnouncementOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.UpdateAnnouncement(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/UpdateAnnouncement", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementInput) (out *DeleteAnnouncementOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DeleteAnnouncement(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DeleteAnnouncement", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ReadAnnouncement(ctx context.Context, in *ReadAnnouncementInput) (out *ReadAnnouncementOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ReadAnnouncement(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ReadAnnouncement", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeAnnouncement(ctx context.Context, in *DescribeAnnouncementInput) (out *DescribeAnnouncementOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeAnnouncement(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeAnnouncement", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeAnnouncementStatus(ctx context.Context, in *DescribeAnnouncementStatusInput) (out *DescribeAnnouncementStatusOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeAnnouncementStatus(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeAnnouncementStatus", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListAnnouncements(ctx context.Context, in *ListAnnouncementsInput) (out *ListAnnouncementsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListAnnouncements(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListAnnouncements", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) IntrospectScore(ctx context.Context, in *IntrospectScoreInput) (out *IntrospectScoreOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.IntrospectScore(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/IntrospectScore", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) DescribeScore(ctx context.Context, in *DescribeScoreInput) (out *DescribeScoreOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.DescribeScore(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/DescribeScore", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ImportScore(ctx context.Context, in *ImportScoreInput) (out *ImportScoreOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ImportScore(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ImportScore", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListResult(ctx context.Context, in *ListResultInput) (out *ListResultOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListResult(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListResult", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) RebuildScore(ctx context.Context, in *RebuildScoreInput) (out *RebuildScoreOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.RebuildScore(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/RebuildScore", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (out *ListEntitlementsOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListEntitlements(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListEntitlements", in, handler)
			return out, err
		}
	}

	next()
	return
}

func (i *JudgeInterceptor) ListActivities(ctx context.Context, in *ListActivitiesInput) (out *ListActivitiesOutput, err error) {
	next := func() (proto.Message, error) {
		out, err = i.server.ListActivities(ctx, in)
		return out, err
	}

	for _, mw := range i.middleware {
		handler := next

		next = func() (proto.Message, error) {
			mw(ctx, "eolymp.judge.Judge/ListActivities", in, handler)
			return out, err
		}
	}

	next()
	return
}
