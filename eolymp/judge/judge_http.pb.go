// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Judge_HTTPReadQueryString parses body into proto.Message
func _Judge_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPReadRequestBody parses body into proto.Message
func _Judge_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPWriteResponse writes proto.Message to HTTP response
func _Judge_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Judge_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Judge_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Judge_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterJudgeHttpHandlers adds handlers for for JudgeClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterJudgeHttpHandlers(router *mux.Router, prefix string, cli JudgeClient) {
	router.Handle(prefix+"/contests", _Judge_CreateContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateContest")
	router.Handle(prefix+"/contests/{contest_id}", _Judge_DeleteContest_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteContest")
	router.Handle(prefix+"/contests/{contest_id}", _Judge_UpdateContest_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateContest")
	router.Handle(prefix+"/contests/{contest_id}", _Judge_DescribeContest_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeContest")
	router.Handle(prefix+"/contests", _Judge_ListContests_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListContests")
	router.Handle(prefix+"/contests/{contest_id}/open", _Judge_OpenContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.OpenContest")
	router.Handle(prefix+"/contests/{contest_id}/close", _Judge_CloseContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.CloseContest")
	router.Handle(prefix+"/contests/{contest_id}/suspend", _Judge_SuspendContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.SuspendContest")
	router.Handle(prefix+"/contests/{contest_id}/freeze", _Judge_FreezeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.FreezeContest")
	router.Handle(prefix+"/contests/{contest_id}/resume", _Judge_ResumeContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResumeContest")
	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ImportProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportProblem")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/sync", _Judge_SyncProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.SyncProblem")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_UpdateProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateProblem")
	router.Handle(prefix+"/contests/{contest_id}/problems", _Judge_ListProblems_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListProblems")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DescribeProblem_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeProblem")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/templates/{template_id}", _Judge_DescribeCodeTemplate_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeCodeTemplate")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/lookup-template", _Judge_LookupCodeTemplate_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.LookupCodeTemplate")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/statements", _Judge_ListStatements_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListStatements")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/attachments", _Judge_ListAttachments_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAttachments")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/examples", _Judge_ListExamples_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListExamples")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}", _Judge_DeleteProblem_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteProblem")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/retest", _Judge_RetestProblem_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.RetestProblem")
	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_AssignParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.AssignParticipant")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/enable", _Judge_EnableParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnableParticipant")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/disable", _Judge_DisableParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.DisableParticipant")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_UpdateParticipant_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.Judge.UpdateParticipant")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_DeleteParticipant_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteParticipant")
	router.Handle(prefix+"/contests/{contest_id}/participants", _Judge_ListParticipants_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListParticipants")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}", _Judge_DescribeParticipant_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeParticipant")
	router.Handle(prefix+"/contests/{contest_id}/introspect", _Judge_DescribeViewer_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeViewer")
	router.Handle(prefix+"/contests/{contest_id}/join", _Judge_JoinContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.JoinContest")
	router.Handle(prefix+"/contests/{contest_id}/start", _Judge_StartContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.StartContest")
	router.Handle(prefix+"/contests/{contest_id}/verify-passcode", _Judge_VerifyPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.VerifyPasscode")
	router.Handle(prefix+"/contests/{contest_id}/enter-passcode", _Judge_EnterPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.EnterPasscode")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_ResetPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.ResetPasscode")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_SetPasscode_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.Judge.SetPasscode")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/passcode", _Judge_RemovePasscode_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.RemovePasscode")
	router.Handle(prefix+"/contests/{contest_id}/problems/{problem_id}/submissions", _Judge_CreateSubmission_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateSubmission")
	router.Handle(prefix+"/contests/{contest_id}/submissions", _Judge_ListSubmissions_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListSubmissions")
	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}", _Judge_DescribeSubmission_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeSubmission")
	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}/retest", _Judge_RetestSubmission_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.RetestSubmission")
	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}", _Judge_DeleteSubmission_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteSubmission")
	router.Handle(prefix+"/contests/{contest_id}/submissions/{submission_id}/restore", _Judge_RestoreSubmission_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.RestoreSubmission")
	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_CreateAnnouncement_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.CreateAnnouncement")
	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_UpdateAnnouncement_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.UpdateAnnouncement")
	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DeleteAnnouncement_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.Judge.DeleteAnnouncement")
	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/read", _Judge_ReadAnnouncement_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.ReadAnnouncement")
	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}", _Judge_DescribeAnnouncement_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncement")
	router.Handle(prefix+"/contests/{contest_id}/announcements/{announcement_id}/status", _Judge_DescribeAnnouncementStatus_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeAnnouncementStatus")
	router.Handle(prefix+"/contests/{contest_id}/announcements", _Judge_ListAnnouncements_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListAnnouncements")
	router.Handle(prefix+"/contests/{contest_id}/introspect/score", _Judge_IntrospectScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.IntrospectScore")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/score", _Judge_DescribeScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeScore")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/scores", _Judge_ImportScore_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.ImportScore")
	router.Handle(prefix+"/contests/{contest_id}/participants/{participant_id}/scores", _Judge_ExportScore_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ExportScore")
	router.Handle(prefix+"/contests/{contest_id}/results", _Judge_ListResult_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListResult")
	router.Handle(prefix+"/contests/{contest_id}/rebuild", _Judge_RebuildScore_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.Judge.RebuildScore")
	router.Handle(prefix+"/contests/{contest_id}/activities", _Judge_ListActivities_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.ListActivities")
	router.Handle(prefix+"/usage/contests", _Judge_DescribeContestUsage_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.Judge.DescribeContestUsage")
}

func _Judge_CreateContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DeleteContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_UpdateContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListContests_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListContests(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_OpenContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.OpenContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_CloseContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.CloseContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_SuspendContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SuspendContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.SuspendContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_FreezeContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &FreezeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.FreezeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ResumeContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResumeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ResumeContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ImportProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ImportProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_SyncProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.SyncProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_UpdateProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListProblems_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListProblems(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeCodeTemplate_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeCodeTemplate(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_LookupCodeTemplate_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.LookupCodeTemplate(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListStatements_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListStatements(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListAttachments_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListAttachments(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListExamples_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListExamples(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DeleteProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_RetestProblem_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.RetestProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_AssignParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AssignParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.AssignParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_EnableParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.EnableParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DisableParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DisableParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_UpdateParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DeleteParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListParticipants_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListParticipants(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeParticipant_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeViewer_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeViewerInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeViewer(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_JoinContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.JoinContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_StartContest_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.StartContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_VerifyPasscode_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.VerifyPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_EnterPasscode_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.EnterPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ResetPasscode_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ResetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_SetPasscode_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.SetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_RemovePasscode_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.RemovePasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_CreateSubmission_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateSubmission(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListSubmissions_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListSubmissions(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeSubmission_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeSubmission(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_RetestSubmission_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		var header, trailer metadata.MD

		out, err := cli.RetestSubmission(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DeleteSubmission_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteSubmission(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_RestoreSubmission_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RestoreSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.SubmissionId = vars["submission_id"]

		var header, trailer metadata.MD

		out, err := cli.RestoreSubmission(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_CreateAnnouncement_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateAnnouncement(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_UpdateAnnouncement_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateAnnouncement(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DeleteAnnouncement_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteAnnouncement(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ReadAnnouncement_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		var header, trailer metadata.MD

		out, err := cli.ReadAnnouncement(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeAnnouncement_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeAnnouncement(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeAnnouncementStatus_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.AnnouncementId = vars["announcement_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeAnnouncementStatus(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListAnnouncements_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListAnnouncements(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_IntrospectScore_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.IntrospectScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeScore_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ImportScore_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ImportScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ExportScore_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ExportScoreInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ExportScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListResult_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListResultInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListResult(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_RebuildScore_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RebuildScoreInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.RebuildScore(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_ListActivities_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListActivitiesInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ContestId = vars["contest_id"]

		var header, trailer metadata.MD

		out, err := cli.ListActivities(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _Judge_DescribeContestUsage_Rule0(cli JudgeClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestUsageInput{}

		if err := _Judge_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribeContestUsage(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out, header, trailer)
	})
}
