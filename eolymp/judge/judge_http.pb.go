// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Judge_HTTPReadRequestBody parses body into proto.Message
func _Judge_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Judge_HTTPWriteResponse writes proto.Message to HTTP response
func _Judge_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Judge_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Judge_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Judge_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewJudgeHandler constructs new http.Handler for JudgeServer
func NewJudgeHandler(srv JudgeServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/twirp/eolymp.judge.Judge/CreateContest", _Judge_CreateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateContest", _Judge_CreateContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DeleteContest", _Judge_DeleteContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteContest", _Judge_DeleteContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/UpdateContest", _Judge_UpdateContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateContest", _Judge_UpdateContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/LookupContest", _Judge_LookupContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/LookupContest", _Judge_LookupContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeContest", _Judge_DescribeContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeContest", _Judge_DescribeContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListContests", _Judge_ListContests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListContests", _Judge_ListContests(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/OpenContest", _Judge_OpenContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenContest", _Judge_OpenContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/CloseContest", _Judge_CloseContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseContest", _Judge_CloseContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ConfigureRegistrationForm", _Judge_ConfigureRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRegistrationForm", _Judge_ConfigureRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeRegistrationForm", _Judge_DescribeRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRegistrationForm", _Judge_DescribeRegistrationForm(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ConfigureRuntime", _Judge_ConfigureRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ConfigureRuntime", _Judge_ConfigureRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeRuntime", _Judge_DescribeRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRuntime", _Judge_DescribeRuntime(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/SubmitRegistration", _Judge_SubmitRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SubmitRegistration", _Judge_SubmitRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeRegistration", _Judge_DescribeRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeRegistration", _Judge_DescribeRegistration(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ImportProblem", _Judge_ImportProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ImportProblem", _Judge_ImportProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/SyncProblem", _Judge_SyncProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/SyncProblem", _Judge_SyncProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/UpdateProblem", _Judge_UpdateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateProblem", _Judge_UpdateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListProblems", _Judge_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListProblems", _Judge_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeProblem", _Judge_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeProblem", _Judge_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListStatements", _Judge_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListStatements", _Judge_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListExamples", _Judge_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListExamples", _Judge_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DeleteProblem", _Judge_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteProblem", _Judge_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/RetestProblem", _Judge_RetestProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestProblem", _Judge_RetestProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/AddParticipant", _Judge_AddParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/AddParticipant", _Judge_AddParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/EnableParticipant", _Judge_EnableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnableParticipant", _Judge_EnableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DisableParticipant", _Judge_DisableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DisableParticipant", _Judge_DisableParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/VerifyPasscode", _Judge_VerifyPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/VerifyPasscode", _Judge_VerifyPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/EnterPasscode", _Judge_EnterPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/EnterPasscode", _Judge_EnterPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ResetPasscode", _Judge_ResetPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ResetPasscode", _Judge_ResetPasscode(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/RemovePasscode", _Judge_RemovePasscode(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemovePasscode", _Judge_RemovePasscode(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/RemoveParticipant", _Judge_RemoveParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RemoveParticipant", _Judge_RemoveParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListParticipants", _Judge_ListParticipants(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListParticipants", _Judge_ListParticipants(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeParticipant", _Judge_DescribeParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeParticipant", _Judge_DescribeParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/IntrospectParticipant", _Judge_IntrospectParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/IntrospectParticipant", _Judge_IntrospectParticipant(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/JoinContest", _Judge_JoinContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/JoinContest", _Judge_JoinContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/StartContest", _Judge_StartContest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/StartContest", _Judge_StartContest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/CreateSubmission", _Judge_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateSubmission", _Judge_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListSubmissions", _Judge_ListSubmissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListSubmissions", _Judge_ListSubmissions(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeSubmission", _Judge_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeSubmission", _Judge_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/RetestSubmission", _Judge_RetestSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/RetestSubmission", _Judge_RetestSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/CreateTicket", _Judge_CreateTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateTicket", _Judge_CreateTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/CloseTicket", _Judge_CloseTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CloseTicket", _Judge_CloseTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/OpenTicket", _Judge_OpenTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/OpenTicket", _Judge_OpenTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ReadTicket", _Judge_ReadTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadTicket", _Judge_ReadTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DeleteTicket", _Judge_DeleteTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteTicket", _Judge_DeleteTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeTicket", _Judge_DescribeTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeTicket", _Judge_DescribeTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListTickets", _Judge_ListTickets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListTickets", _Judge_ListTickets(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ReplyTicket", _Judge_ReplyTicket(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReplyTicket", _Judge_ReplyTicket(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListReplies", _Judge_ListReplies(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListReplies", _Judge_ListReplies(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DeleteReply", _Judge_DeleteReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteReply", _Judge_DeleteReply(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/UpdateReply", _Judge_UpdateReply(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateReply", _Judge_UpdateReply(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/CreateAnnouncement", _Judge_CreateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/CreateAnnouncement", _Judge_CreateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/UpdateAnnouncement", _Judge_UpdateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/UpdateAnnouncement", _Judge_UpdateAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DeleteAnnouncement", _Judge_DeleteAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DeleteAnnouncement", _Judge_DeleteAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ReadAnnouncement", _Judge_ReadAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ReadAnnouncement", _Judge_ReadAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeAnnouncement", _Judge_DescribeAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncement", _Judge_DescribeAnnouncement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeAnnouncementStatus", _Judge_DescribeAnnouncementStatus(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeAnnouncementStatus", _Judge_DescribeAnnouncementStatus(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/ListAnnouncements", _Judge_ListAnnouncements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/ListAnnouncements", _Judge_ListAnnouncements(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.judge.Judge/DescribeCodeTemplate", _Judge_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.judge.Judge/DescribeCodeTemplate", _Judge_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	return router
}

func _Judge_CreateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_LookupContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.LookupContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListContests(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListContestsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListContests(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRegistrationForm(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRegistrationFormInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRegistrationForm(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRegistrationForm(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRegistrationFormInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRegistrationForm(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ConfigureRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ConfigureRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ConfigureRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRuntime(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRuntimeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRuntime(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SubmitRegistration(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SubmitRegistrationInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SubmitRegistration(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeRegistration(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeRegistrationInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeRegistration(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ImportProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ImportProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_SyncProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SyncProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListProblems(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListStatements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListExamples(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestProblem(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestProblemInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestProblem(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_AddParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AddParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DisableParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DisableParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_VerifyPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.VerifyPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_EnterPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.EnterPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ResetPasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResetPasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemovePasscode(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemovePasscode(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RemoveParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RemoveParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListParticipants(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListParticipants(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_IntrospectParticipant(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectParticipant(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_JoinContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.JoinContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_StartContest(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartContest(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListSubmissions(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSubmissionsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSubmissions(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_RetestSubmission(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CloseTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CloseTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CloseTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_OpenTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &OpenTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.OpenTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListTickets(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTicketsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTickets(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReplyTicket(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReplyTicketInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReplyTicket(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListReplies(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRepliesInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListReplies(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateReply(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateReplyInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateReply(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_CreateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_UpdateAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DeleteAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ReadAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReadAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ReadAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncement(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncement(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeAnnouncementStatus(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAnnouncementStatusInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeAnnouncementStatus(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_ListAnnouncements(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAnnouncementsInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAnnouncements(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}

func _Judge_DescribeCodeTemplate(srv JudgeServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Judge_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Judge_HTTPWriteErrorResponse(w, err)
			return
		}

		_Judge_HTTPWriteResponse(w, out)
	})
}
