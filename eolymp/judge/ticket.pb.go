// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: eolymp/judge/ticket.proto

package judge

import (
	ecm "github.com/eolymp/go-sdk/eolymp/ecm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ticket_Extra int32

const (
	Ticket_NO_EXTRA       Ticket_Extra = 0
	Ticket_MESSAGE_RENDER Ticket_Extra = 1
	Ticket_MESSAGE_VALUE  Ticket_Extra = 2
)

// Enum value maps for Ticket_Extra.
var (
	Ticket_Extra_name = map[int32]string{
		0: "NO_EXTRA",
		1: "MESSAGE_RENDER",
		2: "MESSAGE_VALUE",
	}
	Ticket_Extra_value = map[string]int32{
		"NO_EXTRA":       0,
		"MESSAGE_RENDER": 1,
		"MESSAGE_VALUE":  2,
	}
)

func (x Ticket_Extra) Enum() *Ticket_Extra {
	p := new(Ticket_Extra)
	*p = x
	return p
}

func (x Ticket_Extra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ticket_Extra) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_ticket_proto_enumTypes[0].Descriptor()
}

func (Ticket_Extra) Type() protoreflect.EnumType {
	return &file_eolymp_judge_ticket_proto_enumTypes[0]
}

func (x Ticket_Extra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ticket_Extra.Descriptor instead.
func (Ticket_Extra) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_ticket_proto_rawDescGZIP(), []int{0, 0}
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ticket unique identifier.
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ern string `protobuf:"bytes,9999,opt,name=ern,proto3" json:"ern,omitempty"`
	// Contest where ticket was opened.
	ContestId string `protobuf:"bytes,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	// Participant who opened the ticket.
	ParticipantId string `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	// Member who opened the ticket.
	MemberId string `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Ticket subject. Max 255 symbols.
	Subject string `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	// Ticket message.
	Message    *ecm.Content `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	RawMessage string       `protobuf:"bytes,11,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
	// True if ticket is open and being handled or False if ticket has been resolved.
	IsOpen bool `protobuf:"varint,20,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// True if participant haven't seen new replies. This flag helps to find tickets which need participant's attention.
	IsReadByParticipant bool `protobuf:"varint,21,opt,name=is_read_by_participant,json=isReadByParticipant,proto3" json:"is_read_by_participant,omitempty"`
	// True if contest organiser haven't reply to the ticket. This flag helps to find tickets which need organiser's attention.
	IsReadByOwner bool `protobuf:"varint,22,opt,name=is_read_by_owner,json=isReadByOwner,proto3" json:"is_read_by_owner,omitempty"`
	// Timestamp when ticket was initially created.
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsRead     bool                   `protobuf:"varint,9991,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`             // deprecated use is_read_by_participant instead
	NeedsReply bool                   `protobuf:"varint,9992,opt,name=needs_reply,json=needsReply,proto3" json:"needs_reply,omitempty"` // deprecated use is_read_by_owner instead
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_judge_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetErn() string {
	if x != nil {
		return x.Ern
	}
	return ""
}

func (x *Ticket) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *Ticket) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *Ticket) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *Ticket) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Ticket) GetMessage() *ecm.Content {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Ticket) GetRawMessage() string {
	if x != nil {
		return x.RawMessage
	}
	return ""
}

func (x *Ticket) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *Ticket) GetIsReadByParticipant() bool {
	if x != nil {
		return x.IsReadByParticipant
	}
	return false
}

func (x *Ticket) GetIsReadByOwner() bool {
	if x != nil {
		return x.IsReadByOwner
	}
	return false
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Ticket) GetNeedsReply() bool {
	if x != nil {
		return x.NeedsReply
	}
	return false
}

var File_eolymp_judge_ticket_proto protoreflect.FileDescriptor

var file_eolymp_judge_ticket_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x65, 0x63, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x04, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x11, 0x0a, 0x03, 0x65, 0x72, 0x6e, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x63, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x42,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x87, 0x4e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x88, 0x4e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x0a,
	0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_eolymp_judge_ticket_proto_rawDescOnce sync.Once
	file_eolymp_judge_ticket_proto_rawDescData = file_eolymp_judge_ticket_proto_rawDesc
)

func file_eolymp_judge_ticket_proto_rawDescGZIP() []byte {
	file_eolymp_judge_ticket_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_ticket_proto_rawDescData)
	})
	return file_eolymp_judge_ticket_proto_rawDescData
}

var file_eolymp_judge_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_judge_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_eolymp_judge_ticket_proto_goTypes = []interface{}{
	(Ticket_Extra)(0),             // 0: eolymp.judge.Ticket.Extra
	(*Ticket)(nil),                // 1: eolymp.judge.Ticket
	(*ecm.Content)(nil),           // 2: eolymp.ecm.Content
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_eolymp_judge_ticket_proto_depIdxs = []int32{
	2, // 0: eolymp.judge.Ticket.message:type_name -> eolymp.ecm.Content
	3, // 1: eolymp.judge.Ticket.created_at:type_name -> google.protobuf.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_eolymp_judge_ticket_proto_init() }
func file_eolymp_judge_ticket_proto_init() {
	if File_eolymp_judge_ticket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eolymp_judge_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_ticket_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_ticket_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_ticket_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_ticket_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_ticket_proto_msgTypes,
	}.Build()
	File_eolymp_judge_ticket_proto = out.File
	file_eolymp_judge_ticket_proto_rawDesc = nil
	file_eolymp_judge_ticket_proto_goTypes = nil
	file_eolymp_judge_ticket_proto_depIdxs = nil
}
