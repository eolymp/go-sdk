// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _PasscodeService_HTTPReadQueryString parses body into proto.Message
func _PasscodeService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _PasscodeService_HTTPReadRequestBody parses body into proto.Message
func _PasscodeService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _PasscodeService_HTTPWriteResponse writes proto.Message to HTTP response
func _PasscodeService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_PasscodeService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _PasscodeService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _PasscodeService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _PasscodeService_WebsocketErrorResponse writes error to websocket connection
func _PasscodeService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _PasscodeService_WebsocketCodec implements protobuf codec for websockets package
var _PasscodeService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterPasscodeServiceHttpHandlers adds handlers for for PasscodeServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterPasscodeServiceHttpHandlers(router *mux.Router, prefix string, cli PasscodeServiceClient) {
	router.Handle(prefix+"/verify-passcode", _PasscodeService_VerifyPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.PasscodeService.VerifyPasscode")
	router.Handle(prefix+"/enter-passcode", _PasscodeService_EnterPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.PasscodeService.EnterPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _PasscodeService_ResetPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.PasscodeService.ResetPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _PasscodeService_SetPasscode_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.PasscodeService.SetPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _PasscodeService_RemovePasscode_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.PasscodeService.RemovePasscode")
}

func _PasscodeService_VerifyPasscode_Rule0(cli PasscodeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _PasscodeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.VerifyPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PasscodeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PasscodeService_EnterPasscode_Rule0(cli PasscodeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _PasscodeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.EnterPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PasscodeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PasscodeService_ResetPasscode_Rule0(cli PasscodeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _PasscodeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ResetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PasscodeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PasscodeService_SetPasscode_Rule0(cli PasscodeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SetPasscodeInput{}

		if err := _PasscodeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.SetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PasscodeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PasscodeService_RemovePasscode_Rule0(cli PasscodeServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _PasscodeService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.RemovePasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PasscodeService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PasscodeService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _PasscodeServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _PasscodeServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _PasscodeServiceHandler) (out proto.Message, err error)
type PasscodeServiceInterceptor struct {
	middleware []_PasscodeServiceMiddleware
	client     PasscodeServiceClient
}

// NewPasscodeServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewPasscodeServiceInterceptor(cli PasscodeServiceClient, middleware ..._PasscodeServiceMiddleware) *PasscodeServiceInterceptor {
	return &PasscodeServiceInterceptor{client: cli, middleware: middleware}
}

func (i *PasscodeServiceInterceptor) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput, opts ...grpc.CallOption) (*VerifyPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*VerifyPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *VerifyPasscodeInput, got %T", in))
		}

		return i.client.VerifyPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.PasscodeService.VerifyPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*VerifyPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *VerifyPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *PasscodeServiceInterceptor) EnterPasscode(ctx context.Context, in *EnterPasscodeInput, opts ...grpc.CallOption) (*EnterPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EnterPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EnterPasscodeInput, got %T", in))
		}

		return i.client.EnterPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.PasscodeService.EnterPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EnterPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EnterPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *PasscodeServiceInterceptor) ResetPasscode(ctx context.Context, in *ResetPasscodeInput, opts ...grpc.CallOption) (*ResetPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResetPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResetPasscodeInput, got %T", in))
		}

		return i.client.ResetPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.PasscodeService.ResetPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResetPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResetPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *PasscodeServiceInterceptor) SetPasscode(ctx context.Context, in *SetPasscodeInput, opts ...grpc.CallOption) (*SetPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SetPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SetPasscodeInput, got %T", in))
		}

		return i.client.SetPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.PasscodeService.SetPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SetPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SetPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *PasscodeServiceInterceptor) RemovePasscode(ctx context.Context, in *RemovePasscodeInput, opts ...grpc.CallOption) (*RemovePasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemovePasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemovePasscodeInput, got %T", in))
		}

		return i.client.RemovePasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.PasscodeService.RemovePasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemovePasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemovePasscodeOutput, got %T", out))
	}

	return message, err
}
