// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.4
// source: eolymp/judge/contest.proto

package judge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Contest_Status int32

const (
	Contest_STATUS_UNKNOWN Contest_Status = 0 // reserved, should not be used
	Contest_SCHEDULED      Contest_Status = 1 // contest hasn't started yet
	Contest_OPEN           Contest_Status = 2 // contest has started, participants can participate
	Contest_COMPLETE       Contest_Status = 3 // contest is finished
	Contest_SUSPENDED      Contest_Status = 4 // contest has been suspended, interface is not available
	Contest_FROZEN         Contest_Status = 5 // contest has been frozen, interface is available but submission is restricted
)

// Enum value maps for Contest_Status.
var (
	Contest_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "SCHEDULED",
		2: "OPEN",
		3: "COMPLETE",
		4: "SUSPENDED",
		5: "FROZEN",
	}
	Contest_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"SCHEDULED":      1,
		"OPEN":           2,
		"COMPLETE":       3,
		"SUSPENDED":      4,
		"FROZEN":         5,
	}
)

func (x Contest_Status) Enum() *Contest_Status {
	p := new(Contest_Status)
	*p = x
	return p
}

func (x Contest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[0].Descriptor()
}

func (Contest_Status) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[0]
}

func (x Contest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Status.Descriptor instead.
func (Contest_Status) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 0}
}

type Contest_Visibility int32

const (
	Contest_VISIBILITY_UNKNOWN Contest_Visibility = 0 // reserved, should not be used
	Contest_PUBLIC             Contest_Visibility = 1 // visible to everyone and shown on the website
	Contest_UNLISTED           Contest_Visibility = 2 // anyone can participate, but not shown on the website
	Contest_PRIVATE            Contest_Visibility = 3 // only explicitly added participants can participate
)

// Enum value maps for Contest_Visibility.
var (
	Contest_Visibility_name = map[int32]string{
		0: "VISIBILITY_UNKNOWN",
		1: "PUBLIC",
		2: "UNLISTED",
		3: "PRIVATE",
	}
	Contest_Visibility_value = map[string]int32{
		"VISIBILITY_UNKNOWN": 0,
		"PUBLIC":             1,
		"UNLISTED":           2,
		"PRIVATE":            3,
	}
)

func (x Contest_Visibility) Enum() *Contest_Visibility {
	p := new(Contest_Visibility)
	*p = x
	return p
}

func (x Contest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[1].Descriptor()
}

func (Contest_Visibility) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[1]
}

func (x Contest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Visibility.Descriptor instead.
func (Contest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 1}
}

type Contest_ParticipationMode int32

const (
	Contest_PARTICIPATION_MODE_UNKNOWN Contest_ParticipationMode = 0 // reserved, should not be used
	Contest_ONLINE                     Contest_ParticipationMode = 1 // everyone start and finish together
	Contest_VIRTUAL                    Contest_ParticipationMode = 2 // participants can start contest individually
)

// Enum value maps for Contest_ParticipationMode.
var (
	Contest_ParticipationMode_name = map[int32]string{
		0: "PARTICIPATION_MODE_UNKNOWN",
		1: "ONLINE",
		2: "VIRTUAL",
	}
	Contest_ParticipationMode_value = map[string]int32{
		"PARTICIPATION_MODE_UNKNOWN": 0,
		"ONLINE":                     1,
		"VIRTUAL":                    2,
	}
)

func (x Contest_ParticipationMode) Enum() *Contest_ParticipationMode {
	p := new(Contest_ParticipationMode)
	*p = x
	return p
}

func (x Contest_ParticipationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_ParticipationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[2].Descriptor()
}

func (Contest_ParticipationMode) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[2]
}

func (x Contest_ParticipationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_ParticipationMode.Descriptor instead.
func (Contest_ParticipationMode) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 2}
}

type Contest_Format int32

const (
	Contest_FORMAT_UNKNOWN Contest_Format = 0 // reserved, should not be used
	Contest_IOI            Contest_Format = 1
	Contest_ICPC           Contest_Format = 2
)

// Enum value maps for Contest_Format.
var (
	Contest_Format_name = map[int32]string{
		0: "FORMAT_UNKNOWN",
		1: "IOI",
		2: "ICPC",
	}
	Contest_Format_value = map[string]int32{
		"FORMAT_UNKNOWN": 0,
		"IOI":            1,
		"ICPC":           2,
	}
)

func (x Contest_Format) Enum() *Contest_Format {
	p := new(Contest_Format)
	*p = x
	return p
}

func (x Contest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[3].Descriptor()
}

func (Contest_Format) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[3]
}

func (x Contest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Format.Descriptor instead.
func (Contest_Format) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 3}
}

type Contest_Taxonomy_Scale int32

const (
	Contest_Taxonomy_UNKNOWN_SCALE Contest_Taxonomy_Scale = 0
	Contest_Taxonomy_LOCAL         Contest_Taxonomy_Scale = 1
	Contest_Taxonomy_REGIONAL      Contest_Taxonomy_Scale = 2
	Contest_Taxonomy_NATIONAL      Contest_Taxonomy_Scale = 3
	Contest_Taxonomy_INTERNATIONAL Contest_Taxonomy_Scale = 4
)

// Enum value maps for Contest_Taxonomy_Scale.
var (
	Contest_Taxonomy_Scale_name = map[int32]string{
		0: "UNKNOWN_SCALE",
		1: "LOCAL",
		2: "REGIONAL",
		3: "NATIONAL",
		4: "INTERNATIONAL",
	}
	Contest_Taxonomy_Scale_value = map[string]int32{
		"UNKNOWN_SCALE": 0,
		"LOCAL":         1,
		"REGIONAL":      2,
		"NATIONAL":      3,
		"INTERNATIONAL": 4,
	}
)

func (x Contest_Taxonomy_Scale) Enum() *Contest_Taxonomy_Scale {
	p := new(Contest_Taxonomy_Scale)
	*p = x
	return p
}

func (x Contest_Taxonomy_Scale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Taxonomy_Scale) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[4].Descriptor()
}

func (Contest_Taxonomy_Scale) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[4]
}

func (x Contest_Taxonomy_Scale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Taxonomy_Scale.Descriptor instead.
func (Contest_Taxonomy_Scale) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Contest_Scoreboard_Visibility int32

const (
	Contest_Scoreboard_UNKNOWN_VISIBILITY Contest_Scoreboard_Visibility = 0
	Contest_Scoreboard_INVISIBLE          Contest_Scoreboard_Visibility = 1 // visible only to organizers
	Contest_Scoreboard_INTERNAL           Contest_Scoreboard_Visibility = 2 // visible to participants and organizers
	Contest_Scoreboard_PUBLIC             Contest_Scoreboard_Visibility = 3 // visible to everyone
)

// Enum value maps for Contest_Scoreboard_Visibility.
var (
	Contest_Scoreboard_Visibility_name = map[int32]string{
		0: "UNKNOWN_VISIBILITY",
		1: "INVISIBLE",
		2: "INTERNAL",
		3: "PUBLIC",
	}
	Contest_Scoreboard_Visibility_value = map[string]int32{
		"UNKNOWN_VISIBILITY": 0,
		"INVISIBLE":          1,
		"INTERNAL":           2,
		"PUBLIC":             3,
	}
)

func (x Contest_Scoreboard_Visibility) Enum() *Contest_Scoreboard_Visibility {
	p := new(Contest_Scoreboard_Visibility)
	*p = x
	return p
}

func (x Contest_Scoreboard_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contest_Scoreboard_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_proto_enumTypes[5].Descriptor()
}

func (Contest_Scoreboard_Visibility) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_proto_enumTypes[5]
}

func (x Contest_Scoreboard_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contest_Scoreboard_Visibility.Descriptor instead.
func (Contest_Scoreboard_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 4, 0}
}

type Contest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contest unique identifier, automatically allocated when contest is created.
	Id    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url   string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Links map[string]string `protobuf:"bytes,683,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Contest name.
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// Contest starting time, after this time users will be able to see problems and make submissions.
	StartsAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	// deprecated: Time in seconds until beginning of the contest
	// this value may be off due to caching, calculate time using starts_at field
	StartsIn uint32 `protobuf:"varint,11,opt,name=starts_in,json=startsIn,proto3" json:"starts_in,omitempty"`
	// Contest ending time, after this time users submissions won't be counted to the score anymore.
	EndsAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	// deprecated: Time in seconds until end of the contest
	// this value may be off due to caching, calculate time using ends_at field
	EndsIn uint32 `protobuf:"varint,16,opt,name=ends_in,json=endsIn,proto3" json:"ends_in,omitempty"`
	// Duration in seconds for virtual participation mode. Users can start participating at any moment between startsAt
	// and endsAt, but once started they would have to finish in Duration amount of time. For example contest maybe will
	// start at midnight and finish at 23:59:59 the same day, but if duration is set to 4h it would mean users can
	// participate at any point of the day but will have only 4 hours to solve problems (4h or before 23:59:59 whichever
	// happens first).
	Duration uint32 `protobuf:"varint,12,opt,name=duration,proto3" json:"duration,omitempty"`
	// Contest status (see statuses above)
	Status Contest_Status `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.judge.Contest_Status" json:"status,omitempty"`
	// Contest visibility defines who can participate and where contest is listed.
	Visibility Contest_Visibility `protobuf:"varint,30,opt,name=visibility,proto3,enum=eolymp.judge.Contest_Visibility" json:"visibility,omitempty"`
	// When participants join contests by themselves they will participate unofficially.
	JoinUnofficially bool `protobuf:"varint,33,opt,name=join_unofficially,json=joinUnofficially,proto3" json:"join_unofficially,omitempty"`
	// Participation mode defines timeframe for participation: online or virtual.
	ParticipationMode Contest_ParticipationMode `protobuf:"varint,31,opt,name=participation_mode,json=participationMode,proto3,enum=eolymp.judge.Contest_ParticipationMode" json:"participation_mode,omitempty"`
	// Format defines competition style IOI or ICPC.
	Format Contest_Format `protobuf:"varint,32,opt,name=format,proto3,enum=eolymp.judge.Contest_Format" json:"format,omitempty"`
	// contest key used to make human friendly URLs.
	Key string `protobuf:"bytes,40,opt,name=key,proto3" json:"key,omitempty"`
	// Number of problems in the contest, might be "hidden".
	ProblemCount       uint32 `protobuf:"varint,60,opt,name=problem_count,json=problemCount,proto3" json:"problem_count,omitempty"`
	ProblemCountHidden bool   `protobuf:"varint,61,opt,name=problem_count_hidden,json=problemCountHidden,proto3" json:"problem_count_hidden,omitempty"`
	// Number of participants in the contest.
	ParticipantCount       uint32 `protobuf:"varint,62,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	ParticipantCountHidden bool   `protobuf:"varint,63,opt,name=participant_count_hidden,json=participantCountHidden,proto3" json:"participant_count_hidden,omitempty"`
	// Date and time until contest is displayed in Featured contests
	FeaturedUntil *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=featured_until,json=featuredUntil,proto3" json:"featured_until,omitempty"`
	// Taxonomy information
	Taxonomy *Contest_Taxonomy `protobuf:"bytes,104,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`
	// Appearance configuration
	Appearance *Contest_Appearance `protobuf:"bytes,101,opt,name=appearance,proto3" json:"appearance,omitempty"`
	// Environment configuration
	Environment *Contest_Environment `protobuf:"bytes,103,opt,name=environment,proto3" json:"environment,omitempty"`
	// Upsolve configuration
	Upsolve *Contest_Upsolve `protobuf:"bytes,102,opt,name=upsolve,proto3" json:"upsolve,omitempty"`
	// Scoreboard configuration
	Scoreboard    *Contest_Scoreboard `protobuf:"bytes,105,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contest) Reset() {
	*x = Contest{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0}
}

func (x *Contest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Contest) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Contest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contest) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Contest) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *Contest) GetStartsIn() uint32 {
	if x != nil {
		return x.StartsIn
	}
	return 0
}

func (x *Contest) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *Contest) GetEndsIn() uint32 {
	if x != nil {
		return x.EndsIn
	}
	return 0
}

func (x *Contest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Contest) GetStatus() Contest_Status {
	if x != nil {
		return x.Status
	}
	return Contest_STATUS_UNKNOWN
}

func (x *Contest) GetVisibility() Contest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Contest_VISIBILITY_UNKNOWN
}

func (x *Contest) GetJoinUnofficially() bool {
	if x != nil {
		return x.JoinUnofficially
	}
	return false
}

func (x *Contest) GetParticipationMode() Contest_ParticipationMode {
	if x != nil {
		return x.ParticipationMode
	}
	return Contest_PARTICIPATION_MODE_UNKNOWN
}

func (x *Contest) GetFormat() Contest_Format {
	if x != nil {
		return x.Format
	}
	return Contest_FORMAT_UNKNOWN
}

func (x *Contest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Contest) GetProblemCount() uint32 {
	if x != nil {
		return x.ProblemCount
	}
	return 0
}

func (x *Contest) GetProblemCountHidden() bool {
	if x != nil {
		return x.ProblemCountHidden
	}
	return false
}

func (x *Contest) GetParticipantCount() uint32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *Contest) GetParticipantCountHidden() bool {
	if x != nil {
		return x.ParticipantCountHidden
	}
	return false
}

func (x *Contest) GetFeaturedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.FeaturedUntil
	}
	return nil
}

func (x *Contest) GetTaxonomy() *Contest_Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *Contest) GetAppearance() *Contest_Appearance {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *Contest) GetEnvironment() *Contest_Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Contest) GetUpsolve() *Contest_Upsolve {
	if x != nil {
		return x.Upsolve
	}
	return nil
}

func (x *Contest) GetScoreboard() *Contest_Scoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

type Contest_Appearance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	LogoUrl       string                 `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contest_Appearance) Reset() {
	*x = Contest_Appearance{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest_Appearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Appearance) ProtoMessage() {}

func (x *Contest_Appearance) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Appearance.ProtoReflect.Descriptor instead.
func (*Contest_Appearance) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Contest_Appearance) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Contest_Appearance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Contest_Appearance) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type Contest_Taxonomy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          uint32                 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`                                            // Year when contest was officially held
	Series        string                 `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`                                         // Contest series: Official ICPC, Official IOI, Training Contest etc
	Scale         Contest_Taxonomy_Scale `protobuf:"varint,3,opt,name=scale,proto3,enum=eolymp.judge.Contest_Taxonomy_Scale" json:"scale,omitempty"` // Contest scale
	Difficulty    uint32                 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`                                // Difficulty from 1 (very easy) to 5 (very hard)
	Country       string                 `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`                                       // Country where contest was held
	Region        string                 `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`                                         // Region where contest was held
	City          string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`                                             // City where contest was held (in local language)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contest_Taxonomy) Reset() {
	*x = Contest_Taxonomy{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest_Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Taxonomy) ProtoMessage() {}

func (x *Contest_Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Taxonomy.ProtoReflect.Descriptor instead.
func (*Contest_Taxonomy) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Contest_Taxonomy) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Contest_Taxonomy) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *Contest_Taxonomy) GetScale() Contest_Taxonomy_Scale {
	if x != nil {
		return x.Scale
	}
	return Contest_Taxonomy_UNKNOWN_SCALE
}

func (x *Contest_Taxonomy) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Contest_Taxonomy) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Contest_Taxonomy) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Contest_Taxonomy) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type Contest_Environment struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AllowedRuntimes []string               `protobuf:"bytes,1,rep,name=allowed_runtimes,json=allowedRuntimes,proto3" json:"allowed_runtimes,omitempty"` // List of available runtimes, empty means all
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Contest_Environment) Reset() {
	*x = Contest_Environment{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest_Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Environment) ProtoMessage() {}

func (x *Contest_Environment) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Environment.ProtoReflect.Descriptor instead.
func (*Contest_Environment) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Contest_Environment) GetAllowedRuntimes() []string {
	if x != nil {
		return x.AllowedRuntimes
	}
	return nil
}

type Contest_Upsolve struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FreeUpsolve    bool                   `protobuf:"varint,3,opt,name=free_upsolve,json=freeUpsolve,proto3" json:"free_upsolve,omitempty"`          // Allow participants to solve problem after completing contest
	VirtualUpsolve bool                   `protobuf:"varint,4,opt,name=virtual_upsolve,json=virtualUpsolve,proto3" json:"virtual_upsolve,omitempty"` // Allow new participants to unofficially and virtually participate in contest after it's over
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Contest_Upsolve) Reset() {
	*x = Contest_Upsolve{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest_Upsolve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Upsolve) ProtoMessage() {}

func (x *Contest_Upsolve) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Upsolve.ProtoReflect.Descriptor instead.
func (*Contest_Upsolve) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Contest_Upsolve) GetFreeUpsolve() bool {
	if x != nil {
		return x.FreeUpsolve
	}
	return false
}

func (x *Contest_Upsolve) GetVirtualUpsolve() bool {
	if x != nil {
		return x.VirtualUpsolve
	}
	return false
}

type Contest_Scoreboard struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	Visibility     Contest_Scoreboard_Visibility `protobuf:"varint,1,opt,name=visibility,proto3,enum=eolymp.judge.Contest_Scoreboard_Visibility" json:"visibility,omitempty"`
	FreezingTime   uint32                        `protobuf:"varint,2,opt,name=freezing_time,json=freezingTime,proto3" json:"freezing_time,omitempty"`    // time in seconds before end of the contest when results will be frozen (eg. 3600 means one hour before the end)
	UnfreezeDelay  int32                         `protobuf:"varint,3,opt,name=unfreeze_delay,json=unfreezeDelay,proto3" json:"unfreeze_delay,omitempty"` // a delay in seconds after end of contest that board will remain frozen (eg. 600 means board will remain frozen for 10 minutes after end of contest)
	AttemptPenalty uint32                        `protobuf:"varint,4,opt,name=attempt_penalty,json=attemptPenalty,proto3" json:"attempt_penalty,omitempty"`
	TieBreaker     string                        `protobuf:"bytes,5,opt,name=tie_breaker,json=tieBreaker,proto3" json:"tie_breaker,omitempty"`       // tie breaker parameter
	NoSpoilerUi    bool                          `protobuf:"varint,6,opt,name=no_spoiler_ui,json=noSpoilerUi,proto3" json:"no_spoiler_ui,omitempty"` // hides results in participant UI, to prevent one participant seeing result of another during onsite competitions
	ShareKey       string                        `protobuf:"bytes,7,opt,name=share_key,json=shareKey,proto3" json:"share_key,omitempty"`             // key to share invisible and internal scoreboards with others
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Contest_Scoreboard) Reset() {
	*x = Contest_Scoreboard{}
	mi := &file_eolymp_judge_contest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contest_Scoreboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest_Scoreboard) ProtoMessage() {}

func (x *Contest_Scoreboard) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest_Scoreboard.ProtoReflect.Descriptor instead.
func (*Contest_Scoreboard) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Contest_Scoreboard) GetVisibility() Contest_Scoreboard_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Contest_Scoreboard_UNKNOWN_VISIBILITY
}

func (x *Contest_Scoreboard) GetFreezingTime() uint32 {
	if x != nil {
		return x.FreezingTime
	}
	return 0
}

func (x *Contest_Scoreboard) GetUnfreezeDelay() int32 {
	if x != nil {
		return x.UnfreezeDelay
	}
	return 0
}

func (x *Contest_Scoreboard) GetAttemptPenalty() uint32 {
	if x != nil {
		return x.AttemptPenalty
	}
	return 0
}

func (x *Contest_Scoreboard) GetTieBreaker() string {
	if x != nil {
		return x.TieBreaker
	}
	return ""
}

func (x *Contest_Scoreboard) GetNoSpoilerUi() bool {
	if x != nil {
		return x.NoSpoilerUi
	}
	return false
}

func (x *Contest_Scoreboard) GetShareKey() string {
	if x != nil {
		return x.ShareKey
	}
	return ""
}

var File_eolymp_judge_contest_proto protoreflect.FileDescriptor

var file_eolymp_judge_contest_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x13, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0xab, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x07, 0x75, 0x70, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x5f, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x1a, 0xae, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x38, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x1a, 0x55, 0x0a, 0x07, 0x55, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x75, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x55, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x55, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x1a, 0xff, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x0a, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x1a, 0x38, 0x0a, 0x0a, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a,
	0x45, 0x4e, 0x10, 0x05, 0x22, 0x4b, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x22, 0x4c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x49, 0x50, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x22,
	0x2f, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4f, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x50, 0x43, 0x10, 0x02,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x3b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_judge_contest_proto_rawDescOnce sync.Once
	file_eolymp_judge_contest_proto_rawDescData = file_eolymp_judge_contest_proto_rawDesc
)

func file_eolymp_judge_contest_proto_rawDescGZIP() []byte {
	file_eolymp_judge_contest_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_contest_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_judge_contest_proto_rawDescData)
	})
	return file_eolymp_judge_contest_proto_rawDescData
}

var file_eolymp_judge_contest_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_eolymp_judge_contest_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_eolymp_judge_contest_proto_goTypes = []any{
	(Contest_Status)(0),                // 0: eolymp.judge.Contest.Status
	(Contest_Visibility)(0),            // 1: eolymp.judge.Contest.Visibility
	(Contest_ParticipationMode)(0),     // 2: eolymp.judge.Contest.ParticipationMode
	(Contest_Format)(0),                // 3: eolymp.judge.Contest.Format
	(Contest_Taxonomy_Scale)(0),        // 4: eolymp.judge.Contest.Taxonomy.Scale
	(Contest_Scoreboard_Visibility)(0), // 5: eolymp.judge.Contest.Scoreboard.Visibility
	(*Contest)(nil),                    // 6: eolymp.judge.Contest
	(*Contest_Appearance)(nil),         // 7: eolymp.judge.Contest.Appearance
	(*Contest_Taxonomy)(nil),           // 8: eolymp.judge.Contest.Taxonomy
	(*Contest_Environment)(nil),        // 9: eolymp.judge.Contest.Environment
	(*Contest_Upsolve)(nil),            // 10: eolymp.judge.Contest.Upsolve
	(*Contest_Scoreboard)(nil),         // 11: eolymp.judge.Contest.Scoreboard
	nil,                                // 12: eolymp.judge.Contest.LinksEntry
	(*timestamppb.Timestamp)(nil),      // 13: google.protobuf.Timestamp
}
var file_eolymp_judge_contest_proto_depIdxs = []int32{
	12, // 0: eolymp.judge.Contest.links:type_name -> eolymp.judge.Contest.LinksEntry
	13, // 1: eolymp.judge.Contest.starts_at:type_name -> google.protobuf.Timestamp
	13, // 2: eolymp.judge.Contest.ends_at:type_name -> google.protobuf.Timestamp
	0,  // 3: eolymp.judge.Contest.status:type_name -> eolymp.judge.Contest.Status
	1,  // 4: eolymp.judge.Contest.visibility:type_name -> eolymp.judge.Contest.Visibility
	2,  // 5: eolymp.judge.Contest.participation_mode:type_name -> eolymp.judge.Contest.ParticipationMode
	3,  // 6: eolymp.judge.Contest.format:type_name -> eolymp.judge.Contest.Format
	13, // 7: eolymp.judge.Contest.featured_until:type_name -> google.protobuf.Timestamp
	8,  // 8: eolymp.judge.Contest.taxonomy:type_name -> eolymp.judge.Contest.Taxonomy
	7,  // 9: eolymp.judge.Contest.appearance:type_name -> eolymp.judge.Contest.Appearance
	9,  // 10: eolymp.judge.Contest.environment:type_name -> eolymp.judge.Contest.Environment
	10, // 11: eolymp.judge.Contest.upsolve:type_name -> eolymp.judge.Contest.Upsolve
	11, // 12: eolymp.judge.Contest.scoreboard:type_name -> eolymp.judge.Contest.Scoreboard
	4,  // 13: eolymp.judge.Contest.Taxonomy.scale:type_name -> eolymp.judge.Contest.Taxonomy.Scale
	5,  // 14: eolymp.judge.Contest.Scoreboard.visibility:type_name -> eolymp.judge.Contest.Scoreboard.Visibility
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_eolymp_judge_contest_proto_init() }
func file_eolymp_judge_contest_proto_init() {
	if File_eolymp_judge_contest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_judge_contest_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_contest_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_contest_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_contest_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_contest_proto_msgTypes,
	}.Build()
	File_eolymp_judge_contest_proto = out.File
	file_eolymp_judge_contest_proto_rawDesc = nil
	file_eolymp_judge_contest_proto_goTypes = nil
	file_eolymp_judge_contest_proto_depIdxs = nil
}
