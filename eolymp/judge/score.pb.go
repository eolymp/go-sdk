// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.4
// source: eolymp/judge/score.proto

package judge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Score_FetchingMode int32

const (
	// Actual score returns score at the moment of participation. This mode is intended to show scoreboard to
	// participants. This mode returns score following these rules:
	//   - During scoreboard freezing time, frozen scores are reported.
	//   - In virtual contests (everyone can start at different time), score values are returned relatively to the
	//     starting time. For instance, authenticated user who has been participating for 1 hour, will receive scores at 1
	//     hour mark, as user progresses further, more score updates will be revealed.
	//   - If authenticated user is not participating in the contest, an error will be returned (even if requested by a
	//     user with admin permissions)
	Score_ACTUAL Score_FetchingMode = 0
	// Punctual score returns score at particular moment, use time_offset parameter to specify time. This mode is
	// intended to show historical score at a given moment. Value for time_offset will be capped by the freezing time
	// for participants.
	Score_PUNCTUAL Score_FetchingMode = 1
	// Latest score returns the latest score recorded. This mode is intended for admins to see current scoreboard.
	// Users without admin permissions will get PermissionDenied error when requesting score in latest mode.
	Score_LATEST Score_FetchingMode = 2
	// Frozen score returns the latest score recorded before freezing time. This mode is intended for admins to see
	// frozen scoreboard.
	Score_FROZEN Score_FetchingMode = 3
	// Upsolve score returns score counting upsolve time.
	Score_UPSOLVE Score_FetchingMode = 4
)

// Enum value maps for Score_FetchingMode.
var (
	Score_FetchingMode_name = map[int32]string{
		0: "ACTUAL",
		1: "PUNCTUAL",
		2: "LATEST",
		3: "FROZEN",
		4: "UPSOLVE",
	}
	Score_FetchingMode_value = map[string]int32{
		"ACTUAL":   0,
		"PUNCTUAL": 1,
		"LATEST":   2,
		"FROZEN":   3,
		"UPSOLVE":  4,
	}
)

func (x Score_FetchingMode) Enum() *Score_FetchingMode {
	p := new(Score_FetchingMode)
	*p = x
	return p
}

func (x Score_FetchingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Score_FetchingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_score_proto_enumTypes[0].Descriptor()
}

func (Score_FetchingMode) Type() protoreflect.EnumType {
	return &file_eolymp_judge_score_proto_enumTypes[0]
}

func (x Score_FetchingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Score_FetchingMode.Descriptor instead.
func (Score_FetchingMode) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_score_proto_rawDescGZIP(), []int{0, 0}
}

type Score struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValidAfter    uint32                 `protobuf:"varint,1,opt,name=valid_after,json=validAfter,proto3" json:"valid_after,omitempty"` // time when score was set, number of seconds since start of contest (participation)
	ValidUntil    uint32                 `protobuf:"varint,2,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"` // time when score was overridden by newer value, number of seconds since start of contest (participation)
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                      // absolute time when score was set
	Score         float32                `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Penalty       float32                `protobuf:"fixed32,11,opt,name=penalty,proto3" json:"penalty,omitempty"`
	TieBreaker    uint32                 `protobuf:"varint,13,opt,name=tie_breaker,json=tieBreaker,proto3" json:"tie_breaker,omitempty"`
	Upsolve       bool                   `protobuf:"varint,12,opt,name=upsolve,proto3" json:"upsolve,omitempty"`
	Breakdown     []*Score_Problem       `protobuf:"bytes,20,rep,name=breakdown,proto3" json:"breakdown,omitempty"` // breakdown of total score by problem
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Score) Reset() {
	*x = Score{}
	mi := &file_eolymp_judge_score_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score) ProtoMessage() {}

func (x *Score) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score.ProtoReflect.Descriptor instead.
func (*Score) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_proto_rawDescGZIP(), []int{0}
}

func (x *Score) GetValidAfter() uint32 {
	if x != nil {
		return x.ValidAfter
	}
	return 0
}

func (x *Score) GetValidUntil() uint32 {
	if x != nil {
		return x.ValidUntil
	}
	return 0
}

func (x *Score) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Score) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Score) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *Score) GetTieBreaker() uint32 {
	if x != nil {
		return x.TieBreaker
	}
	return 0
}

func (x *Score) GetUpsolve() bool {
	if x != nil {
		return x.Upsolve
	}
	return false
}

func (x *Score) GetBreakdown() []*Score_Problem {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

type Score_Problem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Score         float32                `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"` // number of points scored
	Penalty       float32                `protobuf:"fixed32,3,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Solved        bool                   `protobuf:"varint,4,opt,name=solved,proto3" json:"solved,omitempty"`
	Percentage    float32                `protobuf:"fixed32,5,opt,name=percentage,proto3" json:"percentage,omitempty"`            // percentage scored from 0 to 1
	Attempts      uint32                 `protobuf:"varint,7,opt,name=attempts,proto3" json:"attempts,omitempty"`                 // number of submits made until problem was solved
	SolvedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=solved_at,json=solvedAt,proto3" json:"solved_at,omitempty"`  // time when first accepted submission is made
	SolvedIn      uint32                 `protobuf:"varint,9,opt,name=solved_in,json=solvedIn,proto3" json:"solved_in,omitempty"` // amount of time it took user to get accepted
	Changed       bool                   `protobuf:"varint,10,opt,name=changed,proto3" json:"changed,omitempty"`                  // if true, means there is a newer value for this score
	Breakdown     []*Score_Testset       `protobuf:"bytes,20,rep,name=breakdown,proto3" json:"breakdown,omitempty"`               // breakdown of problem score by testset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Score_Problem) Reset() {
	*x = Score_Problem{}
	mi := &file_eolymp_judge_score_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Score_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score_Problem) ProtoMessage() {}

func (x *Score_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score_Problem.ProtoReflect.Descriptor instead.
func (*Score_Problem) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Score_Problem) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Score_Problem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Score_Problem) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *Score_Problem) GetSolved() bool {
	if x != nil {
		return x.Solved
	}
	return false
}

func (x *Score_Problem) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Score_Problem) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *Score_Problem) GetSolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SolvedAt
	}
	return nil
}

func (x *Score_Problem) GetSolvedIn() uint32 {
	if x != nil {
		return x.SolvedIn
	}
	return 0
}

func (x *Score_Problem) GetChanged() bool {
	if x != nil {
		return x.Changed
	}
	return false
}

func (x *Score_Problem) GetBreakdown() []*Score_Testset {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

type Score_Testset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestsetId     string                 `protobuf:"bytes,1,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Cost          float32                `protobuf:"fixed32,10,opt,name=cost,proto3" json:"cost,omitempty"`
	Score         float32                `protobuf:"fixed32,11,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Score_Testset) Reset() {
	*x = Score_Testset{}
	mi := &file_eolymp_judge_score_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Score_Testset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Score_Testset) ProtoMessage() {}

func (x *Score_Testset) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_score_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Score_Testset.ProtoReflect.Descriptor instead.
func (*Score_Testset) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_score_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Score_Testset) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *Score_Testset) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Score_Testset) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Score_Testset) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_eolymp_judge_score_proto protoreflect.FileDescriptor

const file_eolymp_judge_score_proto_rawDesc = "" +
	"\n" +
	"\x18eolymp/judge/score.proto\x12\feolymp.judge\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbc\x06\n" +
	"\x05Score\x12\x1f\n" +
	"\vvalid_after\x18\x01 \x01(\rR\n" +
	"validAfter\x12\x1f\n" +
	"\vvalid_until\x18\x02 \x01(\rR\n" +
	"validUntil\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x14\n" +
	"\x05score\x18\n" +
	" \x01(\x02R\x05score\x12\x18\n" +
	"\apenalty\x18\v \x01(\x02R\apenalty\x12\x1f\n" +
	"\vtie_breaker\x18\r \x01(\rR\n" +
	"tieBreaker\x12\x18\n" +
	"\aupsolve\x18\f \x01(\bR\aupsolve\x129\n" +
	"\tbreakdown\x18\x14 \x03(\v2\x1b.eolymp.judge.Score.ProblemR\tbreakdown\x1a\xd7\x02\n" +
	"\aProblem\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x02R\x05score\x12\x18\n" +
	"\apenalty\x18\x03 \x01(\x02R\apenalty\x12\x16\n" +
	"\x06solved\x18\x04 \x01(\bR\x06solved\x12\x1e\n" +
	"\n" +
	"percentage\x18\x05 \x01(\x02R\n" +
	"percentage\x12\x1a\n" +
	"\battempts\x18\a \x01(\rR\battempts\x127\n" +
	"\tsolved_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\bsolvedAt\x12\x1b\n" +
	"\tsolved_in\x18\t \x01(\rR\bsolvedIn\x12\x18\n" +
	"\achanged\x18\n" +
	" \x01(\bR\achanged\x129\n" +
	"\tbreakdown\x18\x14 \x03(\v2\x1b.eolymp.judge.Score.TestsetR\tbreakdown\x1ah\n" +
	"\aTestset\x12\x1d\n" +
	"\n" +
	"testset_id\x18\x01 \x01(\tR\ttestsetId\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x12\n" +
	"\x04cost\x18\n" +
	" \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\v \x01(\x02R\x05score\"M\n" +
	"\fFetchingMode\x12\n" +
	"\n" +
	"\x06ACTUAL\x10\x00\x12\f\n" +
	"\bPUNCTUAL\x10\x01\x12\n" +
	"\n" +
	"\x06LATEST\x10\x02\x12\n" +
	"\n" +
	"\x06FROZEN\x10\x03\x12\v\n" +
	"\aUPSOLVE\x10\x04B-Z+github.com/eolymp/go-sdk/eolymp/judge;judgeb\x06proto3"

var (
	file_eolymp_judge_score_proto_rawDescOnce sync.Once
	file_eolymp_judge_score_proto_rawDescData []byte
)

func file_eolymp_judge_score_proto_rawDescGZIP() []byte {
	file_eolymp_judge_score_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_score_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_judge_score_proto_rawDesc), len(file_eolymp_judge_score_proto_rawDesc)))
	})
	return file_eolymp_judge_score_proto_rawDescData
}

var file_eolymp_judge_score_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_judge_score_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_eolymp_judge_score_proto_goTypes = []any{
	(Score_FetchingMode)(0),       // 0: eolymp.judge.Score.FetchingMode
	(*Score)(nil),                 // 1: eolymp.judge.Score
	(*Score_Problem)(nil),         // 2: eolymp.judge.Score.Problem
	(*Score_Testset)(nil),         // 3: eolymp.judge.Score.Testset
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_eolymp_judge_score_proto_depIdxs = []int32{
	4, // 0: eolymp.judge.Score.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: eolymp.judge.Score.breakdown:type_name -> eolymp.judge.Score.Problem
	4, // 2: eolymp.judge.Score.Problem.solved_at:type_name -> google.protobuf.Timestamp
	3, // 3: eolymp.judge.Score.Problem.breakdown:type_name -> eolymp.judge.Score.Testset
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_eolymp_judge_score_proto_init() }
func file_eolymp_judge_score_proto_init() {
	if File_eolymp_judge_score_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_judge_score_proto_rawDesc), len(file_eolymp_judge_score_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_score_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_score_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_score_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_score_proto_msgTypes,
	}.Build()
	File_eolymp_judge_score_proto = out.File
	file_eolymp_judge_score_proto_goTypes = nil
	file_eolymp_judge_score_proto_depIdxs = nil
}
