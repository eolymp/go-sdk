// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.4
// source: eolymp/judge/submission.proto

package judge

import (
	atlas "github.com/eolymp/go-sdk/eolymp/atlas"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Submission_Extra int32

const (
	Submission_NO_EXTRA Submission_Extra = 0
	Submission_SOURCE   Submission_Extra = 1
	Submission_GROUPS   Submission_Extra = 2
	Submission_RUNS     Submission_Extra = 3
)

// Enum value maps for Submission_Extra.
var (
	Submission_Extra_name = map[int32]string{
		0: "NO_EXTRA",
		1: "SOURCE",
		2: "GROUPS",
		3: "RUNS",
	}
	Submission_Extra_value = map[string]int32{
		"NO_EXTRA": 0,
		"SOURCE":   1,
		"GROUPS":   2,
		"RUNS":     3,
	}
)

func (x Submission_Extra) Enum() *Submission_Extra {
	p := new(Submission_Extra)
	*p = x
	return p
}

func (x Submission_Extra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Submission_Extra) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_submission_proto_enumTypes[0].Descriptor()
}

func (Submission_Extra) Type() protoreflect.EnumType {
	return &file_eolymp_judge_submission_proto_enumTypes[0]
}

func (x Submission_Extra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Submission_Extra.Descriptor instead.
func (Submission_Extra) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_submission_proto_rawDescGZIP(), []int{0, 0}
}

type Submission struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // unique identifier
	Url           string                   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	ContestId     string                   `protobuf:"bytes,2,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`                   // contest
	ProblemId     string                   `protobuf:"bytes,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`                   // problem
	ParticipantId string                   `protobuf:"bytes,4,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`       // submitter
	SubmittedAt   *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`             // time when submission was created
	Deleted       bool                     `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`                                       // mark deleted (excluded from scoring) submissions
	Lang          string                   `protobuf:"bytes,10,opt,name=lang,proto3" json:"lang,omitempty"`                                             // programming language
	Source        string                   `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`                                         // source code
	SourceUrl     string                   `protobuf:"bytes,110,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`                 // source code URL (overrides source)
	Signature     string                   `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`                                   // source code
	Status        atlas.Submission_Status  `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`    // status (see explanation for enumeration values)
	Verdict       atlas.Submission_Verdict `protobuf:"varint,22,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"` // overall verdict based on verdicts in groups/runs
	Error         string                   `protobuf:"bytes,21,opt,name=error,proto3" json:"error,omitempty"`                                           // error message in case status is ERROR
	ErrorUrl      string                   `protobuf:"bytes,23,opt,name=error_url,json=errorUrl,proto3" json:"error_url,omitempty"`                     // a URL with error output
	Cost          float32                  `protobuf:"fixed32,30,opt,name=cost,proto3" json:"cost,omitempty"`                                           // maximum possible score for the submission
	Score         float32                  `protobuf:"fixed32,31,opt,name=score,proto3" json:"score,omitempty"`                                         // sum of earned points
	Percentage    float32                  `protobuf:"fixed32,32,opt,name=percentage,proto3" json:"percentage,omitempty"`
	TimeUsage     uint32                   `protobuf:"varint,41,opt,name=time_usage,json=timeUsage,proto3" json:"time_usage,omitempty"`                  // maximum wall time
	CpuUsage      uint32                   `protobuf:"varint,42,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                     // maximum cpu time
	MemoryUsage   uint64                   `protobuf:"varint,46,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`            // maximum memory usage
	ResourceUsage float32                  `protobuf:"fixed32,47,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`     // maximum resource usage
	GenAiUseScore float32                  `protobuf:"fixed32,48,opt,name=gen_ai_use_score,json=genAiUseScore,proto3" json:"gen_ai_use_score,omitempty"` // Probability that the submission code was generated by an AI (0 to 1)
	Groups        []*Submission_Group      `protobuf:"bytes,50,rep,name=groups,proto3" json:"groups,omitempty"`                                          // status for each run by group
	Cursor        string                   `protobuf:"bytes,100,opt,name=cursor,proto3" json:"cursor,omitempty"`                                         // cursor in the list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_eolymp_judge_submission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_submission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_submission_proto_rawDescGZIP(), []int{0}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Submission) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *Submission) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Submission) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Submission) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Submission) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Submission) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Submission) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Submission) GetStatus() atlas.Submission_Status {
	if x != nil {
		return x.Status
	}
	return atlas.Submission_Status(0)
}

func (x *Submission) GetVerdict() atlas.Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return atlas.Submission_Verdict(0)
}

func (x *Submission) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Submission) GetErrorUrl() string {
	if x != nil {
		return x.ErrorUrl
	}
	return ""
}

func (x *Submission) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Submission) GetTimeUsage() uint32 {
	if x != nil {
		return x.TimeUsage
	}
	return 0
}

func (x *Submission) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Submission) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission) GetResourceUsage() float32 {
	if x != nil {
		return x.ResourceUsage
	}
	return 0
}

func (x *Submission) GetGenAiUseScore() float32 {
	if x != nil {
		return x.GenAiUseScore
	}
	return 0
}

func (x *Submission) GetGroups() []*Submission_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Submission) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type Submission_Run struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index         uint32                   `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
	TestId        string                   `protobuf:"bytes,11,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Cost          float32                  `protobuf:"fixed32,12,opt,name=cost,proto3" json:"cost,omitempty"`
	Score         float32                  `protobuf:"fixed32,13,opt,name=score,proto3" json:"score,omitempty"`
	WallTimeUsage uint32                   `protobuf:"varint,2,opt,name=wall_time_usage,json=wallTimeUsage,proto3" json:"wall_time_usage,omitempty"` // wall time (real-world time) usage
	CpuTimeUsage  uint32                   `protobuf:"varint,3,opt,name=cpu_time_usage,json=cpuTimeUsage,proto3" json:"cpu_time_usage,omitempty"`    // cpu time (time cpu was active)
	MemoryUsage   uint64                   `protobuf:"varint,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	Status        atlas.Submission_Status  `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`
	Verdict       atlas.Submission_Verdict `protobuf:"varint,21,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"` // overall verdict based on verdicts in groups/runs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission_Run) Reset() {
	*x = Submission_Run{}
	mi := &file_eolymp_judge_submission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission_Run) ProtoMessage() {}

func (x *Submission_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_submission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission_Run.ProtoReflect.Descriptor instead.
func (*Submission_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_submission_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Submission_Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission_Run) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Submission_Run) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *Submission_Run) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission_Run) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission_Run) GetWallTimeUsage() uint32 {
	if x != nil {
		return x.WallTimeUsage
	}
	return 0
}

func (x *Submission_Run) GetCpuTimeUsage() uint32 {
	if x != nil {
		return x.CpuTimeUsage
	}
	return 0
}

func (x *Submission_Run) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission_Run) GetStatus() atlas.Submission_Status {
	if x != nil {
		return x.Status
	}
	return atlas.Submission_Status(0)
}

func (x *Submission_Run) GetVerdict() atlas.Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return atlas.Submission_Verdict(0)
}

type Submission_Group struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Index          uint32                   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                                                           // group index
	TestsetId      string                   `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`                                                   // testset associated with the group
	Status         atlas.Submission_Status  `protobuf:"varint,10,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`                                    // status of the group
	Verdict        atlas.Submission_Verdict `protobuf:"varint,12,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"`                                 // overall verdict based on verdicts in groups/runs
	Dependencies   []uint32                 `protobuf:"varint,11,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`                                                     // other group indices which need to pass for this group to run
	Cost           float32                  `protobuf:"fixed32,20,opt,name=cost,proto3" json:"cost,omitempty"`                                                                           // max possible score for passing all tests in the group
	Score          float32                  `protobuf:"fixed32,21,opt,name=score,proto3" json:"score,omitempty"`                                                                         // sum of earned points within a group
	ScoringMode    atlas.ScoringMode        `protobuf:"varint,22,opt,name=scoring_mode,json=scoringMode,proto3,enum=eolymp.atlas.ScoringMode" json:"scoring_mode,omitempty"`             // how group is scored
	FeedbackPolicy atlas.FeedbackPolicy     `protobuf:"varint,30,opt,name=feedback_policy,json=feedbackPolicy,proto3,enum=eolymp.atlas.FeedbackPolicy" json:"feedback_policy,omitempty"` // how tests are shown to the user
	WallTimeUsage  uint32                   `protobuf:"varint,41,opt,name=wall_time_usage,json=wallTimeUsage,proto3" json:"wall_time_usage,omitempty"`                                   // provides feedback on wall time usage within the group, depending on feedback mode it might be max execution time in group or time usage in the first non-accepted test
	CpuTimeUsage   uint32                   `protobuf:"varint,42,opt,name=cpu_time_usage,json=cpuTimeUsage,proto3" json:"cpu_time_usage,omitempty"`                                      // provides feedback on CPU time usage within the group, depending on feedback mode it might be max execution time in group or time usage in the first non-accepted test
	MemoryUsage    uint64                   `protobuf:"varint,46,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                                           // provides feedback on memory usage within the group, depending on feedback mode it might be memory usage peak in group or memory usage in the first non-accepted test
	Runs           []*Submission_Run        `protobuf:"bytes,100,rep,name=runs,proto3" json:"runs,omitempty"`                                                                            // runs of the group
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Submission_Group) Reset() {
	*x = Submission_Group{}
	mi := &file_eolymp_judge_submission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission_Group) ProtoMessage() {}

func (x *Submission_Group) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_submission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission_Group.ProtoReflect.Descriptor instead.
func (*Submission_Group) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_submission_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Submission_Group) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Submission_Group) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *Submission_Group) GetStatus() atlas.Submission_Status {
	if x != nil {
		return x.Status
	}
	return atlas.Submission_Status(0)
}

func (x *Submission_Group) GetVerdict() atlas.Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return atlas.Submission_Verdict(0)
}

func (x *Submission_Group) GetDependencies() []uint32 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Submission_Group) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission_Group) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission_Group) GetScoringMode() atlas.ScoringMode {
	if x != nil {
		return x.ScoringMode
	}
	return atlas.ScoringMode(0)
}

func (x *Submission_Group) GetFeedbackPolicy() atlas.FeedbackPolicy {
	if x != nil {
		return x.FeedbackPolicy
	}
	return atlas.FeedbackPolicy(0)
}

func (x *Submission_Group) GetWallTimeUsage() uint32 {
	if x != nil {
		return x.WallTimeUsage
	}
	return 0
}

func (x *Submission_Group) GetCpuTimeUsage() uint32 {
	if x != nil {
		return x.CpuTimeUsage
	}
	return 0
}

func (x *Submission_Group) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission_Group) GetRuns() []*Submission_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

var File_eolymp_judge_submission_proto protoreflect.FileDescriptor

const file_eolymp_judge_submission_proto_rawDesc = "" +
	"\n" +
	"\x1deolymp/judge/submission.proto\x12\feolymp.judge\x1a\x1deolymp/atlas/submission.proto\x1a#eolymp/atlas/testing_feedback.proto\x1a\"eolymp/atlas/testing_scoring.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x80\x0e\n" +
	"\n" +
	"Submission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\a \x01(\tR\x03url\x12\x1d\n" +
	"\n" +
	"contest_id\x18\x02 \x01(\tR\tcontestId\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x03 \x01(\tR\tproblemId\x12%\n" +
	"\x0eparticipant_id\x18\x04 \x01(\tR\rparticipantId\x12=\n" +
	"\fsubmitted_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vsubmittedAt\x12\x18\n" +
	"\adeleted\x18\x06 \x01(\bR\adeleted\x12\x12\n" +
	"\x04lang\x18\n" +
	" \x01(\tR\x04lang\x12\x16\n" +
	"\x06source\x18\v \x01(\tR\x06source\x12\x1d\n" +
	"\n" +
	"source_url\x18n \x01(\tR\tsourceUrl\x12\x1c\n" +
	"\tsignature\x18\f \x01(\tR\tsignature\x127\n" +
	"\x06status\x18\x14 \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\x16 \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x12\x14\n" +
	"\x05error\x18\x15 \x01(\tR\x05error\x12\x1b\n" +
	"\terror_url\x18\x17 \x01(\tR\berrorUrl\x12\x12\n" +
	"\x04cost\x18\x1e \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\x1f \x01(\x02R\x05score\x12\x1e\n" +
	"\n" +
	"percentage\x18  \x01(\x02R\n" +
	"percentage\x12\x1d\n" +
	"\n" +
	"time_usage\x18) \x01(\rR\ttimeUsage\x12\x1b\n" +
	"\tcpu_usage\x18* \x01(\rR\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18. \x01(\x04R\vmemoryUsage\x12%\n" +
	"\x0eresource_usage\x18/ \x01(\x02R\rresourceUsage\x12'\n" +
	"\x10gen_ai_use_score\x180 \x01(\x02R\rgenAiUseScore\x126\n" +
	"\x06groups\x182 \x03(\v2\x1e.eolymp.judge.Submission.GroupR\x06groups\x12\x16\n" +
	"\x06cursor\x18d \x01(\tR\x06cursor\x1a\xd4\x02\n" +
	"\x03Run\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05index\x18\n" +
	" \x01(\rR\x05index\x12\x17\n" +
	"\atest_id\x18\v \x01(\tR\x06testId\x12\x12\n" +
	"\x04cost\x18\f \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\r \x01(\x02R\x05score\x12&\n" +
	"\x0fwall_time_usage\x18\x02 \x01(\rR\rwallTimeUsage\x12$\n" +
	"\x0ecpu_time_usage\x18\x03 \x01(\rR\fcpuTimeUsage\x12!\n" +
	"\fmemory_usage\x18\x04 \x01(\x04R\vmemoryUsage\x127\n" +
	"\x06status\x18\x14 \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\x15 \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x1a\xa7\x04\n" +
	"\x05Group\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\x12\x1d\n" +
	"\n" +
	"testset_id\x18\x02 \x01(\tR\ttestsetId\x127\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\f \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x12\"\n" +
	"\fdependencies\x18\v \x03(\rR\fdependencies\x12\x12\n" +
	"\x04cost\x18\x14 \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\x15 \x01(\x02R\x05score\x12<\n" +
	"\fscoring_mode\x18\x16 \x01(\x0e2\x19.eolymp.atlas.ScoringModeR\vscoringMode\x12E\n" +
	"\x0ffeedback_policy\x18\x1e \x01(\x0e2\x1c.eolymp.atlas.FeedbackPolicyR\x0efeedbackPolicy\x12&\n" +
	"\x0fwall_time_usage\x18) \x01(\rR\rwallTimeUsage\x12$\n" +
	"\x0ecpu_time_usage\x18* \x01(\rR\fcpuTimeUsage\x12!\n" +
	"\fmemory_usage\x18. \x01(\x04R\vmemoryUsage\x120\n" +
	"\x04runs\x18d \x03(\v2\x1c.eolymp.judge.Submission.RunR\x04runs\"7\n" +
	"\x05Extra\x12\f\n" +
	"\bNO_EXTRA\x10\x00\x12\n" +
	"\n" +
	"\x06SOURCE\x10\x01\x12\n" +
	"\n" +
	"\x06GROUPS\x10\x02\x12\b\n" +
	"\x04RUNS\x10\x03B-Z+github.com/eolymp/go-sdk/eolymp/judge;judgeb\x06proto3"

var (
	file_eolymp_judge_submission_proto_rawDescOnce sync.Once
	file_eolymp_judge_submission_proto_rawDescData []byte
)

func file_eolymp_judge_submission_proto_rawDescGZIP() []byte {
	file_eolymp_judge_submission_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_submission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_judge_submission_proto_rawDesc), len(file_eolymp_judge_submission_proto_rawDesc)))
	})
	return file_eolymp_judge_submission_proto_rawDescData
}

var file_eolymp_judge_submission_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_judge_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_eolymp_judge_submission_proto_goTypes = []any{
	(Submission_Extra)(0),         // 0: eolymp.judge.Submission.Extra
	(*Submission)(nil),            // 1: eolymp.judge.Submission
	(*Submission_Run)(nil),        // 2: eolymp.judge.Submission.Run
	(*Submission_Group)(nil),      // 3: eolymp.judge.Submission.Group
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(atlas.Submission_Status)(0),  // 5: eolymp.atlas.Submission.Status
	(atlas.Submission_Verdict)(0), // 6: eolymp.atlas.Submission.Verdict
	(atlas.ScoringMode)(0),        // 7: eolymp.atlas.ScoringMode
	(atlas.FeedbackPolicy)(0),     // 8: eolymp.atlas.FeedbackPolicy
}
var file_eolymp_judge_submission_proto_depIdxs = []int32{
	4,  // 0: eolymp.judge.Submission.submitted_at:type_name -> google.protobuf.Timestamp
	5,  // 1: eolymp.judge.Submission.status:type_name -> eolymp.atlas.Submission.Status
	6,  // 2: eolymp.judge.Submission.verdict:type_name -> eolymp.atlas.Submission.Verdict
	3,  // 3: eolymp.judge.Submission.groups:type_name -> eolymp.judge.Submission.Group
	5,  // 4: eolymp.judge.Submission.Run.status:type_name -> eolymp.atlas.Submission.Status
	6,  // 5: eolymp.judge.Submission.Run.verdict:type_name -> eolymp.atlas.Submission.Verdict
	5,  // 6: eolymp.judge.Submission.Group.status:type_name -> eolymp.atlas.Submission.Status
	6,  // 7: eolymp.judge.Submission.Group.verdict:type_name -> eolymp.atlas.Submission.Verdict
	7,  // 8: eolymp.judge.Submission.Group.scoring_mode:type_name -> eolymp.atlas.ScoringMode
	8,  // 9: eolymp.judge.Submission.Group.feedback_policy:type_name -> eolymp.atlas.FeedbackPolicy
	2,  // 10: eolymp.judge.Submission.Group.runs:type_name -> eolymp.judge.Submission.Run
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_eolymp_judge_submission_proto_init() }
func file_eolymp_judge_submission_proto_init() {
	if File_eolymp_judge_submission_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_judge_submission_proto_rawDesc), len(file_eolymp_judge_submission_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_submission_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_submission_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_submission_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_submission_proto_msgTypes,
	}.Build()
	File_eolymp_judge_submission_proto = out.File
	file_eolymp_judge_submission_proto_goTypes = nil
	file_eolymp_judge_submission_proto_depIdxs = nil
}
