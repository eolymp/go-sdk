// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _ParticipantService_HTTPReadQueryString parses body into proto.Message
func _ParticipantService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _ParticipantService_HTTPReadRequestBody parses body into proto.Message
func _ParticipantService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ParticipantService_HTTPWriteResponse writes proto.Message to HTTP response
func _ParticipantService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ParticipantService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ParticipantService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ParticipantService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _ParticipantService_WebsocketErrorResponse writes error to websocket connection
func _ParticipantService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _ParticipantService_WebsocketCodec implements protobuf codec for websockets package
var _ParticipantService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

type _ParticipantService_WatchParticipant_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_ParticipantService_WatchParticipant_WSStream) Send(m *WatchParticipantOutput) error {
	return s.SendMsg(m)
}

func (s *_ParticipantService_WatchParticipant_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_ParticipantService_WatchParticipant_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_ParticipantService_WatchParticipant_WSStream) SetTrailer(metadata.MD) {
}

func (s *_ParticipantService_WatchParticipant_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_ParticipantService_WatchParticipant_WSStream) SendMsg(m interface{}) error {
	return _ParticipantService_WebsocketCodec.Send(s.conn, m)
}

func (s *_ParticipantService_WatchParticipant_WSStream) RecvMsg(m interface{}) error {
	return nil
}

// RegisterParticipantServiceHttpHandlers adds handlers for for ParticipantServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterParticipantServiceHttpHandlers(router *mux.Router, prefix string, cli ParticipantServiceClient) {
	router.Handle(prefix+"/participants", _ParticipantService_AddParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.AddParticipant")
	router.Handle(prefix+"/participants/{participant_id}/enable", _ParticipantService_EnableParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.EnableParticipant")
	router.Handle(prefix+"/participants/{participant_id}/disable", _ParticipantService_DisableParticipant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.DisableParticipant")
	router.Handle(prefix+"/participants/{participant_id}", _ParticipantService_UpdateParticipant_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.ParticipantService.UpdateParticipant")
	router.Handle(prefix+"/participants/{participant_id}", _ParticipantService_RemoveParticipant_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.ParticipantService.RemoveParticipant")
	router.Handle(prefix+"/participants", _ParticipantService_ListParticipants_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ParticipantService.ListParticipants")
	router.Handle(prefix+"/participants/{participant_id}", _ParticipantService_DescribeParticipant_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ParticipantService.DescribeParticipant")
	router.Handle(prefix+"/introspect", _ParticipantService_IntrospectParticipant_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ParticipantService.IntrospectParticipant")
	router.Handle(prefix+"/join", _ParticipantService_JoinContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.JoinContest")
	router.Handle(prefix+"/start", _ParticipantService_StartContest_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.StartContest")
	router.Handle(prefix+"/verify-passcode", _ParticipantService_VerifyPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.VerifyPasscode")
	router.Handle(prefix+"/enter-passcode", _ParticipantService_EnterPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.EnterPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _ParticipantService_ResetPasscode_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ParticipantService.ResetPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _ParticipantService_SetPasscode_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.judge.ParticipantService.SetPasscode")
	router.Handle(prefix+"/participants/{participant_id}/passcode", _ParticipantService_RemovePasscode_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.ParticipantService.RemovePasscode")
}

func _ParticipantService_AddParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AddParticipantInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.AddParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_EnableParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnableParticipantInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.EnableParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_DisableParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DisableParticipantInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DisableParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_UpdateParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateParticipantInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_RemoveParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemoveParticipantInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.RemoveParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_ListParticipants_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParticipantsInput{}

		if err := _ParticipantService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListParticipants(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_DescribeParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeParticipantInput{}

		if err := _ParticipantService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_IntrospectParticipant_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectParticipantInput{}

		if err := _ParticipantService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.IntrospectParticipant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_JoinContest_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &JoinContestInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.JoinContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_StartContest_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartContestInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.StartContest(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_VerifyPasscode_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyPasscodeInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.VerifyPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_EnterPasscode_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &EnterPasscodeInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.EnterPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_ResetPasscode_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResetPasscodeInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.ResetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_SetPasscode_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SetPasscodeInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.SetPasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ParticipantService_RemovePasscode_Rule0(cli ParticipantServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RemovePasscodeInput{}

		if err := _ParticipantService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ParticipantId = vars["participant_id"]

		var header, trailer metadata.MD

		out, err := cli.RemovePasscode(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ParticipantService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ParticipantService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _ParticipantServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _ParticipantServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _ParticipantServiceHandler) (out proto.Message, err error)
type ParticipantServiceInterceptor struct {
	middleware []_ParticipantServiceMiddleware
	client     ParticipantServiceClient
}

// NewParticipantServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewParticipantServiceInterceptor(cli ParticipantServiceClient, middleware ..._ParticipantServiceMiddleware) *ParticipantServiceInterceptor {
	return &ParticipantServiceInterceptor{client: cli, middleware: middleware}
}

func (i *ParticipantServiceInterceptor) AddParticipant(ctx context.Context, in *AddParticipantInput, opts ...grpc.CallOption) (*AddParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*AddParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *AddParticipantInput, got %T", in))
		}

		return i.client.AddParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.AddParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*AddParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *AddParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) EnableParticipant(ctx context.Context, in *EnableParticipantInput, opts ...grpc.CallOption) (*EnableParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EnableParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EnableParticipantInput, got %T", in))
		}

		return i.client.EnableParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.EnableParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EnableParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EnableParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) DisableParticipant(ctx context.Context, in *DisableParticipantInput, opts ...grpc.CallOption) (*DisableParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DisableParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DisableParticipantInput, got %T", in))
		}

		return i.client.DisableParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.DisableParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DisableParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DisableParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput, opts ...grpc.CallOption) (*UpdateParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateParticipantInput, got %T", in))
		}

		return i.client.UpdateParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.UpdateParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) RemoveParticipant(ctx context.Context, in *RemoveParticipantInput, opts ...grpc.CallOption) (*RemoveParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemoveParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemoveParticipantInput, got %T", in))
		}

		return i.client.RemoveParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.RemoveParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemoveParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemoveParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) ListParticipants(ctx context.Context, in *ListParticipantsInput, opts ...grpc.CallOption) (*ListParticipantsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListParticipantsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListParticipantsInput, got %T", in))
		}

		return i.client.ListParticipants(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.ListParticipants", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListParticipantsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListParticipantsOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput, opts ...grpc.CallOption) (*DescribeParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeParticipantInput, got %T", in))
		}

		return i.client.DescribeParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.DescribeParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) IntrospectParticipant(ctx context.Context, in *IntrospectParticipantInput, opts ...grpc.CallOption) (*IntrospectParticipantOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectParticipantInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectParticipantInput, got %T", in))
		}

		return i.client.IntrospectParticipant(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.IntrospectParticipant", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectParticipantOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectParticipantOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) WatchParticipant(ctx context.Context, in *WatchParticipantInput, opts ...grpc.CallOption) (ParticipantService_WatchParticipantClient, error) {
	return i.client.WatchParticipant(ctx, in, opts...)
}

func (i *ParticipantServiceInterceptor) JoinContest(ctx context.Context, in *JoinContestInput, opts ...grpc.CallOption) (*JoinContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*JoinContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *JoinContestInput, got %T", in))
		}

		return i.client.JoinContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.JoinContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*JoinContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *JoinContestOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) StartContest(ctx context.Context, in *StartContestInput, opts ...grpc.CallOption) (*StartContestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*StartContestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *StartContestInput, got %T", in))
		}

		return i.client.StartContest(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.StartContest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*StartContestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *StartContestOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput, opts ...grpc.CallOption) (*VerifyPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*VerifyPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *VerifyPasscodeInput, got %T", in))
		}

		return i.client.VerifyPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.VerifyPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*VerifyPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *VerifyPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) EnterPasscode(ctx context.Context, in *EnterPasscodeInput, opts ...grpc.CallOption) (*EnterPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*EnterPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *EnterPasscodeInput, got %T", in))
		}

		return i.client.EnterPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.EnterPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*EnterPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *EnterPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) ResetPasscode(ctx context.Context, in *ResetPasscodeInput, opts ...grpc.CallOption) (*ResetPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResetPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResetPasscodeInput, got %T", in))
		}

		return i.client.ResetPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.ResetPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResetPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResetPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) SetPasscode(ctx context.Context, in *SetPasscodeInput, opts ...grpc.CallOption) (*SetPasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SetPasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SetPasscodeInput, got %T", in))
		}

		return i.client.SetPasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.SetPasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SetPasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SetPasscodeOutput, got %T", out))
	}

	return message, err
}

func (i *ParticipantServiceInterceptor) RemovePasscode(ctx context.Context, in *RemovePasscodeInput, opts ...grpc.CallOption) (*RemovePasscodeOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RemovePasscodeInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RemovePasscodeInput, got %T", in))
		}

		return i.client.RemovePasscode(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.judge.ParticipantService.RemovePasscode", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RemovePasscodeOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RemovePasscodeOutput, got %T", out))
	}

	return message, err
}
