// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package judge

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	os "os"
	strings "strings"
)

// NewJudge constructs client for Judge
func NewJudge(cli JudgeHTTPClient) *JudgeService {
	base := "https://api.eolymp.com"
	if v := os.Getenv("EOLYMP_API_URL"); v != "" {
		base = v
	}
	return &JudgeService{base: strings.TrimSuffix(base, "/"), cli: cli}
}

type JudgeHTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type JudgeService struct {
	base string
	cli  JudgeHTTPClient
}

// invoke RPC method using twirp-like protocol
func (s *JudgeService) invoke(ctx context.Context, method string, in, out proto.Message) (err error) {
	input := []byte("{}")

	if in != nil {
		input, err = protojson.Marshal(in)
		if err != nil {
			return err
		}
	}

	req, err := http.NewRequest(http.MethodPost, s.base+"/"+method, bytes.NewReader(input))
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *JudgeService) CreateContest(ctx context.Context, in *CreateContestInput) (*CreateContestOutput, error) {
	out := &CreateContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CreateContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteContest(ctx context.Context, in *DeleteContestInput) (*DeleteContestOutput, error) {
	out := &DeleteContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateContest(ctx context.Context, in *UpdateContestInput) (*UpdateContestOutput, error) {
	out := &UpdateContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) LookupContest(ctx context.Context, in *LookupContestInput) (*LookupContestOutput, error) {
	out := &LookupContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/LookupContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeContest(ctx context.Context, in *DescribeContestInput) (*DescribeContestOutput, error) {
	out := &DescribeContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListContests(ctx context.Context, in *ListContestsInput) (*ListContestsOutput, error) {
	out := &ListContestsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListContests", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) OpenContest(ctx context.Context, in *OpenContestInput) (*OpenContestOutput, error) {
	out := &OpenContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/OpenContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CloseContest(ctx context.Context, in *CloseContestInput) (*CloseContestOutput, error) {
	out := &CloseContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CloseContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ConfigureRuntime(ctx context.Context, in *ConfigureRuntimeInput) (*ConfigureRuntimeOutput, error) {
	out := &ConfigureRuntimeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ConfigureRuntime", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeRuntime(ctx context.Context, in *DescribeRuntimeInput) (*DescribeRuntimeOutput, error) {
	out := &DescribeRuntimeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeRuntime", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ConfigureAppearance(ctx context.Context, in *ConfigureAppearanceInput) (*ConfigureAppearanceOutput, error) {
	out := &ConfigureAppearanceOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ConfigureAppearance", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeAppearance(ctx context.Context, in *DescribeAppearanceInput) (*DescribeAppearanceOutput, error) {
	out := &DescribeAppearanceOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeAppearance", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ConfigureScoring(ctx context.Context, in *ConfigureScoringInput) (*ConfigureScoringOutput, error) {
	out := &ConfigureScoringOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ConfigureScoring", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScoring(ctx context.Context, in *DescribeScoringInput) (*DescribeScoringOutput, error) {
	out := &DescribeScoringOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScoring", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ImportProblem(ctx context.Context, in *ImportProblemInput) (*ImportProblemOutput, error) {
	out := &ImportProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ImportProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) SyncProblem(ctx context.Context, in *SyncProblemInput) (*SyncProblemOutput, error) {
	out := &SyncProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/SyncProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateProblem(ctx context.Context, in *UpdateProblemInput) (*UpdateProblemOutput, error) {
	out := &UpdateProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListProblems(ctx context.Context, in *ListProblemsInput) (*ListProblemsOutput, error) {
	out := &ListProblemsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListProblems", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (*DescribeProblemOutput, error) {
	out := &DescribeProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	out := &DescribeCodeTemplateOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeCodeTemplate", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListStatements(ctx context.Context, in *ListStatementsInput) (*ListStatementsOutput, error) {
	out := &ListStatementsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListStatements", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	out := &ListAttachmentsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListAttachments", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListExamples(ctx context.Context, in *ListExamplesInput) (*ListExamplesOutput, error) {
	out := &ListExamplesOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListExamples", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (*DeleteProblemOutput, error) {
	out := &DeleteProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) RetestProblem(ctx context.Context, in *RetestProblemInput) (*RetestProblemOutput, error) {
	out := &RetestProblemOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/RetestProblem", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) AddParticipant(ctx context.Context, in *AddParticipantInput) (*AddParticipantOutput, error) {
	out := &AddParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/AddParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) EnableParticipant(ctx context.Context, in *EnableParticipantInput) (*EnableParticipantOutput, error) {
	out := &EnableParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/EnableParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DisableParticipant(ctx context.Context, in *DisableParticipantInput) (*DisableParticipantOutput, error) {
	out := &DisableParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DisableParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateParticipant(ctx context.Context, in *UpdateParticipantInput) (*UpdateParticipantOutput, error) {
	out := &UpdateParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) RemoveParticipant(ctx context.Context, in *RemoveParticipantInput) (*RemoveParticipantOutput, error) {
	out := &RemoveParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/RemoveParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListParticipants(ctx context.Context, in *ListParticipantsInput) (*ListParticipantsOutput, error) {
	out := &ListParticipantsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListParticipants", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeParticipant(ctx context.Context, in *DescribeParticipantInput) (*DescribeParticipantOutput, error) {
	out := &DescribeParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) IntrospectParticipant(ctx context.Context, in *IntrospectParticipantInput) (*IntrospectParticipantOutput, error) {
	out := &IntrospectParticipantOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/IntrospectParticipant", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) JoinContest(ctx context.Context, in *JoinContestInput) (*JoinContestOutput, error) {
	out := &JoinContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/JoinContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) StartContest(ctx context.Context, in *StartContestInput) (*StartContestOutput, error) {
	out := &StartContestOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/StartContest", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) VerifyPasscode(ctx context.Context, in *VerifyPasscodeInput) (*VerifyPasscodeOutput, error) {
	out := &VerifyPasscodeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/VerifyPasscode", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) EnterPasscode(ctx context.Context, in *EnterPasscodeInput) (*EnterPasscodeOutput, error) {
	out := &EnterPasscodeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/EnterPasscode", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ResetPasscode(ctx context.Context, in *ResetPasscodeInput) (*ResetPasscodeOutput, error) {
	out := &ResetPasscodeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ResetPasscode", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) RemovePasscode(ctx context.Context, in *RemovePasscodeInput) (*RemovePasscodeOutput, error) {
	out := &RemovePasscodeOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/RemovePasscode", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	out := &CreateSubmissionOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CreateSubmission", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListSubmissions(ctx context.Context, in *ListSubmissionsInput) (*ListSubmissionsOutput, error) {
	out := &ListSubmissionsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListSubmissions", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	out := &DescribeSubmissionOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeSubmission", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (*RetestSubmissionOutput, error) {
	out := &RetestSubmissionOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/RetestSubmission", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CreateTicket(ctx context.Context, in *CreateTicketInput) (*CreateTicketOutput, error) {
	out := &CreateTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CreateTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CloseTicket(ctx context.Context, in *CloseTicketInput) (*CloseTicketOutput, error) {
	out := &CloseTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CloseTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) OpenTicket(ctx context.Context, in *OpenTicketInput) (*OpenTicketOutput, error) {
	out := &OpenTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/OpenTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ReadTicket(ctx context.Context, in *ReadTicketInput) (*ReadTicketOutput, error) {
	out := &ReadTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ReadTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteTicket(ctx context.Context, in *DeleteTicketInput) (*DeleteTicketOutput, error) {
	out := &DeleteTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeTicket(ctx context.Context, in *DescribeTicketInput) (*DescribeTicketOutput, error) {
	out := &DescribeTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListTickets(ctx context.Context, in *ListTicketsInput) (*ListTicketsOutput, error) {
	out := &ListTicketsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListTickets", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ReplyTicket(ctx context.Context, in *ReplyTicketInput) (*ReplyTicketOutput, error) {
	out := &ReplyTicketOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ReplyTicket", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListReplies(ctx context.Context, in *ListRepliesInput) (*ListRepliesOutput, error) {
	out := &ListRepliesOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListReplies", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteReply(ctx context.Context, in *DeleteReplyInput) (*DeleteReplyOutput, error) {
	out := &DeleteReplyOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteReply", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateReply(ctx context.Context, in *UpdateReplyInput) (*UpdateReplyOutput, error) {
	out := &UpdateReplyOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateReply", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementInput) (*CreateAnnouncementOutput, error) {
	out := &CreateAnnouncementOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CreateAnnouncement", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementInput) (*UpdateAnnouncementOutput, error) {
	out := &UpdateAnnouncementOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateAnnouncement", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementInput) (*DeleteAnnouncementOutput, error) {
	out := &DeleteAnnouncementOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteAnnouncement", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ReadAnnouncement(ctx context.Context, in *ReadAnnouncementInput) (*ReadAnnouncementOutput, error) {
	out := &ReadAnnouncementOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ReadAnnouncement", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeAnnouncement(ctx context.Context, in *DescribeAnnouncementInput) (*DescribeAnnouncementOutput, error) {
	out := &DescribeAnnouncementOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeAnnouncement", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeAnnouncementStatus(ctx context.Context, in *DescribeAnnouncementStatusInput) (*DescribeAnnouncementStatusOutput, error) {
	out := &DescribeAnnouncementStatusOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeAnnouncementStatus", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListAnnouncements(ctx context.Context, in *ListAnnouncementsInput) (*ListAnnouncementsOutput, error) {
	out := &ListAnnouncementsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListAnnouncements", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) IntrospectScore(ctx context.Context, in *IntrospectScoreInput) (*IntrospectScoreOutput, error) {
	out := &IntrospectScoreOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/IntrospectScore", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScore(ctx context.Context, in *DescribeScoreInput) (*DescribeScoreOutput, error) {
	out := &DescribeScoreOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScore", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ImportScore(ctx context.Context, in *ImportScoreInput) (*ImportScoreOutput, error) {
	out := &ImportScoreOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ImportScore", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListResult(ctx context.Context, in *ListResultInput) (*ListResultOutput, error) {
	out := &ListResultOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListResult", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) CreateScoreboard(ctx context.Context, in *CreateScoreboardInput) (*CreateScoreboardOutput, error) {
	out := &CreateScoreboardOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/CreateScoreboard", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) UpdateScoreboard(ctx context.Context, in *UpdateScoreboardInput) (*UpdateScoreboardOutput, error) {
	out := &UpdateScoreboardOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/UpdateScoreboard", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) RebuildScore(ctx context.Context, in *RebuildScoreInput) (*RebuildScoreOutput, error) {
	out := &RebuildScoreOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/RebuildScore", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DeleteScoreboard(ctx context.Context, in *DeleteScoreboardInput) (*DeleteScoreboardOutput, error) {
	out := &DeleteScoreboardOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DeleteScoreboard", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScoreboard(ctx context.Context, in *DescribeScoreboardInput) (*DescribeScoreboardOutput, error) {
	out := &DescribeScoreboardOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScoreboard", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeDefaultScoreboard(ctx context.Context, in *DescribeDefaultScoreboardInput) (*DescribeDefaultScoreboardOutput, error) {
	out := &DescribeDefaultScoreboardOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeDefaultScoreboard", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListScoreboards(ctx context.Context, in *ListScoreboardsInput) (*ListScoreboardsOutput, error) {
	out := &ListScoreboardsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListScoreboards", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScoreboardHeader(ctx context.Context, in *DescribeScoreboardHeaderInput) (*DescribeScoreboardHeaderOutput, error) {
	out := &DescribeScoreboardHeaderOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScoreboardHeader", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScoreboardFooter(ctx context.Context, in *DescribeScoreboardFooterInput) (*DescribeScoreboardFooterOutput, error) {
	out := &DescribeScoreboardFooterOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScoreboardFooter", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeScoreboardRow(ctx context.Context, in *DescribeScoreboardRowInput) (*DescribeScoreboardRowOutput, error) {
	out := &DescribeScoreboardRowOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeScoreboardRow", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) DescribeDefaultScoreboardRow(ctx context.Context, in *DescribeDefaultScoreboardRowInput) (*DescribeDefaultScoreboardRowOutput, error) {
	out := &DescribeDefaultScoreboardRowOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/DescribeDefaultScoreboardRow", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListScoreboardRows(ctx context.Context, in *ListScoreboardRowsInput) (*ListScoreboardRowsOutput, error) {
	out := &ListScoreboardRowsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListScoreboardRows", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListDefaultScoreboardRows(ctx context.Context, in *ListDefaultScoreboardRowsInput) (*ListDefaultScoreboardRowsOutput, error) {
	out := &ListDefaultScoreboardRowsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListDefaultScoreboardRows", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (*ListEntitlementsOutput, error) {
	out := &ListEntitlementsOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListEntitlements", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *JudgeService) ListActivities(ctx context.Context, in *ListActivitiesInput) (*ListActivitiesOutput, error) {
	out := &ListActivitiesOutput{}

	if err := s.invoke(ctx, "eolymp.judge.Judge/ListActivities", in, out); err != nil {
		return nil, err
	}

	return out, nil
}
