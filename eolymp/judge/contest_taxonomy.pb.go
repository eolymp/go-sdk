// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: eolymp/judge/contest_taxonomy.proto

package judge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Taxonomy_Scale int32

const (
	Taxonomy_UNKNOWN_SCALE Taxonomy_Scale = 0
	Taxonomy_LOCAL         Taxonomy_Scale = 1
	Taxonomy_REGIONAL      Taxonomy_Scale = 2
	Taxonomy_NATIONAL      Taxonomy_Scale = 3
	Taxonomy_INTERNATIONAL Taxonomy_Scale = 4
)

// Enum value maps for Taxonomy_Scale.
var (
	Taxonomy_Scale_name = map[int32]string{
		0: "UNKNOWN_SCALE",
		1: "LOCAL",
		2: "REGIONAL",
		3: "NATIONAL",
		4: "INTERNATIONAL",
	}
	Taxonomy_Scale_value = map[string]int32{
		"UNKNOWN_SCALE": 0,
		"LOCAL":         1,
		"REGIONAL":      2,
		"NATIONAL":      3,
		"INTERNATIONAL": 4,
	}
)

func (x Taxonomy_Scale) Enum() *Taxonomy_Scale {
	p := new(Taxonomy_Scale)
	*p = x
	return p
}

func (x Taxonomy_Scale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Taxonomy_Scale) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_contest_taxonomy_proto_enumTypes[0].Descriptor()
}

func (Taxonomy_Scale) Type() protoreflect.EnumType {
	return &file_eolymp_judge_contest_taxonomy_proto_enumTypes[0]
}

func (x Taxonomy_Scale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Taxonomy_Scale.Descriptor instead.
func (Taxonomy_Scale) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_taxonomy_proto_rawDescGZIP(), []int{0, 0}
}

type Taxonomy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          uint32                 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`                                    // Year when contest was officially held
	Series        string                 `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`                                 // Contest series: Official ICPC, Official IOI, Training Contest etc
	Scale         Taxonomy_Scale         `protobuf:"varint,3,opt,name=scale,proto3,enum=eolymp.judge.Taxonomy_Scale" json:"scale,omitempty"` // Contest scale
	Difficulty    uint32                 `protobuf:"varint,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`                        // Difficulty from 1 (very easy) to 5 (very hard)
	Country       string                 `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`                               // Country where contest was held
	Region        string                 `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`                                 // Region where contest was held
	City          string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`                                     // City where contest was held (in local language)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	mi := &file_eolymp_judge_contest_taxonomy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_contest_taxonomy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_contest_taxonomy_proto_rawDescGZIP(), []int{0}
}

func (x *Taxonomy) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Taxonomy) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *Taxonomy) GetScale() Taxonomy_Scale {
	if x != nil {
		return x.Scale
	}
	return Taxonomy_UNKNOWN_SCALE
}

func (x *Taxonomy) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Taxonomy) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Taxonomy) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Taxonomy) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

var File_eolymp_judge_contest_taxonomy_proto protoreflect.FileDescriptor

const file_eolymp_judge_contest_taxonomy_proto_rawDesc = "" +
	"\n" +
	"#eolymp/judge/contest_taxonomy.proto\x12\feolymp.judge\"\xa6\x02\n" +
	"\bTaxonomy\x12\x12\n" +
	"\x04year\x18\x01 \x01(\rR\x04year\x12\x16\n" +
	"\x06series\x18\x02 \x01(\tR\x06series\x122\n" +
	"\x05scale\x18\x03 \x01(\x0e2\x1c.eolymp.judge.Taxonomy.ScaleR\x05scale\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\rR\n" +
	"difficulty\x12\x18\n" +
	"\acountry\x18\x05 \x01(\tR\acountry\x12\x16\n" +
	"\x06region\x18\x06 \x01(\tR\x06region\x12\x12\n" +
	"\x04city\x18\a \x01(\tR\x04city\"T\n" +
	"\x05Scale\x12\x11\n" +
	"\rUNKNOWN_SCALE\x10\x00\x12\t\n" +
	"\x05LOCAL\x10\x01\x12\f\n" +
	"\bREGIONAL\x10\x02\x12\f\n" +
	"\bNATIONAL\x10\x03\x12\x11\n" +
	"\rINTERNATIONAL\x10\x04B-Z+github.com/eolymp/go-sdk/eolymp/judge;judgeb\x06proto3"

var (
	file_eolymp_judge_contest_taxonomy_proto_rawDescOnce sync.Once
	file_eolymp_judge_contest_taxonomy_proto_rawDescData []byte
)

func file_eolymp_judge_contest_taxonomy_proto_rawDescGZIP() []byte {
	file_eolymp_judge_contest_taxonomy_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_contest_taxonomy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_judge_contest_taxonomy_proto_rawDesc), len(file_eolymp_judge_contest_taxonomy_proto_rawDesc)))
	})
	return file_eolymp_judge_contest_taxonomy_proto_rawDescData
}

var file_eolymp_judge_contest_taxonomy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_judge_contest_taxonomy_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_eolymp_judge_contest_taxonomy_proto_goTypes = []any{
	(Taxonomy_Scale)(0), // 0: eolymp.judge.Taxonomy.Scale
	(*Taxonomy)(nil),    // 1: eolymp.judge.Taxonomy
}
var file_eolymp_judge_contest_taxonomy_proto_depIdxs = []int32{
	0, // 0: eolymp.judge.Taxonomy.scale:type_name -> eolymp.judge.Taxonomy.Scale
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_eolymp_judge_contest_taxonomy_proto_init() }
func file_eolymp_judge_contest_taxonomy_proto_init() {
	if File_eolymp_judge_contest_taxonomy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_judge_contest_taxonomy_proto_rawDesc), len(file_eolymp_judge_contest_taxonomy_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_contest_taxonomy_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_contest_taxonomy_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_contest_taxonomy_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_contest_taxonomy_proto_msgTypes,
	}.Build()
	File_eolymp_judge_contest_taxonomy_proto = out.File
	file_eolymp_judge_contest_taxonomy_proto_goTypes = nil
	file_eolymp_judge_contest_taxonomy_proto_depIdxs = nil
}
