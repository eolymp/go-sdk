// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: eolymp/judge/participant.proto

package judge

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Participant_Status int32

const (
	Participant_UNKNOWN_STATUS Participant_Status = 0 // reserved, should not be used
	Participant_WAITING        Participant_Status = 5 // participant can not start yet
	Participant_READY          Participant_Status = 1 // participant is ready to start (via StartContest method)
	Participant_ACTIVE         Participant_Status = 2 // participant is participating in the contest
	Participant_COMPLETE       Participant_Status = 3 // participant has completed contest (contest is complete, time run out etc)
	Participant_UPSOLVE        Participant_Status = 7 // participant has completed contest but can continue solve problems in upsolve mode
	Participant_BLOCKED        Participant_Status = 8 // participant can not participate (participant is blocked or contest is suspended)
	Participant_PAUSED         Participant_Status = 9 // participant has voluntarily paused contest (can be restarted using StartContest method)
)

// Enum value maps for Participant_Status.
var (
	Participant_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		5: "WAITING",
		1: "READY",
		2: "ACTIVE",
		3: "COMPLETE",
		7: "UPSOLVE",
		8: "BLOCKED",
		9: "PAUSED",
	}
	Participant_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"WAITING":        5,
		"READY":          1,
		"ACTIVE":         2,
		"COMPLETE":       3,
		"UPSOLVE":        7,
		"BLOCKED":        8,
		"PAUSED":         9,
	}
)

func (x Participant_Status) Enum() *Participant_Status {
	p := new(Participant_Status)
	*p = x
	return p
}

func (x Participant_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Participant_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_participant_proto_enumTypes[0].Descriptor()
}

func (Participant_Status) Type() protoreflect.EnumType {
	return &file_eolymp_judge_participant_proto_enumTypes[0]
}

func (x Participant_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Participant_Status.Descriptor instead.
func (Participant_Status) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_proto_rawDescGZIP(), []int{0, 0}
}

type Participant_Role int32

const (
	Participant_PARTICIPANT Participant_Role = 0
	Participant_STAFF       Participant_Role = 1
	Participant_TESTER      Participant_Role = 2
	Participant_AUTHOR      Participant_Role = 3
	Participant_COORDINATOR Participant_Role = 4
)

// Enum value maps for Participant_Role.
var (
	Participant_Role_name = map[int32]string{
		0: "PARTICIPANT",
		1: "STAFF",
		2: "TESTER",
		3: "AUTHOR",
		4: "COORDINATOR",
	}
	Participant_Role_value = map[string]int32{
		"PARTICIPANT": 0,
		"STAFF":       1,
		"TESTER":      2,
		"AUTHOR":      3,
		"COORDINATOR": 4,
	}
)

func (x Participant_Role) Enum() *Participant_Role {
	p := new(Participant_Role)
	*p = x
	return p
}

func (x Participant_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Participant_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_judge_participant_proto_enumTypes[1].Descriptor()
}

func (Participant_Role) Type() protoreflect.EnumType {
	return &file_eolymp_judge_participant_proto_enumTypes[1]
}

func (x Participant_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Participant_Role.Descriptor instead.
func (Participant_Role) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_proto_rawDescGZIP(), []int{0, 1}
}

type Participant struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                      // unique identifier of the participant (can not be set when creating participant)
	MemberId     string                 `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`          // community member
	DisplayName  string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // display name
	Unofficial   bool                   `protobuf:"varint,6,opt,name=unofficial,proto3" json:"unofficial,omitempty"`                     // if true, participant won't be assigned rank in scoreboard
	Inactive     bool                   `protobuf:"varint,10,opt,name=inactive,proto3" json:"inactive,omitempty"`                        // participant is inactive
	Disqualified bool                   `protobuf:"varint,11,opt,name=disqualified,proto3" json:"disqualified,omitempty"`                // participant is disqualified
	Ghost        bool                   `protobuf:"varint,8,opt,name=ghost,proto3" json:"ghost,omitempty"`                               // participant is a ghost
	Finalized    bool                   `protobuf:"varint,12,opt,name=finalized,proto3" json:"finalized,omitempty"`                      // participant result is finalized
	Medal        Medal                  `protobuf:"varint,9,opt,name=medal,proto3,enum=eolymp.judge.Medal" json:"medal,omitempty"`
	// status (see explanation to enumeration values)
	Status    Participant_Status     `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.judge.Participant_Status" json:"status,omitempty"`
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`  // time when user has started participating
	StartedIn uint32                 `protobuf:"varint,22,opt,name=started_in,json=startedIn,proto3" json:"started_in,omitempty"` // time in seconds when user has started participating
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`              // time when user has finished (will finish) participating (incl. bonus time)
	EndIn     uint32                 `protobuf:"varint,26,opt,name=end_in,json=endIn,proto3" json:"end_in,omitempty"`             // time in seconds when user has finished (will finish) participating (incl. bonus time)
	BonusTime uint32                 `protobuf:"varint,27,opt,name=bonus_time,json=bonusTime,proto3" json:"bonus_time,omitempty"` // additional time in seconds for participation
	// passcode is a code participant has to enter before she can begin contest
	// this field is only populated when request is made by contest owner
	// passcode is read-only and should be set using ResetPasscode method.
	Passcode      string `protobuf:"bytes,30,opt,name=passcode,proto3" json:"passcode,omitempty"`
	CertificateId string `protobuf:"bytes,32,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"` // participation certificate ID
	// Submit counter is used to count how many times user submitted the problem.
	Submits       []*Participant_Submit `protobuf:"bytes,40,rep,name=submits,proto3" json:"submits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Participant) Reset() {
	*x = Participant{}
	mi := &file_eolymp_judge_participant_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_proto_rawDescGZIP(), []int{0}
}

func (x *Participant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Participant) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *Participant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Participant) GetUnofficial() bool {
	if x != nil {
		return x.Unofficial
	}
	return false
}

func (x *Participant) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Participant) GetDisqualified() bool {
	if x != nil {
		return x.Disqualified
	}
	return false
}

func (x *Participant) GetGhost() bool {
	if x != nil {
		return x.Ghost
	}
	return false
}

func (x *Participant) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

func (x *Participant) GetMedal() Medal {
	if x != nil {
		return x.Medal
	}
	return Medal_NO_MEDAL
}

func (x *Participant) GetStatus() Participant_Status {
	if x != nil {
		return x.Status
	}
	return Participant_UNKNOWN_STATUS
}

func (x *Participant) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Participant) GetStartedIn() uint32 {
	if x != nil {
		return x.StartedIn
	}
	return 0
}

func (x *Participant) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Participant) GetEndIn() uint32 {
	if x != nil {
		return x.EndIn
	}
	return 0
}

func (x *Participant) GetBonusTime() uint32 {
	if x != nil {
		return x.BonusTime
	}
	return 0
}

func (x *Participant) GetPasscode() string {
	if x != nil {
		return x.Passcode
	}
	return ""
}

func (x *Participant) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *Participant) GetSubmits() []*Participant_Submit {
	if x != nil {
		return x.Submits
	}
	return nil
}

type Participant_Submit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Counter       uint32                 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Participant_Submit) Reset() {
	*x = Participant_Submit{}
	mi := &file_eolymp_judge_participant_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Participant_Submit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant_Submit) ProtoMessage() {}

func (x *Participant_Submit) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_judge_participant_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant_Submit.ProtoReflect.Descriptor instead.
func (*Participant_Submit) Descriptor() ([]byte, []int) {
	return file_eolymp_judge_participant_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Participant_Submit) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Participant_Submit) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

var File_eolymp_judge_participant_proto protoreflect.FileDescriptor

const file_eolymp_judge_participant_proto_rawDesc = "" +
	"\n" +
	"\x1eeolymp/judge/participant.proto\x12\feolymp.judge\x1a\x18eolymp/judge/medal.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9e\a\n" +
	"\vParticipant\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tmember_id\x18\x04 \x01(\tR\bmemberId\x12!\n" +
	"\fdisplay_name\x18\x05 \x01(\tR\vdisplayName\x12\x1e\n" +
	"\n" +
	"unofficial\x18\x06 \x01(\bR\n" +
	"unofficial\x12\x1a\n" +
	"\binactive\x18\n" +
	" \x01(\bR\binactive\x12\"\n" +
	"\fdisqualified\x18\v \x01(\bR\fdisqualified\x12\x14\n" +
	"\x05ghost\x18\b \x01(\bR\x05ghost\x12\x1c\n" +
	"\tfinalized\x18\f \x01(\bR\tfinalized\x12)\n" +
	"\x05medal\x18\t \x01(\x0e2\x13.eolymp.judge.MedalR\x05medal\x128\n" +
	"\x06status\x18\x14 \x01(\x0e2 .eolymp.judge.Participant.StatusR\x06status\x129\n" +
	"\n" +
	"started_at\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12\x1d\n" +
	"\n" +
	"started_in\x18\x16 \x01(\rR\tstartedIn\x121\n" +
	"\x06end_at\x18\x19 \x01(\v2\x1a.google.protobuf.TimestampR\x05endAt\x12\x15\n" +
	"\x06end_in\x18\x1a \x01(\rR\x05endIn\x12\x1d\n" +
	"\n" +
	"bonus_time\x18\x1b \x01(\rR\tbonusTime\x12\x1a\n" +
	"\bpasscode\x18\x1e \x01(\tR\bpasscode\x12%\n" +
	"\x0ecertificate_id\x18  \x01(\tR\rcertificateId\x12:\n" +
	"\asubmits\x18( \x03(\v2 .eolymp.judge.Participant.SubmitR\asubmits\x1aA\n" +
	"\x06Submit\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x01 \x01(\tR\tproblemId\x12\x18\n" +
	"\acounter\x18\x02 \x01(\rR\acounter\"t\n" +
	"\x06Status\x12\x12\n" +
	"\x0eUNKNOWN_STATUS\x10\x00\x12\v\n" +
	"\aWAITING\x10\x05\x12\t\n" +
	"\x05READY\x10\x01\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x02\x12\f\n" +
	"\bCOMPLETE\x10\x03\x12\v\n" +
	"\aUPSOLVE\x10\a\x12\v\n" +
	"\aBLOCKED\x10\b\x12\n" +
	"\n" +
	"\x06PAUSED\x10\t\"K\n" +
	"\x04Role\x12\x0f\n" +
	"\vPARTICIPANT\x10\x00\x12\t\n" +
	"\x05STAFF\x10\x01\x12\n" +
	"\n" +
	"\x06TESTER\x10\x02\x12\n" +
	"\n" +
	"\x06AUTHOR\x10\x03\x12\x0f\n" +
	"\vCOORDINATOR\x10\x04B-Z+github.com/eolymp/go-sdk/eolymp/judge;judgeb\x06proto3"

var (
	file_eolymp_judge_participant_proto_rawDescOnce sync.Once
	file_eolymp_judge_participant_proto_rawDescData []byte
)

func file_eolymp_judge_participant_proto_rawDescGZIP() []byte {
	file_eolymp_judge_participant_proto_rawDescOnce.Do(func() {
		file_eolymp_judge_participant_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_judge_participant_proto_rawDesc), len(file_eolymp_judge_participant_proto_rawDesc)))
	})
	return file_eolymp_judge_participant_proto_rawDescData
}

var file_eolymp_judge_participant_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_judge_participant_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_eolymp_judge_participant_proto_goTypes = []any{
	(Participant_Status)(0),       // 0: eolymp.judge.Participant.Status
	(Participant_Role)(0),         // 1: eolymp.judge.Participant.Role
	(*Participant)(nil),           // 2: eolymp.judge.Participant
	(*Participant_Submit)(nil),    // 3: eolymp.judge.Participant.Submit
	(Medal)(0),                    // 4: eolymp.judge.Medal
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_eolymp_judge_participant_proto_depIdxs = []int32{
	4, // 0: eolymp.judge.Participant.medal:type_name -> eolymp.judge.Medal
	0, // 1: eolymp.judge.Participant.status:type_name -> eolymp.judge.Participant.Status
	5, // 2: eolymp.judge.Participant.started_at:type_name -> google.protobuf.Timestamp
	5, // 3: eolymp.judge.Participant.end_at:type_name -> google.protobuf.Timestamp
	3, // 4: eolymp.judge.Participant.submits:type_name -> eolymp.judge.Participant.Submit
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_eolymp_judge_participant_proto_init() }
func file_eolymp_judge_participant_proto_init() {
	if File_eolymp_judge_participant_proto != nil {
		return
	}
	file_eolymp_judge_medal_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_judge_participant_proto_rawDesc), len(file_eolymp_judge_participant_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_judge_participant_proto_goTypes,
		DependencyIndexes: file_eolymp_judge_participant_proto_depIdxs,
		EnumInfos:         file_eolymp_judge_participant_proto_enumTypes,
		MessageInfos:      file_eolymp_judge_participant_proto_msgTypes,
	}.Build()
	File_eolymp_judge_participant_proto = out.File
	file_eolymp_judge_participant_proto_goTypes = nil
	file_eolymp_judge_participant_proto_depIdxs = nil
}
