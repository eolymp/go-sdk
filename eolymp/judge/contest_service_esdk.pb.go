// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package judge

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

type _ContestServiceHttpClient interface {
	Do(*http.Request) (*http.Response, error)
}

type ContestServiceService struct {
	base string
	cli  _ContestServiceHttpClient
}

// NewContestServiceHttpClient constructs client for ContestService
func NewContestServiceHttpClient(url string, cli _ContestServiceHttpClient) *ContestServiceService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &ContestServiceService{base: url, cli: cli}
}

func (s *ContestServiceService) do(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	var body io.Reader

	if in != nil {
		data, err := protojson.Marshal(in)
		if err != nil {
			return err
		}

		if verb != "GET" {
			body = bytes.NewReader(data)
		} else {
			query := url.Values{"q": []string{string(data)}}
			path = path + "?" + query.Encode()
		}
	}

	if in == nil && verb != "GET" {
		body = bytes.NewReader([]byte("{}"))
	}

	req, err := http.NewRequest(verb, s.base+path, body)
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *ContestServiceService) CreateContest(ctx context.Context, in *CreateContestInput) (*CreateContestOutput, error) {
	out := &CreateContestOutput{}
	path := "/contests"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) DeleteContest(ctx context.Context, in *DeleteContestInput) (*DeleteContestOutput, error) {
	out := &DeleteContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) UpdateContest(ctx context.Context, in *UpdateContestInput) (*UpdateContestOutput, error) {
	out := &UpdateContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) CopyContest(ctx context.Context, in *CopyContestInput) (*CopyContestOutput, error) {
	out := &CopyContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/copy"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) DescribeContest(ctx context.Context, in *DescribeContestInput) (*DescribeContestOutput, error) {
	out := &DescribeContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) ListContests(ctx context.Context, in *ListContestsInput) (*ListContestsOutput, error) {
	out := &ListContestsOutput{}
	path := "/contests"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) OpenContest(ctx context.Context, in *OpenContestInput) (*OpenContestOutput, error) {
	out := &OpenContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/open"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) CloseContest(ctx context.Context, in *CloseContestInput) (*CloseContestOutput, error) {
	out := &CloseContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/close"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) SuspendContest(ctx context.Context, in *SuspendContestInput) (*SuspendContestOutput, error) {
	out := &SuspendContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/suspend"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) FreezeContest(ctx context.Context, in *FreezeContestInput) (*FreezeContestOutput, error) {
	out := &FreezeContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/freeze"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) FinalizeContest(ctx context.Context, in *FinalizeContestInput) (*FinalizeContestOutput, error) {
	out := &FinalizeContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/finalize"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) ResumeContest(ctx context.Context, in *ResumeContestInput) (*ResumeContestOutput, error) {
	out := &ResumeContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/resume"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) AnalyzeContest(ctx context.Context, in *AnalyzeContestInput) (*AnalyzeContestOutput, error) {
	out := &AnalyzeContestOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/analyze"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) ListActivities(ctx context.Context, in *ListActivitiesInput) (*ListActivitiesOutput, error) {
	out := &ListActivitiesOutput{}
	path := "/contests/" + url.PathEscape(in.GetContestId()) + "/activities"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ContestId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *ContestServiceService) DescribeContestUsage(ctx context.Context, in *DescribeContestUsageInput) (*DescribeContestUsageOutput, error) {
	out := &DescribeContestUsageOutput{}
	path := "/usage/contests"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
