// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package judge

import (
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _ProblemService_HTTPReadQueryString parses body into proto.Message
func _ProblemService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _ProblemService_HTTPReadRequestBody parses body into proto.Message
func _ProblemService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ProblemService_HTTPWriteResponse writes proto.Message to HTTP response
func _ProblemService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ProblemService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ProblemService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ProblemService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterProblemServiceHttpHandlers adds handlers for for ProblemServiceClient
func RegisterProblemServiceHttpHandlers(router *mux.Router, prefix string, cli ProblemServiceClient) {
	router.Handle(prefix+"/problems", _ProblemService_ImportProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ProblemService.ImportProblem")
	router.Handle(prefix+"/problems/{problem_id}/sync", _ProblemService_SyncProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ProblemService.SyncProblem")
	router.Handle(prefix+"/problems/{problem_id}", _ProblemService_UpdateProblem_Rule0(cli)).
		Methods("POST").
		Name("eolymp.judge.ProblemService.UpdateProblem")
	router.Handle(prefix+"/problems", _ProblemService_ListProblems_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.ListProblems")
	router.Handle(prefix+"/problems/{problem_id}", _ProblemService_DescribeProblem_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.DescribeProblem")
	router.Handle(prefix+"/problems/{problem_id}", _ProblemService_DeleteProblem_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.judge.ProblemService.DeleteProblem")
	router.Handle(prefix+"/problems/{problem_id}/lookup-template", _ProblemService_LookupCodeTemplate_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.LookupCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/templates/{template_id}", _ProblemService_DescribeCodeTemplate_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.DescribeCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/statements", _ProblemService_ListStatements_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.ListStatements")
	router.Handle(prefix+"/problems/{problem_id}/attachments", _ProblemService_ListAttachments_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.ListAttachments")
	router.Handle(prefix+"/problems/{problem_id}/examples", _ProblemService_ListExamples_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.ListExamples")
	router.Handle(prefix+"/problems/{problem_id}/runtime", _ProblemService_ListRuntimes_Rule0(cli)).
		Methods("GET").
		Name("eolymp.judge.ProblemService.ListRuntimes")
}

// RegisterProblemServiceHttpProxy adds proxy handlers for for ProblemServiceClient
func RegisterProblemServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterProblemServiceHttpHandlers(router, prefix, NewProblemServiceClient(conn))
}

func _ProblemService_ImportProblem_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ImportProblemInput{}

		if err := _ProblemService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ImportProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_SyncProblem_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SyncProblemInput{}

		if err := _ProblemService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.SyncProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_UpdateProblem_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProblemInput{}

		if err := _ProblemService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_ListProblems_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListProblems(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_DescribeProblem_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_DeleteProblem_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _ProblemService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteProblem(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_LookupCodeTemplate_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &LookupCodeTemplateInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.LookupCodeTemplate(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_DescribeCodeTemplate_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeCodeTemplate(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_ListStatements_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListStatements(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_ListAttachments_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListAttachments(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_ListExamples_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListExamples(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ProblemService_ListRuntimes_Rule0(cli ProblemServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRuntimesInput{}

		if err := _ProblemService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		var header, trailer metadata.MD

		out, err := cli.ListRuntimes(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ProblemService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ProblemService_HTTPWriteResponse(w, out, header, trailer)
	})
}
