// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/judge/admission_service.proto

package judge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdmissionService_RequestAdmission_FullMethodName  = "/eolymp.judge.AdmissionService/RequestAdmission"
	AdmissionService_WatchAdmission_FullMethodName    = "/eolymp.judge.AdmissionService/WatchAdmission"
	AdmissionService_DescribeAdmission_FullMethodName = "/eolymp.judge.AdmissionService/DescribeAdmission"
	AdmissionService_AcceptAdmission_FullMethodName   = "/eolymp.judge.AdmissionService/AcceptAdmission"
)

// AdmissionServiceClient is the client API for AdmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdmissionServiceClient interface {
	// Request admission code, if necessary for the contest and if authenticated token has been admitted already.
	RequestAdmission(ctx context.Context, in *RequestAdmissionInput, opts ...grpc.CallOption) (*RequestAdmissionOutput, error)
	// Watch admission request for any changes
	WatchAdmission(ctx context.Context, in *WatchAdmissionInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchAdmissionOutput], error)
	DescribeAdmission(ctx context.Context, in *DescribeAdmissionInput, opts ...grpc.CallOption) (*DescribeAdmissionOutput, error)
	// Accept admission code
	AcceptAdmission(ctx context.Context, in *AcceptAdmissionInput, opts ...grpc.CallOption) (*AcceptAdmissionOutput, error)
}

type admissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmissionServiceClient(cc grpc.ClientConnInterface) AdmissionServiceClient {
	return &admissionServiceClient{cc}
}

func (c *admissionServiceClient) RequestAdmission(ctx context.Context, in *RequestAdmissionInput, opts ...grpc.CallOption) (*RequestAdmissionOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAdmissionOutput)
	err := c.cc.Invoke(ctx, AdmissionService_RequestAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) WatchAdmission(ctx context.Context, in *WatchAdmissionInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchAdmissionOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdmissionService_ServiceDesc.Streams[0], AdmissionService_WatchAdmission_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchAdmissionInput, WatchAdmissionOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdmissionService_WatchAdmissionClient = grpc.ServerStreamingClient[WatchAdmissionOutput]

func (c *admissionServiceClient) DescribeAdmission(ctx context.Context, in *DescribeAdmissionInput, opts ...grpc.CallOption) (*DescribeAdmissionOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeAdmissionOutput)
	err := c.cc.Invoke(ctx, AdmissionService_DescribeAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) AcceptAdmission(ctx context.Context, in *AcceptAdmissionInput, opts ...grpc.CallOption) (*AcceptAdmissionOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptAdmissionOutput)
	err := c.cc.Invoke(ctx, AdmissionService_AcceptAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionServiceServer is the server API for AdmissionService service.
// All implementations should embed UnimplementedAdmissionServiceServer
// for forward compatibility.
type AdmissionServiceServer interface {
	// Request admission code, if necessary for the contest and if authenticated token has been admitted already.
	RequestAdmission(context.Context, *RequestAdmissionInput) (*RequestAdmissionOutput, error)
	// Watch admission request for any changes
	WatchAdmission(*WatchAdmissionInput, grpc.ServerStreamingServer[WatchAdmissionOutput]) error
	DescribeAdmission(context.Context, *DescribeAdmissionInput) (*DescribeAdmissionOutput, error)
	// Accept admission code
	AcceptAdmission(context.Context, *AcceptAdmissionInput) (*AcceptAdmissionOutput, error)
}

// UnimplementedAdmissionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdmissionServiceServer struct{}

func (UnimplementedAdmissionServiceServer) RequestAdmission(context.Context, *RequestAdmissionInput) (*RequestAdmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) WatchAdmission(*WatchAdmissionInput, grpc.ServerStreamingServer[WatchAdmissionOutput]) error {
	return status.Errorf(codes.Unimplemented, "method WatchAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) DescribeAdmission(context.Context, *DescribeAdmissionInput) (*DescribeAdmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) AcceptAdmission(context.Context, *AcceptAdmissionInput) (*AcceptAdmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAdmission not implemented")
}
func (UnimplementedAdmissionServiceServer) testEmbeddedByValue() {}

// UnsafeAdmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmissionServiceServer will
// result in compilation errors.
type UnsafeAdmissionServiceServer interface {
	mustEmbedUnimplementedAdmissionServiceServer()
}

func RegisterAdmissionServiceServer(s grpc.ServiceRegistrar, srv AdmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdmissionService_ServiceDesc, srv)
}

func _AdmissionService_RequestAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAdmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).RequestAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_RequestAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).RequestAdmission(ctx, req.(*RequestAdmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_WatchAdmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAdmissionInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdmissionServiceServer).WatchAdmission(m, &grpc.GenericServerStream[WatchAdmissionInput, WatchAdmissionOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdmissionService_WatchAdmissionServer = grpc.ServerStreamingServer[WatchAdmissionOutput]

func _AdmissionService_DescribeAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAdmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).DescribeAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_DescribeAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).DescribeAdmission(ctx, req.(*DescribeAdmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_AcceptAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAdmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).AcceptAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmissionService_AcceptAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).AcceptAdmission(ctx, req.(*AcceptAdmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmissionService_ServiceDesc is the grpc.ServiceDesc for AdmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.judge.AdmissionService",
	HandlerType: (*AdmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAdmission",
			Handler:    _AdmissionService_RequestAdmission_Handler,
		},
		{
			MethodName: "DescribeAdmission",
			Handler:    _AdmissionService_DescribeAdmission_Handler,
		},
		{
			MethodName: "AcceptAdmission",
			Handler:    _AdmissionService_AcceptAdmission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAdmission",
			Handler:       _AdmissionService_WatchAdmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eolymp/judge/admission_service.proto",
}
