// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/commerce/shopping_service.proto

package commerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShoppingService_DescribeShoppingCart_FullMethodName   = "/eolymp.commerce.ShoppingService/DescribeShoppingCart"
	ShoppingService_CreateShoppingCartItem_FullMethodName = "/eolymp.commerce.ShoppingService/CreateShoppingCartItem"
	ShoppingService_UpdateShoppingCartItem_FullMethodName = "/eolymp.commerce.ShoppingService/UpdateShoppingCartItem"
	ShoppingService_DeleteShoppingCartItem_FullMethodName = "/eolymp.commerce.ShoppingService/DeleteShoppingCartItem"
	ShoppingService_UpdateShippingAddress_FullMethodName  = "/eolymp.commerce.ShoppingService/UpdateShippingAddress"
	ShoppingService_UpdateBillingAddress_FullMethodName   = "/eolymp.commerce.ShoppingService/UpdateBillingAddress"
	ShoppingService_UpdateShippingMethod_FullMethodName   = "/eolymp.commerce.ShoppingService/UpdateShippingMethod"
	ShoppingService_ListShippingMethods_FullMethodName    = "/eolymp.commerce.ShoppingService/ListShippingMethods"
	ShoppingService_PlaceOrder_FullMethodName             = "/eolymp.commerce.ShoppingService/PlaceOrder"
)

// ShoppingServiceClient is the client API for ShoppingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingServiceClient interface {
	DescribeShoppingCart(ctx context.Context, in *DescribeShoppingCartInput, opts ...grpc.CallOption) (*DescribeShoppingCartOutput, error)
	CreateShoppingCartItem(ctx context.Context, in *CreateShoppingCartItemInput, opts ...grpc.CallOption) (*CreateShoppingCartItemOutput, error)
	UpdateShoppingCartItem(ctx context.Context, in *UpdateShoppingCartItemInput, opts ...grpc.CallOption) (*UpdateShoppingCartItemOutput, error)
	DeleteShoppingCartItem(ctx context.Context, in *DeleteShoppingCartItemInput, opts ...grpc.CallOption) (*DeleteShoppingCartItemOutput, error)
	UpdateShippingAddress(ctx context.Context, in *UpdateShippingAddressInput, opts ...grpc.CallOption) (*UpdateShippingAddressOutput, error)
	UpdateBillingAddress(ctx context.Context, in *UpdateBillingAddressInput, opts ...grpc.CallOption) (*UpdateBillingAddressOutput, error)
	UpdateShippingMethod(ctx context.Context, in *UpdateShippingMethodInput, opts ...grpc.CallOption) (*UpdateShippingMethodOutput, error)
	ListShippingMethods(ctx context.Context, in *ListShippingMethodsInput, opts ...grpc.CallOption) (*ListShippingMethodsOutput, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderInput, opts ...grpc.CallOption) (*PlaceOrderOutput, error)
}

type shoppingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingServiceClient(cc grpc.ClientConnInterface) ShoppingServiceClient {
	return &shoppingServiceClient{cc}
}

func (c *shoppingServiceClient) DescribeShoppingCart(ctx context.Context, in *DescribeShoppingCartInput, opts ...grpc.CallOption) (*DescribeShoppingCartOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeShoppingCartOutput)
	err := c.cc.Invoke(ctx, ShoppingService_DescribeShoppingCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) CreateShoppingCartItem(ctx context.Context, in *CreateShoppingCartItemInput, opts ...grpc.CallOption) (*CreateShoppingCartItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShoppingCartItemOutput)
	err := c.cc.Invoke(ctx, ShoppingService_CreateShoppingCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateShoppingCartItem(ctx context.Context, in *UpdateShoppingCartItemInput, opts ...grpc.CallOption) (*UpdateShoppingCartItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShoppingCartItemOutput)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateShoppingCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) DeleteShoppingCartItem(ctx context.Context, in *DeleteShoppingCartItemInput, opts ...grpc.CallOption) (*DeleteShoppingCartItemOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShoppingCartItemOutput)
	err := c.cc.Invoke(ctx, ShoppingService_DeleteShoppingCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateShippingAddress(ctx context.Context, in *UpdateShippingAddressInput, opts ...grpc.CallOption) (*UpdateShippingAddressOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShippingAddressOutput)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateBillingAddress(ctx context.Context, in *UpdateBillingAddressInput, opts ...grpc.CallOption) (*UpdateBillingAddressOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBillingAddressOutput)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateBillingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateShippingMethod(ctx context.Context, in *UpdateShippingMethodInput, opts ...grpc.CallOption) (*UpdateShippingMethodOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShippingMethodOutput)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateShippingMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) ListShippingMethods(ctx context.Context, in *ListShippingMethodsInput, opts ...grpc.CallOption) (*ListShippingMethodsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShippingMethodsOutput)
	err := c.cc.Invoke(ctx, ShoppingService_ListShippingMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderInput, opts ...grpc.CallOption) (*PlaceOrderOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceOrderOutput)
	err := c.cc.Invoke(ctx, ShoppingService_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingServiceServer is the server API for ShoppingService service.
// All implementations should embed UnimplementedShoppingServiceServer
// for forward compatibility.
type ShoppingServiceServer interface {
	DescribeShoppingCart(context.Context, *DescribeShoppingCartInput) (*DescribeShoppingCartOutput, error)
	CreateShoppingCartItem(context.Context, *CreateShoppingCartItemInput) (*CreateShoppingCartItemOutput, error)
	UpdateShoppingCartItem(context.Context, *UpdateShoppingCartItemInput) (*UpdateShoppingCartItemOutput, error)
	DeleteShoppingCartItem(context.Context, *DeleteShoppingCartItemInput) (*DeleteShoppingCartItemOutput, error)
	UpdateShippingAddress(context.Context, *UpdateShippingAddressInput) (*UpdateShippingAddressOutput, error)
	UpdateBillingAddress(context.Context, *UpdateBillingAddressInput) (*UpdateBillingAddressOutput, error)
	UpdateShippingMethod(context.Context, *UpdateShippingMethodInput) (*UpdateShippingMethodOutput, error)
	ListShippingMethods(context.Context, *ListShippingMethodsInput) (*ListShippingMethodsOutput, error)
	PlaceOrder(context.Context, *PlaceOrderInput) (*PlaceOrderOutput, error)
}

// UnimplementedShoppingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingServiceServer struct{}

func (UnimplementedShoppingServiceServer) DescribeShoppingCart(context.Context, *DescribeShoppingCartInput) (*DescribeShoppingCartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeShoppingCart not implemented")
}
func (UnimplementedShoppingServiceServer) CreateShoppingCartItem(context.Context, *CreateShoppingCartItemInput) (*CreateShoppingCartItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShoppingCartItem not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateShoppingCartItem(context.Context, *UpdateShoppingCartItemInput) (*UpdateShoppingCartItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShoppingCartItem not implemented")
}
func (UnimplementedShoppingServiceServer) DeleteShoppingCartItem(context.Context, *DeleteShoppingCartItemInput) (*DeleteShoppingCartItemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShoppingCartItem not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateShippingAddress(context.Context, *UpdateShippingAddressInput) (*UpdateShippingAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingAddress not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateBillingAddress(context.Context, *UpdateBillingAddressInput) (*UpdateBillingAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingAddress not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateShippingMethod(context.Context, *UpdateShippingMethodInput) (*UpdateShippingMethodOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingMethod not implemented")
}
func (UnimplementedShoppingServiceServer) ListShippingMethods(context.Context, *ListShippingMethodsInput) (*ListShippingMethodsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShippingMethods not implemented")
}
func (UnimplementedShoppingServiceServer) PlaceOrder(context.Context, *PlaceOrderInput) (*PlaceOrderOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedShoppingServiceServer) testEmbeddedByValue() {}

// UnsafeShoppingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingServiceServer will
// result in compilation errors.
type UnsafeShoppingServiceServer interface {
	mustEmbedUnimplementedShoppingServiceServer()
}

func RegisterShoppingServiceServer(s grpc.ServiceRegistrar, srv ShoppingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShoppingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShoppingService_ServiceDesc, srv)
}

func _ShoppingService_DescribeShoppingCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeShoppingCartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).DescribeShoppingCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_DescribeShoppingCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).DescribeShoppingCart(ctx, req.(*DescribeShoppingCartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_CreateShoppingCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShoppingCartItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).CreateShoppingCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_CreateShoppingCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).CreateShoppingCartItem(ctx, req.(*CreateShoppingCartItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateShoppingCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShoppingCartItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateShoppingCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateShoppingCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateShoppingCartItem(ctx, req.(*UpdateShoppingCartItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_DeleteShoppingCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShoppingCartItemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).DeleteShoppingCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_DeleteShoppingCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).DeleteShoppingCartItem(ctx, req.(*DeleteShoppingCartItemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShippingAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateShippingAddress(ctx, req.(*UpdateShippingAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateBillingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateBillingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateBillingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateBillingAddress(ctx, req.(*UpdateBillingAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateShippingMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShippingMethodInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateShippingMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateShippingMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateShippingMethod(ctx, req.(*UpdateShippingMethodInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_ListShippingMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShippingMethodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).ListShippingMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_ListShippingMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).ListShippingMethods(ctx, req.(*ListShippingMethodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).PlaceOrder(ctx, req.(*PlaceOrderInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingService_ServiceDesc is the grpc.ServiceDesc for ShoppingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.commerce.ShoppingService",
	HandlerType: (*ShoppingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeShoppingCart",
			Handler:    _ShoppingService_DescribeShoppingCart_Handler,
		},
		{
			MethodName: "CreateShoppingCartItem",
			Handler:    _ShoppingService_CreateShoppingCartItem_Handler,
		},
		{
			MethodName: "UpdateShoppingCartItem",
			Handler:    _ShoppingService_UpdateShoppingCartItem_Handler,
		},
		{
			MethodName: "DeleteShoppingCartItem",
			Handler:    _ShoppingService_DeleteShoppingCartItem_Handler,
		},
		{
			MethodName: "UpdateShippingAddress",
			Handler:    _ShoppingService_UpdateShippingAddress_Handler,
		},
		{
			MethodName: "UpdateBillingAddress",
			Handler:    _ShoppingService_UpdateBillingAddress_Handler,
		},
		{
			MethodName: "UpdateShippingMethod",
			Handler:    _ShoppingService_UpdateShippingMethod_Handler,
		},
		{
			MethodName: "ListShippingMethods",
			Handler:    _ShoppingService_ListShippingMethods_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _ShoppingService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/commerce/shopping_service.proto",
}
