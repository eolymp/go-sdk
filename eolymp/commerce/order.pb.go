// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: eolymp/commerce/order.proto

package commerce

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order_Status int32

const (
	Order_UNKNOWN_STATUS Order_Status = 0
	Order_INCOMPLETE     Order_Status = 1 // order has not been placed yet
	Order_PENDING        Order_Status = 2 // order is pending payment
	Order_ACTIVE         Order_Status = 3 // recurring order is active: last payment was successful
	Order_INACTIVE       Order_Status = 4 // recurring order is inactive: last payment is due or failed
	Order_COMPLETE       Order_Status = 5 // order is complete
)

// Enum value maps for Order_Status.
var (
	Order_Status_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "INCOMPLETE",
		2: "PENDING",
		3: "ACTIVE",
		4: "INACTIVE",
		5: "COMPLETE",
	}
	Order_Status_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"INCOMPLETE":     1,
		"PENDING":        2,
		"ACTIVE":         3,
		"INACTIVE":       4,
		"COMPLETE":       5,
	}
)

func (x Order_Status) Enum() *Order_Status {
	p := new(Order_Status)
	*p = x
	return p
}

func (x Order_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_commerce_order_proto_enumTypes[0].Descriptor()
}

func (Order_Status) Type() protoreflect.EnumType {
	return &file_eolymp_commerce_order_proto_enumTypes[0]
}

func (x Order_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Status.Descriptor instead.
func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_commerce_order_proto_rawDescGZIP(), []int{0, 0}
}

type Order_Recurrence int32

const (
	Order_UNKNOWN_RECURRENCE Order_Recurrence = 0
	Order_NONE               Order_Recurrence = 1
	Order_MONTHLY            Order_Recurrence = 2
	Order_YEARLY             Order_Recurrence = 3
)

// Enum value maps for Order_Recurrence.
var (
	Order_Recurrence_name = map[int32]string{
		0: "UNKNOWN_RECURRENCE",
		1: "NONE",
		2: "MONTHLY",
		3: "YEARLY",
	}
	Order_Recurrence_value = map[string]int32{
		"UNKNOWN_RECURRENCE": 0,
		"NONE":               1,
		"MONTHLY":            2,
		"YEARLY":             3,
	}
)

func (x Order_Recurrence) Enum() *Order_Recurrence {
	p := new(Order_Recurrence)
	*p = x
	return p
}

func (x Order_Recurrence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Recurrence) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_commerce_order_proto_enumTypes[1].Descriptor()
}

func (Order_Recurrence) Type() protoreflect.EnumType {
	return &file_eolymp_commerce_order_proto_enumTypes[1]
}

func (x Order_Recurrence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Recurrence.Descriptor instead.
func (Order_Recurrence) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_commerce_order_proto_rawDescGZIP(), []int{0, 1}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               // automatically generated number
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"` // user friendly number
	SpaceId   string `protobuf:"bytes,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// Types that are assignable to Payer:
	//	*Order_MemberId
	//	*Order_UserId
	Payer              isOrder_Payer          `protobuf_oneof:"payer"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                              // when order was initially created
	ExpiresAt          *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                              // when recurring order will expire unless renewed
	PaidAt             *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=paid_at,json=paidAt,proto3" json:"paid_at,omitempty"`                                       // when payment was received
	Status             Order_Status           `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.commerce.Order_Status" json:"status,omitempty"`                  // order status, see enumeration
	Recurrence         Order_Recurrence       `protobuf:"varint,30,opt,name=recurrence,proto3,enum=eolymp.commerce.Order_Recurrence" json:"recurrence,omitempty"`      // order recurrence
	BillingAddress     *Address               `protobuf:"bytes,40,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`               // billing address
	Currency           string                 `protobuf:"bytes,50,opt,name=currency,proto3" json:"currency,omitempty"`                                                 // order currency
	Subtotal           float32                `protobuf:"fixed32,51,opt,name=subtotal,proto3" json:"subtotal,omitempty"`                                               // order total without before tax or discount
	TaxAmount          float32                `protobuf:"fixed32,52,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`                            // tax amount
	TaxPercentage      float32                `protobuf:"fixed32,53,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`                // tax percentage from 0 to 1
	DiscountAmount     float32                `protobuf:"fixed32,54,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`             // discount amount
	DiscountPercentage float32                `protobuf:"fixed32,55,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty"` // discount percentage from 0 to 1
	GrandTotal         float32                `protobuf:"fixed32,59,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`                         // order total after all necessary payments
	Items              []*Order_Item          `protobuf:"bytes,100,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_commerce_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_commerce_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_eolymp_commerce_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Order) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (m *Order) GetPayer() isOrder_Payer {
	if m != nil {
		return m.Payer
	}
	return nil
}

func (x *Order) GetMemberId() string {
	if x, ok := x.GetPayer().(*Order_MemberId); ok {
		return x.MemberId
	}
	return ""
}

func (x *Order) GetUserId() string {
	if x, ok := x.GetPayer().(*Order_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Order) GetPaidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

func (x *Order) GetStatus() Order_Status {
	if x != nil {
		return x.Status
	}
	return Order_UNKNOWN_STATUS
}

func (x *Order) GetRecurrence() Order_Recurrence {
	if x != nil {
		return x.Recurrence
	}
	return Order_UNKNOWN_RECURRENCE
}

func (x *Order) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *Order) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Order) GetSubtotal() float32 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *Order) GetTaxAmount() float32 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *Order) GetTaxPercentage() float32 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *Order) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *Order) GetDiscountPercentage() float32 {
	if x != nil {
		return x.DiscountPercentage
	}
	return 0
}

func (x *Order) GetGrandTotal() float32 {
	if x != nil {
		return x.GrandTotal
	}
	return 0
}

func (x *Order) GetItems() []*Order_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type isOrder_Payer interface {
	isOrder_Payer()
}

type Order_MemberId struct {
	MemberId string `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3,oneof"` // order is created by a member of the space
}

type Order_UserId struct {
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3,oneof"` // order is created by a user (ie. space admin)
}

func (*Order_MemberId) isOrder_Payer() {}

func (*Order_UserId) isOrder_Payer() {}

type Order_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku                 string  `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Name                string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description         string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Quantity            float32 `protobuf:"fixed32,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ItemPrice           float32 `protobuf:"fixed32,100,opt,name=item_price,json=itemPrice,proto3" json:"item_price,omitempty"`
	TaxPercentage       float32 `protobuf:"fixed32,102,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	DiscountPercentage  float32 `protobuf:"fixed32,104,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty"`
	TotalTaxAmount      float32 `protobuf:"fixed32,101,opt,name=total_tax_amount,json=totalTaxAmount,proto3" json:"total_tax_amount,omitempty"`
	TotalDiscountAmount float32 `protobuf:"fixed32,103,opt,name=total_discount_amount,json=totalDiscountAmount,proto3" json:"total_discount_amount,omitempty"`
	TotalPrice          float32 `protobuf:"fixed32,109,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
}

func (x *Order_Item) Reset() {
	*x = Order_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_commerce_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order_Item) ProtoMessage() {}

func (x *Order_Item) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_commerce_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order_Item.ProtoReflect.Descriptor instead.
func (*Order_Item) Descriptor() ([]byte, []int) {
	return file_eolymp_commerce_order_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Order_Item) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *Order_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Order_Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Order_Item) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order_Item) GetItemPrice() float32 {
	if x != nil {
		return x.ItemPrice
	}
	return 0
}

func (x *Order_Item) GetTaxPercentage() float32 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *Order_Item) GetDiscountPercentage() float32 {
	if x != nil {
		return x.DiscountPercentage
	}
	return 0
}

func (x *Order_Item) GetTotalTaxAmount() float32 {
	if x != nil {
		return x.TotalTaxAmount
	}
	return 0
}

func (x *Order_Item) GetTotalDiscountAmount() float32 {
	if x != nil {
		return x.TotalDiscountAmount
	}
	return 0
}

func (x *Order_Item) GetTotalPrice() float32 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

var File_eolymp_commerce_order_proto protoreflect.FileDescriptor

var file_eolymp_commerce_order_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x1a, 0x1d,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x0a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a,
	0xe0, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x61, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x05, 0x22, 0x47, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x03, 0x42, 0x07,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x65, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_commerce_order_proto_rawDescOnce sync.Once
	file_eolymp_commerce_order_proto_rawDescData = file_eolymp_commerce_order_proto_rawDesc
)

func file_eolymp_commerce_order_proto_rawDescGZIP() []byte {
	file_eolymp_commerce_order_proto_rawDescOnce.Do(func() {
		file_eolymp_commerce_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_commerce_order_proto_rawDescData)
	})
	return file_eolymp_commerce_order_proto_rawDescData
}

var file_eolymp_commerce_order_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_commerce_order_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_eolymp_commerce_order_proto_goTypes = []interface{}{
	(Order_Status)(0),             // 0: eolymp.commerce.Order.Status
	(Order_Recurrence)(0),         // 1: eolymp.commerce.Order.Recurrence
	(*Order)(nil),                 // 2: eolymp.commerce.Order
	(*Order_Item)(nil),            // 3: eolymp.commerce.Order.Item
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*Address)(nil),               // 5: eolymp.commerce.Address
}
var file_eolymp_commerce_order_proto_depIdxs = []int32{
	4, // 0: eolymp.commerce.Order.created_at:type_name -> google.protobuf.Timestamp
	4, // 1: eolymp.commerce.Order.expires_at:type_name -> google.protobuf.Timestamp
	4, // 2: eolymp.commerce.Order.paid_at:type_name -> google.protobuf.Timestamp
	0, // 3: eolymp.commerce.Order.status:type_name -> eolymp.commerce.Order.Status
	1, // 4: eolymp.commerce.Order.recurrence:type_name -> eolymp.commerce.Order.Recurrence
	5, // 5: eolymp.commerce.Order.billing_address:type_name -> eolymp.commerce.Address
	3, // 6: eolymp.commerce.Order.items:type_name -> eolymp.commerce.Order.Item
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_eolymp_commerce_order_proto_init() }
func file_eolymp_commerce_order_proto_init() {
	if File_eolymp_commerce_order_proto != nil {
		return
	}
	file_eolymp_commerce_address_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_commerce_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_commerce_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eolymp_commerce_order_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Order_MemberId)(nil),
		(*Order_UserId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_commerce_order_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_commerce_order_proto_goTypes,
		DependencyIndexes: file_eolymp_commerce_order_proto_depIdxs,
		EnumInfos:         file_eolymp_commerce_order_proto_enumTypes,
		MessageInfos:      file_eolymp_commerce_order_proto_msgTypes,
	}.Build()
	File_eolymp_commerce_order_proto = out.File
	file_eolymp_commerce_order_proto_rawDesc = nil
	file_eolymp_commerce_order_proto_goTypes = nil
	file_eolymp_commerce_order_proto_depIdxs = nil
}
