// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package commerce

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _CustomerService_HTTPReadQueryString parses body into proto.Message
func _CustomerService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _CustomerService_HTTPReadRequestBody parses body into proto.Message
func _CustomerService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _CustomerService_HTTPWriteResponse writes proto.Message to HTTP response
func _CustomerService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_CustomerService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _CustomerService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _CustomerService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _CustomerService_WebsocketErrorResponse writes error to websocket connection
func _CustomerService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _CustomerService_WebsocketCodec implements protobuf codec for websockets package
var _CustomerService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterCustomerServiceHttpHandlers adds handlers for for CustomerServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterCustomerServiceHttpHandlers(router *mux.Router, prefix string, cli CustomerServiceClient) {
}

type _CustomerServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _CustomerServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _CustomerServiceHandler) (out proto.Message, err error)
type CustomerServiceInterceptor struct {
	middleware []_CustomerServiceMiddleware
	client     CustomerServiceClient
}

// NewCustomerServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewCustomerServiceInterceptor(cli CustomerServiceClient, middleware ..._CustomerServiceMiddleware) *CustomerServiceInterceptor {
	return &CustomerServiceInterceptor{client: cli, middleware: middleware}
}

func (i *CustomerServiceInterceptor) CreateCustomer(ctx context.Context, in *CreateCustomerInput, opts ...grpc.CallOption) (*CreateCustomerOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateCustomerInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateCustomerInput, got %T", in))
		}

		return i.client.CreateCustomer(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.CustomerService.CreateCustomer", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateCustomerOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateCustomerOutput, got %T", out))
	}

	return message, err
}

func (i *CustomerServiceInterceptor) UpdateCustomer(ctx context.Context, in *UpdateCustomerInput, opts ...grpc.CallOption) (*UpdateCustomerOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateCustomerInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateCustomerInput, got %T", in))
		}

		return i.client.UpdateCustomer(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.CustomerService.UpdateCustomer", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateCustomerOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateCustomerOutput, got %T", out))
	}

	return message, err
}

func (i *CustomerServiceInterceptor) DescribeCustomer(ctx context.Context, in *DescribeCustomerInput, opts ...grpc.CallOption) (*DescribeCustomerOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeCustomerInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeCustomerInput, got %T", in))
		}

		return i.client.DescribeCustomer(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.CustomerService.DescribeCustomer", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeCustomerOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeCustomerOutput, got %T", out))
	}

	return message, err
}

func (i *CustomerServiceInterceptor) ListCustomers(ctx context.Context, in *ListCustomersInput, opts ...grpc.CallOption) (*ListCustomersOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListCustomersInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListCustomersInput, got %T", in))
		}

		return i.client.ListCustomers(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.CustomerService.ListCustomers", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListCustomersOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListCustomersOutput, got %T", out))
	}

	return message, err
}

func (i *CustomerServiceInterceptor) DeleteCustomer(ctx context.Context, in *DeleteCustomerInput, opts ...grpc.CallOption) (*DeleteCustomerOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteCustomerInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteCustomerInput, got %T", in))
		}

		return i.client.DeleteCustomer(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.CustomerService.DeleteCustomer", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteCustomerOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteCustomerOutput, got %T", out))
	}

	return message, err
}
