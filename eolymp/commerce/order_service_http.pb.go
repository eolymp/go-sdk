// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package commerce

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _OrderService_HTTPReadQueryString parses body into proto.Message
func _OrderService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _OrderService_HTTPReadRequestBody parses body into proto.Message
func _OrderService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _OrderService_HTTPWriteResponse writes proto.Message to HTTP response
func _OrderService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_OrderService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _OrderService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _OrderService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _OrderService_WebsocketErrorResponse writes error to websocket connection
func _OrderService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _OrderService_WebsocketCodec implements protobuf codec for websockets package
var _OrderService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterOrderServiceHttpHandlers adds handlers for for OrderServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterOrderServiceHttpHandlers(router *mux.Router, prefix string, cli OrderServiceClient) {
	router.Handle(prefix+"/orders", _OrderService_CreateOrder_Rule0(cli)).
		Methods("POST").
		Name("eolymp.commerce.OrderService.CreateOrder")
	router.Handle(prefix+"/orders/{order_id}", _OrderService_DescribeOrder_Rule0(cli)).
		Methods("GET").
		Name("eolymp.commerce.OrderService.DescribeOrder")
	router.Handle(prefix+"/orders/{order_id}", _OrderService_UpdateOrder_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.commerce.OrderService.UpdateOrder")
	router.Handle(prefix+"/orders/{order_id}/place", _OrderService_PlaceOrder_Rule0(cli)).
		Methods("POST").
		Name("eolymp.commerce.OrderService.PlaceOrder")
	router.Handle(prefix+"/orders/{order_id}/cancel", _OrderService_CancelOrder_Rule0(cli)).
		Methods("POST").
		Name("eolymp.commerce.OrderService.CancelOrder")
}

func _OrderService_CreateOrder_Rule0(cli OrderServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateOrderInput{}

		if err := _OrderService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := cli.CreateOrder(r.Context(), in)
		if err != nil {
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		_OrderService_HTTPWriteResponse(w, out)
	})
}

func _OrderService_DescribeOrder_Rule0(cli OrderServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeOrderInput{}

		if err := _OrderService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.OrderId = vars["order_id"]

		out, err := cli.DescribeOrder(r.Context(), in)
		if err != nil {
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		_OrderService_HTTPWriteResponse(w, out)
	})
}

func _OrderService_UpdateOrder_Rule0(cli OrderServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateOrderInput{}

		if err := _OrderService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.OrderId = vars["order_id"]

		out, err := cli.UpdateOrder(r.Context(), in)
		if err != nil {
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		_OrderService_HTTPWriteResponse(w, out)
	})
}

func _OrderService_PlaceOrder_Rule0(cli OrderServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PlaceOrderInput{}

		if err := _OrderService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.OrderId = vars["order_id"]

		out, err := cli.PlaceOrder(r.Context(), in)
		if err != nil {
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		_OrderService_HTTPWriteResponse(w, out)
	})
}

func _OrderService_CancelOrder_Rule0(cli OrderServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CancelOrderInput{}

		if err := _OrderService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.OrderId = vars["order_id"]

		out, err := cli.CancelOrder(r.Context(), in)
		if err != nil {
			_OrderService_HTTPWriteErrorResponse(w, err)
			return
		}

		_OrderService_HTTPWriteResponse(w, out)
	})
}

type _OrderServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _OrderServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _OrderServiceHandler) (out proto.Message, err error)
type OrderServiceInterceptor struct {
	middleware []_OrderServiceMiddleware
	client     OrderServiceClient
}

// NewOrderServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewOrderServiceInterceptor(cli OrderServiceClient, middleware ..._OrderServiceMiddleware) *OrderServiceInterceptor {
	return &OrderServiceInterceptor{client: cli, middleware: middleware}
}

func (i *OrderServiceInterceptor) CreateOrder(ctx context.Context, in *CreateOrderInput, opts ...grpc.CallOption) (*CreateOrderOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateOrderInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateOrderInput, got %T", in))
		}

		return i.client.CreateOrder(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.OrderService.CreateOrder", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateOrderOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateOrderOutput, got %T", out))
	}

	return message, err
}

func (i *OrderServiceInterceptor) DescribeOrder(ctx context.Context, in *DescribeOrderInput, opts ...grpc.CallOption) (*DescribeOrderOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeOrderInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeOrderInput, got %T", in))
		}

		return i.client.DescribeOrder(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.OrderService.DescribeOrder", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeOrderOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeOrderOutput, got %T", out))
	}

	return message, err
}

func (i *OrderServiceInterceptor) UpdateOrder(ctx context.Context, in *UpdateOrderInput, opts ...grpc.CallOption) (*UpdateOrderOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateOrderInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateOrderInput, got %T", in))
		}

		return i.client.UpdateOrder(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.OrderService.UpdateOrder", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateOrderOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateOrderOutput, got %T", out))
	}

	return message, err
}

func (i *OrderServiceInterceptor) PlaceOrder(ctx context.Context, in *PlaceOrderInput, opts ...grpc.CallOption) (*PlaceOrderOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*PlaceOrderInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *PlaceOrderInput, got %T", in))
		}

		return i.client.PlaceOrder(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.OrderService.PlaceOrder", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*PlaceOrderOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *PlaceOrderOutput, got %T", out))
	}

	return message, err
}

func (i *OrderServiceInterceptor) CancelOrder(ctx context.Context, in *CancelOrderInput, opts ...grpc.CallOption) (*CancelOrderOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CancelOrderInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CancelOrderInput, got %T", in))
		}

		return i.client.CancelOrder(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.commerce.OrderService.CancelOrder", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CancelOrderOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CancelOrderOutput, got %T", out))
	}

	return message, err
}
