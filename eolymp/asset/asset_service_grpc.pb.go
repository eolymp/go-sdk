// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/asset/asset_service.proto

package asset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetService_UploadImage_FullMethodName             = "/eolymp.asset.AssetService/UploadImage"
	AssetService_UploadFile_FullMethodName              = "/eolymp.asset.AssetService/UploadFile"
	AssetService_UploadAsset_FullMethodName             = "/eolymp.asset.AssetService/UploadAsset"
	AssetService_LookupAsset_FullMethodName             = "/eolymp.asset.AssetService/LookupAsset"
	AssetService_StartMultipartUpload_FullMethodName    = "/eolymp.asset.AssetService/StartMultipartUpload"
	AssetService_UploadPart_FullMethodName              = "/eolymp.asset.AssetService/UploadPart"
	AssetService_CompleteMultipartUpload_FullMethodName = "/eolymp.asset.AssetService/CompleteMultipartUpload"
	AssetService_StartStream_FullMethodName             = "/eolymp.asset.AssetService/StartStream"
	AssetService_AppendStream_FullMethodName            = "/eolymp.asset.AssetService/AppendStream"
	AssetService_CloseStream_FullMethodName             = "/eolymp.asset.AssetService/CloseStream"
)

// AssetServiceClient is the client API for AssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetServiceClient interface {
	// deprecated, use universal UploadAsset API instead
	UploadImage(ctx context.Context, in *UploadImageInput, opts ...grpc.CallOption) (*UploadImageOutput, error)
	// deprecated, use universal UploadAsset API instead
	UploadFile(ctx context.Context, in *UploadFileInput, opts ...grpc.CallOption) (*UploadFileOutput, error)
	// UploadAsset allows to upload a file under 5 MB, files over 5MB must be uploaded using multipart upload API
	UploadAsset(ctx context.Context, in *UploadAssetInput, opts ...grpc.CallOption) (*UploadAssetOutput, error)
	// LookupAsset allows to lookup asset by the key
	LookupAsset(ctx context.Context, in *LookupAssetInput, opts ...grpc.CallOption) (*LookupAssetOutput, error)
	// StartMultipartUpload creates an upload_id, which then can be used with UploadPart API to upload file in parts of 5MB
	StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error)
	// UploadPart of a file, before calling this method you must start upload process using StartMultipartUpload API, once
	// all parts are uploaded you must call CompleteMultipartUpload to finalize upload process and get asset_url.
	// Every part, except last one, must be 5MB. You can use from 1 to 1000 parts per upload.
	UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error)
	// CompleteMultipartUpload finalizes upload process and generates asset_url.
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error)
	// StartStream creates a data stream, which then can be used with AppendStream API to upload data
	StartStream(ctx context.Context, in *StartStreamInput, opts ...grpc.CallOption) (*StartStreamOutput, error)
	AppendStream(ctx context.Context, in *AppendStreamInput, opts ...grpc.CallOption) (*AppendStreamOutput, error)
	CloseStream(ctx context.Context, in *CloseStreamInput, opts ...grpc.CallOption) (*CloseStreamOutput, error)
}

type assetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetServiceClient(cc grpc.ClientConnInterface) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) UploadImage(ctx context.Context, in *UploadImageInput, opts ...grpc.CallOption) (*UploadImageOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageOutput)
	err := c.cc.Invoke(ctx, AssetService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) UploadFile(ctx context.Context, in *UploadFileInput, opts ...grpc.CallOption) (*UploadFileOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileOutput)
	err := c.cc.Invoke(ctx, AssetService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) UploadAsset(ctx context.Context, in *UploadAssetInput, opts ...grpc.CallOption) (*UploadAssetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAssetOutput)
	err := c.cc.Invoke(ctx, AssetService_UploadAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) LookupAsset(ctx context.Context, in *LookupAssetInput, opts ...grpc.CallOption) (*LookupAssetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupAssetOutput)
	err := c.cc.Invoke(ctx, AssetService_LookupAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartMultipartUploadOutput)
	err := c.cc.Invoke(ctx, AssetService_StartMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadPartOutput)
	err := c.cc.Invoke(ctx, AssetService_UploadPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteMultipartUploadOutput)
	err := c.cc.Invoke(ctx, AssetService_CompleteMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StartStream(ctx context.Context, in *StartStreamInput, opts ...grpc.CallOption) (*StartStreamOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartStreamOutput)
	err := c.cc.Invoke(ctx, AssetService_StartStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) AppendStream(ctx context.Context, in *AppendStreamInput, opts ...grpc.CallOption) (*AppendStreamOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendStreamOutput)
	err := c.cc.Invoke(ctx, AssetService_AppendStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) CloseStream(ctx context.Context, in *CloseStreamInput, opts ...grpc.CallOption) (*CloseStreamOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseStreamOutput)
	err := c.cc.Invoke(ctx, AssetService_CloseStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServiceServer is the server API for AssetService service.
// All implementations should embed UnimplementedAssetServiceServer
// for forward compatibility.
type AssetServiceServer interface {
	// deprecated, use universal UploadAsset API instead
	UploadImage(context.Context, *UploadImageInput) (*UploadImageOutput, error)
	// deprecated, use universal UploadAsset API instead
	UploadFile(context.Context, *UploadFileInput) (*UploadFileOutput, error)
	// UploadAsset allows to upload a file under 5 MB, files over 5MB must be uploaded using multipart upload API
	UploadAsset(context.Context, *UploadAssetInput) (*UploadAssetOutput, error)
	// LookupAsset allows to lookup asset by the key
	LookupAsset(context.Context, *LookupAssetInput) (*LookupAssetOutput, error)
	// StartMultipartUpload creates an upload_id, which then can be used with UploadPart API to upload file in parts of 5MB
	StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error)
	// UploadPart of a file, before calling this method you must start upload process using StartMultipartUpload API, once
	// all parts are uploaded you must call CompleteMultipartUpload to finalize upload process and get asset_url.
	// Every part, except last one, must be 5MB. You can use from 1 to 1000 parts per upload.
	UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error)
	// CompleteMultipartUpload finalizes upload process and generates asset_url.
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error)
	// StartStream creates a data stream, which then can be used with AppendStream API to upload data
	StartStream(context.Context, *StartStreamInput) (*StartStreamOutput, error)
	AppendStream(context.Context, *AppendStreamInput) (*AppendStreamOutput, error)
	CloseStream(context.Context, *CloseStreamInput) (*CloseStreamOutput, error)
}

// UnimplementedAssetServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetServiceServer struct{}

func (UnimplementedAssetServiceServer) UploadImage(context.Context, *UploadImageInput) (*UploadImageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedAssetServiceServer) UploadFile(context.Context, *UploadFileInput) (*UploadFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedAssetServiceServer) UploadAsset(context.Context, *UploadAssetInput) (*UploadAssetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedAssetServiceServer) LookupAsset(context.Context, *LookupAssetInput) (*LookupAssetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAsset not implemented")
}
func (UnimplementedAssetServiceServer) StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultipartUpload not implemented")
}
func (UnimplementedAssetServiceServer) UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedAssetServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedAssetServiceServer) StartStream(context.Context, *StartStreamInput) (*StartStreamOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedAssetServiceServer) AppendStream(context.Context, *AppendStreamInput) (*AppendStreamOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendStream not implemented")
}
func (UnimplementedAssetServiceServer) CloseStream(context.Context, *CloseStreamInput) (*CloseStreamOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStream not implemented")
}
func (UnimplementedAssetServiceServer) testEmbeddedByValue() {}

// UnsafeAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServiceServer will
// result in compilation errors.
type UnsafeAssetServiceServer interface {
	mustEmbedUnimplementedAssetServiceServer()
}

func RegisterAssetServiceServer(s grpc.ServiceRegistrar, srv AssetServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetService_ServiceDesc, srv)
}

func _AssetService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadImage(ctx, req.(*UploadImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadFile(ctx, req.(*UploadFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_UploadAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAssetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadAsset(ctx, req.(*UploadAssetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_LookupAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAssetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).LookupAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_LookupAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).LookupAsset(ctx, req.(*LookupAssetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StartMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StartMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StartMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StartMultipartUpload(ctx, req.(*StartMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadPart(ctx, req.(*UploadPartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_CompleteMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StartStream(ctx, req.(*StartStreamInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_AppendStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendStreamInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).AppendStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_AppendStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).AppendStream(ctx, req.(*AppendStreamInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_CloseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStreamInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).CloseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_CloseStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).CloseStream(ctx, req.(*CloseStreamInput))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetService_ServiceDesc is the grpc.ServiceDesc for AssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.asset.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _AssetService_UploadImage_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _AssetService_UploadFile_Handler,
		},
		{
			MethodName: "UploadAsset",
			Handler:    _AssetService_UploadAsset_Handler,
		},
		{
			MethodName: "LookupAsset",
			Handler:    _AssetService_LookupAsset_Handler,
		},
		{
			MethodName: "StartMultipartUpload",
			Handler:    _AssetService_StartMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _AssetService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _AssetService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _AssetService_StartStream_Handler,
		},
		{
			MethodName: "AppendStream",
			Handler:    _AssetService_AppendStream_Handler,
		},
		{
			MethodName: "CloseStream",
			Handler:    _AssetService_CloseStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/asset/asset_service.proto",
}
