// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package atlas

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	os "os"
)

type _AtlasHttpClient interface {
	Do(*http.Request) (*http.Response, error)
}

type AtlasService struct {
	base string
	cli  _AtlasHttpClient
}

// NewAtlasHttpClient constructs client for Atlas
func NewAtlasHttpClient(url string, cli _AtlasHttpClient) *AtlasService {
	if url == "" {
		url = os.Getenv("EOLYMP_API_URL")
		if url == "" {
			url = "https://api.eolymp.com"
		}
	}

	return &AtlasService{base: url, cli: cli}
}

func (s *AtlasService) do(ctx context.Context, verb, path string, in, out proto.Message) (err error) {
	var body io.Reader

	if in != nil {
		data, err := protojson.Marshal(in)
		if err != nil {
			return err
		}

		if verb != "GET" {
			body = bytes.NewReader(data)
		} else {
			query := url.Values{"q": []string{string(data)}}
			path = path + "?" + query.Encode()
		}
	}

	if in == nil && verb != "GET" {
		body = bytes.NewReader([]byte("{}"))
	}

	req, err := http.NewRequest(verb, s.base+path, body)
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *AtlasService) CreateProblem(ctx context.Context, in *CreateProblemInput) (*CreateProblemOutput, error) {
	out := &CreateProblemOutput{}
	path := "/problems"

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (*DeleteProblemOutput, error) {
	out := &DeleteProblemOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListProblems(ctx context.Context, in *ListProblemsInput) (*ListProblemsOutput, error) {
	out := &ListProblemsOutput{}
	path := "/problems"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (*DescribeProblemOutput, error) {
	out := &DescribeProblemOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateProblem(ctx context.Context, in *UpdateProblemInput) (*UpdateProblemOutput, error) {
	out := &UpdateProblemOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) SetBookmark(ctx context.Context, in *SetBookmarkInput) (*SetBookmarkOutput, error) {
	out := &SetBookmarkOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/bookmark"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) GetBookmark(ctx context.Context, in *GetBookmarkInput) (*GetBookmarkOutput, error) {
	out := &GetBookmarkOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/bookmark"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListExamples(ctx context.Context, in *ListExamplesInput) (*ListExamplesOutput, error) {
	out := &ListExamplesOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/examples"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateVerifier(ctx context.Context, in *UpdateVerifierInput) (*UpdateVerifierOutput, error) {
	out := &UpdateVerifierOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/verifier"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeVerifier(ctx context.Context, in *DescribeVerifierInput) (*DescribeVerifierOutput, error) {
	out := &DescribeVerifierOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/verifier"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	out := &UpdateInteractorOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/interactor"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	out := &DescribeInteractorOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/interactor"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateStatement(ctx context.Context, in *CreateStatementInput) (*CreateStatementOutput, error) {
	out := &CreateStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateStatement(ctx context.Context, in *UpdateStatementInput) (*UpdateStatementOutput, error) {
	out := &UpdateStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements/" + url.PathEscape(in.GetStatementId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.StatementId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteStatement(ctx context.Context, in *DeleteStatementInput) (*DeleteStatementOutput, error) {
	out := &DeleteStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements/" + url.PathEscape(in.GetStatementId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.StatementId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListStatements(ctx context.Context, in *ListStatementsInput) (*ListStatementsOutput, error) {
	out := &ListStatementsOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeStatement(ctx context.Context, in *DescribeStatementInput) (*DescribeStatementOutput, error) {
	out := &DescribeStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements/" + url.PathEscape(in.GetStatementId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.StatementId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) LookupStatement(ctx context.Context, in *LookupStatementInput) (*LookupStatementOutput, error) {
	out := &LookupStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/translate"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) RenderStatement(ctx context.Context, in *RenderStatementInput) (*RenderStatementOutput, error) {
	out := &RenderStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/statements/" + url.PathEscape(in.GetStatementId()) + "/render"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.StatementId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) PreviewStatement(ctx context.Context, in *PreviewStatementInput) (*PreviewStatementOutput, error) {
	out := &PreviewStatementOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/renders"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateTestset(ctx context.Context, in *CreateTestsetInput) (*CreateTestsetOutput, error) {
	out := &CreateTestsetOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateTestset(ctx context.Context, in *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	out := &UpdateTestsetOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteTestset(ctx context.Context, in *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	out := &DeleteTestsetOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListTestsets(ctx context.Context, in *ListTestsetsInput) (*ListTestsetsOutput, error) {
	out := &ListTestsetsOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeTestset(ctx context.Context, in *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	out := &DescribeTestsetOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateTest(ctx context.Context, in *CreateTestInput) (*CreateTestOutput, error) {
	out := &CreateTestOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId()) + "/tests"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateTest(ctx context.Context, in *UpdateTestInput) (*UpdateTestOutput, error) {
	out := &UpdateTestOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId()) + "/tests/" + url.PathEscape(in.GetTestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
		in.TestId = ""
	}

	if err := s.do(ctx, "PUT", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteTest(ctx context.Context, in *DeleteTestInput) (*DeleteTestOutput, error) {
	out := &DeleteTestOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId()) + "/tests/" + url.PathEscape(in.GetTestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
		in.TestId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListTests(ctx context.Context, in *ListTestsInput) (*ListTestsOutput, error) {
	out := &ListTestsOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId()) + "/tests"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeTest(ctx context.Context, in *DescribeTestInput) (*DescribeTestOutput, error) {
	out := &DescribeTestOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/testsets/" + url.PathEscape(in.GetTestsetId()) + "/tests/" + url.PathEscape(in.GetTestId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TestsetId = ""
		in.TestId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error) {
	out := &CreateCodeTemplateOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/templates"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error) {
	out := &UpdateCodeTemplateOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/templates/" + url.PathEscape(in.GetTemplateId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TemplateId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error) {
	out := &DeleteCodeTemplateOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/templates/" + url.PathEscape(in.GetTemplateId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TemplateId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error) {
	out := &ListCodeTemplatesOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/templates"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	out := &DescribeCodeTemplateOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/templates/" + url.PathEscape(in.GetTemplateId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.TemplateId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateAttachment(ctx context.Context, in *CreateAttachmentInput) (*CreateAttachmentOutput, error) {
	out := &CreateAttachmentOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/attachments"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput) (*UpdateAttachmentOutput, error) {
	out := &UpdateAttachmentOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/attachments/" + url.PathEscape(in.GetAttachmentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.AttachmentId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput) (*DeleteAttachmentOutput, error) {
	out := &DeleteAttachmentOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/attachments/" + url.PathEscape(in.GetAttachmentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.AttachmentId = ""
	}

	if err := s.do(ctx, "DELETE", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	out := &ListAttachmentsOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/attachments"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput) (*DescribeAttachmentOutput, error) {
	out := &DescribeAttachmentOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/attachments/" + url.PathEscape(in.GetAttachmentId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.AttachmentId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListVersions(ctx context.Context, in *ListVersionsInput) (*ListVersionsOutput, error) {
	out := &ListVersionsOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/versions"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListProblemTop(ctx context.Context, in *ListProblemTopInput) (*ListProblemTopOutput, error) {
	out := &ListProblemTopOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/top"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error) {
	out := &DescribeProblemGradingOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/grading"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	out := &CreateSubmissionOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/submissions"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	out := &DescribeSubmissionOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/submissions/" + url.PathEscape(in.GetSubmissionId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.SubmissionId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (*RetestSubmissionOutput, error) {
	out := &RetestSubmissionOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/submissions/" + url.PathEscape(in.GetSubmissionId()) + "/retest"

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.SubmissionId = ""
	}

	if err := s.do(ctx, "POST", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) ListSubmissions(ctx context.Context, in *ListSubmissionsInput) (*ListSubmissionsOutput, error) {
	out := &ListSubmissionsOutput{}
	path := "/submissions"

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *AtlasService) DescribeScore(ctx context.Context, in *DescribeScoreInput) (*DescribeScoreOutput, error) {
	out := &DescribeScoreOutput{}
	path := "/problems/" + url.PathEscape(in.GetProblemId()) + "/scores/" + url.PathEscape(in.GetUserId())

	// Cleanup URL parameters to avoid any ambiguity
	if in != nil {
		in.ProblemId = ""
		in.UserId = ""
	}

	if err := s.do(ctx, "GET", path, in, out); err != nil {
		return nil, err
	}

	return out, nil
}
