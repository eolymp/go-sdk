// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/atlas/solution_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SolutionService_CreateSolution_FullMethodName   = "/eolymp.atlas.SolutionService/CreateSolution"
	SolutionService_UpdateSolution_FullMethodName   = "/eolymp.atlas.SolutionService/UpdateSolution"
	SolutionService_DeleteSolution_FullMethodName   = "/eolymp.atlas.SolutionService/DeleteSolution"
	SolutionService_DescribeSolution_FullMethodName = "/eolymp.atlas.SolutionService/DescribeSolution"
	SolutionService_ListSolutions_FullMethodName    = "/eolymp.atlas.SolutionService/ListSolutions"
)

// SolutionServiceClient is the client API for SolutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionServiceClient interface {
	CreateSolution(ctx context.Context, in *CreateSolutionInput, opts ...grpc.CallOption) (*CreateSolutionOutput, error)
	UpdateSolution(ctx context.Context, in *UpdateSolutionInput, opts ...grpc.CallOption) (*UpdateSolutionOutput, error)
	DeleteSolution(ctx context.Context, in *DeleteSolutionInput, opts ...grpc.CallOption) (*DeleteSolutionOutput, error)
	DescribeSolution(ctx context.Context, in *DescribeSolutionInput, opts ...grpc.CallOption) (*DescribeSolutionOutput, error)
	ListSolutions(ctx context.Context, in *ListSolutionsInput, opts ...grpc.CallOption) (*ListSolutionsOutput, error)
}

type solutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionServiceClient(cc grpc.ClientConnInterface) SolutionServiceClient {
	return &solutionServiceClient{cc}
}

func (c *solutionServiceClient) CreateSolution(ctx context.Context, in *CreateSolutionInput, opts ...grpc.CallOption) (*CreateSolutionOutput, error) {
	out := new(CreateSolutionOutput)
	err := c.cc.Invoke(ctx, SolutionService_CreateSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionServiceClient) UpdateSolution(ctx context.Context, in *UpdateSolutionInput, opts ...grpc.CallOption) (*UpdateSolutionOutput, error) {
	out := new(UpdateSolutionOutput)
	err := c.cc.Invoke(ctx, SolutionService_UpdateSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionServiceClient) DeleteSolution(ctx context.Context, in *DeleteSolutionInput, opts ...grpc.CallOption) (*DeleteSolutionOutput, error) {
	out := new(DeleteSolutionOutput)
	err := c.cc.Invoke(ctx, SolutionService_DeleteSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionServiceClient) DescribeSolution(ctx context.Context, in *DescribeSolutionInput, opts ...grpc.CallOption) (*DescribeSolutionOutput, error) {
	out := new(DescribeSolutionOutput)
	err := c.cc.Invoke(ctx, SolutionService_DescribeSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionServiceClient) ListSolutions(ctx context.Context, in *ListSolutionsInput, opts ...grpc.CallOption) (*ListSolutionsOutput, error) {
	out := new(ListSolutionsOutput)
	err := c.cc.Invoke(ctx, SolutionService_ListSolutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionServiceServer is the server API for SolutionService service.
// All implementations should embed UnimplementedSolutionServiceServer
// for forward compatibility
type SolutionServiceServer interface {
	CreateSolution(context.Context, *CreateSolutionInput) (*CreateSolutionOutput, error)
	UpdateSolution(context.Context, *UpdateSolutionInput) (*UpdateSolutionOutput, error)
	DeleteSolution(context.Context, *DeleteSolutionInput) (*DeleteSolutionOutput, error)
	DescribeSolution(context.Context, *DescribeSolutionInput) (*DescribeSolutionOutput, error)
	ListSolutions(context.Context, *ListSolutionsInput) (*ListSolutionsOutput, error)
}

// UnimplementedSolutionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSolutionServiceServer struct {
}

func (UnimplementedSolutionServiceServer) CreateSolution(context.Context, *CreateSolutionInput) (*CreateSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolution not implemented")
}
func (UnimplementedSolutionServiceServer) UpdateSolution(context.Context, *UpdateSolutionInput) (*UpdateSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSolution not implemented")
}
func (UnimplementedSolutionServiceServer) DeleteSolution(context.Context, *DeleteSolutionInput) (*DeleteSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSolution not implemented")
}
func (UnimplementedSolutionServiceServer) DescribeSolution(context.Context, *DescribeSolutionInput) (*DescribeSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSolution not implemented")
}
func (UnimplementedSolutionServiceServer) ListSolutions(context.Context, *ListSolutionsInput) (*ListSolutionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutions not implemented")
}

// UnsafeSolutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionServiceServer will
// result in compilation errors.
type UnsafeSolutionServiceServer interface {
	mustEmbedUnimplementedSolutionServiceServer()
}

func RegisterSolutionServiceServer(s grpc.ServiceRegistrar, srv SolutionServiceServer) {
	s.RegisterService(&SolutionService_ServiceDesc, srv)
}

func _SolutionService_CreateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).CreateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_CreateSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).CreateSolution(ctx, req.(*CreateSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionService_UpdateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).UpdateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_UpdateSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).UpdateSolution(ctx, req.(*UpdateSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionService_DeleteSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).DeleteSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_DeleteSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).DeleteSolution(ctx, req.(*DeleteSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionService_DescribeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).DescribeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_DescribeSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).DescribeSolution(ctx, req.(*DescribeSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionService_ListSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServiceServer).ListSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SolutionService_ListSolutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServiceServer).ListSolutions(ctx, req.(*ListSolutionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// SolutionService_ServiceDesc is the grpc.ServiceDesc for SolutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.SolutionService",
	HandlerType: (*SolutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSolution",
			Handler:    _SolutionService_CreateSolution_Handler,
		},
		{
			MethodName: "UpdateSolution",
			Handler:    _SolutionService_UpdateSolution_Handler,
		},
		{
			MethodName: "DeleteSolution",
			Handler:    _SolutionService_DeleteSolution_Handler,
		},
		{
			MethodName: "DescribeSolution",
			Handler:    _SolutionService_DescribeSolution_Handler,
		},
		{
			MethodName: "ListSolutions",
			Handler:    _SolutionService_ListSolutions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/solution_service.proto",
}
