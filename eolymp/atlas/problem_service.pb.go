// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: eolymp/atlas/problem_service.proto

package atlas

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListProblemsInput_Sortable int32

const (
	ListProblemsInput_DEFAULT ListProblemsInput_Sortable = 0
	ListProblemsInput_RECENT  ListProblemsInput_Sortable = 1
	ListProblemsInput_POPULAR ListProblemsInput_Sortable = 2
)

// Enum value maps for ListProblemsInput_Sortable.
var (
	ListProblemsInput_Sortable_name = map[int32]string{
		0: "DEFAULT",
		1: "RECENT",
		2: "POPULAR",
	}
	ListProblemsInput_Sortable_value = map[string]int32{
		"DEFAULT": 0,
		"RECENT":  1,
		"POPULAR": 2,
	}
)

func (x ListProblemsInput_Sortable) Enum() *ListProblemsInput_Sortable {
	p := new(ListProblemsInput_Sortable)
	*p = x
	return p
}

func (x ListProblemsInput_Sortable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListProblemsInput_Sortable) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_problem_service_proto_enumTypes[0].Descriptor()
}

func (ListProblemsInput_Sortable) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_problem_service_proto_enumTypes[0]
}

func (x ListProblemsInput_Sortable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListProblemsInput_Sortable.Descriptor instead.
func (ListProblemsInput_Sortable) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{7, 0}
}

type UpdateProblemInput_Patch int32

const (
	UpdateProblemInput_ALL        UpdateProblemInput_Patch = 0
	UpdateProblemInput_VISIBLE    UpdateProblemInput_Patch = 1
	UpdateProblemInput_PRIVATE    UpdateProblemInput_Patch = 2
	UpdateProblemInput_TOPICS     UpdateProblemInput_Patch = 3
	UpdateProblemInput_DIFFICULTY UpdateProblemInput_Patch = 4
	UpdateProblemInput_ORIGIN     UpdateProblemInput_Patch = 5
)

// Enum value maps for UpdateProblemInput_Patch.
var (
	UpdateProblemInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "VISIBLE",
		2: "PRIVATE",
		3: "TOPICS",
		4: "DIFFICULTY",
		5: "ORIGIN",
	}
	UpdateProblemInput_Patch_value = map[string]int32{
		"ALL":        0,
		"VISIBLE":    1,
		"PRIVATE":    2,
		"TOPICS":     3,
		"DIFFICULTY": 4,
		"ORIGIN":     5,
	}
)

func (x UpdateProblemInput_Patch) Enum() *UpdateProblemInput_Patch {
	p := new(UpdateProblemInput_Patch)
	*p = x
	return p
}

func (x UpdateProblemInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateProblemInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_problem_service_proto_enumTypes[1].Descriptor()
}

func (UpdateProblemInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_problem_service_proto_enumTypes[1]
}

func (x UpdateProblemInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateProblemInput_Patch.Descriptor instead.
func (UpdateProblemInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{13, 0}
}

type ProblemChangedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *Problem `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *Problem `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *ProblemChangedEvent) Reset() {
	*x = ProblemChangedEvent{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemChangedEvent) ProtoMessage() {}

func (x *ProblemChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemChangedEvent.ProtoReflect.Descriptor instead.
func (*ProblemChangedEvent) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{0}
}

func (x *ProblemChangedEvent) GetBefore() *Problem {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ProblemChangedEvent) GetAfter() *Problem {
	if x != nil {
		return x.After
	}
	return nil
}

type CreateProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem   *Problem   `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *CreateProblemInput) Reset() {
	*x = CreateProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemInput) ProtoMessage() {}

func (x *CreateProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemInput.ProtoReflect.Descriptor instead.
func (*CreateProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProblemInput) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *CreateProblemInput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type CreateProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *CreateProblemOutput) Reset() {
	*x = CreateProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemOutput) ProtoMessage() {}

func (x *CreateProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemOutput.ProtoReflect.Descriptor instead.
func (*CreateProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProblemOutput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type DeleteProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *DeleteProblemInput) Reset() {
	*x = DeleteProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemInput) ProtoMessage() {}

func (x *DeleteProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemInput.ProtoReflect.Descriptor instead.
func (*DeleteProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type DeleteProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProblemOutput) Reset() {
	*x = DeleteProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemOutput) ProtoMessage() {}

func (x *DeleteProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemOutput.ProtoReflect.Descriptor instead.
func (*DeleteProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{4}
}

type DescribeProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string          `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Extra     []Problem_Extra `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.atlas.Problem_Extra" json:"extra,omitempty"`
}

func (x *DescribeProblemInput) Reset() {
	*x = DescribeProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemInput) ProtoMessage() {}

func (x *DescribeProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemInput.ProtoReflect.Descriptor instead.
func (*DescribeProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeProblemInput) GetExtra() []Problem_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DescribeProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem *Problem `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
}

func (x *DescribeProblemOutput) Reset() {
	*x = DescribeProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemOutput) ProtoMessage() {}

func (x *DescribeProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemOutput.ProtoReflect.Descriptor instead.
func (*DescribeProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeProblemOutput) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type ListProblemsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListProblemsInput_Filter  `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	Sort    ListProblemsInput_Sortable `protobuf:"varint,50,opt,name=sort,proto3,enum=eolymp.atlas.ListProblemsInput_Sortable" json:"sort,omitempty"`
	Order   wellknown.Direction        `protobuf:"varint,51,opt,name=order,proto3,enum=eolymp.wellknown.Direction" json:"order,omitempty"`
	Extra   []Problem_Extra            `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.atlas.Problem_Extra" json:"extra,omitempty"`
}

func (x *ListProblemsInput) Reset() {
	*x = ListProblemsInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsInput) ProtoMessage() {}

func (x *ListProblemsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsInput.ProtoReflect.Descriptor instead.
func (*ListProblemsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListProblemsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProblemsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListProblemsInput) GetFilters() *ListProblemsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListProblemsInput) GetSort() ListProblemsInput_Sortable {
	if x != nil {
		return x.Sort
	}
	return ListProblemsInput_DEFAULT
}

func (x *ListProblemsInput) GetOrder() wellknown.Direction {
	if x != nil {
		return x.Order
	}
	return wellknown.Direction(0)
}

func (x *ListProblemsInput) GetExtra() []Problem_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ListProblemsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Problem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListProblemsOutput) Reset() {
	*x = ListProblemsOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsOutput) ProtoMessage() {}

func (x *ListProblemsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsOutput.ProtoReflect.Descriptor instead.
func (*ListProblemsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListProblemsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProblemsOutput) GetItems() []*Problem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateVisibilityInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Visible   bool   `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *UpdateVisibilityInput) Reset() {
	*x = UpdateVisibilityInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVisibilityInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisibilityInput) ProtoMessage() {}

func (x *UpdateVisibilityInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisibilityInput.ProtoReflect.Descriptor instead.
func (*UpdateVisibilityInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVisibilityInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateVisibilityInput) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type UpdateVisibilityOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVisibilityOutput) Reset() {
	*x = UpdateVisibilityOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVisibilityOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisibilityOutput) ProtoMessage() {}

func (x *UpdateVisibilityOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisibilityOutput.ProtoReflect.Descriptor instead.
func (*UpdateVisibilityOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{10}
}

type UpdatePrivacyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Private   bool   `protobuf:"varint,2,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *UpdatePrivacyInput) Reset() {
	*x = UpdatePrivacyInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePrivacyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyInput) ProtoMessage() {}

func (x *UpdatePrivacyInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyInput.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePrivacyInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdatePrivacyInput) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

type UpdatePrivacyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePrivacyOutput) Reset() {
	*x = UpdatePrivacyOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePrivacyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyOutput) ProtoMessage() {}

func (x *UpdatePrivacyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyOutput.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{12}
}

type UpdateProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specify list of fields to update, if empty all fields are updated
	Patch     []UpdateProblemInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.atlas.UpdateProblemInput_Patch" json:"patch,omitempty"`
	ProblemId string                     `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Problem   *Problem                   `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"`
}

func (x *UpdateProblemInput) Reset() {
	*x = UpdateProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemInput) ProtoMessage() {}

func (x *UpdateProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemInput.ProtoReflect.Descriptor instead.
func (*UpdateProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateProblemInput) GetPatch() []UpdateProblemInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateProblemInput) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type UpdateProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProblemOutput) Reset() {
	*x = UpdateProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemOutput) ProtoMessage() {}

func (x *UpdateProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemOutput.ProtoReflect.Descriptor instead.
func (*UpdateProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{14}
}

type SyncProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *SyncProblemInput) Reset() {
	*x = SyncProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProblemInput) ProtoMessage() {}

func (x *SyncProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProblemInput.ProtoReflect.Descriptor instead.
func (*SyncProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{15}
}

func (x *SyncProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type SyncProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncProblemOutput) Reset() {
	*x = SyncProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProblemOutput) ProtoMessage() {}

func (x *SyncProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProblemOutput.ProtoReflect.Descriptor instead.
func (*SyncProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{16}
}

type ListVersionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListVersionsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListVersionsInput) Reset() {
	*x = ListVersionsInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsInput) ProtoMessage() {}

func (x *ListVersionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsInput.ProtoReflect.Descriptor instead.
func (*ListVersionsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListVersionsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListVersionsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListVersionsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListVersionsInput) GetFilters() *ListVersionsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListVersionsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Version `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListVersionsOutput) Reset() {
	*x = ListVersionsOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsOutput) ProtoMessage() {}

func (x *ListVersionsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsOutput.ProtoReflect.Descriptor instead.
func (*ListVersionsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListVersionsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListVersionsOutput) GetItems() []*Version {
	if x != nil {
		return x.Items
	}
	return nil
}

type VoteProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Vote      int32  `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *VoteProblemInput) Reset() {
	*x = VoteProblemInput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteProblemInput) ProtoMessage() {}

func (x *VoteProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteProblemInput.ProtoReflect.Descriptor instead.
func (*VoteProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{19}
}

func (x *VoteProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *VoteProblemInput) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

type VoteProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteCount int32 `protobuf:"varint,1,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
}

func (x *VoteProblemOutput) Reset() {
	*x = VoteProblemOutput{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteProblemOutput) ProtoMessage() {}

func (x *VoteProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteProblemOutput.ProtoReflect.Descriptor instead.
func (*VoteProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{20}
}

func (x *VoteProblemOutput) GetVoteCount() int32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

type ListProblemsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        string                       `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	Id           []*wellknown.ExpressionID    `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	TopicId      []*wellknown.ExpressionID    `protobuf:"bytes,2,rep,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	IsVisible    []*wellknown.ExpressionBool  `protobuf:"bytes,3,rep,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	IsPrivate    []*wellknown.ExpressionBool  `protobuf:"bytes,4,rep,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Number       []*wellknown.ExpressionInt   `protobuf:"bytes,5,rep,name=number,proto3" json:"number,omitempty"`
	Difficulty   []*wellknown.ExpressionInt   `protobuf:"bytes,6,rep,name=difficulty,proto3" json:"difficulty,omitempty"`
	Status       []*wellknown.ExpressionEnum  `protobuf:"bytes,7,rep,name=status,proto3" json:"status,omitempty"`
	Score        []*wellknown.ExpressionFloat `protobuf:"bytes,9,rep,name=score,proto3" json:"score,omitempty"`
	IsBookmarked []*wellknown.ExpressionBool  `protobuf:"bytes,8,rep,name=is_bookmarked,json=isBookmarked,proto3" json:"is_bookmarked,omitempty"`
}

func (x *ListProblemsInput_Filter) Reset() {
	*x = ListProblemsInput_Filter{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProblemsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsInput_Filter) ProtoMessage() {}

func (x *ListProblemsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListProblemsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListProblemsInput_Filter) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListProblemsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetTopicId() []*wellknown.ExpressionID {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetIsVisible() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetIsPrivate() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetNumber() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetDifficulty() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetStatus() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetScore() []*wellknown.ExpressionFloat {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetIsBookmarked() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsBookmarked
	}
	return nil
}

type ListVersionsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     []*wellknown.ExpressionInt       `protobuf:"bytes,1,rep,name=number,proto3" json:"number,omitempty"`
	CreatedBy  []*wellknown.ExpressionID        `protobuf:"bytes,2,rep,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt  []*wellknown.ExpressionTimestamp `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ChangeOp   []*wellknown.ExpressionEnum      `protobuf:"bytes,4,rep,name=change_op,json=changeOp,proto3" json:"change_op,omitempty"`
	ChangePath []*wellknown.ExpressionString    `protobuf:"bytes,5,rep,name=change_path,json=changePath,proto3" json:"change_path,omitempty"`
}

func (x *ListVersionsInput_Filter) Reset() {
	*x = ListVersionsInput_Filter{}
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsInput_Filter) ProtoMessage() {}

func (x *ListVersionsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListVersionsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListVersionsInput_Filter) GetNumber() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetCreatedBy() []*wellknown.ExpressionID {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetCreatedAt() []*wellknown.ExpressionTimestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetChangeOp() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.ChangeOp
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetChangePath() []*wellknown.ExpressionString {
	if x != nil {
		return x.ChangePath
	}
	return nil
}

var File_eolymp_atlas_problem_service_proto protoreflect.FileDescriptor

var file_eolymp_atlas_problem_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x71, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x69, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0xe3, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x48,
	0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x9a, 0x07, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xe3, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0xbf, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65,
	0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c,
	0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x52, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xf6, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x52, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x05, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x31, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xca, 0x02, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c,
	0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x45, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xe1, 0x08, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x91, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a,
	0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17,
	0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x47, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8,
	0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64,
	0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x12, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0b,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4d, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a,
	0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0xa2, 0x01, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a,
	0x1c, 0x8a, 0xe3, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x74, 0x65,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3b, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_atlas_problem_service_proto_rawDescOnce sync.Once
	file_eolymp_atlas_problem_service_proto_rawDescData = file_eolymp_atlas_problem_service_proto_rawDesc
)

func file_eolymp_atlas_problem_service_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_problem_service_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_problem_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_atlas_problem_service_proto_rawDescData)
	})
	return file_eolymp_atlas_problem_service_proto_rawDescData
}

var file_eolymp_atlas_problem_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_atlas_problem_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_eolymp_atlas_problem_service_proto_goTypes = []any{
	(ListProblemsInput_Sortable)(0),       // 0: eolymp.atlas.ListProblemsInput.Sortable
	(UpdateProblemInput_Patch)(0),         // 1: eolymp.atlas.UpdateProblemInput.Patch
	(*ProblemChangedEvent)(nil),           // 2: eolymp.atlas.ProblemChangedEvent
	(*CreateProblemInput)(nil),            // 3: eolymp.atlas.CreateProblemInput
	(*CreateProblemOutput)(nil),           // 4: eolymp.atlas.CreateProblemOutput
	(*DeleteProblemInput)(nil),            // 5: eolymp.atlas.DeleteProblemInput
	(*DeleteProblemOutput)(nil),           // 6: eolymp.atlas.DeleteProblemOutput
	(*DescribeProblemInput)(nil),          // 7: eolymp.atlas.DescribeProblemInput
	(*DescribeProblemOutput)(nil),         // 8: eolymp.atlas.DescribeProblemOutput
	(*ListProblemsInput)(nil),             // 9: eolymp.atlas.ListProblemsInput
	(*ListProblemsOutput)(nil),            // 10: eolymp.atlas.ListProblemsOutput
	(*UpdateVisibilityInput)(nil),         // 11: eolymp.atlas.UpdateVisibilityInput
	(*UpdateVisibilityOutput)(nil),        // 12: eolymp.atlas.UpdateVisibilityOutput
	(*UpdatePrivacyInput)(nil),            // 13: eolymp.atlas.UpdatePrivacyInput
	(*UpdatePrivacyOutput)(nil),           // 14: eolymp.atlas.UpdatePrivacyOutput
	(*UpdateProblemInput)(nil),            // 15: eolymp.atlas.UpdateProblemInput
	(*UpdateProblemOutput)(nil),           // 16: eolymp.atlas.UpdateProblemOutput
	(*SyncProblemInput)(nil),              // 17: eolymp.atlas.SyncProblemInput
	(*SyncProblemOutput)(nil),             // 18: eolymp.atlas.SyncProblemOutput
	(*ListVersionsInput)(nil),             // 19: eolymp.atlas.ListVersionsInput
	(*ListVersionsOutput)(nil),            // 20: eolymp.atlas.ListVersionsOutput
	(*VoteProblemInput)(nil),              // 21: eolymp.atlas.VoteProblemInput
	(*VoteProblemOutput)(nil),             // 22: eolymp.atlas.VoteProblemOutput
	(*ListProblemsInput_Filter)(nil),      // 23: eolymp.atlas.ListProblemsInput.Filter
	(*ListVersionsInput_Filter)(nil),      // 24: eolymp.atlas.ListVersionsInput.Filter
	(*Problem)(nil),                       // 25: eolymp.atlas.Problem
	(*Statement)(nil),                     // 26: eolymp.atlas.Statement
	(Problem_Extra)(0),                    // 27: eolymp.atlas.Problem.Extra
	(wellknown.Direction)(0),              // 28: eolymp.wellknown.Direction
	(*Version)(nil),                       // 29: eolymp.atlas.Version
	(*wellknown.ExpressionID)(nil),        // 30: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionBool)(nil),      // 31: eolymp.wellknown.ExpressionBool
	(*wellknown.ExpressionInt)(nil),       // 32: eolymp.wellknown.ExpressionInt
	(*wellknown.ExpressionEnum)(nil),      // 33: eolymp.wellknown.ExpressionEnum
	(*wellknown.ExpressionFloat)(nil),     // 34: eolymp.wellknown.ExpressionFloat
	(*wellknown.ExpressionTimestamp)(nil), // 35: eolymp.wellknown.ExpressionTimestamp
	(*wellknown.ExpressionString)(nil),    // 36: eolymp.wellknown.ExpressionString
}
var file_eolymp_atlas_problem_service_proto_depIdxs = []int32{
	25, // 0: eolymp.atlas.ProblemChangedEvent.before:type_name -> eolymp.atlas.Problem
	25, // 1: eolymp.atlas.ProblemChangedEvent.after:type_name -> eolymp.atlas.Problem
	25, // 2: eolymp.atlas.CreateProblemInput.problem:type_name -> eolymp.atlas.Problem
	26, // 3: eolymp.atlas.CreateProblemInput.statement:type_name -> eolymp.atlas.Statement
	27, // 4: eolymp.atlas.DescribeProblemInput.extra:type_name -> eolymp.atlas.Problem.Extra
	25, // 5: eolymp.atlas.DescribeProblemOutput.problem:type_name -> eolymp.atlas.Problem
	23, // 6: eolymp.atlas.ListProblemsInput.filters:type_name -> eolymp.atlas.ListProblemsInput.Filter
	0,  // 7: eolymp.atlas.ListProblemsInput.sort:type_name -> eolymp.atlas.ListProblemsInput.Sortable
	28, // 8: eolymp.atlas.ListProblemsInput.order:type_name -> eolymp.wellknown.Direction
	27, // 9: eolymp.atlas.ListProblemsInput.extra:type_name -> eolymp.atlas.Problem.Extra
	25, // 10: eolymp.atlas.ListProblemsOutput.items:type_name -> eolymp.atlas.Problem
	1,  // 11: eolymp.atlas.UpdateProblemInput.patch:type_name -> eolymp.atlas.UpdateProblemInput.Patch
	25, // 12: eolymp.atlas.UpdateProblemInput.problem:type_name -> eolymp.atlas.Problem
	24, // 13: eolymp.atlas.ListVersionsInput.filters:type_name -> eolymp.atlas.ListVersionsInput.Filter
	29, // 14: eolymp.atlas.ListVersionsOutput.items:type_name -> eolymp.atlas.Version
	30, // 15: eolymp.atlas.ListProblemsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	30, // 16: eolymp.atlas.ListProblemsInput.Filter.topic_id:type_name -> eolymp.wellknown.ExpressionID
	31, // 17: eolymp.atlas.ListProblemsInput.Filter.is_visible:type_name -> eolymp.wellknown.ExpressionBool
	31, // 18: eolymp.atlas.ListProblemsInput.Filter.is_private:type_name -> eolymp.wellknown.ExpressionBool
	32, // 19: eolymp.atlas.ListProblemsInput.Filter.number:type_name -> eolymp.wellknown.ExpressionInt
	32, // 20: eolymp.atlas.ListProblemsInput.Filter.difficulty:type_name -> eolymp.wellknown.ExpressionInt
	33, // 21: eolymp.atlas.ListProblemsInput.Filter.status:type_name -> eolymp.wellknown.ExpressionEnum
	34, // 22: eolymp.atlas.ListProblemsInput.Filter.score:type_name -> eolymp.wellknown.ExpressionFloat
	31, // 23: eolymp.atlas.ListProblemsInput.Filter.is_bookmarked:type_name -> eolymp.wellknown.ExpressionBool
	32, // 24: eolymp.atlas.ListVersionsInput.Filter.number:type_name -> eolymp.wellknown.ExpressionInt
	30, // 25: eolymp.atlas.ListVersionsInput.Filter.created_by:type_name -> eolymp.wellknown.ExpressionID
	35, // 26: eolymp.atlas.ListVersionsInput.Filter.created_at:type_name -> eolymp.wellknown.ExpressionTimestamp
	33, // 27: eolymp.atlas.ListVersionsInput.Filter.change_op:type_name -> eolymp.wellknown.ExpressionEnum
	36, // 28: eolymp.atlas.ListVersionsInput.Filter.change_path:type_name -> eolymp.wellknown.ExpressionString
	3,  // 29: eolymp.atlas.ProblemService.CreateProblem:input_type -> eolymp.atlas.CreateProblemInput
	15, // 30: eolymp.atlas.ProblemService.UpdateProblem:input_type -> eolymp.atlas.UpdateProblemInput
	5,  // 31: eolymp.atlas.ProblemService.DeleteProblem:input_type -> eolymp.atlas.DeleteProblemInput
	7,  // 32: eolymp.atlas.ProblemService.DescribeProblem:input_type -> eolymp.atlas.DescribeProblemInput
	9,  // 33: eolymp.atlas.ProblemService.ListProblems:input_type -> eolymp.atlas.ListProblemsInput
	17, // 34: eolymp.atlas.ProblemService.SyncProblem:input_type -> eolymp.atlas.SyncProblemInput
	21, // 35: eolymp.atlas.ProblemService.VoteProblem:input_type -> eolymp.atlas.VoteProblemInput
	4,  // 36: eolymp.atlas.ProblemService.CreateProblem:output_type -> eolymp.atlas.CreateProblemOutput
	16, // 37: eolymp.atlas.ProblemService.UpdateProblem:output_type -> eolymp.atlas.UpdateProblemOutput
	6,  // 38: eolymp.atlas.ProblemService.DeleteProblem:output_type -> eolymp.atlas.DeleteProblemOutput
	8,  // 39: eolymp.atlas.ProblemService.DescribeProblem:output_type -> eolymp.atlas.DescribeProblemOutput
	10, // 40: eolymp.atlas.ProblemService.ListProblems:output_type -> eolymp.atlas.ListProblemsOutput
	18, // 41: eolymp.atlas.ProblemService.SyncProblem:output_type -> eolymp.atlas.SyncProblemOutput
	22, // 42: eolymp.atlas.ProblemService.VoteProblem:output_type -> eolymp.atlas.VoteProblemOutput
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_problem_service_proto_init() }
func file_eolymp_atlas_problem_service_proto_init() {
	if File_eolymp_atlas_problem_service_proto != nil {
		return
	}
	file_eolymp_atlas_problem_proto_init()
	file_eolymp_atlas_statement_proto_init()
	file_eolymp_atlas_version_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_atlas_problem_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_atlas_problem_service_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_problem_service_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_problem_service_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_problem_service_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_problem_service_proto = out.File
	file_eolymp_atlas_problem_service_proto_rawDesc = nil
	file_eolymp_atlas_problem_service_proto_goTypes = nil
	file_eolymp_atlas_problem_service_proto_depIdxs = nil
}
