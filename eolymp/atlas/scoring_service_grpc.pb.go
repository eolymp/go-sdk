// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/atlas/scoring_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScoringService_DescribeScore_FullMethodName          = "/eolymp.atlas.ScoringService/DescribeScore"
	ScoringService_ListProblemTop_FullMethodName         = "/eolymp.atlas.ScoringService/ListProblemTop"
	ScoringService_DescribeProblemGrading_FullMethodName = "/eolymp.atlas.ScoringService/DescribeProblemGrading"
)

// ScoringServiceClient is the client API for ScoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoringServiceClient interface {
	DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error)
	ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error)
	DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error)
}

type scoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoringServiceClient(cc grpc.ClientConnInterface) ScoringServiceClient {
	return &scoringServiceClient{cc}
}

func (c *scoringServiceClient) DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error) {
	out := new(DescribeScoreOutput)
	err := c.cc.Invoke(ctx, ScoringService_DescribeScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error) {
	out := new(ListProblemTopOutput)
	err := c.cc.Invoke(ctx, ScoringService_ListProblemTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringServiceClient) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error) {
	out := new(DescribeProblemGradingOutput)
	err := c.cc.Invoke(ctx, ScoringService_DescribeProblemGrading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoringServiceServer is the server API for ScoringService service.
// All implementations should embed UnimplementedScoringServiceServer
// for forward compatibility
type ScoringServiceServer interface {
	DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error)
	ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error)
	DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error)
}

// UnimplementedScoringServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScoringServiceServer struct {
}

func (UnimplementedScoringServiceServer) DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScore not implemented")
}
func (UnimplementedScoringServiceServer) ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemTop not implemented")
}
func (UnimplementedScoringServiceServer) DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProblemGrading not implemented")
}

// UnsafeScoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoringServiceServer will
// result in compilation errors.
type UnsafeScoringServiceServer interface {
	mustEmbedUnimplementedScoringServiceServer()
}

func RegisterScoringServiceServer(s grpc.ServiceRegistrar, srv ScoringServiceServer) {
	s.RegisterService(&ScoringService_ServiceDesc, srv)
}

func _ScoringService_DescribeScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).DescribeScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_DescribeScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).DescribeScore(ctx, req.(*DescribeScoreInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_ListProblemTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemTopInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).ListProblemTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_ListProblemTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).ListProblemTop(ctx, req.(*ListProblemTopInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringService_DescribeProblemGrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProblemGradingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringServiceServer).DescribeProblemGrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringService_DescribeProblemGrading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringServiceServer).DescribeProblemGrading(ctx, req.(*DescribeProblemGradingInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoringService_ServiceDesc is the grpc.ServiceDesc for ScoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.ScoringService",
	HandlerType: (*ScoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeScore",
			Handler:    _ScoringService_DescribeScore_Handler,
		},
		{
			MethodName: "ListProblemTop",
			Handler:    _ScoringService_ListProblemTop_Handler,
		},
		{
			MethodName: "DescribeProblemGrading",
			Handler:    _ScoringService_DescribeProblemGrading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/scoring_service.proto",
}
