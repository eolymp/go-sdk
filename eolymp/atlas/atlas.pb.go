// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: eolymp/atlas/atlas.proto

package atlas

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	executor "github.com/eolymp/go-sdk/eolymp/executor"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListProblemsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListProblemsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListProblemsInput) Reset() {
	*x = ListProblemsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsInput) ProtoMessage() {}

func (x *ListProblemsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsInput.ProtoReflect.Descriptor instead.
func (*ListProblemsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{0}
}

func (x *ListProblemsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListProblemsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListProblemsInput) GetFilters() *ListProblemsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListProblemsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Problem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListProblemsOutput) Reset() {
	*x = ListProblemsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsOutput) ProtoMessage() {}

func (x *ListProblemsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsOutput.ProtoReflect.Descriptor instead.
func (*ListProblemsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{1}
}

func (x *ListProblemsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProblemsOutput) GetItems() []*Problem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem   *Problem   `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *CreateProblemInput) Reset() {
	*x = CreateProblemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemInput) ProtoMessage() {}

func (x *CreateProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemInput.ProtoReflect.Descriptor instead.
func (*CreateProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProblemInput) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *CreateProblemInput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type CreateProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *CreateProblemOutput) Reset() {
	*x = CreateProblemOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemOutput) ProtoMessage() {}

func (x *CreateProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemOutput.ProtoReflect.Descriptor instead.
func (*CreateProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{3}
}

func (x *CreateProblemOutput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type DeleteProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *DeleteProblemInput) Reset() {
	*x = DeleteProblemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemInput) ProtoMessage() {}

func (x *DeleteProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemInput.ProtoReflect.Descriptor instead.
func (*DeleteProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type DeleteProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProblemOutput) Reset() {
	*x = DeleteProblemOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemOutput) ProtoMessage() {}

func (x *DeleteProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemOutput.ProtoReflect.Descriptor instead.
func (*DeleteProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{5}
}

type DescribeProblemInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	ProblemErn string `protobuf:"bytes,2,opt,name=problem_ern,json=problemErn,proto3" json:"problem_ern,omitempty"`
}

func (x *DescribeProblemInput) Reset() {
	*x = DescribeProblemInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProblemInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemInput) ProtoMessage() {}

func (x *DescribeProblemInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemInput.ProtoReflect.Descriptor instead.
func (*DescribeProblemInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeProblemInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeProblemInput) GetProblemErn() string {
	if x != nil {
		return x.ProblemErn
	}
	return ""
}

type DescribeProblemOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem *Problem `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
}

func (x *DescribeProblemOutput) Reset() {
	*x = DescribeProblemOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProblemOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemOutput) ProtoMessage() {}

func (x *DescribeProblemOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemOutput.ProtoReflect.Descriptor instead.
func (*DescribeProblemOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeProblemOutput) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type ListStatementsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListStatementsInput) Reset() {
	*x = ListStatementsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatementsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatementsInput) ProtoMessage() {}

func (x *ListStatementsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatementsInput.ProtoReflect.Descriptor instead.
func (*ListStatementsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{8}
}

func (x *ListStatementsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListStatementsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListStatementsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Statement `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListStatementsOutput) Reset() {
	*x = ListStatementsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatementsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatementsOutput) ProtoMessage() {}

func (x *ListStatementsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatementsOutput.ProtoReflect.Descriptor instead.
func (*ListStatementsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{9}
}

func (x *ListStatementsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStatementsOutput) GetItems() []*Statement {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	StatementId string `protobuf:"bytes,2,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	Rendered    bool   `protobuf:"varint,3,opt,name=rendered,proto3" json:"rendered,omitempty"` // render statement content as ECM document
	Version     uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeStatementInput) Reset() {
	*x = DescribeStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStatementInput) ProtoMessage() {}

func (x *DescribeStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStatementInput.ProtoReflect.Descriptor instead.
func (*DescribeStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeStatementInput) GetStatementId() string {
	if x != nil {
		return x.StatementId
	}
	return ""
}

func (x *DescribeStatementInput) GetRendered() bool {
	if x != nil {
		return x.Rendered
	}
	return false
}

func (x *DescribeStatementInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *Statement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *DescribeStatementOutput) Reset() {
	*x = DescribeStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStatementOutput) ProtoMessage() {}

func (x *DescribeStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStatementOutput.ProtoReflect.Descriptor instead.
func (*DescribeStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeStatementOutput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type LookupStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId       string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	PreferredLocale []string `protobuf:"bytes,2,rep,name=preferred_locale,json=preferredLocale,proto3" json:"preferred_locale,omitempty"`
	Rendered        bool     `protobuf:"varint,3,opt,name=rendered,proto3" json:"rendered,omitempty"` // render statement content as ECM document
	Version         uint32   `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *LookupStatementInput) Reset() {
	*x = LookupStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupStatementInput) ProtoMessage() {}

func (x *LookupStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupStatementInput.ProtoReflect.Descriptor instead.
func (*LookupStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{12}
}

func (x *LookupStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *LookupStatementInput) GetPreferredLocale() []string {
	if x != nil {
		return x.PreferredLocale
	}
	return nil
}

func (x *LookupStatementInput) GetRendered() bool {
	if x != nil {
		return x.Rendered
	}
	return false
}

func (x *LookupStatementInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type LookupStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *Statement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *LookupStatementOutput) Reset() {
	*x = LookupStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupStatementOutput) ProtoMessage() {}

func (x *LookupStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupStatementOutput.ProtoReflect.Descriptor instead.
func (*LookupStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{13}
}

func (x *LookupStatementOutput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type PreviewStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string     `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *PreviewStatementInput) Reset() {
	*x = PreviewStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewStatementInput) ProtoMessage() {}

func (x *PreviewStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewStatementInput.ProtoReflect.Descriptor instead.
func (*PreviewStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{14}
}

func (x *PreviewStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *PreviewStatementInput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type PreviewStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *Statement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *PreviewStatementOutput) Reset() {
	*x = PreviewStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewStatementOutput) ProtoMessage() {}

func (x *PreviewStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewStatementOutput.ProtoReflect.Descriptor instead.
func (*PreviewStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{15}
}

func (x *PreviewStatementOutput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type CreateStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string     `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *CreateStatementInput) Reset() {
	*x = CreateStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementInput) ProtoMessage() {}

func (x *CreateStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementInput.ProtoReflect.Descriptor instead.
func (*CreateStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{16}
}

func (x *CreateStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateStatementInput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type CreateStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatementId string `protobuf:"bytes,1,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
}

func (x *CreateStatementOutput) Reset() {
	*x = CreateStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementOutput) ProtoMessage() {}

func (x *CreateStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementOutput.ProtoReflect.Descriptor instead.
func (*CreateStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{17}
}

func (x *CreateStatementOutput) GetStatementId() string {
	if x != nil {
		return x.StatementId
	}
	return ""
}

type UpdateStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   string     `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	StatementId string     `protobuf:"bytes,2,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
	Statement   *Statement `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *UpdateStatementInput) Reset() {
	*x = UpdateStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatementInput) ProtoMessage() {}

func (x *UpdateStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatementInput.ProtoReflect.Descriptor instead.
func (*UpdateStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateStatementInput) GetStatementId() string {
	if x != nil {
		return x.StatementId
	}
	return ""
}

func (x *UpdateStatementInput) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type UpdateStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateStatementOutput) Reset() {
	*x = UpdateStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatementOutput) ProtoMessage() {}

func (x *UpdateStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatementOutput.ProtoReflect.Descriptor instead.
func (*UpdateStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{19}
}

type DeleteStatementInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	StatementId string `protobuf:"bytes,2,opt,name=statement_id,json=statementId,proto3" json:"statement_id,omitempty"`
}

func (x *DeleteStatementInput) Reset() {
	*x = DeleteStatementInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatementInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatementInput) ProtoMessage() {}

func (x *DeleteStatementInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatementInput.ProtoReflect.Descriptor instead.
func (*DeleteStatementInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteStatementInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteStatementInput) GetStatementId() string {
	if x != nil {
		return x.StatementId
	}
	return ""
}

type DeleteStatementOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteStatementOutput) Reset() {
	*x = DeleteStatementOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatementOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatementOutput) ProtoMessage() {}

func (x *DeleteStatementOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatementOutput.ProtoReflect.Descriptor instead.
func (*DeleteStatementOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{21}
}

type UpdateVerifierInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string             `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Verifier  *executor.Verifier `protobuf:"bytes,2,opt,name=verifier,proto3" json:"verifier,omitempty"`
}

func (x *UpdateVerifierInput) Reset() {
	*x = UpdateVerifierInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVerifierInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVerifierInput) ProtoMessage() {}

func (x *UpdateVerifierInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVerifierInput.ProtoReflect.Descriptor instead.
func (*UpdateVerifierInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateVerifierInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateVerifierInput) GetVerifier() *executor.Verifier {
	if x != nil {
		return x.Verifier
	}
	return nil
}

type UpdateVerifierOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVerifierOutput) Reset() {
	*x = UpdateVerifierOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVerifierOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVerifierOutput) ProtoMessage() {}

func (x *UpdateVerifierOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVerifierOutput.ProtoReflect.Descriptor instead.
func (*UpdateVerifierOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{23}
}

type DescribeVerifierInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeVerifierInput) Reset() {
	*x = DescribeVerifierInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVerifierInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVerifierInput) ProtoMessage() {}

func (x *DescribeVerifierInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVerifierInput.ProtoReflect.Descriptor instead.
func (*DescribeVerifierInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{24}
}

func (x *DescribeVerifierInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeVerifierInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeVerifierOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verifier *executor.Verifier `protobuf:"bytes,1,opt,name=verifier,proto3" json:"verifier,omitempty"`
}

func (x *DescribeVerifierOutput) Reset() {
	*x = DescribeVerifierOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVerifierOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVerifierOutput) ProtoMessage() {}

func (x *DescribeVerifierOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVerifierOutput.ProtoReflect.Descriptor instead.
func (*DescribeVerifierOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{25}
}

func (x *DescribeVerifierOutput) GetVerifier() *executor.Verifier {
	if x != nil {
		return x.Verifier
	}
	return nil
}

type UpdateInteractorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string               `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Interactor *executor.Interactor `protobuf:"bytes,2,opt,name=interactor,proto3" json:"interactor,omitempty"`
}

func (x *UpdateInteractorInput) Reset() {
	*x = UpdateInteractorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInteractorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInteractorInput) ProtoMessage() {}

func (x *UpdateInteractorInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInteractorInput.ProtoReflect.Descriptor instead.
func (*UpdateInteractorInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateInteractorInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateInteractorInput) GetInteractor() *executor.Interactor {
	if x != nil {
		return x.Interactor
	}
	return nil
}

type UpdateInteractorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInteractorOutput) Reset() {
	*x = UpdateInteractorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInteractorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInteractorOutput) ProtoMessage() {}

func (x *UpdateInteractorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInteractorOutput.ProtoReflect.Descriptor instead.
func (*UpdateInteractorOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{27}
}

type DescribeInteractorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeInteractorInput) Reset() {
	*x = DescribeInteractorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeInteractorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeInteractorInput) ProtoMessage() {}

func (x *DescribeInteractorInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeInteractorInput.ProtoReflect.Descriptor instead.
func (*DescribeInteractorInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{28}
}

func (x *DescribeInteractorInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeInteractorInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeInteractorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interactor *executor.Interactor `protobuf:"bytes,1,opt,name=interactor,proto3" json:"interactor,omitempty"`
}

func (x *DescribeInteractorOutput) Reset() {
	*x = DescribeInteractorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeInteractorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeInteractorOutput) ProtoMessage() {}

func (x *DescribeInteractorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeInteractorOutput.ProtoReflect.Descriptor instead.
func (*DescribeInteractorOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{29}
}

func (x *DescribeInteractorOutput) GetInteractor() *executor.Interactor {
	if x != nil {
		return x.Interactor
	}
	return nil
}

type ListTestsetsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListTestsetsInput) Reset() {
	*x = ListTestsetsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsetsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsetsInput) ProtoMessage() {}

func (x *ListTestsetsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsetsInput.ProtoReflect.Descriptor instead.
func (*ListTestsetsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{30}
}

func (x *ListTestsetsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListTestsetsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListTestsetsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Testset `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTestsetsOutput) Reset() {
	*x = ListTestsetsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsetsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsetsOutput) ProtoMessage() {}

func (x *ListTestsetsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsetsOutput.ProtoReflect.Descriptor instead.
func (*ListTestsetsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{31}
}

func (x *ListTestsetsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTestsetsOutput) GetItems() []*Testset {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeTestsetInput) Reset() {
	*x = DescribeTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestsetInput) ProtoMessage() {}

func (x *DescribeTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestsetInput.ProtoReflect.Descriptor instead.
func (*DescribeTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{32}
}

func (x *DescribeTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DescribeTestsetInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Testset *Testset `protobuf:"bytes,1,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *DescribeTestsetOutput) Reset() {
	*x = DescribeTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestsetOutput) ProtoMessage() {}

func (x *DescribeTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestsetOutput.ProtoReflect.Descriptor instead.
func (*DescribeTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{33}
}

func (x *DescribeTestsetOutput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type CreateTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Testset   *Testset `protobuf:"bytes,2,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *CreateTestsetInput) Reset() {
	*x = CreateTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestsetInput) ProtoMessage() {}

func (x *CreateTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestsetInput.ProtoReflect.Descriptor instead.
func (*CreateTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateTestsetInput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type CreateTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTestsetOutput) Reset() {
	*x = CreateTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestsetOutput) ProtoMessage() {}

func (x *CreateTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestsetOutput.ProtoReflect.Descriptor instead.
func (*CreateTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTestsetOutput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string   `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Testset   *Testset `protobuf:"bytes,3,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *UpdateTestsetInput) Reset() {
	*x = UpdateTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestsetInput) ProtoMessage() {}

func (x *UpdateTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestsetInput.ProtoReflect.Descriptor instead.
func (*UpdateTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *UpdateTestsetInput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type UpdateTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTestsetOutput) Reset() {
	*x = UpdateTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestsetOutput) ProtoMessage() {}

func (x *UpdateTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestsetOutput.ProtoReflect.Descriptor instead.
func (*UpdateTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{37}
}

type DeleteTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
}

func (x *DeleteTestsetInput) Reset() {
	*x = DeleteTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestsetInput) ProtoMessage() {}

func (x *DeleteTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestsetInput.ProtoReflect.Descriptor instead.
func (*DeleteTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

type DeleteTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestsetOutput) Reset() {
	*x = DeleteTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestsetOutput) ProtoMessage() {}

func (x *DeleteTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestsetOutput.ProtoReflect.Descriptor instead.
func (*DeleteTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{39}
}

type ListExamplesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListExamplesInput) Reset() {
	*x = ListExamplesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamplesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesInput) ProtoMessage() {}

func (x *ListExamplesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesInput.ProtoReflect.Descriptor instead.
func (*ListExamplesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{40}
}

func (x *ListExamplesInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListExamplesInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListExamplesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examples []*Test `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *ListExamplesOutput) Reset() {
	*x = ListExamplesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamplesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesOutput) ProtoMessage() {}

func (x *ListExamplesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesOutput.ProtoReflect.Descriptor instead.
func (*ListExamplesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{41}
}

func (x *ListExamplesOutput) GetExamples() []*Test {
	if x != nil {
		return x.Examples
	}
	return nil
}

type ListTestsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListTestsInput) Reset() {
	*x = ListTestsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsInput) ProtoMessage() {}

func (x *ListTestsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsInput.ProtoReflect.Descriptor instead.
func (*ListTestsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{42}
}

func (x *ListTestsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListTestsInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *ListTestsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListTestsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Test `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTestsOutput) Reset() {
	*x = ListTestsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsOutput) ProtoMessage() {}

func (x *ListTestsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsOutput.ProtoReflect.Descriptor instead.
func (*ListTestsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{43}
}

func (x *ListTestsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTestsOutput) GetItems() []*Test {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeTestInput) Reset() {
	*x = DescribeTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestInput) ProtoMessage() {}

func (x *DescribeTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestInput.ProtoReflect.Descriptor instead.
func (*DescribeTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{44}
}

func (x *DescribeTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DescribeTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *DescribeTestInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *DescribeTestOutput) Reset() {
	*x = DescribeTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestOutput) ProtoMessage() {}

func (x *DescribeTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestOutput.ProtoReflect.Descriptor instead.
func (*DescribeTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{45}
}

func (x *DescribeTestOutput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Test      *Test  `protobuf:"bytes,3,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestInput) Reset() {
	*x = CreateTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestInput) ProtoMessage() {}

func (x *CreateTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestInput.ProtoReflect.Descriptor instead.
func (*CreateTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{46}
}

func (x *CreateTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *CreateTestInput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *CreateTestOutput) Reset() {
	*x = CreateTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestOutput) ProtoMessage() {}

func (x *CreateTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestOutput.ProtoReflect.Descriptor instead.
func (*CreateTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{47}
}

func (x *CreateTestOutput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type UpdateTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Test      *Test  `protobuf:"bytes,4,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *UpdateTestInput) Reset() {
	*x = UpdateTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestInput) ProtoMessage() {}

func (x *UpdateTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestInput.ProtoReflect.Descriptor instead.
func (*UpdateTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *UpdateTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *UpdateTestInput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type UpdateTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTestOutput) Reset() {
	*x = UpdateTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestOutput) ProtoMessage() {}

func (x *UpdateTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestOutput.ProtoReflect.Descriptor instead.
func (*UpdateTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{49}
}

type DeleteTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *DeleteTestInput) Reset() {
	*x = DeleteTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestInput) ProtoMessage() {}

func (x *DeleteTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestInput.ProtoReflect.Descriptor instead.
func (*DeleteTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DeleteTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type DeleteTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestOutput) Reset() {
	*x = DeleteTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestOutput) ProtoMessage() {}

func (x *DeleteTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestOutput.ProtoReflect.Descriptor instead.
func (*DeleteTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{51}
}

type ListPermissionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *ListPermissionsInput) Reset() {
	*x = ListPermissionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsInput) ProtoMessage() {}

func (x *ListPermissionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsInput.ProtoReflect.Descriptor instead.
func (*ListPermissionsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{52}
}

func (x *ListPermissionsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type ListPermissionsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Permission `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPermissionsOutput) Reset() {
	*x = ListPermissionsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPermissionsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsOutput) ProtoMessage() {}

func (x *ListPermissionsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsOutput.ProtoReflect.Descriptor instead.
func (*ListPermissionsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{53}
}

func (x *ListPermissionsOutput) GetItems() []*Permission {
	if x != nil {
		return x.Items
	}
	return nil
}

type GrantPermissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string      `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Permission *Permission `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *GrantPermissionInput) Reset() {
	*x = GrantPermissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantPermissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantPermissionInput) ProtoMessage() {}

func (x *GrantPermissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantPermissionInput.ProtoReflect.Descriptor instead.
func (*GrantPermissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{54}
}

func (x *GrantPermissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *GrantPermissionInput) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type GrantPermissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GrantPermissionOutput) Reset() {
	*x = GrantPermissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantPermissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantPermissionOutput) ProtoMessage() {}

func (x *GrantPermissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantPermissionOutput.ProtoReflect.Descriptor instead.
func (*GrantPermissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{55}
}

type RevokePermissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RevokePermissionInput) Reset() {
	*x = RevokePermissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokePermissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionInput) ProtoMessage() {}

func (x *RevokePermissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionInput.ProtoReflect.Descriptor instead.
func (*RevokePermissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{56}
}

func (x *RevokePermissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RevokePermissionInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RevokePermissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevokePermissionOutput) Reset() {
	*x = RevokePermissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokePermissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokePermissionOutput) ProtoMessage() {}

func (x *RevokePermissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokePermissionOutput.ProtoReflect.Descriptor instead.
func (*RevokePermissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{57}
}

type IntrospectPermissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *IntrospectPermissionInput) Reset() {
	*x = IntrospectPermissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectPermissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectPermissionInput) ProtoMessage() {}

func (x *IntrospectPermissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectPermissionInput.ProtoReflect.Descriptor instead.
func (*IntrospectPermissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{58}
}

func (x *IntrospectPermissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type IntrospectPermissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *Permission `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *IntrospectPermissionOutput) Reset() {
	*x = IntrospectPermissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrospectPermissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrospectPermissionOutput) ProtoMessage() {}

func (x *IntrospectPermissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrospectPermissionOutput.ProtoReflect.Descriptor instead.
func (*IntrospectPermissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{59}
}

func (x *IntrospectPermissionOutput) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type CreateCodeTemplateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string    `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Template  *Template `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CreateCodeTemplateInput) Reset() {
	*x = CreateCodeTemplateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeTemplateInput) ProtoMessage() {}

func (x *CreateCodeTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeTemplateInput.ProtoReflect.Descriptor instead.
func (*CreateCodeTemplateInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{60}
}

func (x *CreateCodeTemplateInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateCodeTemplateInput) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateCodeTemplateOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *CreateCodeTemplateOutput) Reset() {
	*x = CreateCodeTemplateOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeTemplateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeTemplateOutput) ProtoMessage() {}

func (x *CreateCodeTemplateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeTemplateOutput.ProtoReflect.Descriptor instead.
func (*CreateCodeTemplateOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{61}
}

func (x *CreateCodeTemplateOutput) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type UpdateCodeTemplateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string    `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TemplateId string    `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Template   *Template `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *UpdateCodeTemplateInput) Reset() {
	*x = UpdateCodeTemplateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeTemplateInput) ProtoMessage() {}

func (x *UpdateCodeTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeTemplateInput.ProtoReflect.Descriptor instead.
func (*UpdateCodeTemplateInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateCodeTemplateInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateCodeTemplateInput) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *UpdateCodeTemplateInput) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type UpdateCodeTemplateOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCodeTemplateOutput) Reset() {
	*x = UpdateCodeTemplateOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCodeTemplateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCodeTemplateOutput) ProtoMessage() {}

func (x *UpdateCodeTemplateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCodeTemplateOutput.ProtoReflect.Descriptor instead.
func (*UpdateCodeTemplateOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{63}
}

type DeleteCodeTemplateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *DeleteCodeTemplateInput) Reset() {
	*x = DeleteCodeTemplateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeTemplateInput) ProtoMessage() {}

func (x *DeleteCodeTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeTemplateInput.ProtoReflect.Descriptor instead.
func (*DeleteCodeTemplateInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteCodeTemplateInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteCodeTemplateInput) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type DeleteCodeTemplateOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCodeTemplateOutput) Reset() {
	*x = DeleteCodeTemplateOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeTemplateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeTemplateOutput) ProtoMessage() {}

func (x *DeleteCodeTemplateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeTemplateOutput.ProtoReflect.Descriptor instead.
func (*DeleteCodeTemplateOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{65}
}

type ListCodeTemplatesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListCodeTemplatesInput) Reset() {
	*x = ListCodeTemplatesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeTemplatesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeTemplatesInput) ProtoMessage() {}

func (x *ListCodeTemplatesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeTemplatesInput.ProtoReflect.Descriptor instead.
func (*ListCodeTemplatesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{66}
}

func (x *ListCodeTemplatesInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListCodeTemplatesInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListCodeTemplatesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Template `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCodeTemplatesOutput) Reset() {
	*x = ListCodeTemplatesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeTemplatesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeTemplatesOutput) ProtoMessage() {}

func (x *ListCodeTemplatesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeTemplatesOutput.ProtoReflect.Descriptor instead.
func (*ListCodeTemplatesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{67}
}

func (x *ListCodeTemplatesOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCodeTemplatesOutput) GetItems() []*Template {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeCodeTemplateInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId   string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TemplateId  string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateErn string `protobuf:"bytes,9999,opt,name=template_ern,json=templateErn,proto3" json:"template_ern,omitempty"`
	Version     uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeCodeTemplateInput) Reset() {
	*x = DescribeCodeTemplateInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCodeTemplateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCodeTemplateInput) ProtoMessage() {}

func (x *DescribeCodeTemplateInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCodeTemplateInput.ProtoReflect.Descriptor instead.
func (*DescribeCodeTemplateInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{68}
}

func (x *DescribeCodeTemplateInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeCodeTemplateInput) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DescribeCodeTemplateInput) GetTemplateErn() string {
	if x != nil {
		return x.TemplateErn
	}
	return ""
}

func (x *DescribeCodeTemplateInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeCodeTemplateOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *DescribeCodeTemplateOutput) Reset() {
	*x = DescribeCodeTemplateOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCodeTemplateOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCodeTemplateOutput) ProtoMessage() {}

func (x *DescribeCodeTemplateOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCodeTemplateOutput.ProtoReflect.Descriptor instead.
func (*DescribeCodeTemplateOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{69}
}

func (x *DescribeCodeTemplateOutput) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateAttachmentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string      `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Attachment *Attachment `protobuf:"bytes,2,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *CreateAttachmentInput) Reset() {
	*x = CreateAttachmentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttachmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttachmentInput) ProtoMessage() {}

func (x *CreateAttachmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttachmentInput.ProtoReflect.Descriptor instead.
func (*CreateAttachmentInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{70}
}

func (x *CreateAttachmentInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateAttachmentInput) GetAttachment() *Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

type CreateAttachmentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentId string `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (x *CreateAttachmentOutput) Reset() {
	*x = CreateAttachmentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttachmentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttachmentOutput) ProtoMessage() {}

func (x *CreateAttachmentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttachmentOutput.ProtoReflect.Descriptor instead.
func (*CreateAttachmentOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{71}
}

func (x *CreateAttachmentOutput) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

type UpdateAttachmentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string      `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	AttachmentId string      `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Attachment   *Attachment `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *UpdateAttachmentInput) Reset() {
	*x = UpdateAttachmentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttachmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttachmentInput) ProtoMessage() {}

func (x *UpdateAttachmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttachmentInput.ProtoReflect.Descriptor instead.
func (*UpdateAttachmentInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateAttachmentInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateAttachmentInput) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *UpdateAttachmentInput) GetAttachment() *Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

type UpdateAttachmentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAttachmentOutput) Reset() {
	*x = UpdateAttachmentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttachmentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttachmentOutput) ProtoMessage() {}

func (x *UpdateAttachmentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttachmentOutput.ProtoReflect.Descriptor instead.
func (*UpdateAttachmentOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{73}
}

type DeleteAttachmentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	AttachmentId string `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (x *DeleteAttachmentInput) Reset() {
	*x = DeleteAttachmentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttachmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttachmentInput) ProtoMessage() {}

func (x *DeleteAttachmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttachmentInput.ProtoReflect.Descriptor instead.
func (*DeleteAttachmentInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteAttachmentInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteAttachmentInput) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

type DeleteAttachmentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAttachmentOutput) Reset() {
	*x = DeleteAttachmentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttachmentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttachmentOutput) ProtoMessage() {}

func (x *DeleteAttachmentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttachmentOutput.ProtoReflect.Descriptor instead.
func (*DeleteAttachmentOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{75}
}

type ListAttachmentsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListAttachmentsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	// request data for specific problem version
	Version uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ListAttachmentsInput) Reset() {
	*x = ListAttachmentsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttachmentsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttachmentsInput) ProtoMessage() {}

func (x *ListAttachmentsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttachmentsInput.ProtoReflect.Descriptor instead.
func (*ListAttachmentsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{76}
}

func (x *ListAttachmentsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListAttachmentsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListAttachmentsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListAttachmentsInput) GetFilters() *ListAttachmentsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListAttachmentsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListAttachmentsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Attachment `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAttachmentsOutput) Reset() {
	*x = ListAttachmentsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttachmentsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttachmentsOutput) ProtoMessage() {}

func (x *ListAttachmentsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttachmentsOutput.ProtoReflect.Descriptor instead.
func (*ListAttachmentsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{77}
}

func (x *ListAttachmentsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAttachmentsOutput) GetItems() []*Attachment {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeAttachmentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	AttachmentId string `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Version      uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeAttachmentInput) Reset() {
	*x = DescribeAttachmentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAttachmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAttachmentInput) ProtoMessage() {}

func (x *DescribeAttachmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAttachmentInput.ProtoReflect.Descriptor instead.
func (*DescribeAttachmentInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{78}
}

func (x *DescribeAttachmentInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeAttachmentInput) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *DescribeAttachmentInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeAttachmentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachment *Attachment `protobuf:"bytes,1,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *DescribeAttachmentOutput) Reset() {
	*x = DescribeAttachmentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAttachmentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAttachmentOutput) ProtoMessage() {}

func (x *DescribeAttachmentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAttachmentOutput.ProtoReflect.Descriptor instead.
func (*DescribeAttachmentOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{79}
}

func (x *DescribeAttachmentOutput) GetAttachment() *Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

type ListVersionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListVersionsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListVersionsInput) Reset() {
	*x = ListVersionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVersionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsInput) ProtoMessage() {}

func (x *ListVersionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsInput.ProtoReflect.Descriptor instead.
func (*ListVersionsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{80}
}

func (x *ListVersionsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListVersionsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListVersionsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListVersionsInput) GetFilters() *ListVersionsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListVersionsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Version `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListVersionsOutput) Reset() {
	*x = ListVersionsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVersionsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsOutput) ProtoMessage() {}

func (x *ListVersionsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsOutput.ProtoReflect.Descriptor instead.
func (*ListVersionsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{81}
}

func (x *ListVersionsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListVersionsOutput) GetItems() []*Version {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListProblemTopInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *ListProblemTopInput) Reset() {
	*x = ListProblemTopInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemTopInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemTopInput) ProtoMessage() {}

func (x *ListProblemTopInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemTopInput.ProtoReflect.Descriptor instead.
func (*ListProblemTopInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{82}
}

func (x *ListProblemTopInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type ListProblemTopOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Submission `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListProblemTopOutput) Reset() {
	*x = ListProblemTopOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemTopOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemTopOutput) ProtoMessage() {}

func (x *ListProblemTopOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemTopOutput.ProtoReflect.Descriptor instead.
func (*ListProblemTopOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{83}
}

func (x *ListProblemTopOutput) GetItems() []*Submission {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeProblemGradingInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *DescribeProblemGradingInput) Reset() {
	*x = DescribeProblemGradingInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProblemGradingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemGradingInput) ProtoMessage() {}

func (x *DescribeProblemGradingInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemGradingInput.ProtoReflect.Descriptor instead.
func (*DescribeProblemGradingInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{84}
}

func (x *DescribeProblemGradingInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type DescribeProblemGradingOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Problem grade ranges from highest grade to lowest
	// to grade a submission, iterate over grade ranges and compare resource_usage value with upper_bound,
	// first grade which has upper_bound higher or equal to resource usage is the grade for submission.
	//
	// for _, range := range ranges {
	//    if range.GetUpperBound() >= submission.GetResourceUsage() {
	//        return range.GetGrade()
	//    }
	// }
	Ranges []*DescribeProblemGradingOutput_Range `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *DescribeProblemGradingOutput) Reset() {
	*x = DescribeProblemGradingOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProblemGradingOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemGradingOutput) ProtoMessage() {}

func (x *DescribeProblemGradingOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemGradingOutput.ProtoReflect.Descriptor instead.
func (*DescribeProblemGradingOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{85}
}

func (x *DescribeProblemGradingOutput) GetRanges() []*DescribeProblemGradingOutput_Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type CreateSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string    `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Solution  *Solution `protobuf:"bytes,2,opt,name=solution,proto3" json:"solution,omitempty"`
}

func (x *CreateSolutionInput) Reset() {
	*x = CreateSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSolutionInput) ProtoMessage() {}

func (x *CreateSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSolutionInput.ProtoReflect.Descriptor instead.
func (*CreateSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{86}
}

func (x *CreateSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateSolutionInput) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

type CreateSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *CreateSolutionOutput) Reset() {
	*x = CreateSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSolutionOutput) ProtoMessage() {}

func (x *CreateSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSolutionOutput.ProtoReflect.Descriptor instead.
func (*CreateSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{87}
}

func (x *CreateSolutionOutput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type UpdateSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string    `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string    `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Solution   *Solution `protobuf:"bytes,3,opt,name=solution,proto3" json:"solution,omitempty"`
}

func (x *UpdateSolutionInput) Reset() {
	*x = UpdateSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSolutionInput) ProtoMessage() {}

func (x *UpdateSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSolutionInput.ProtoReflect.Descriptor instead.
func (*UpdateSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *UpdateSolutionInput) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

type UpdateSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSolutionOutput) Reset() {
	*x = UpdateSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSolutionOutput) ProtoMessage() {}

func (x *UpdateSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSolutionOutput.ProtoReflect.Descriptor instead.
func (*UpdateSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{89}
}

type DeleteSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *DeleteSolutionInput) Reset() {
	*x = DeleteSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSolutionInput) ProtoMessage() {}

func (x *DeleteSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSolutionInput.ProtoReflect.Descriptor instead.
func (*DeleteSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type DeleteSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSolutionOutput) Reset() {
	*x = DeleteSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSolutionOutput) ProtoMessage() {}

func (x *DeleteSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSolutionOutput.ProtoReflect.Descriptor instead.
func (*DeleteSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{91}
}

type ListSolutionsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListSolutionsInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListSolutionsInput) Reset() {
	*x = ListSolutionsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionsInput) ProtoMessage() {}

func (x *ListSolutionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionsInput.ProtoReflect.Descriptor instead.
func (*ListSolutionsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{92}
}

func (x *ListSolutionsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListSolutionsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSolutionsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListSolutionsInput) GetFilters() *ListSolutionsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListSolutionsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Solution `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListSolutionsOutput) Reset() {
	*x = ListSolutionsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionsOutput) ProtoMessage() {}

func (x *ListSolutionsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionsOutput.ProtoReflect.Descriptor instead.
func (*ListSolutionsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{93}
}

func (x *ListSolutionsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSolutionsOutput) GetItems() []*Solution {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *DescribeSolutionInput) Reset() {
	*x = DescribeSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSolutionInput) ProtoMessage() {}

func (x *DescribeSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSolutionInput.ProtoReflect.Descriptor instead.
func (*DescribeSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{94}
}

func (x *DescribeSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type DescribeSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solution *Solution `protobuf:"bytes,1,opt,name=solution,proto3" json:"solution,omitempty"`
}

func (x *DescribeSolutionOutput) Reset() {
	*x = DescribeSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSolutionOutput) ProtoMessage() {}

func (x *DescribeSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSolutionOutput.ProtoReflect.Descriptor instead.
func (*DescribeSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{95}
}

func (x *DescribeSolutionOutput) GetSolution() *Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

type PublishSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *PublishSolutionInput) Reset() {
	*x = PublishSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishSolutionInput) ProtoMessage() {}

func (x *PublishSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishSolutionInput.ProtoReflect.Descriptor instead.
func (*PublishSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{96}
}

func (x *PublishSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *PublishSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type PublishSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishSolutionOutput) Reset() {
	*x = PublishSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishSolutionOutput) ProtoMessage() {}

func (x *PublishSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishSolutionOutput.ProtoReflect.Descriptor instead.
func (*PublishSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{97}
}

type UnpublishSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *UnpublishSolutionInput) Reset() {
	*x = UnpublishSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpublishSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishSolutionInput) ProtoMessage() {}

func (x *UnpublishSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishSolutionInput.ProtoReflect.Descriptor instead.
func (*UnpublishSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{98}
}

func (x *UnpublishSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UnpublishSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type UnpublishSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnpublishSolutionOutput) Reset() {
	*x = UnpublishSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpublishSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishSolutionOutput) ProtoMessage() {}

func (x *UnpublishSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishSolutionOutput.ProtoReflect.Descriptor instead.
func (*UnpublishSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{99}
}

type ApproveSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *ApproveSolutionInput) Reset() {
	*x = ApproveSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveSolutionInput) ProtoMessage() {}

func (x *ApproveSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveSolutionInput.ProtoReflect.Descriptor instead.
func (*ApproveSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{100}
}

func (x *ApproveSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ApproveSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type ApproveSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveSolutionOutput) Reset() {
	*x = ApproveSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveSolutionOutput) ProtoMessage() {}

func (x *ApproveSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveSolutionOutput.ProtoReflect.Descriptor instead.
func (*ApproveSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{101}
}

type RefuseSolutionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Comment    string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RefuseSolutionInput) Reset() {
	*x = RefuseSolutionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuseSolutionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuseSolutionInput) ProtoMessage() {}

func (x *RefuseSolutionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuseSolutionInput.ProtoReflect.Descriptor instead.
func (*RefuseSolutionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{102}
}

func (x *RefuseSolutionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RefuseSolutionInput) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *RefuseSolutionInput) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RefuseSolutionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefuseSolutionOutput) Reset() {
	*x = RefuseSolutionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuseSolutionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuseSolutionOutput) ProtoMessage() {}

func (x *RefuseSolutionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuseSolutionOutput.ProtoReflect.Descriptor instead.
func (*RefuseSolutionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{103}
}

type ListCategoriesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Filters *ListCategoriesInput_Filter `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListCategoriesInput) Reset() {
	*x = ListCategoriesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoriesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoriesInput) ProtoMessage() {}

func (x *ListCategoriesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoriesInput.ProtoReflect.Descriptor instead.
func (*ListCategoriesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{104}
}

func (x *ListCategoriesInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListCategoriesInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListCategoriesInput) GetFilters() *ListCategoriesInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListCategoriesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Category `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCategoriesOutput) Reset() {
	*x = ListCategoriesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoriesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoriesOutput) ProtoMessage() {}

func (x *ListCategoriesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoriesOutput.ProtoReflect.Descriptor instead.
func (*ListCategoriesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{105}
}

func (x *ListCategoriesOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCategoriesOutput) GetItems() []*Category {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CreateCategoryInput) Reset() {
	*x = CreateCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryInput) ProtoMessage() {}

func (x *CreateCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryInput.ProtoReflect.Descriptor instead.
func (*CreateCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{106}
}

func (x *CreateCategoryInput) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

type CreateCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *CreateCategoryOutput) Reset() {
	*x = CreateCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryOutput) ProtoMessage() {}

func (x *CreateCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryOutput.ProtoReflect.Descriptor instead.
func (*CreateCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{107}
}

func (x *CreateCategoryOutput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type UpdateCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string    `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Category   *Category `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *UpdateCategoryInput) Reset() {
	*x = UpdateCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryInput) ProtoMessage() {}

func (x *UpdateCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryInput.ProtoReflect.Descriptor instead.
func (*UpdateCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateCategoryInput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *UpdateCategoryInput) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

type UpdateCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCategoryOutput) Reset() {
	*x = UpdateCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryOutput) ProtoMessage() {}

func (x *UpdateCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryOutput.ProtoReflect.Descriptor instead.
func (*UpdateCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{109}
}

type DeleteCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *DeleteCategoryInput) Reset() {
	*x = DeleteCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryInput) ProtoMessage() {}

func (x *DeleteCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryInput.ProtoReflect.Descriptor instead.
func (*DeleteCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{110}
}

func (x *DeleteCategoryInput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type DeleteCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCategoryOutput) Reset() {
	*x = DeleteCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryOutput) ProtoMessage() {}

func (x *DeleteCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryOutput.ProtoReflect.Descriptor instead.
func (*DeleteCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{111}
}

type DescribeCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *DescribeCategoryInput) Reset() {
	*x = DescribeCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryInput) ProtoMessage() {}

func (x *DescribeCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryInput.ProtoReflect.Descriptor instead.
func (*DescribeCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{112}
}

func (x *DescribeCategoryInput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type DescribeCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *DescribeCategoryOutput) Reset() {
	*x = DescribeCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryOutput) ProtoMessage() {}

func (x *DescribeCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryOutput.ProtoReflect.Descriptor instead.
func (*DescribeCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{113}
}

func (x *DescribeCategoryOutput) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

type AssignCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	ProblemId  string `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Index      uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *AssignCategoryInput) Reset() {
	*x = AssignCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCategoryInput) ProtoMessage() {}

func (x *AssignCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCategoryInput.ProtoReflect.Descriptor instead.
func (*AssignCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{114}
}

func (x *AssignCategoryInput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *AssignCategoryInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *AssignCategoryInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AssignCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssignCategoryOutput) Reset() {
	*x = AssignCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCategoryOutput) ProtoMessage() {}

func (x *AssignCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCategoryOutput.ProtoReflect.Descriptor instead.
func (*AssignCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{115}
}

type UnassignCategoryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	ProblemId  string `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
}

func (x *UnassignCategoryInput) Reset() {
	*x = UnassignCategoryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignCategoryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignCategoryInput) ProtoMessage() {}

func (x *UnassignCategoryInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignCategoryInput.ProtoReflect.Descriptor instead.
func (*UnassignCategoryInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{116}
}

func (x *UnassignCategoryInput) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *UnassignCategoryInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

type UnassignCategoryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnassignCategoryOutput) Reset() {
	*x = UnassignCategoryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignCategoryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignCategoryOutput) ProtoMessage() {}

func (x *UnassignCategoryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignCategoryOutput.ProtoReflect.Descriptor instead.
func (*UnassignCategoryOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{117}
}

type CreateSubmissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Lang      string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Source    string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CreateSubmissionInput) Reset() {
	*x = CreateSubmissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubmissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubmissionInput) ProtoMessage() {}

func (x *CreateSubmissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubmissionInput.ProtoReflect.Descriptor instead.
func (*CreateSubmissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{118}
}

func (x *CreateSubmissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateSubmissionInput) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *CreateSubmissionInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type CreateSubmissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *CreateSubmissionOutput) Reset() {
	*x = CreateSubmissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubmissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubmissionOutput) ProtoMessage() {}

func (x *CreateSubmissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubmissionOutput.ProtoReflect.Descriptor instead.
func (*CreateSubmissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{119}
}

func (x *CreateSubmissionOutput) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type DescribeSubmissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SubmissionId string `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *DescribeSubmissionInput) Reset() {
	*x = DescribeSubmissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSubmissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSubmissionInput) ProtoMessage() {}

func (x *DescribeSubmissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSubmissionInput.ProtoReflect.Descriptor instead.
func (*DescribeSubmissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{120}
}

func (x *DescribeSubmissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeSubmissionInput) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type DescribeSubmissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submission *Submission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *DescribeSubmissionOutput) Reset() {
	*x = DescribeSubmissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSubmissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSubmissionOutput) ProtoMessage() {}

func (x *DescribeSubmissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSubmissionOutput.ProtoReflect.Descriptor instead.
func (*DescribeSubmissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{121}
}

func (x *DescribeSubmissionOutput) GetSubmission() *Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

type RetestSubmissionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	SubmissionId string `protobuf:"bytes,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	Debug        bool   `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *RetestSubmissionInput) Reset() {
	*x = RetestSubmissionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetestSubmissionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetestSubmissionInput) ProtoMessage() {}

func (x *RetestSubmissionInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetestSubmissionInput.ProtoReflect.Descriptor instead.
func (*RetestSubmissionInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{122}
}

func (x *RetestSubmissionInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *RetestSubmissionInput) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *RetestSubmissionInput) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type RetestSubmissionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetestSubmissionOutput) Reset() {
	*x = RetestSubmissionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetestSubmissionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetestSubmissionOutput) ProtoMessage() {}

func (x *RetestSubmissionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetestSubmissionOutput.ProtoReflect.Descriptor instead.
func (*RetestSubmissionOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{123}
}

type DescribeScoreInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DescribeScoreInput) Reset() {
	*x = DescribeScoreInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreInput) ProtoMessage() {}

func (x *DescribeScoreInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreInput.ProtoReflect.Descriptor instead.
func (*DescribeScoreInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{124}
}

func (x *DescribeScoreInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeScoreInput) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DescribeScoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DescribeScoreOutput) Reset() {
	*x = DescribeScoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeScoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScoreOutput) ProtoMessage() {}

func (x *DescribeScoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScoreOutput.ProtoReflect.Descriptor instead.
func (*DescribeScoreOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{125}
}

func (x *DescribeScoreOutput) GetScore() *Score {
	if x != nil {
		return x.Score
	}
	return nil
}

type UpdateVisibilityInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Visible   bool   `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *UpdateVisibilityInput) Reset() {
	*x = UpdateVisibilityInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVisibilityInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisibilityInput) ProtoMessage() {}

func (x *UpdateVisibilityInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisibilityInput.ProtoReflect.Descriptor instead.
func (*UpdateVisibilityInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateVisibilityInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateVisibilityInput) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type UpdateVisibilityOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVisibilityOutput) Reset() {
	*x = UpdateVisibilityOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVisibilityOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVisibilityOutput) ProtoMessage() {}

func (x *UpdateVisibilityOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVisibilityOutput.ProtoReflect.Descriptor instead.
func (*UpdateVisibilityOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{127}
}

type UpdatePrivacyInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Private   bool   `protobuf:"varint,2,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *UpdatePrivacyInput) Reset() {
	*x = UpdatePrivacyInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivacyInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyInput) ProtoMessage() {}

func (x *UpdatePrivacyInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyInput.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{128}
}

func (x *UpdatePrivacyInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdatePrivacyInput) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

type UpdatePrivacyOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePrivacyOutput) Reset() {
	*x = UpdatePrivacyOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivacyOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivacyOutput) ProtoMessage() {}

func (x *UpdatePrivacyOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivacyOutput.ProtoReflect.Descriptor instead.
func (*UpdatePrivacyOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{129}
}

type ListProblemsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []*wellknown.ExpressionID   `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	CategoryId []*wellknown.ExpressionID   `protobuf:"bytes,2,rep,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	IsVisible  []*wellknown.ExpressionBool `protobuf:"bytes,3,rep,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
	IsPrivate  []*wellknown.ExpressionBool `protobuf:"bytes,4,rep,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Number     []*wellknown.ExpressionInt  `protobuf:"bytes,5,rep,name=number,proto3" json:"number,omitempty"`
}

func (x *ListProblemsInput_Filter) Reset() {
	*x = ListProblemsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProblemsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProblemsInput_Filter) ProtoMessage() {}

func (x *ListProblemsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProblemsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListProblemsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ListProblemsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetCategoryId() []*wellknown.ExpressionID {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetIsVisible() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetIsPrivate() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (x *ListProblemsInput_Filter) GetNumber() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Number
	}
	return nil
}

type ListAttachmentsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   []*wellknown.ExpressionID     `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Name []*wellknown.ExpressionString `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *ListAttachmentsInput_Filter) Reset() {
	*x = ListAttachmentsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttachmentsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttachmentsInput_Filter) ProtoMessage() {}

func (x *ListAttachmentsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttachmentsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListAttachmentsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{76, 0}
}

func (x *ListAttachmentsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListAttachmentsInput_Filter) GetName() []*wellknown.ExpressionString {
	if x != nil {
		return x.Name
	}
	return nil
}

type ListVersionsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     []*wellknown.ExpressionInt       `protobuf:"bytes,1,rep,name=number,proto3" json:"number,omitempty"`
	CreatedBy  []*wellknown.ExpressionID        `protobuf:"bytes,2,rep,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt  []*wellknown.ExpressionTimestamp `protobuf:"bytes,3,rep,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ChangeOp   []*wellknown.ExpressionEnum      `protobuf:"bytes,4,rep,name=change_op,json=changeOp,proto3" json:"change_op,omitempty"`
	ChangePath []*wellknown.ExpressionString    `protobuf:"bytes,5,rep,name=change_path,json=changePath,proto3" json:"change_path,omitempty"`
}

func (x *ListVersionsInput_Filter) Reset() {
	*x = ListVersionsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVersionsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsInput_Filter) ProtoMessage() {}

func (x *ListVersionsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListVersionsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{80, 0}
}

func (x *ListVersionsInput_Filter) GetNumber() []*wellknown.ExpressionInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetCreatedBy() []*wellknown.ExpressionID {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetCreatedAt() []*wellknown.ExpressionTimestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetChangeOp() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.ChangeOp
	}
	return nil
}

func (x *ListVersionsInput_Filter) GetChangePath() []*wellknown.ExpressionString {
	if x != nil {
		return x.ChangePath
	}
	return nil
}

type DescribeProblemGradingOutput_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade      uint32  `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"`
	UpperBound float32 `protobuf:"fixed32,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
}

func (x *DescribeProblemGradingOutput_Range) Reset() {
	*x = DescribeProblemGradingOutput_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeProblemGradingOutput_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeProblemGradingOutput_Range) ProtoMessage() {}

func (x *DescribeProblemGradingOutput_Range) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeProblemGradingOutput_Range.ProtoReflect.Descriptor instead.
func (*DescribeProblemGradingOutput_Range) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{85, 0}
}

func (x *DescribeProblemGradingOutput_Range) GetGrade() uint32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *DescribeProblemGradingOutput_Range) GetUpperBound() float32 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

type ListSolutionsInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               []*wellknown.ExpressionID   `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	ProblemId        []*wellknown.ExpressionID   `protobuf:"bytes,2,rep,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	AuthorId         []*wellknown.ExpressionID   `protobuf:"bytes,3,rep,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ModerationStatus []*wellknown.ExpressionEnum `protobuf:"bytes,4,rep,name=moderation_status,json=moderationStatus,proto3" json:"moderation_status,omitempty"`
	Published        []*wellknown.ExpressionBool `protobuf:"bytes,5,rep,name=published,proto3" json:"published,omitempty"`
	Lang             []*wellknown.ExpressionEnum `protobuf:"bytes,6,rep,name=lang,proto3" json:"lang,omitempty"`
}

func (x *ListSolutionsInput_Filter) Reset() {
	*x = ListSolutionsInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionsInput_Filter) ProtoMessage() {}

func (x *ListSolutionsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListSolutionsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{92, 0}
}

func (x *ListSolutionsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListSolutionsInput_Filter) GetProblemId() []*wellknown.ExpressionID {
	if x != nil {
		return x.ProblemId
	}
	return nil
}

func (x *ListSolutionsInput_Filter) GetAuthorId() []*wellknown.ExpressionID {
	if x != nil {
		return x.AuthorId
	}
	return nil
}

func (x *ListSolutionsInput_Filter) GetModerationStatus() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.ModerationStatus
	}
	return nil
}

func (x *ListSolutionsInput_Filter) GetPublished() []*wellknown.ExpressionBool {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *ListSolutionsInput_Filter) GetLang() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Lang
	}
	return nil
}

type ListCategoriesInput_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []*wellknown.ExpressionID   `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	ParentId  []*wellknown.ExpressionID   `protobuf:"bytes,2,rep,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ProblemId []*wellknown.ExpressionID   `protobuf:"bytes,4,rep,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	IsVisible []*wellknown.ExpressionBool `protobuf:"bytes,3,rep,name=is_visible,json=isVisible,proto3" json:"is_visible,omitempty"`
}

func (x *ListCategoriesInput_Filter) Reset() {
	*x = ListCategoriesInput_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_atlas_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCategoriesInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCategoriesInput_Filter) ProtoMessage() {}

func (x *ListCategoriesInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_atlas_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCategoriesInput_Filter.ProtoReflect.Descriptor instead.
func (*ListCategoriesInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_atlas_proto_rawDescGZIP(), []int{104, 0}
}

func (x *ListCategoriesInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListCategoriesInput_Filter) GetParentId() []*wellknown.ExpressionID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *ListCategoriesInput_Filter) GetProblemId() []*wellknown.ExpressionID {
	if x != nil {
		return x.ProblemId
	}
	return nil
}

func (x *ListCategoriesInput_Filter) GetIsVisible() []*wellknown.ExpressionBool {
	if x != nil {
		return x.IsVisible
	}
	return nil
}

var File_eolymp_atlas_atlas_proto protoreflect.FileDescriptor

var file_eolymp_atlas_atlas_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x03, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0xb4, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x7c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x56, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x45, 0x72, 0x6e, 0x22, 0x48, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x22, 0x4e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x90,
	0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x50, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x15,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x15,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x58, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x6b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x16, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x57, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x6e, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22,
	0x25, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22, 0x15, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4c,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x35, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x6f, 0x0a, 0x14, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x38,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x59, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x72, 0x6e, 0x18, 0x8f, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5b, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xb2, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x70, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x77, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xca, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x43,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c,
	0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3c, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9e, 0x04, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xf9,
	0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77,
	0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x59, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4c,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x14,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x58, 0x0a,
	0x16, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x6e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xfd, 0x02, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x36, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x57, 0x0a,
	0x15, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x18, 0x0a, 0x16, 0x52,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0xf5, 0x5a, 0x0a, 0x05, 0x41, 0x74, 0x6c, 0x61,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a,
	0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a,
	0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a,
	0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x47, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41,
	0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a,
	0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a,
	0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x50,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82,
	0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1f, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xb0, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0xb2, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x53, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a,
	0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x1a, 0x21, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xb8, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x17,
	0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0xaf, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a,
	0x21, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x62, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05,
	0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x1a, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x62, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a,
	0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x2a, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82,
	0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x61, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a,
	0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x22, 0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5e, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x2c, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x5e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2,
	0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x65, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41,
	0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6f, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x1a, 0x3c, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbc, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6f, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a,
	0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a,
	0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x64, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41,
	0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6e, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12,
	0x3c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01,
	0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x57, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1a, 0x8a,
	0xe3, 0x0a, 0x16, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22,
	0x22, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x61, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e,
	0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x56, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e,
	0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x19, 0x8a, 0xe3, 0x0a, 0x15, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x28, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x43, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a,
	0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x2d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x52, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8,
	0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x60, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a,
	0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc5,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x60, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23,
	0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3,
	0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xca, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x28,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5f, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x54, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xc3, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x64, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05,
	0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x22, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x64, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7,
	0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc8, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x63, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41,
	0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x42, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x54, 0x6f, 0x70, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x6f,
	0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3c, 0x82, 0xe3, 0x0a, 0x16,
	0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x70, 0x12, 0xb1, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2a,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x40, 0x82, 0xe3, 0x0a, 0x16,
	0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x90, 0x01, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x37, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x9e, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x45, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x22, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x45, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x2a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x51, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2,
	0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a,
	0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5f, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16,
	0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a,
	0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4d, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x22, 0x36, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3a, 0x22, 0x38, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0xc4, 0x01, 0x0a,
	0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x68, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x67, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22,
	0x35, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x3e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a,
	0x05, 0x82, 0xe3, 0x0a, 0x18, 0x8a, 0xe3, 0x0a, 0x14, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x22, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4c, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x18, 0x8a,
	0xe3, 0x0a, 0x14, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x4c, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8,
	0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x18, 0x8a, 0xe3, 0x0a, 0x14, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x96, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3d, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5,
	0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3,
	0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbb, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x62, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a,
	0x14, 0x82, 0xe3, 0x0a, 0x18, 0x8a, 0xe3, 0x0a, 0x14, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x22, 0x2f, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x62, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x40, 0xf8, 0xe2, 0x0a, 0x14, 0x82, 0xe3, 0x0a, 0x18, 0x8a, 0xe3, 0x0a, 0x14, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x3a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3,
	0x0a, 0x16, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x57, 0x82, 0xe3, 0x0a, 0x19, 0x8a, 0xe3,
	0x0a, 0x15, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x5f, 0x82, 0xe3, 0x0a, 0x1a, 0x8a, 0xe3, 0x0a, 0x16, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4c, 0x82, 0xe3, 0x0a, 0x19, 0x8a,
	0xe3, 0x0a, 0x15, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27,
	0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x1a, 0x06, 0xb2, 0xe3, 0x0a, 0x02, 0x08, 0x01, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3b, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_atlas_atlas_proto_rawDescOnce sync.Once
	file_eolymp_atlas_atlas_proto_rawDescData = file_eolymp_atlas_atlas_proto_rawDesc
)

func file_eolymp_atlas_atlas_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_atlas_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_atlas_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_atlas_atlas_proto_rawDescData)
	})
	return file_eolymp_atlas_atlas_proto_rawDescData
}

var file_eolymp_atlas_atlas_proto_msgTypes = make([]protoimpl.MessageInfo, 136)
var file_eolymp_atlas_atlas_proto_goTypes = []interface{}{
	(*ListProblemsInput)(nil),                  // 0: eolymp.atlas.ListProblemsInput
	(*ListProblemsOutput)(nil),                 // 1: eolymp.atlas.ListProblemsOutput
	(*CreateProblemInput)(nil),                 // 2: eolymp.atlas.CreateProblemInput
	(*CreateProblemOutput)(nil),                // 3: eolymp.atlas.CreateProblemOutput
	(*DeleteProblemInput)(nil),                 // 4: eolymp.atlas.DeleteProblemInput
	(*DeleteProblemOutput)(nil),                // 5: eolymp.atlas.DeleteProblemOutput
	(*DescribeProblemInput)(nil),               // 6: eolymp.atlas.DescribeProblemInput
	(*DescribeProblemOutput)(nil),              // 7: eolymp.atlas.DescribeProblemOutput
	(*ListStatementsInput)(nil),                // 8: eolymp.atlas.ListStatementsInput
	(*ListStatementsOutput)(nil),               // 9: eolymp.atlas.ListStatementsOutput
	(*DescribeStatementInput)(nil),             // 10: eolymp.atlas.DescribeStatementInput
	(*DescribeStatementOutput)(nil),            // 11: eolymp.atlas.DescribeStatementOutput
	(*LookupStatementInput)(nil),               // 12: eolymp.atlas.LookupStatementInput
	(*LookupStatementOutput)(nil),              // 13: eolymp.atlas.LookupStatementOutput
	(*PreviewStatementInput)(nil),              // 14: eolymp.atlas.PreviewStatementInput
	(*PreviewStatementOutput)(nil),             // 15: eolymp.atlas.PreviewStatementOutput
	(*CreateStatementInput)(nil),               // 16: eolymp.atlas.CreateStatementInput
	(*CreateStatementOutput)(nil),              // 17: eolymp.atlas.CreateStatementOutput
	(*UpdateStatementInput)(nil),               // 18: eolymp.atlas.UpdateStatementInput
	(*UpdateStatementOutput)(nil),              // 19: eolymp.atlas.UpdateStatementOutput
	(*DeleteStatementInput)(nil),               // 20: eolymp.atlas.DeleteStatementInput
	(*DeleteStatementOutput)(nil),              // 21: eolymp.atlas.DeleteStatementOutput
	(*UpdateVerifierInput)(nil),                // 22: eolymp.atlas.UpdateVerifierInput
	(*UpdateVerifierOutput)(nil),               // 23: eolymp.atlas.UpdateVerifierOutput
	(*DescribeVerifierInput)(nil),              // 24: eolymp.atlas.DescribeVerifierInput
	(*DescribeVerifierOutput)(nil),             // 25: eolymp.atlas.DescribeVerifierOutput
	(*UpdateInteractorInput)(nil),              // 26: eolymp.atlas.UpdateInteractorInput
	(*UpdateInteractorOutput)(nil),             // 27: eolymp.atlas.UpdateInteractorOutput
	(*DescribeInteractorInput)(nil),            // 28: eolymp.atlas.DescribeInteractorInput
	(*DescribeInteractorOutput)(nil),           // 29: eolymp.atlas.DescribeInteractorOutput
	(*ListTestsetsInput)(nil),                  // 30: eolymp.atlas.ListTestsetsInput
	(*ListTestsetsOutput)(nil),                 // 31: eolymp.atlas.ListTestsetsOutput
	(*DescribeTestsetInput)(nil),               // 32: eolymp.atlas.DescribeTestsetInput
	(*DescribeTestsetOutput)(nil),              // 33: eolymp.atlas.DescribeTestsetOutput
	(*CreateTestsetInput)(nil),                 // 34: eolymp.atlas.CreateTestsetInput
	(*CreateTestsetOutput)(nil),                // 35: eolymp.atlas.CreateTestsetOutput
	(*UpdateTestsetInput)(nil),                 // 36: eolymp.atlas.UpdateTestsetInput
	(*UpdateTestsetOutput)(nil),                // 37: eolymp.atlas.UpdateTestsetOutput
	(*DeleteTestsetInput)(nil),                 // 38: eolymp.atlas.DeleteTestsetInput
	(*DeleteTestsetOutput)(nil),                // 39: eolymp.atlas.DeleteTestsetOutput
	(*ListExamplesInput)(nil),                  // 40: eolymp.atlas.ListExamplesInput
	(*ListExamplesOutput)(nil),                 // 41: eolymp.atlas.ListExamplesOutput
	(*ListTestsInput)(nil),                     // 42: eolymp.atlas.ListTestsInput
	(*ListTestsOutput)(nil),                    // 43: eolymp.atlas.ListTestsOutput
	(*DescribeTestInput)(nil),                  // 44: eolymp.atlas.DescribeTestInput
	(*DescribeTestOutput)(nil),                 // 45: eolymp.atlas.DescribeTestOutput
	(*CreateTestInput)(nil),                    // 46: eolymp.atlas.CreateTestInput
	(*CreateTestOutput)(nil),                   // 47: eolymp.atlas.CreateTestOutput
	(*UpdateTestInput)(nil),                    // 48: eolymp.atlas.UpdateTestInput
	(*UpdateTestOutput)(nil),                   // 49: eolymp.atlas.UpdateTestOutput
	(*DeleteTestInput)(nil),                    // 50: eolymp.atlas.DeleteTestInput
	(*DeleteTestOutput)(nil),                   // 51: eolymp.atlas.DeleteTestOutput
	(*ListPermissionsInput)(nil),               // 52: eolymp.atlas.ListPermissionsInput
	(*ListPermissionsOutput)(nil),              // 53: eolymp.atlas.ListPermissionsOutput
	(*GrantPermissionInput)(nil),               // 54: eolymp.atlas.GrantPermissionInput
	(*GrantPermissionOutput)(nil),              // 55: eolymp.atlas.GrantPermissionOutput
	(*RevokePermissionInput)(nil),              // 56: eolymp.atlas.RevokePermissionInput
	(*RevokePermissionOutput)(nil),             // 57: eolymp.atlas.RevokePermissionOutput
	(*IntrospectPermissionInput)(nil),          // 58: eolymp.atlas.IntrospectPermissionInput
	(*IntrospectPermissionOutput)(nil),         // 59: eolymp.atlas.IntrospectPermissionOutput
	(*CreateCodeTemplateInput)(nil),            // 60: eolymp.atlas.CreateCodeTemplateInput
	(*CreateCodeTemplateOutput)(nil),           // 61: eolymp.atlas.CreateCodeTemplateOutput
	(*UpdateCodeTemplateInput)(nil),            // 62: eolymp.atlas.UpdateCodeTemplateInput
	(*UpdateCodeTemplateOutput)(nil),           // 63: eolymp.atlas.UpdateCodeTemplateOutput
	(*DeleteCodeTemplateInput)(nil),            // 64: eolymp.atlas.DeleteCodeTemplateInput
	(*DeleteCodeTemplateOutput)(nil),           // 65: eolymp.atlas.DeleteCodeTemplateOutput
	(*ListCodeTemplatesInput)(nil),             // 66: eolymp.atlas.ListCodeTemplatesInput
	(*ListCodeTemplatesOutput)(nil),            // 67: eolymp.atlas.ListCodeTemplatesOutput
	(*DescribeCodeTemplateInput)(nil),          // 68: eolymp.atlas.DescribeCodeTemplateInput
	(*DescribeCodeTemplateOutput)(nil),         // 69: eolymp.atlas.DescribeCodeTemplateOutput
	(*CreateAttachmentInput)(nil),              // 70: eolymp.atlas.CreateAttachmentInput
	(*CreateAttachmentOutput)(nil),             // 71: eolymp.atlas.CreateAttachmentOutput
	(*UpdateAttachmentInput)(nil),              // 72: eolymp.atlas.UpdateAttachmentInput
	(*UpdateAttachmentOutput)(nil),             // 73: eolymp.atlas.UpdateAttachmentOutput
	(*DeleteAttachmentInput)(nil),              // 74: eolymp.atlas.DeleteAttachmentInput
	(*DeleteAttachmentOutput)(nil),             // 75: eolymp.atlas.DeleteAttachmentOutput
	(*ListAttachmentsInput)(nil),               // 76: eolymp.atlas.ListAttachmentsInput
	(*ListAttachmentsOutput)(nil),              // 77: eolymp.atlas.ListAttachmentsOutput
	(*DescribeAttachmentInput)(nil),            // 78: eolymp.atlas.DescribeAttachmentInput
	(*DescribeAttachmentOutput)(nil),           // 79: eolymp.atlas.DescribeAttachmentOutput
	(*ListVersionsInput)(nil),                  // 80: eolymp.atlas.ListVersionsInput
	(*ListVersionsOutput)(nil),                 // 81: eolymp.atlas.ListVersionsOutput
	(*ListProblemTopInput)(nil),                // 82: eolymp.atlas.ListProblemTopInput
	(*ListProblemTopOutput)(nil),               // 83: eolymp.atlas.ListProblemTopOutput
	(*DescribeProblemGradingInput)(nil),        // 84: eolymp.atlas.DescribeProblemGradingInput
	(*DescribeProblemGradingOutput)(nil),       // 85: eolymp.atlas.DescribeProblemGradingOutput
	(*CreateSolutionInput)(nil),                // 86: eolymp.atlas.CreateSolutionInput
	(*CreateSolutionOutput)(nil),               // 87: eolymp.atlas.CreateSolutionOutput
	(*UpdateSolutionInput)(nil),                // 88: eolymp.atlas.UpdateSolutionInput
	(*UpdateSolutionOutput)(nil),               // 89: eolymp.atlas.UpdateSolutionOutput
	(*DeleteSolutionInput)(nil),                // 90: eolymp.atlas.DeleteSolutionInput
	(*DeleteSolutionOutput)(nil),               // 91: eolymp.atlas.DeleteSolutionOutput
	(*ListSolutionsInput)(nil),                 // 92: eolymp.atlas.ListSolutionsInput
	(*ListSolutionsOutput)(nil),                // 93: eolymp.atlas.ListSolutionsOutput
	(*DescribeSolutionInput)(nil),              // 94: eolymp.atlas.DescribeSolutionInput
	(*DescribeSolutionOutput)(nil),             // 95: eolymp.atlas.DescribeSolutionOutput
	(*PublishSolutionInput)(nil),               // 96: eolymp.atlas.PublishSolutionInput
	(*PublishSolutionOutput)(nil),              // 97: eolymp.atlas.PublishSolutionOutput
	(*UnpublishSolutionInput)(nil),             // 98: eolymp.atlas.UnpublishSolutionInput
	(*UnpublishSolutionOutput)(nil),            // 99: eolymp.atlas.UnpublishSolutionOutput
	(*ApproveSolutionInput)(nil),               // 100: eolymp.atlas.ApproveSolutionInput
	(*ApproveSolutionOutput)(nil),              // 101: eolymp.atlas.ApproveSolutionOutput
	(*RefuseSolutionInput)(nil),                // 102: eolymp.atlas.RefuseSolutionInput
	(*RefuseSolutionOutput)(nil),               // 103: eolymp.atlas.RefuseSolutionOutput
	(*ListCategoriesInput)(nil),                // 104: eolymp.atlas.ListCategoriesInput
	(*ListCategoriesOutput)(nil),               // 105: eolymp.atlas.ListCategoriesOutput
	(*CreateCategoryInput)(nil),                // 106: eolymp.atlas.CreateCategoryInput
	(*CreateCategoryOutput)(nil),               // 107: eolymp.atlas.CreateCategoryOutput
	(*UpdateCategoryInput)(nil),                // 108: eolymp.atlas.UpdateCategoryInput
	(*UpdateCategoryOutput)(nil),               // 109: eolymp.atlas.UpdateCategoryOutput
	(*DeleteCategoryInput)(nil),                // 110: eolymp.atlas.DeleteCategoryInput
	(*DeleteCategoryOutput)(nil),               // 111: eolymp.atlas.DeleteCategoryOutput
	(*DescribeCategoryInput)(nil),              // 112: eolymp.atlas.DescribeCategoryInput
	(*DescribeCategoryOutput)(nil),             // 113: eolymp.atlas.DescribeCategoryOutput
	(*AssignCategoryInput)(nil),                // 114: eolymp.atlas.AssignCategoryInput
	(*AssignCategoryOutput)(nil),               // 115: eolymp.atlas.AssignCategoryOutput
	(*UnassignCategoryInput)(nil),              // 116: eolymp.atlas.UnassignCategoryInput
	(*UnassignCategoryOutput)(nil),             // 117: eolymp.atlas.UnassignCategoryOutput
	(*CreateSubmissionInput)(nil),              // 118: eolymp.atlas.CreateSubmissionInput
	(*CreateSubmissionOutput)(nil),             // 119: eolymp.atlas.CreateSubmissionOutput
	(*DescribeSubmissionInput)(nil),            // 120: eolymp.atlas.DescribeSubmissionInput
	(*DescribeSubmissionOutput)(nil),           // 121: eolymp.atlas.DescribeSubmissionOutput
	(*RetestSubmissionInput)(nil),              // 122: eolymp.atlas.RetestSubmissionInput
	(*RetestSubmissionOutput)(nil),             // 123: eolymp.atlas.RetestSubmissionOutput
	(*DescribeScoreInput)(nil),                 // 124: eolymp.atlas.DescribeScoreInput
	(*DescribeScoreOutput)(nil),                // 125: eolymp.atlas.DescribeScoreOutput
	(*UpdateVisibilityInput)(nil),              // 126: eolymp.atlas.UpdateVisibilityInput
	(*UpdateVisibilityOutput)(nil),             // 127: eolymp.atlas.UpdateVisibilityOutput
	(*UpdatePrivacyInput)(nil),                 // 128: eolymp.atlas.UpdatePrivacyInput
	(*UpdatePrivacyOutput)(nil),                // 129: eolymp.atlas.UpdatePrivacyOutput
	(*ListProblemsInput_Filter)(nil),           // 130: eolymp.atlas.ListProblemsInput.Filter
	(*ListAttachmentsInput_Filter)(nil),        // 131: eolymp.atlas.ListAttachmentsInput.Filter
	(*ListVersionsInput_Filter)(nil),           // 132: eolymp.atlas.ListVersionsInput.Filter
	(*DescribeProblemGradingOutput_Range)(nil), // 133: eolymp.atlas.DescribeProblemGradingOutput.Range
	(*ListSolutionsInput_Filter)(nil),          // 134: eolymp.atlas.ListSolutionsInput.Filter
	(*ListCategoriesInput_Filter)(nil),         // 135: eolymp.atlas.ListCategoriesInput.Filter
	(*Problem)(nil),                            // 136: eolymp.atlas.Problem
	(*Statement)(nil),                          // 137: eolymp.atlas.Statement
	(*executor.Verifier)(nil),                  // 138: eolymp.executor.Verifier
	(*executor.Interactor)(nil),                // 139: eolymp.executor.Interactor
	(*Testset)(nil),                            // 140: eolymp.atlas.Testset
	(*Test)(nil),                               // 141: eolymp.atlas.Test
	(*Permission)(nil),                         // 142: eolymp.atlas.Permission
	(*Template)(nil),                           // 143: eolymp.atlas.Template
	(*Attachment)(nil),                         // 144: eolymp.atlas.Attachment
	(*Version)(nil),                            // 145: eolymp.atlas.Version
	(*Submission)(nil),                         // 146: eolymp.atlas.Submission
	(*Solution)(nil),                           // 147: eolymp.atlas.Solution
	(*Category)(nil),                           // 148: eolymp.atlas.Category
	(*Score)(nil),                              // 149: eolymp.atlas.Score
	(*wellknown.ExpressionID)(nil),             // 150: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionBool)(nil),           // 151: eolymp.wellknown.ExpressionBool
	(*wellknown.ExpressionInt)(nil),            // 152: eolymp.wellknown.ExpressionInt
	(*wellknown.ExpressionString)(nil),         // 153: eolymp.wellknown.ExpressionString
	(*wellknown.ExpressionTimestamp)(nil),      // 154: eolymp.wellknown.ExpressionTimestamp
	(*wellknown.ExpressionEnum)(nil),           // 155: eolymp.wellknown.ExpressionEnum
}
var file_eolymp_atlas_atlas_proto_depIdxs = []int32{
	130, // 0: eolymp.atlas.ListProblemsInput.filters:type_name -> eolymp.atlas.ListProblemsInput.Filter
	136, // 1: eolymp.atlas.ListProblemsOutput.items:type_name -> eolymp.atlas.Problem
	136, // 2: eolymp.atlas.CreateProblemInput.problem:type_name -> eolymp.atlas.Problem
	137, // 3: eolymp.atlas.CreateProblemInput.statement:type_name -> eolymp.atlas.Statement
	136, // 4: eolymp.atlas.DescribeProblemOutput.problem:type_name -> eolymp.atlas.Problem
	137, // 5: eolymp.atlas.ListStatementsOutput.items:type_name -> eolymp.atlas.Statement
	137, // 6: eolymp.atlas.DescribeStatementOutput.statement:type_name -> eolymp.atlas.Statement
	137, // 7: eolymp.atlas.LookupStatementOutput.statement:type_name -> eolymp.atlas.Statement
	137, // 8: eolymp.atlas.PreviewStatementInput.statement:type_name -> eolymp.atlas.Statement
	137, // 9: eolymp.atlas.PreviewStatementOutput.statement:type_name -> eolymp.atlas.Statement
	137, // 10: eolymp.atlas.CreateStatementInput.statement:type_name -> eolymp.atlas.Statement
	137, // 11: eolymp.atlas.UpdateStatementInput.statement:type_name -> eolymp.atlas.Statement
	138, // 12: eolymp.atlas.UpdateVerifierInput.verifier:type_name -> eolymp.executor.Verifier
	138, // 13: eolymp.atlas.DescribeVerifierOutput.verifier:type_name -> eolymp.executor.Verifier
	139, // 14: eolymp.atlas.UpdateInteractorInput.interactor:type_name -> eolymp.executor.Interactor
	139, // 15: eolymp.atlas.DescribeInteractorOutput.interactor:type_name -> eolymp.executor.Interactor
	140, // 16: eolymp.atlas.ListTestsetsOutput.items:type_name -> eolymp.atlas.Testset
	140, // 17: eolymp.atlas.DescribeTestsetOutput.testset:type_name -> eolymp.atlas.Testset
	140, // 18: eolymp.atlas.CreateTestsetInput.testset:type_name -> eolymp.atlas.Testset
	140, // 19: eolymp.atlas.UpdateTestsetInput.testset:type_name -> eolymp.atlas.Testset
	141, // 20: eolymp.atlas.ListExamplesOutput.examples:type_name -> eolymp.atlas.Test
	141, // 21: eolymp.atlas.ListTestsOutput.items:type_name -> eolymp.atlas.Test
	141, // 22: eolymp.atlas.DescribeTestOutput.test:type_name -> eolymp.atlas.Test
	141, // 23: eolymp.atlas.CreateTestInput.test:type_name -> eolymp.atlas.Test
	141, // 24: eolymp.atlas.UpdateTestInput.test:type_name -> eolymp.atlas.Test
	142, // 25: eolymp.atlas.ListPermissionsOutput.items:type_name -> eolymp.atlas.Permission
	142, // 26: eolymp.atlas.GrantPermissionInput.permission:type_name -> eolymp.atlas.Permission
	142, // 27: eolymp.atlas.IntrospectPermissionOutput.permission:type_name -> eolymp.atlas.Permission
	143, // 28: eolymp.atlas.CreateCodeTemplateInput.template:type_name -> eolymp.atlas.Template
	143, // 29: eolymp.atlas.UpdateCodeTemplateInput.template:type_name -> eolymp.atlas.Template
	143, // 30: eolymp.atlas.ListCodeTemplatesOutput.items:type_name -> eolymp.atlas.Template
	143, // 31: eolymp.atlas.DescribeCodeTemplateOutput.template:type_name -> eolymp.atlas.Template
	144, // 32: eolymp.atlas.CreateAttachmentInput.attachment:type_name -> eolymp.atlas.Attachment
	144, // 33: eolymp.atlas.UpdateAttachmentInput.attachment:type_name -> eolymp.atlas.Attachment
	131, // 34: eolymp.atlas.ListAttachmentsInput.filters:type_name -> eolymp.atlas.ListAttachmentsInput.Filter
	144, // 35: eolymp.atlas.ListAttachmentsOutput.items:type_name -> eolymp.atlas.Attachment
	144, // 36: eolymp.atlas.DescribeAttachmentOutput.attachment:type_name -> eolymp.atlas.Attachment
	132, // 37: eolymp.atlas.ListVersionsInput.filters:type_name -> eolymp.atlas.ListVersionsInput.Filter
	145, // 38: eolymp.atlas.ListVersionsOutput.items:type_name -> eolymp.atlas.Version
	146, // 39: eolymp.atlas.ListProblemTopOutput.items:type_name -> eolymp.atlas.Submission
	133, // 40: eolymp.atlas.DescribeProblemGradingOutput.ranges:type_name -> eolymp.atlas.DescribeProblemGradingOutput.Range
	147, // 41: eolymp.atlas.CreateSolutionInput.solution:type_name -> eolymp.atlas.Solution
	147, // 42: eolymp.atlas.UpdateSolutionInput.solution:type_name -> eolymp.atlas.Solution
	134, // 43: eolymp.atlas.ListSolutionsInput.filters:type_name -> eolymp.atlas.ListSolutionsInput.Filter
	147, // 44: eolymp.atlas.ListSolutionsOutput.items:type_name -> eolymp.atlas.Solution
	147, // 45: eolymp.atlas.DescribeSolutionOutput.solution:type_name -> eolymp.atlas.Solution
	135, // 46: eolymp.atlas.ListCategoriesInput.filters:type_name -> eolymp.atlas.ListCategoriesInput.Filter
	148, // 47: eolymp.atlas.ListCategoriesOutput.items:type_name -> eolymp.atlas.Category
	148, // 48: eolymp.atlas.CreateCategoryInput.category:type_name -> eolymp.atlas.Category
	148, // 49: eolymp.atlas.UpdateCategoryInput.category:type_name -> eolymp.atlas.Category
	148, // 50: eolymp.atlas.DescribeCategoryOutput.category:type_name -> eolymp.atlas.Category
	146, // 51: eolymp.atlas.DescribeSubmissionOutput.submission:type_name -> eolymp.atlas.Submission
	149, // 52: eolymp.atlas.DescribeScoreOutput.score:type_name -> eolymp.atlas.Score
	150, // 53: eolymp.atlas.ListProblemsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	150, // 54: eolymp.atlas.ListProblemsInput.Filter.category_id:type_name -> eolymp.wellknown.ExpressionID
	151, // 55: eolymp.atlas.ListProblemsInput.Filter.is_visible:type_name -> eolymp.wellknown.ExpressionBool
	151, // 56: eolymp.atlas.ListProblemsInput.Filter.is_private:type_name -> eolymp.wellknown.ExpressionBool
	152, // 57: eolymp.atlas.ListProblemsInput.Filter.number:type_name -> eolymp.wellknown.ExpressionInt
	150, // 58: eolymp.atlas.ListAttachmentsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	153, // 59: eolymp.atlas.ListAttachmentsInput.Filter.name:type_name -> eolymp.wellknown.ExpressionString
	152, // 60: eolymp.atlas.ListVersionsInput.Filter.number:type_name -> eolymp.wellknown.ExpressionInt
	150, // 61: eolymp.atlas.ListVersionsInput.Filter.created_by:type_name -> eolymp.wellknown.ExpressionID
	154, // 62: eolymp.atlas.ListVersionsInput.Filter.created_at:type_name -> eolymp.wellknown.ExpressionTimestamp
	155, // 63: eolymp.atlas.ListVersionsInput.Filter.change_op:type_name -> eolymp.wellknown.ExpressionEnum
	153, // 64: eolymp.atlas.ListVersionsInput.Filter.change_path:type_name -> eolymp.wellknown.ExpressionString
	150, // 65: eolymp.atlas.ListSolutionsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	150, // 66: eolymp.atlas.ListSolutionsInput.Filter.problem_id:type_name -> eolymp.wellknown.ExpressionID
	150, // 67: eolymp.atlas.ListSolutionsInput.Filter.author_id:type_name -> eolymp.wellknown.ExpressionID
	155, // 68: eolymp.atlas.ListSolutionsInput.Filter.moderation_status:type_name -> eolymp.wellknown.ExpressionEnum
	151, // 69: eolymp.atlas.ListSolutionsInput.Filter.published:type_name -> eolymp.wellknown.ExpressionBool
	155, // 70: eolymp.atlas.ListSolutionsInput.Filter.lang:type_name -> eolymp.wellknown.ExpressionEnum
	150, // 71: eolymp.atlas.ListCategoriesInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	150, // 72: eolymp.atlas.ListCategoriesInput.Filter.parent_id:type_name -> eolymp.wellknown.ExpressionID
	150, // 73: eolymp.atlas.ListCategoriesInput.Filter.problem_id:type_name -> eolymp.wellknown.ExpressionID
	151, // 74: eolymp.atlas.ListCategoriesInput.Filter.is_visible:type_name -> eolymp.wellknown.ExpressionBool
	2,   // 75: eolymp.atlas.Atlas.CreateProblem:input_type -> eolymp.atlas.CreateProblemInput
	4,   // 76: eolymp.atlas.Atlas.DeleteProblem:input_type -> eolymp.atlas.DeleteProblemInput
	0,   // 77: eolymp.atlas.Atlas.ListProblems:input_type -> eolymp.atlas.ListProblemsInput
	6,   // 78: eolymp.atlas.Atlas.DescribeProblem:input_type -> eolymp.atlas.DescribeProblemInput
	126, // 79: eolymp.atlas.Atlas.UpdateVisibility:input_type -> eolymp.atlas.UpdateVisibilityInput
	128, // 80: eolymp.atlas.Atlas.UpdatePrivacy:input_type -> eolymp.atlas.UpdatePrivacyInput
	40,  // 81: eolymp.atlas.Atlas.ListExamples:input_type -> eolymp.atlas.ListExamplesInput
	22,  // 82: eolymp.atlas.Atlas.UpdateVerifier:input_type -> eolymp.atlas.UpdateVerifierInput
	24,  // 83: eolymp.atlas.Atlas.DescribeVerifier:input_type -> eolymp.atlas.DescribeVerifierInput
	26,  // 84: eolymp.atlas.Atlas.UpdateInteractor:input_type -> eolymp.atlas.UpdateInteractorInput
	28,  // 85: eolymp.atlas.Atlas.DescribeInteractor:input_type -> eolymp.atlas.DescribeInteractorInput
	16,  // 86: eolymp.atlas.Atlas.CreateStatement:input_type -> eolymp.atlas.CreateStatementInput
	18,  // 87: eolymp.atlas.Atlas.UpdateStatement:input_type -> eolymp.atlas.UpdateStatementInput
	20,  // 88: eolymp.atlas.Atlas.DeleteStatement:input_type -> eolymp.atlas.DeleteStatementInput
	8,   // 89: eolymp.atlas.Atlas.ListStatements:input_type -> eolymp.atlas.ListStatementsInput
	10,  // 90: eolymp.atlas.Atlas.DescribeStatement:input_type -> eolymp.atlas.DescribeStatementInput
	12,  // 91: eolymp.atlas.Atlas.LookupStatement:input_type -> eolymp.atlas.LookupStatementInput
	14,  // 92: eolymp.atlas.Atlas.PreviewStatement:input_type -> eolymp.atlas.PreviewStatementInput
	34,  // 93: eolymp.atlas.Atlas.CreateTestset:input_type -> eolymp.atlas.CreateTestsetInput
	36,  // 94: eolymp.atlas.Atlas.UpdateTestset:input_type -> eolymp.atlas.UpdateTestsetInput
	38,  // 95: eolymp.atlas.Atlas.DeleteTestset:input_type -> eolymp.atlas.DeleteTestsetInput
	30,  // 96: eolymp.atlas.Atlas.ListTestsets:input_type -> eolymp.atlas.ListTestsetsInput
	32,  // 97: eolymp.atlas.Atlas.DescribeTestset:input_type -> eolymp.atlas.DescribeTestsetInput
	46,  // 98: eolymp.atlas.Atlas.CreateTest:input_type -> eolymp.atlas.CreateTestInput
	48,  // 99: eolymp.atlas.Atlas.UpdateTest:input_type -> eolymp.atlas.UpdateTestInput
	50,  // 100: eolymp.atlas.Atlas.DeleteTest:input_type -> eolymp.atlas.DeleteTestInput
	42,  // 101: eolymp.atlas.Atlas.ListTests:input_type -> eolymp.atlas.ListTestsInput
	44,  // 102: eolymp.atlas.Atlas.DescribeTest:input_type -> eolymp.atlas.DescribeTestInput
	54,  // 103: eolymp.atlas.Atlas.GrantPermission:input_type -> eolymp.atlas.GrantPermissionInput
	56,  // 104: eolymp.atlas.Atlas.RevokePermission:input_type -> eolymp.atlas.RevokePermissionInput
	52,  // 105: eolymp.atlas.Atlas.ListPermissions:input_type -> eolymp.atlas.ListPermissionsInput
	58,  // 106: eolymp.atlas.Atlas.IntrospectPermission:input_type -> eolymp.atlas.IntrospectPermissionInput
	60,  // 107: eolymp.atlas.Atlas.CreateCodeTemplate:input_type -> eolymp.atlas.CreateCodeTemplateInput
	62,  // 108: eolymp.atlas.Atlas.UpdateCodeTemplate:input_type -> eolymp.atlas.UpdateCodeTemplateInput
	64,  // 109: eolymp.atlas.Atlas.DeleteCodeTemplate:input_type -> eolymp.atlas.DeleteCodeTemplateInput
	66,  // 110: eolymp.atlas.Atlas.ListCodeTemplates:input_type -> eolymp.atlas.ListCodeTemplatesInput
	68,  // 111: eolymp.atlas.Atlas.DescribeCodeTemplate:input_type -> eolymp.atlas.DescribeCodeTemplateInput
	70,  // 112: eolymp.atlas.Atlas.CreateAttachment:input_type -> eolymp.atlas.CreateAttachmentInput
	72,  // 113: eolymp.atlas.Atlas.UpdateAttachment:input_type -> eolymp.atlas.UpdateAttachmentInput
	74,  // 114: eolymp.atlas.Atlas.DeleteAttachment:input_type -> eolymp.atlas.DeleteAttachmentInput
	76,  // 115: eolymp.atlas.Atlas.ListAttachments:input_type -> eolymp.atlas.ListAttachmentsInput
	78,  // 116: eolymp.atlas.Atlas.DescribeAttachment:input_type -> eolymp.atlas.DescribeAttachmentInput
	80,  // 117: eolymp.atlas.Atlas.ListVersions:input_type -> eolymp.atlas.ListVersionsInput
	82,  // 118: eolymp.atlas.Atlas.ListProblemTop:input_type -> eolymp.atlas.ListProblemTopInput
	84,  // 119: eolymp.atlas.Atlas.DescribeProblemGrading:input_type -> eolymp.atlas.DescribeProblemGradingInput
	86,  // 120: eolymp.atlas.Atlas.CreateSolution:input_type -> eolymp.atlas.CreateSolutionInput
	88,  // 121: eolymp.atlas.Atlas.UpdateSolution:input_type -> eolymp.atlas.UpdateSolutionInput
	90,  // 122: eolymp.atlas.Atlas.DeleteSolution:input_type -> eolymp.atlas.DeleteSolutionInput
	92,  // 123: eolymp.atlas.Atlas.ListSolutions:input_type -> eolymp.atlas.ListSolutionsInput
	94,  // 124: eolymp.atlas.Atlas.DescribeSolution:input_type -> eolymp.atlas.DescribeSolutionInput
	96,  // 125: eolymp.atlas.Atlas.PublishSolution:input_type -> eolymp.atlas.PublishSolutionInput
	98,  // 126: eolymp.atlas.Atlas.UnpublishSolution:input_type -> eolymp.atlas.UnpublishSolutionInput
	100, // 127: eolymp.atlas.Atlas.ApproveSolution:input_type -> eolymp.atlas.ApproveSolutionInput
	102, // 128: eolymp.atlas.Atlas.RefuseSolution:input_type -> eolymp.atlas.RefuseSolutionInput
	106, // 129: eolymp.atlas.Atlas.CreateCategory:input_type -> eolymp.atlas.CreateCategoryInput
	108, // 130: eolymp.atlas.Atlas.UpdateCategory:input_type -> eolymp.atlas.UpdateCategoryInput
	110, // 131: eolymp.atlas.Atlas.DeleteCategory:input_type -> eolymp.atlas.DeleteCategoryInput
	104, // 132: eolymp.atlas.Atlas.ListCategories:input_type -> eolymp.atlas.ListCategoriesInput
	112, // 133: eolymp.atlas.Atlas.DescribeCategory:input_type -> eolymp.atlas.DescribeCategoryInput
	114, // 134: eolymp.atlas.Atlas.AssignCategory:input_type -> eolymp.atlas.AssignCategoryInput
	116, // 135: eolymp.atlas.Atlas.UnassignCategory:input_type -> eolymp.atlas.UnassignCategoryInput
	118, // 136: eolymp.atlas.Atlas.CreateSubmission:input_type -> eolymp.atlas.CreateSubmissionInput
	120, // 137: eolymp.atlas.Atlas.DescribeSubmission:input_type -> eolymp.atlas.DescribeSubmissionInput
	122, // 138: eolymp.atlas.Atlas.RetestSubmission:input_type -> eolymp.atlas.RetestSubmissionInput
	124, // 139: eolymp.atlas.Atlas.DescribeScore:input_type -> eolymp.atlas.DescribeScoreInput
	3,   // 140: eolymp.atlas.Atlas.CreateProblem:output_type -> eolymp.atlas.CreateProblemOutput
	5,   // 141: eolymp.atlas.Atlas.DeleteProblem:output_type -> eolymp.atlas.DeleteProblemOutput
	1,   // 142: eolymp.atlas.Atlas.ListProblems:output_type -> eolymp.atlas.ListProblemsOutput
	7,   // 143: eolymp.atlas.Atlas.DescribeProblem:output_type -> eolymp.atlas.DescribeProblemOutput
	127, // 144: eolymp.atlas.Atlas.UpdateVisibility:output_type -> eolymp.atlas.UpdateVisibilityOutput
	129, // 145: eolymp.atlas.Atlas.UpdatePrivacy:output_type -> eolymp.atlas.UpdatePrivacyOutput
	41,  // 146: eolymp.atlas.Atlas.ListExamples:output_type -> eolymp.atlas.ListExamplesOutput
	23,  // 147: eolymp.atlas.Atlas.UpdateVerifier:output_type -> eolymp.atlas.UpdateVerifierOutput
	25,  // 148: eolymp.atlas.Atlas.DescribeVerifier:output_type -> eolymp.atlas.DescribeVerifierOutput
	27,  // 149: eolymp.atlas.Atlas.UpdateInteractor:output_type -> eolymp.atlas.UpdateInteractorOutput
	29,  // 150: eolymp.atlas.Atlas.DescribeInteractor:output_type -> eolymp.atlas.DescribeInteractorOutput
	17,  // 151: eolymp.atlas.Atlas.CreateStatement:output_type -> eolymp.atlas.CreateStatementOutput
	19,  // 152: eolymp.atlas.Atlas.UpdateStatement:output_type -> eolymp.atlas.UpdateStatementOutput
	21,  // 153: eolymp.atlas.Atlas.DeleteStatement:output_type -> eolymp.atlas.DeleteStatementOutput
	9,   // 154: eolymp.atlas.Atlas.ListStatements:output_type -> eolymp.atlas.ListStatementsOutput
	11,  // 155: eolymp.atlas.Atlas.DescribeStatement:output_type -> eolymp.atlas.DescribeStatementOutput
	13,  // 156: eolymp.atlas.Atlas.LookupStatement:output_type -> eolymp.atlas.LookupStatementOutput
	15,  // 157: eolymp.atlas.Atlas.PreviewStatement:output_type -> eolymp.atlas.PreviewStatementOutput
	35,  // 158: eolymp.atlas.Atlas.CreateTestset:output_type -> eolymp.atlas.CreateTestsetOutput
	37,  // 159: eolymp.atlas.Atlas.UpdateTestset:output_type -> eolymp.atlas.UpdateTestsetOutput
	39,  // 160: eolymp.atlas.Atlas.DeleteTestset:output_type -> eolymp.atlas.DeleteTestsetOutput
	31,  // 161: eolymp.atlas.Atlas.ListTestsets:output_type -> eolymp.atlas.ListTestsetsOutput
	33,  // 162: eolymp.atlas.Atlas.DescribeTestset:output_type -> eolymp.atlas.DescribeTestsetOutput
	47,  // 163: eolymp.atlas.Atlas.CreateTest:output_type -> eolymp.atlas.CreateTestOutput
	49,  // 164: eolymp.atlas.Atlas.UpdateTest:output_type -> eolymp.atlas.UpdateTestOutput
	51,  // 165: eolymp.atlas.Atlas.DeleteTest:output_type -> eolymp.atlas.DeleteTestOutput
	43,  // 166: eolymp.atlas.Atlas.ListTests:output_type -> eolymp.atlas.ListTestsOutput
	45,  // 167: eolymp.atlas.Atlas.DescribeTest:output_type -> eolymp.atlas.DescribeTestOutput
	55,  // 168: eolymp.atlas.Atlas.GrantPermission:output_type -> eolymp.atlas.GrantPermissionOutput
	57,  // 169: eolymp.atlas.Atlas.RevokePermission:output_type -> eolymp.atlas.RevokePermissionOutput
	53,  // 170: eolymp.atlas.Atlas.ListPermissions:output_type -> eolymp.atlas.ListPermissionsOutput
	59,  // 171: eolymp.atlas.Atlas.IntrospectPermission:output_type -> eolymp.atlas.IntrospectPermissionOutput
	61,  // 172: eolymp.atlas.Atlas.CreateCodeTemplate:output_type -> eolymp.atlas.CreateCodeTemplateOutput
	63,  // 173: eolymp.atlas.Atlas.UpdateCodeTemplate:output_type -> eolymp.atlas.UpdateCodeTemplateOutput
	65,  // 174: eolymp.atlas.Atlas.DeleteCodeTemplate:output_type -> eolymp.atlas.DeleteCodeTemplateOutput
	67,  // 175: eolymp.atlas.Atlas.ListCodeTemplates:output_type -> eolymp.atlas.ListCodeTemplatesOutput
	69,  // 176: eolymp.atlas.Atlas.DescribeCodeTemplate:output_type -> eolymp.atlas.DescribeCodeTemplateOutput
	71,  // 177: eolymp.atlas.Atlas.CreateAttachment:output_type -> eolymp.atlas.CreateAttachmentOutput
	73,  // 178: eolymp.atlas.Atlas.UpdateAttachment:output_type -> eolymp.atlas.UpdateAttachmentOutput
	75,  // 179: eolymp.atlas.Atlas.DeleteAttachment:output_type -> eolymp.atlas.DeleteAttachmentOutput
	77,  // 180: eolymp.atlas.Atlas.ListAttachments:output_type -> eolymp.atlas.ListAttachmentsOutput
	79,  // 181: eolymp.atlas.Atlas.DescribeAttachment:output_type -> eolymp.atlas.DescribeAttachmentOutput
	81,  // 182: eolymp.atlas.Atlas.ListVersions:output_type -> eolymp.atlas.ListVersionsOutput
	83,  // 183: eolymp.atlas.Atlas.ListProblemTop:output_type -> eolymp.atlas.ListProblemTopOutput
	85,  // 184: eolymp.atlas.Atlas.DescribeProblemGrading:output_type -> eolymp.atlas.DescribeProblemGradingOutput
	87,  // 185: eolymp.atlas.Atlas.CreateSolution:output_type -> eolymp.atlas.CreateSolutionOutput
	89,  // 186: eolymp.atlas.Atlas.UpdateSolution:output_type -> eolymp.atlas.UpdateSolutionOutput
	91,  // 187: eolymp.atlas.Atlas.DeleteSolution:output_type -> eolymp.atlas.DeleteSolutionOutput
	93,  // 188: eolymp.atlas.Atlas.ListSolutions:output_type -> eolymp.atlas.ListSolutionsOutput
	95,  // 189: eolymp.atlas.Atlas.DescribeSolution:output_type -> eolymp.atlas.DescribeSolutionOutput
	97,  // 190: eolymp.atlas.Atlas.PublishSolution:output_type -> eolymp.atlas.PublishSolutionOutput
	99,  // 191: eolymp.atlas.Atlas.UnpublishSolution:output_type -> eolymp.atlas.UnpublishSolutionOutput
	101, // 192: eolymp.atlas.Atlas.ApproveSolution:output_type -> eolymp.atlas.ApproveSolutionOutput
	103, // 193: eolymp.atlas.Atlas.RefuseSolution:output_type -> eolymp.atlas.RefuseSolutionOutput
	107, // 194: eolymp.atlas.Atlas.CreateCategory:output_type -> eolymp.atlas.CreateCategoryOutput
	109, // 195: eolymp.atlas.Atlas.UpdateCategory:output_type -> eolymp.atlas.UpdateCategoryOutput
	111, // 196: eolymp.atlas.Atlas.DeleteCategory:output_type -> eolymp.atlas.DeleteCategoryOutput
	105, // 197: eolymp.atlas.Atlas.ListCategories:output_type -> eolymp.atlas.ListCategoriesOutput
	113, // 198: eolymp.atlas.Atlas.DescribeCategory:output_type -> eolymp.atlas.DescribeCategoryOutput
	115, // 199: eolymp.atlas.Atlas.AssignCategory:output_type -> eolymp.atlas.AssignCategoryOutput
	117, // 200: eolymp.atlas.Atlas.UnassignCategory:output_type -> eolymp.atlas.UnassignCategoryOutput
	119, // 201: eolymp.atlas.Atlas.CreateSubmission:output_type -> eolymp.atlas.CreateSubmissionOutput
	121, // 202: eolymp.atlas.Atlas.DescribeSubmission:output_type -> eolymp.atlas.DescribeSubmissionOutput
	123, // 203: eolymp.atlas.Atlas.RetestSubmission:output_type -> eolymp.atlas.RetestSubmissionOutput
	125, // 204: eolymp.atlas.Atlas.DescribeScore:output_type -> eolymp.atlas.DescribeScoreOutput
	140, // [140:205] is the sub-list for method output_type
	75,  // [75:140] is the sub-list for method input_type
	75,  // [75:75] is the sub-list for extension type_name
	75,  // [75:75] is the sub-list for extension extendee
	0,   // [0:75] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_atlas_proto_init() }
func file_eolymp_atlas_atlas_proto_init() {
	if File_eolymp_atlas_atlas_proto != nil {
		return
	}
	file_eolymp_atlas_attachment_proto_init()
	file_eolymp_atlas_category_proto_init()
	file_eolymp_atlas_permission_proto_init()
	file_eolymp_atlas_problem_proto_init()
	file_eolymp_atlas_score_proto_init()
	file_eolymp_atlas_solution_proto_init()
	file_eolymp_atlas_statement_proto_init()
	file_eolymp_atlas_submission_proto_init()
	file_eolymp_atlas_template_proto_init()
	file_eolymp_atlas_test_proto_init()
	file_eolymp_atlas_testset_proto_init()
	file_eolymp_atlas_version_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_atlas_atlas_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProblemInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProblemOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatementsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatementsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatementInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatementOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVerifierInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVerifierOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVerifierInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVerifierOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInteractorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInteractorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeInteractorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeInteractorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsetsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsetsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamplesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamplesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTestsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPermissionsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantPermissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantPermissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokePermissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokePermissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectPermissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrospectPermissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeTemplateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeTemplateOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeTemplateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCodeTemplateOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeTemplateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeTemplateOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeTemplatesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeTemplatesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCodeTemplateInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCodeTemplateOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttachmentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttachmentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttachmentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttachmentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttachmentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttachmentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttachmentsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttachmentsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAttachmentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAttachmentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVersionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVersionsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemTopInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemTopOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProblemGradingInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProblemGradingOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpublishSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpublishSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuseSolutionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuseSolutionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoriesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoriesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignCategoryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignCategoryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubmissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubmissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSubmissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSubmissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetestSubmissionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetestSubmissionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeScoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVisibilityInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVisibilityOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivacyInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivacyOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProblemsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttachmentsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVersionsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeProblemGradingOutput_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionsInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_atlas_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCategoriesInput_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_atlas_atlas_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   136,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_atlas_atlas_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_atlas_proto_depIdxs,
		MessageInfos:      file_eolymp_atlas_atlas_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_atlas_proto = out.File
	file_eolymp_atlas_atlas_proto_rawDesc = nil
	file_eolymp_atlas_atlas_proto_goTypes = nil
	file_eolymp_atlas_atlas_proto_depIdxs = nil
}
