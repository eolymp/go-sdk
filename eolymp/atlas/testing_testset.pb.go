// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.4
// source: eolymp/atlas/testing_testset.proto

package atlas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Testset_DependencyMode int32

const (
	Testset_UNKNOWN_DEPENDENCY_MODE Testset_DependencyMode = 0
	Testset_FULLY_ACCEPTED          Testset_DependencyMode = 1 // all dependencies must be accepted
	Testset_FIRST_POINT             Testset_DependencyMode = 2 // any of the dependencies must have at least one point
)

// Enum value maps for Testset_DependencyMode.
var (
	Testset_DependencyMode_name = map[int32]string{
		0: "UNKNOWN_DEPENDENCY_MODE",
		1: "FULLY_ACCEPTED",
		2: "FIRST_POINT",
	}
	Testset_DependencyMode_value = map[string]int32{
		"UNKNOWN_DEPENDENCY_MODE": 0,
		"FULLY_ACCEPTED":          1,
		"FIRST_POINT":             2,
	}
)

func (x Testset_DependencyMode) Enum() *Testset_DependencyMode {
	p := new(Testset_DependencyMode)
	*p = x
	return p
}

func (x Testset_DependencyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Testset_DependencyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_testing_testset_proto_enumTypes[0].Descriptor()
}

func (Testset_DependencyMode) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_testing_testset_proto_enumTypes[0]
}

func (x Testset_DependencyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Testset_DependencyMode.Descriptor instead.
func (Testset_DependencyMode) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_testset_proto_rawDescGZIP(), []int{0, 0}
}

type Testset struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Unique identifier. Keep empty when creating new testset.
	VersionId      string                 `protobuf:"bytes,4,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Index          uint32                 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                                         // Index, a sequential number, of the testset within a problem.
	TimeLimit      uint32                 `protobuf:"varint,10,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`               // Time limit in milliseconds for runs within this testset.
	CpuLimit       uint32                 `protobuf:"varint,13,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`                  // Time limit in milliseconds for CPU usage within this testset.
	MemoryLimit    uint64                 `protobuf:"varint,11,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`         // Memory limit in bytes for runs within this testset.
	FileSizeLimit  uint64                 `protobuf:"varint,12,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"` // File size limit in bytes for runs within this testset.
	Dependencies   []uint32               `protobuf:"varint,20,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`                   // List of other testset indices which must pass before this testset is executed.
	DependencyMode Testset_DependencyMode `protobuf:"varint,21,opt,name=dependency_mode,json=dependencyMode,proto3,enum=eolymp.atlas.Testset_DependencyMode" json:"dependency_mode,omitempty"`
	ScoringMode    ScoringMode            `protobuf:"varint,30,opt,name=scoring_mode,json=scoringMode,proto3,enum=eolymp.atlas.ScoringMode" json:"scoring_mode,omitempty"`             // Score mode defines how score points are awarded for this testset. See ScoringMode enumeration for details.
	FeedbackPolicy FeedbackPolicy         `protobuf:"varint,40,opt,name=feedback_policy,json=feedbackPolicy,proto3,enum=eolymp.atlas.FeedbackPolicy" json:"feedback_policy,omitempty"` // Feedback policy defines how result will be shown back to the user
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Testset) Reset() {
	*x = Testset{}
	mi := &file_eolymp_atlas_testing_testset_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Testset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Testset) ProtoMessage() {}

func (x *Testset) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_testset_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Testset.ProtoReflect.Descriptor instead.
func (*Testset) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_testset_proto_rawDescGZIP(), []int{0}
}

func (x *Testset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Testset) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *Testset) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Testset) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Testset) GetCpuLimit() uint32 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *Testset) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Testset) GetFileSizeLimit() uint64 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

func (x *Testset) GetDependencies() []uint32 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Testset) GetDependencyMode() Testset_DependencyMode {
	if x != nil {
		return x.DependencyMode
	}
	return Testset_UNKNOWN_DEPENDENCY_MODE
}

func (x *Testset) GetScoringMode() ScoringMode {
	if x != nil {
		return x.ScoringMode
	}
	return ScoringMode_NO_SCORE
}

func (x *Testset) GetFeedbackPolicy() FeedbackPolicy {
	if x != nil {
		return x.FeedbackPolicy
	}
	return FeedbackPolicy_COMPLETE
}

var File_eolymp_atlas_testing_testset_proto protoreflect.FileDescriptor

const file_eolymp_atlas_testing_testset_proto_rawDesc = "" +
	"\n" +
	"\"eolymp/atlas/testing_testset.proto\x12\feolymp.atlas\x1a#eolymp/atlas/testing_feedback.proto\x1a\"eolymp/atlas/testing_scoring.proto\"\xa1\x04\n" +
	"\aTestset\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"version_id\x18\x04 \x01(\tR\tversionId\x12\x14\n" +
	"\x05index\x18\x03 \x01(\rR\x05index\x12\x1d\n" +
	"\n" +
	"time_limit\x18\n" +
	" \x01(\rR\ttimeLimit\x12\x1b\n" +
	"\tcpu_limit\x18\r \x01(\rR\bcpuLimit\x12!\n" +
	"\fmemory_limit\x18\v \x01(\x04R\vmemoryLimit\x12&\n" +
	"\x0ffile_size_limit\x18\f \x01(\x04R\rfileSizeLimit\x12\"\n" +
	"\fdependencies\x18\x14 \x03(\rR\fdependencies\x12M\n" +
	"\x0fdependency_mode\x18\x15 \x01(\x0e2$.eolymp.atlas.Testset.DependencyModeR\x0edependencyMode\x12<\n" +
	"\fscoring_mode\x18\x1e \x01(\x0e2\x19.eolymp.atlas.ScoringModeR\vscoringMode\x12E\n" +
	"\x0ffeedback_policy\x18( \x01(\x0e2\x1c.eolymp.atlas.FeedbackPolicyR\x0efeedbackPolicy\"R\n" +
	"\x0eDependencyMode\x12\x1b\n" +
	"\x17UNKNOWN_DEPENDENCY_MODE\x10\x00\x12\x12\n" +
	"\x0eFULLY_ACCEPTED\x10\x01\x12\x0f\n" +
	"\vFIRST_POINT\x10\x02B-Z+github.com/eolymp/go-sdk/eolymp/atlas;atlasb\x06proto3"

var (
	file_eolymp_atlas_testing_testset_proto_rawDescOnce sync.Once
	file_eolymp_atlas_testing_testset_proto_rawDescData []byte
)

func file_eolymp_atlas_testing_testset_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_testing_testset_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_testing_testset_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_atlas_testing_testset_proto_rawDesc), len(file_eolymp_atlas_testing_testset_proto_rawDesc)))
	})
	return file_eolymp_atlas_testing_testset_proto_rawDescData
}

var file_eolymp_atlas_testing_testset_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_atlas_testing_testset_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_eolymp_atlas_testing_testset_proto_goTypes = []any{
	(Testset_DependencyMode)(0), // 0: eolymp.atlas.Testset.DependencyMode
	(*Testset)(nil),             // 1: eolymp.atlas.Testset
	(ScoringMode)(0),            // 2: eolymp.atlas.ScoringMode
	(FeedbackPolicy)(0),         // 3: eolymp.atlas.FeedbackPolicy
}
var file_eolymp_atlas_testing_testset_proto_depIdxs = []int32{
	0, // 0: eolymp.atlas.Testset.dependency_mode:type_name -> eolymp.atlas.Testset.DependencyMode
	2, // 1: eolymp.atlas.Testset.scoring_mode:type_name -> eolymp.atlas.ScoringMode
	3, // 2: eolymp.atlas.Testset.feedback_policy:type_name -> eolymp.atlas.FeedbackPolicy
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_testing_testset_proto_init() }
func file_eolymp_atlas_testing_testset_proto_init() {
	if File_eolymp_atlas_testing_testset_proto != nil {
		return
	}
	file_eolymp_atlas_testing_feedback_proto_init()
	file_eolymp_atlas_testing_scoring_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_atlas_testing_testset_proto_rawDesc), len(file_eolymp_atlas_testing_testset_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_atlas_testing_testset_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_testing_testset_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_testing_testset_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_testing_testset_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_testing_testset_proto = out.File
	file_eolymp_atlas_testing_testset_proto_goTypes = nil
	file_eolymp_atlas_testing_testset_proto_depIdxs = nil
}
