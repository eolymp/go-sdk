// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Atlas_HTTPReadQueryString parses body into proto.Message
func _Atlas_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Atlas_HTTPReadRequestBody parses body into proto.Message
func _Atlas_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Atlas_HTTPWriteResponse writes proto.Message to HTTP response
func _Atlas_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Atlas_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Atlas_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Atlas_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterAtlasHttpHandlers adds handlers for for AtlasServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterAtlasHttpHandlers(router *mux.Router, prefix string, srv AtlasServer) {
	router.Handle(prefix+"/problems", _Atlas_CreateProblem_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateProblem")
	router.Handle(prefix+"/problems/{problem_id}", _Atlas_DeleteProblem_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteProblem")
	router.Handle(prefix+"/problems", _Atlas_ListProblems_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListProblems")
	router.Handle(prefix+"/problems/{problem_id}", _Atlas_DescribeProblem_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeProblem")
	router.Handle(prefix+"/problems/{problem_id}/visibility", _Atlas_UpdateVisibility_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdateVisibility")
	router.Handle(prefix+"/problems/{problem_id}/privacy", _Atlas_UpdatePrivacy_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdatePrivacy")
	router.Handle(prefix+"/problems/{problem_id}/examples", _Atlas_ListExamples_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListExamples")
	router.Handle(prefix+"/problems/{problem_id}/verifier", _Atlas_UpdateVerifier_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.UpdateVerifier")
	router.Handle(prefix+"/problems/{problem_id}/verifier", _Atlas_DescribeVerifier_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeVerifier")
	router.Handle(prefix+"/problems/{problem_id}/interactor", _Atlas_UpdateInteractor_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.UpdateInteractor")
	router.Handle(prefix+"/problems/{problem_id}/interactor", _Atlas_DescribeInteractor_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeInteractor")
	router.Handle(prefix+"/problems/{problem_id}/statements", _Atlas_CreateStatement_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.CreateStatement")
	router.Handle(prefix+"/problems/{problem_id}/statements/{statement_id}", _Atlas_UpdateStatement_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.UpdateStatement")
	router.Handle(prefix+"/problems/{problem_id}/statements/{statement_id}", _Atlas_DeleteStatement_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteStatement")
	router.Handle(prefix+"/problems/{problem_id}/statements", _Atlas_ListStatements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListStatements")
	router.Handle(prefix+"/problems/{problem_id}/statements/{statement_id}", _Atlas_DescribeStatement_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeStatement")
	router.Handle(prefix+"/problems/{problem_id}/statements/{statement_id}/render", _Atlas_RenderStatement_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.RenderStatement")
	router.Handle(prefix+"/problems/{problem_id}/renders", _Atlas_PreviewStatement_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.PreviewStatement")
	router.Handle(prefix+"/problems/{problem_id}/testsets", _Atlas_CreateTestset_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateTestset")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}", _Atlas_UpdateTestset_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.UpdateTestset")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}", _Atlas_DeleteTestset_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteTestset")
	router.Handle(prefix+"/problems/{problem_id}/testsets", _Atlas_ListTestsets_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListTestsets")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}", _Atlas_DescribeTestset_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeTestset")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}/tests", _Atlas_CreateTest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateTest")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}/tests/{test_id}", _Atlas_UpdateTest_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.Atlas.UpdateTest")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}/tests/{test_id}", _Atlas_DeleteTest_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteTest")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}/tests", _Atlas_ListTests_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListTests")
	router.Handle(prefix+"/problems/{problem_id}/testsets/{testset_id}/tests/{test_id}", _Atlas_DescribeTest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeTest")
	router.Handle(prefix+"/problems/{problem_id}/permissions", _Atlas_GrantPermission_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.GrantPermission")
	router.Handle(prefix+"/problems/{problem_id}/permissions/{user_id}", _Atlas_RevokePermission_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.RevokePermission")
	router.Handle(prefix+"/problems/{problem_id}/permissions", _Atlas_ListPermissions_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListPermissions")
	router.Handle(prefix+"/problems/{problem_id}/introspect-permission", _Atlas_IntrospectPermission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.IntrospectPermission")
	router.Handle(prefix+"/problems/{problem_id}/templates", _Atlas_CreateCodeTemplate_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/templates/{template_id}", _Atlas_UpdateCodeTemplate_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdateCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/templates/{template_id}", _Atlas_DeleteCodeTemplate_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/templates", _Atlas_ListCodeTemplates_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListCodeTemplates")
	router.Handle(prefix+"/problems/{problem_id}/templates/{template_id}", _Atlas_DescribeCodeTemplate_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeCodeTemplate")
	router.Handle(prefix+"/problems/{problem_id}/attachments", _Atlas_CreateAttachment_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateAttachment")
	router.Handle(prefix+"/problems/{problem_id}/attachments/{attachment_id}", _Atlas_UpdateAttachment_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdateAttachment")
	router.Handle(prefix+"/problems/{problem_id}/attachments/{attachment_id}", _Atlas_DeleteAttachment_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteAttachment")
	router.Handle(prefix+"/problems/{problem_id}/attachments", _Atlas_ListAttachments_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListAttachments")
	router.Handle(prefix+"/problems/{problem_id}/attachments/{attachment_id}", _Atlas_DescribeAttachment_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeAttachment")
	router.Handle(prefix+"/problems/{problem_id}/versions", _Atlas_ListVersions_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListVersions")
	router.Handle(prefix+"/problems/{problem_id}/top", _Atlas_ListProblemTop_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListProblemTop")
	router.Handle(prefix+"/problems/{problem_id}/grading", _Atlas_DescribeProblemGrading_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeProblemGrading")
	router.Handle(prefix+"/problems/{problem_id}/solutions", _Atlas_CreateSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}", _Atlas_UpdateSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdateSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}", _Atlas_DeleteSolution_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions", _Atlas_ListSolutions_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListSolutions")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}", _Atlas_DescribeSolution_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}/publish", _Atlas_PublishSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.PublishSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}/unpublish", _Atlas_UnpublishSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UnpublishSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}/approve", _Atlas_ApproveSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.ApproveSolution")
	router.Handle(prefix+"/problems/{problem_id}/solutions/{solution_id}/refuse", _Atlas_RefuseSolution_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.RefuseSolution")
	router.Handle(prefix+"/categories", _Atlas_CreateCategory_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateCategory")
	router.Handle(prefix+"/categories/{category_id}", _Atlas_UpdateCategory_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.UpdateCategory")
	router.Handle(prefix+"/categories/{category_id}", _Atlas_DeleteCategory_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.DeleteCategory")
	router.Handle(prefix+"/categories", _Atlas_ListCategories_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.ListCategories")
	router.Handle(prefix+"/categories/{category_id}", _Atlas_DescribeCategory_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeCategory")
	router.Handle(prefix+"/categories/{category_id}/problems/{problem_id}", _Atlas_AssignCategory_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.AssignCategory")
	router.Handle(prefix+"/categories/{category_id}/problems/{problem_id}", _Atlas_UnassignCategory_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.Atlas.UnassignCategory")
	router.Handle(prefix+"/problems/{problem_id}/submissions", _Atlas_CreateSubmission_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.CreateSubmission")
	router.Handle(prefix+"/problems/{problem_id}/submissions/{submission_id}", _Atlas_DescribeSubmission_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeSubmission")
	router.Handle(prefix+"/problems/{problem_id}/submissions/{submission_id}/retest", _Atlas_RetestSubmission_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.Atlas.RetestSubmission")
	router.Handle(prefix+"/problems/{problem_id}/scores/{user_id}", _Atlas_DescribeScore_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.Atlas.DescribeScore")
}

func _Atlas_CreateProblem_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteProblem_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListProblems_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeProblem_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateVisibility_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVisibilityInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdateVisibility(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdatePrivacy_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePrivacyInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdatePrivacy(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListExamples_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateVerifier_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVerifierInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdateVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeVerifier_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeVerifierInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateInteractor_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateInteractorInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.UpdateInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeInteractor_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInteractorInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.StatementId = vars["statement_id"]

		out, err := srv.UpdateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.StatementId = vars["statement_id"]

		out, err := srv.DeleteStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListStatements_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeStatementInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.StatementId = vars["statement_id"]

		out, err := srv.DescribeStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RenderStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RenderStatementInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.StatementId = vars["statement_id"]

		out, err := srv.RenderStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_PreviewStatement_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PreviewStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.PreviewStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTestset_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTestset_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]

		out, err := srv.UpdateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTestset_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]

		out, err := srv.DeleteTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTestsets_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsetsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListTestsets(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTestset_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestsetInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]

		out, err := srv.DescribeTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTest_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]

		out, err := srv.CreateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTest_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.UpdateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTest_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.DeleteTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTests_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]

		out, err := srv.ListTests(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTest_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.DescribeTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_GrantPermission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GrantPermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.GrantPermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RevokePermission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RevokePermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.UserId = vars["user_id"]

		out, err := srv.RevokePermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListPermissions_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPermissionsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListPermissions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_IntrospectPermission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectPermissionInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.IntrospectPermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateCodeTemplate_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateCodeTemplate_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		out, err := srv.UpdateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteCodeTemplate_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		out, err := srv.DeleteCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListCodeTemplates_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCodeTemplatesInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListCodeTemplates(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeCodeTemplate_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.TemplateId = vars["template_id"]

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateAttachment_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAttachmentInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateAttachment(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateAttachment_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAttachmentInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.UpdateAttachment(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteAttachment_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAttachmentInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.DeleteAttachment(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListAttachments_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeAttachment_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAttachmentInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.DescribeAttachment(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListVersions_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListVersionsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListVersions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListProblemTop_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemTopInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListProblemTop(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeProblemGrading_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemGradingInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.DescribeProblemGrading(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.UpdateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.DeleteSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListSolutions_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSolutionsInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.ListSolutions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSolutionInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.DescribeSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_PublishSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.PublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UnpublishSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnpublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.UnpublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ApproveSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.ApproveSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RefuseSolution_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RefuseSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SolutionId = vars["solution_id"]

		out, err := srv.RefuseSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CategoryId = vars["category_id"]

		out, err := srv.UpdateCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CategoryId = vars["category_id"]

		out, err := srv.DeleteCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListCategories_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCategoriesInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListCategories(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCategoryInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CategoryId = vars["category_id"]

		out, err := srv.DescribeCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_AssignCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AssignCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CategoryId = vars["category_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.AssignCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UnassignCategory_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnassignCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.CategoryId = vars["category_id"]
		in.ProblemId = vars["problem_id"]

		out, err := srv.UnassignCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateSubmission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeSubmission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RetestSubmission_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RetestSubmissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.SubmissionId = vars["submission_id"]

		out, err := srv.RetestSubmission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeScore_Rule0(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Atlas_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.ProblemId = vars["problem_id"]
		in.UserId = vars["user_id"]

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

type _AtlasHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _AtlasMiddleware = func(ctx context.Context, method string, in proto.Message, handler _AtlasHandler) (out proto.Message, err error)
type AtlasInterceptor struct {
	middleware []_AtlasMiddleware
	server     AtlasServer
}

// NewAtlasInterceptor constructs additional middleware for a server based on annotations in proto files
func NewAtlasInterceptor(srv AtlasServer, middleware ..._AtlasMiddleware) *AtlasInterceptor {
	return &AtlasInterceptor{server: srv, middleware: middleware}
}

func (i *AtlasInterceptor) CreateProblem(ctx context.Context, in *CreateProblemInput) (*CreateProblemOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateProblemInput, got %T", in))
		}

		return i.server.CreateProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateProblem", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateProblemOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (*DeleteProblemOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteProblemInput, got %T", in))
		}

		return i.server.DeleteProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteProblem", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteProblemOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListProblems(ctx context.Context, in *ListProblemsInput) (*ListProblemsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListProblemsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListProblemsInput, got %T", in))
		}

		return i.server.ListProblems(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListProblems", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListProblemsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListProblemsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (*DescribeProblemOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeProblemInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeProblemInput, got %T", in))
		}

		return i.server.DescribeProblem(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeProblem", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeProblemOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeProblemOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateVisibility(ctx context.Context, in *UpdateVisibilityInput) (*UpdateVisibilityOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateVisibilityInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateVisibilityInput, got %T", in))
		}

		return i.server.UpdateVisibility(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateVisibility", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateVisibilityOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateVisibilityOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdatePrivacy(ctx context.Context, in *UpdatePrivacyInput) (*UpdatePrivacyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdatePrivacyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdatePrivacyInput, got %T", in))
		}

		return i.server.UpdatePrivacy(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdatePrivacy", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdatePrivacyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdatePrivacyOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (*ListExamplesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListExamplesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListExamplesInput, got %T", in))
		}

		return i.server.ListExamples(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListExamples", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListExamplesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListExamplesOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateVerifier(ctx context.Context, in *UpdateVerifierInput) (*UpdateVerifierOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateVerifierInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateVerifierInput, got %T", in))
		}

		return i.server.UpdateVerifier(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateVerifier", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateVerifierOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateVerifierOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeVerifier(ctx context.Context, in *DescribeVerifierInput) (*DescribeVerifierOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeVerifierInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeVerifierInput, got %T", in))
		}

		return i.server.DescribeVerifier(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeVerifier", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeVerifierOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeVerifierOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateInteractorInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateInteractorInput, got %T", in))
		}

		return i.server.UpdateInteractor(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateInteractor", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateInteractorOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateInteractorOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeInteractorInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeInteractorInput, got %T", in))
		}

		return i.server.DescribeInteractor(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeInteractor", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeInteractorOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeInteractorOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateStatement(ctx context.Context, in *CreateStatementInput) (*CreateStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateStatementInput, got %T", in))
		}

		return i.server.CreateStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateStatement(ctx context.Context, in *UpdateStatementInput) (*UpdateStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateStatementInput, got %T", in))
		}

		return i.server.UpdateStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteStatement(ctx context.Context, in *DeleteStatementInput) (*DeleteStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteStatementInput, got %T", in))
		}

		return i.server.DeleteStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListStatements(ctx context.Context, in *ListStatementsInput) (*ListStatementsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListStatementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListStatementsInput, got %T", in))
		}

		return i.server.ListStatements(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListStatements", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListStatementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListStatementsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeStatement(ctx context.Context, in *DescribeStatementInput) (*DescribeStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeStatementInput, got %T", in))
		}

		return i.server.DescribeStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) RenderStatement(ctx context.Context, in *RenderStatementInput) (*RenderStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RenderStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RenderStatementInput, got %T", in))
		}

		return i.server.RenderStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.RenderStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RenderStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RenderStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) PreviewStatement(ctx context.Context, in *PreviewStatementInput) (*PreviewStatementOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*PreviewStatementInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *PreviewStatementInput, got %T", in))
		}

		return i.server.PreviewStatement(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.PreviewStatement", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*PreviewStatementOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *PreviewStatementOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateTestset(ctx context.Context, in *CreateTestsetInput) (*CreateTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTestsetInput, got %T", in))
		}

		return i.server.CreateTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateTestset(ctx context.Context, in *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTestsetInput, got %T", in))
		}

		return i.server.UpdateTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteTestset(ctx context.Context, in *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTestsetInput, got %T", in))
		}

		return i.server.DeleteTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListTestsets(ctx context.Context, in *ListTestsetsInput) (*ListTestsetsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTestsetsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTestsetsInput, got %T", in))
		}

		return i.server.ListTestsets(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListTestsets", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTestsetsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTestsetsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeTestset(ctx context.Context, in *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTestsetInput, got %T", in))
		}

		return i.server.DescribeTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateTest(ctx context.Context, in *CreateTestInput) (*CreateTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTestInput, got %T", in))
		}

		return i.server.CreateTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTestOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateTest(ctx context.Context, in *UpdateTestInput) (*UpdateTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTestInput, got %T", in))
		}

		return i.server.UpdateTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTestOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteTest(ctx context.Context, in *DeleteTestInput) (*DeleteTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTestInput, got %T", in))
		}

		return i.server.DeleteTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTestOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListTests(ctx context.Context, in *ListTestsInput) (*ListTestsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTestsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTestsInput, got %T", in))
		}

		return i.server.ListTests(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListTests", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTestsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTestsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeTest(ctx context.Context, in *DescribeTestInput) (*DescribeTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTestInput, got %T", in))
		}

		return i.server.DescribeTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTestOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) GrantPermission(ctx context.Context, in *GrantPermissionInput) (*GrantPermissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*GrantPermissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *GrantPermissionInput, got %T", in))
		}

		return i.server.GrantPermission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.GrantPermission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*GrantPermissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *GrantPermissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) RevokePermission(ctx context.Context, in *RevokePermissionInput) (*RevokePermissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RevokePermissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RevokePermissionInput, got %T", in))
		}

		return i.server.RevokePermission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.RevokePermission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RevokePermissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RevokePermissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListPermissions(ctx context.Context, in *ListPermissionsInput) (*ListPermissionsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListPermissionsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListPermissionsInput, got %T", in))
		}

		return i.server.ListPermissions(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListPermissions", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListPermissionsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListPermissionsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) IntrospectPermission(ctx context.Context, in *IntrospectPermissionInput) (*IntrospectPermissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectPermissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectPermissionInput, got %T", in))
		}

		return i.server.IntrospectPermission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.IntrospectPermission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectPermissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectPermissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateCodeTemplateInput, got %T", in))
		}

		return i.server.CreateCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateCodeTemplate", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateCodeTemplateInput, got %T", in))
		}

		return i.server.UpdateCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateCodeTemplate", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteCodeTemplateInput, got %T", in))
		}

		return i.server.DeleteCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteCodeTemplate", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListCodeTemplatesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListCodeTemplatesInput, got %T", in))
		}

		return i.server.ListCodeTemplates(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListCodeTemplates", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListCodeTemplatesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListCodeTemplatesOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeCodeTemplateInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeCodeTemplateInput, got %T", in))
		}

		return i.server.DescribeCodeTemplate(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeCodeTemplate", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeCodeTemplateOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeCodeTemplateOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateAttachment(ctx context.Context, in *CreateAttachmentInput) (*CreateAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateAttachmentInput, got %T", in))
		}

		return i.server.CreateAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput) (*UpdateAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateAttachmentInput, got %T", in))
		}

		return i.server.UpdateAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput) (*DeleteAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteAttachmentInput, got %T", in))
		}

		return i.server.DeleteAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAttachmentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAttachmentsInput, got %T", in))
		}

		return i.server.ListAttachments(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListAttachments", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAttachmentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAttachmentsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput) (*DescribeAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeAttachmentInput, got %T", in))
		}

		return i.server.DescribeAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListVersions(ctx context.Context, in *ListVersionsInput) (*ListVersionsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListVersionsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListVersionsInput, got %T", in))
		}

		return i.server.ListVersions(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListVersions", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListVersionsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListVersionsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListProblemTop(ctx context.Context, in *ListProblemTopInput) (*ListProblemTopOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListProblemTopInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListProblemTopInput, got %T", in))
		}

		return i.server.ListProblemTop(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListProblemTop", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListProblemTopOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListProblemTopOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeProblemGradingInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeProblemGradingInput, got %T", in))
		}

		return i.server.DescribeProblemGrading(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeProblemGrading", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeProblemGradingOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeProblemGradingOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateSolution(ctx context.Context, in *CreateSolutionInput) (*CreateSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateSolutionInput, got %T", in))
		}

		return i.server.CreateSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateSolution(ctx context.Context, in *UpdateSolutionInput) (*UpdateSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateSolutionInput, got %T", in))
		}

		return i.server.UpdateSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteSolution(ctx context.Context, in *DeleteSolutionInput) (*DeleteSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteSolutionInput, got %T", in))
		}

		return i.server.DeleteSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListSolutions(ctx context.Context, in *ListSolutionsInput) (*ListSolutionsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListSolutionsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListSolutionsInput, got %T", in))
		}

		return i.server.ListSolutions(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListSolutions", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListSolutionsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListSolutionsOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeSolution(ctx context.Context, in *DescribeSolutionInput) (*DescribeSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeSolutionInput, got %T", in))
		}

		return i.server.DescribeSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) PublishSolution(ctx context.Context, in *PublishSolutionInput) (*PublishSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*PublishSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *PublishSolutionInput, got %T", in))
		}

		return i.server.PublishSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.PublishSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*PublishSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *PublishSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UnpublishSolution(ctx context.Context, in *UnpublishSolutionInput) (*UnpublishSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UnpublishSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UnpublishSolutionInput, got %T", in))
		}

		return i.server.UnpublishSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UnpublishSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UnpublishSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UnpublishSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ApproveSolution(ctx context.Context, in *ApproveSolutionInput) (*ApproveSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ApproveSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ApproveSolutionInput, got %T", in))
		}

		return i.server.ApproveSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ApproveSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ApproveSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ApproveSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) RefuseSolution(ctx context.Context, in *RefuseSolutionInput) (*RefuseSolutionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RefuseSolutionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RefuseSolutionInput, got %T", in))
		}

		return i.server.RefuseSolution(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.RefuseSolution", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RefuseSolutionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RefuseSolutionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateCategory(ctx context.Context, in *CreateCategoryInput) (*CreateCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateCategoryInput, got %T", in))
		}

		return i.server.CreateCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UpdateCategory(ctx context.Context, in *UpdateCategoryInput) (*UpdateCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateCategoryInput, got %T", in))
		}

		return i.server.UpdateCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UpdateCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DeleteCategory(ctx context.Context, in *DeleteCategoryInput) (*DeleteCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteCategoryInput, got %T", in))
		}

		return i.server.DeleteCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DeleteCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) ListCategories(ctx context.Context, in *ListCategoriesInput) (*ListCategoriesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListCategoriesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListCategoriesInput, got %T", in))
		}

		return i.server.ListCategories(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.ListCategories", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListCategoriesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListCategoriesOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeCategory(ctx context.Context, in *DescribeCategoryInput) (*DescribeCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeCategoryInput, got %T", in))
		}

		return i.server.DescribeCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) AssignCategory(ctx context.Context, in *AssignCategoryInput) (*AssignCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*AssignCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *AssignCategoryInput, got %T", in))
		}

		return i.server.AssignCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.AssignCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*AssignCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *AssignCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) UnassignCategory(ctx context.Context, in *UnassignCategoryInput) (*UnassignCategoryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UnassignCategoryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UnassignCategoryInput, got %T", in))
		}

		return i.server.UnassignCategory(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.UnassignCategory", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UnassignCategoryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UnassignCategoryOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateSubmissionInput, got %T", in))
		}

		return i.server.CreateSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.CreateSubmission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeSubmissionInput, got %T", in))
		}

		return i.server.DescribeSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeSubmission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) RetestSubmission(ctx context.Context, in *RetestSubmissionInput) (*RetestSubmissionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RetestSubmissionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RetestSubmissionInput, got %T", in))
		}

		return i.server.RetestSubmission(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.RetestSubmission", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RetestSubmissionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RetestSubmissionOutput, got %T", out))
	}

	return message, err
}

func (i *AtlasInterceptor) DescribeScore(ctx context.Context, in *DescribeScoreInput) (*DescribeScoreOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeScoreInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeScoreInput, got %T", in))
		}

		return i.server.DescribeScore(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.Atlas.DescribeScore", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeScoreOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeScoreOutput, got %T", out))
	}

	return message, err
}
