// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	context "context"
	oauth "github.com/eolymp/go-packages/oauth"
	mux "github.com/gorilla/mux"
	prometheus "github.com/prometheus/client_golang/prometheus"
	promauto "github.com/prometheus/client_golang/prometheus/promauto"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	time "time"
)

// _Atlas_HTTPReadRequestBody parses body into proto.Message
func _Atlas_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Atlas_HTTPWriteResponse writes proto.Message to HTTP response
func _Atlas_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Atlas_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Atlas_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Atlas_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewAtlasHandler constructs new http.Handler for AtlasServer
func NewAtlasHandler(srv AtlasServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.atlas.Atlas/CreateProblem", _Atlas_CreateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteProblem", _Atlas_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListProblems", _Atlas_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeProblem", _Atlas_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateVisibility", _Atlas_UpdateVisibility(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdatePrivacy", _Atlas_UpdatePrivacy(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListExamples", _Atlas_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateVerifier", _Atlas_UpdateVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeVerifier", _Atlas_DescribeVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateInteractor", _Atlas_UpdateInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeInteractor", _Atlas_DescribeInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateStatement", _Atlas_CreateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateStatement", _Atlas_UpdateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteStatement", _Atlas_DeleteStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListStatements", _Atlas_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeStatement", _Atlas_DescribeStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateTestset", _Atlas_CreateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateTestset", _Atlas_UpdateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteTestset", _Atlas_DeleteTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListTestsets", _Atlas_ListTestsets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeTestset", _Atlas_DescribeTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateTest", _Atlas_CreateTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateTest", _Atlas_UpdateTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteTest", _Atlas_DeleteTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListTests", _Atlas_ListTests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeTest", _Atlas_DescribeTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/GrantPermission", _Atlas_GrantPermission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/RevokePermission", _Atlas_RevokePermission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListPermissions", _Atlas_ListPermissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateCodeTemplate", _Atlas_CreateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateCodeTemplate", _Atlas_UpdateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteCodeTemplate", _Atlas_DeleteCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListCodeTemplates", _Atlas_ListCodeTemplates(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeCodeTemplate", _Atlas_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeChange", _Atlas_DescribeChange(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListChanges", _Atlas_ListChanges(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListProblemTop", _Atlas_ListProblemTop(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeProblemGrading", _Atlas_DescribeProblemGrading(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateSolution", _Atlas_CreateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateSolution", _Atlas_UpdateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteSolution", _Atlas_DeleteSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListSolutions", _Atlas_ListSolutions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeSolution", _Atlas_DescribeSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/PublishSolution", _Atlas_PublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UnpublishSolution", _Atlas_UnpublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ApproveSolution", _Atlas_ApproveSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/RefuseSolution", _Atlas_RefuseSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateCategory", _Atlas_CreateCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateCategory", _Atlas_UpdateCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteCategory", _Atlas_DeleteCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListCategories", _Atlas_ListCategories(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeCategory", _Atlas_DescribeCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/AssignCategory", _Atlas_AssignCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UnassignCategory", _Atlas_UnassignCategory(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateSubmission", _Atlas_CreateSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeSubmission", _Atlas_DescribeSubmission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeScore", _Atlas_DescribeScore(srv)).Methods(http.MethodPost)
	return router
}

func _Atlas_CreateProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListProblems(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateVisibility(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVisibilityInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateVisibility(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdatePrivacy(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePrivacyInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdatePrivacy(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListExamples(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateVerifier(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVerifierInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeVerifier(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeVerifierInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateInteractor(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateInteractorInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeInteractor(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInteractorInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListStatements(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTestsets(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsetsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTestsets(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTests(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTests(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_GrantPermission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GrantPermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.GrantPermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RevokePermission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RevokePermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RevokePermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListPermissions(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPermissionsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListPermissions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListCodeTemplates(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCodeTemplatesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListCodeTemplates(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeChange(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeChangeInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeChange(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListChanges(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListChangesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListChanges(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListProblemTop(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemTopInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblemTop(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeProblemGrading(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemGradingInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblemGrading(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListSolutions(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSolutionsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSolutions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_PublishSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.PublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UnpublishSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnpublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UnpublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ApproveSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ApproveSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RefuseSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RefuseSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RefuseSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListCategories(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCategoriesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListCategories(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_AssignCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &AssignCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.AssignCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UnassignCategory(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnassignCategoryInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UnassignCategory(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateSubmission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSubmissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSubmission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeSubmission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSubmissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSubmission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeScore(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeScoreInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeScore(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

var promAtlasRequestLatency = promauto.NewHistogramVec(prometheus.HistogramOpts{
	Name:    "atlas_request_latency",
	Help:    "Atlas request latency",
	Buckets: []float64{0.1, 0.4, 1, 5},
}, []string{"method", "status"})

type _AtlasLimiter interface {
	Allow(context.Context, string, float64, int) bool
}

type AtlasInterceptor struct {
	limiter _AtlasLimiter
	server  AtlasServer
}

// NewAtlasInterceptor constructs additional middleware for a server based on annotations in proto files
func NewAtlasInterceptor(srv AtlasServer, lim _AtlasLimiter) *AtlasInterceptor {
	return &AtlasInterceptor{server: srv, limiter: lim}
}

func (i *AtlasInterceptor) CreateProblem(ctx context.Context, in *CreateProblemInput) (out *CreateProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateProblem", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateProblem(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteProblem(ctx context.Context, in *DeleteProblemInput) (out *DeleteProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteProblem", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteProblem(ctx, in)
	return
}

func (i *AtlasInterceptor) ListProblems(ctx context.Context, in *ListProblemsInput) (out *ListProblemsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListProblems", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListProblems", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListProblems(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeProblem(ctx context.Context, in *DescribeProblemInput) (out *DescribeProblemOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeProblem", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeProblem", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeProblem(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateVisibility(ctx context.Context, in *UpdateVisibilityInput) (out *UpdateVisibilityOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateVisibility", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateVisibility", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateVisibility(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdatePrivacy(ctx context.Context, in *UpdatePrivacyInput) (out *UpdatePrivacyOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdatePrivacy", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdatePrivacy", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdatePrivacy(ctx, in)
	return
}

func (i *AtlasInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (out *ListExamplesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListExamples", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListExamples", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListExamples(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateVerifier(ctx context.Context, in *UpdateVerifierInput) (out *UpdateVerifierOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateVerifier", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateVerifier", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateVerifier(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeVerifier(ctx context.Context, in *DescribeVerifierInput) (out *DescribeVerifierOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeVerifier", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeVerifier", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeVerifier(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput) (out *UpdateInteractorOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateInteractor", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateInteractor", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateInteractor(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput) (out *DescribeInteractorOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeInteractor", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeInteractor", 2, 10) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeInteractor(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateStatement(ctx context.Context, in *CreateStatementInput) (out *CreateStatementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateStatement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateStatement", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateStatement(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateStatement(ctx context.Context, in *UpdateStatementInput) (out *UpdateStatementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateStatement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateStatement", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateStatement(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteStatement(ctx context.Context, in *DeleteStatementInput) (out *DeleteStatementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteStatement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteStatement", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteStatement(ctx, in)
	return
}

func (i *AtlasInterceptor) ListStatements(ctx context.Context, in *ListStatementsInput) (out *ListStatementsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListStatements", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListStatements", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListStatements(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeStatement(ctx context.Context, in *DescribeStatementInput) (out *DescribeStatementOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeStatement", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeStatement", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeStatement(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateTestset(ctx context.Context, in *CreateTestsetInput) (out *CreateTestsetOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateTestset", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateTestset", 5, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateTestset(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateTestset(ctx context.Context, in *UpdateTestsetInput) (out *UpdateTestsetOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateTestset", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateTestset", 5, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateTestset(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteTestset(ctx context.Context, in *DeleteTestsetInput) (out *DeleteTestsetOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteTestset", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteTestset", 5, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteTestset(ctx, in)
	return
}

func (i *AtlasInterceptor) ListTestsets(ctx context.Context, in *ListTestsetsInput) (out *ListTestsetsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListTestsets", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListTestsets", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListTestsets(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeTestset(ctx context.Context, in *DescribeTestsetInput) (out *DescribeTestsetOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeTestset", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeTestset", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeTestset(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateTest(ctx context.Context, in *CreateTestInput) (out *CreateTestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateTest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateTest", 10, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateTest(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateTest(ctx context.Context, in *UpdateTestInput) (out *UpdateTestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateTest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateTest", 10, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateTest(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteTest(ctx context.Context, in *DeleteTestInput) (out *DeleteTestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteTest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteTest", 10, 200) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteTest(ctx, in)
	return
}

func (i *AtlasInterceptor) ListTests(ctx context.Context, in *ListTestsInput) (out *ListTestsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListTests", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListTests", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListTests(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeTest(ctx context.Context, in *DescribeTestInput) (out *DescribeTestOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeTest", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeTest", 10, 50) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeTest(ctx, in)
	return
}

func (i *AtlasInterceptor) GrantPermission(ctx context.Context, in *GrantPermissionInput) (out *GrantPermissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/GrantPermission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:permission:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:permission:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/GrantPermission", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.GrantPermission(ctx, in)
	return
}

func (i *AtlasInterceptor) RevokePermission(ctx context.Context, in *RevokePermissionInput) (out *RevokePermissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/RevokePermission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:permission:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:permission:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/RevokePermission", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RevokePermission(ctx, in)
	return
}

func (i *AtlasInterceptor) ListPermissions(ctx context.Context, in *ListPermissionsInput) (out *ListPermissionsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListPermissions", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:permission:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:permission:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListPermissions", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListPermissions(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput) (out *CreateCodeTemplateOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateCodeTemplate", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateCodeTemplate", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateCodeTemplate(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput) (out *UpdateCodeTemplateOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateCodeTemplate", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateCodeTemplate", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateCodeTemplate(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput) (out *DeleteCodeTemplateOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteCodeTemplate", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteCodeTemplate", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteCodeTemplate(ctx, in)
	return
}

func (i *AtlasInterceptor) ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput) (out *ListCodeTemplatesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListCodeTemplates", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListCodeTemplates", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListCodeTemplates(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput) (out *DescribeCodeTemplateOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeCodeTemplate", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeCodeTemplate", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeCodeTemplate(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeChange(ctx context.Context, in *DescribeChangeInput) (out *DescribeChangeOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeChange", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	out, err = i.server.DescribeChange(ctx, in)
	return
}

func (i *AtlasInterceptor) ListChanges(ctx context.Context, in *ListChangesInput) (out *ListChangesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListChanges", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	out, err = i.server.ListChanges(ctx, in)
	return
}

func (i *AtlasInterceptor) ListProblemTop(ctx context.Context, in *ListProblemTopInput) (out *ListProblemTopOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListProblemTop", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	out, err = i.server.ListProblemTop(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput) (out *DescribeProblemGradingOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeProblemGrading", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	out, err = i.server.DescribeProblemGrading(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateSolution(ctx context.Context, in *CreateSolutionInput) (out *CreateSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateSolution", 1, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateSolution(ctx context.Context, in *UpdateSolutionInput) (out *UpdateSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteSolution(ctx context.Context, in *DeleteSolutionInput) (out *DeleteSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) ListSolutions(ctx context.Context, in *ListSolutionsInput) (out *ListSolutionsOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListSolutions", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListSolutions", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListSolutions(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeSolution(ctx context.Context, in *DescribeSolutionInput) (out *DescribeSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeSolution", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) PublishSolution(ctx context.Context, in *PublishSolutionInput) (out *PublishSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/PublishSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/PublishSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.PublishSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) UnpublishSolution(ctx context.Context, in *UnpublishSolutionInput) (out *UnpublishSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UnpublishSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UnpublishSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UnpublishSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) ApproveSolution(ctx context.Context, in *ApproveSolutionInput) (out *ApproveSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ApproveSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ApproveSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ApproveSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) RefuseSolution(ctx context.Context, in *RefuseSolutionInput) (out *RefuseSolutionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/RefuseSolution", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:problem:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:problem:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/RefuseSolution", 1, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.RefuseSolution(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateCategory(ctx context.Context, in *CreateCategoryInput) (out *CreateCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/CreateCategory", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.CreateCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) UpdateCategory(ctx context.Context, in *UpdateCategoryInput) (out *UpdateCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UpdateCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UpdateCategory", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UpdateCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) DeleteCategory(ctx context.Context, in *DeleteCategoryInput) (out *DeleteCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DeleteCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DeleteCategory", 0.16, 5) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DeleteCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) ListCategories(ctx context.Context, in *ListCategoriesInput) (out *ListCategoriesOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/ListCategories", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/ListCategories", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.ListCategories(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeCategory(ctx context.Context, in *DescribeCategoryInput) (out *DescribeCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:read")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/DescribeCategory", 20, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.DescribeCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) AssignCategory(ctx context.Context, in *AssignCategoryInput) (out *AssignCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/AssignCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/AssignCategory", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.AssignCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) UnassignCategory(ctx context.Context, in *UnassignCategoryInput) (out *UnassignCategoryOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/UnassignCategory", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:category:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:category:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.atlas.Atlas/UnassignCategory", 5, 20) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UnassignCategory(ctx, in)
	return
}

func (i *AtlasInterceptor) CreateSubmission(ctx context.Context, in *CreateSubmissionInput) (out *CreateSubmissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/CreateSubmission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:submission:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:submission:write")
		return
	}

	out, err = i.server.CreateSubmission(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput) (out *DescribeSubmissionOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeSubmission", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:submission:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:submission:read")
		return
	}

	out, err = i.server.DescribeSubmission(ctx, in)
	return
}

func (i *AtlasInterceptor) DescribeScore(ctx context.Context, in *DescribeScoreInput) (out *DescribeScoreOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promAtlasRequestLatency.WithLabelValues("eolymp.atlas.Atlas/DescribeScore", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if !ok {
		err = status.Error(codes.Unauthenticated, "unauthenticated")
		return
	}

	if !token.Has("atlas:submission:read") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: atlas:submission:read")
		return
	}

	out, err = i.server.DescribeScore(ctx, in)
	return
}
