// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Atlas_HTTPReadRequestBody parses body into proto.Message
func _Atlas_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Atlas_HTTPWriteResponse writes proto.Message to HTTP response
func _Atlas_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Atlas_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Atlas_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Atlas_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewAtlasHandler constructs new http.Handler for AtlasServer
func NewAtlasHandler(srv AtlasServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateProblem", _Atlas_CreateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateProblem", _Atlas_CreateProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteProblem", _Atlas_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteProblem", _Atlas_DeleteProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListProblems", _Atlas_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListProblems", _Atlas_ListProblems(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeProblem", _Atlas_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeProblem", _Atlas_DescribeProblem(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListExamples", _Atlas_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListExamples", _Atlas_ListExamples(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateVerifier", _Atlas_UpdateVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateVerifier", _Atlas_UpdateVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeVerifier", _Atlas_DescribeVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeVerifier", _Atlas_DescribeVerifier(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateInteractor", _Atlas_UpdateInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateInteractor", _Atlas_UpdateInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeInteractor", _Atlas_DescribeInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeInteractor", _Atlas_DescribeInteractor(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateStatement", _Atlas_CreateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateStatement", _Atlas_CreateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateStatement", _Atlas_UpdateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateStatement", _Atlas_UpdateStatement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteStatement", _Atlas_DeleteStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteStatement", _Atlas_DeleteStatement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListStatements", _Atlas_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListStatements", _Atlas_ListStatements(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeStatement", _Atlas_DescribeStatement(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeStatement", _Atlas_DescribeStatement(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateTestset", _Atlas_CreateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateTestset", _Atlas_CreateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateTestset", _Atlas_UpdateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateTestset", _Atlas_UpdateTestset(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteTestset", _Atlas_DeleteTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteTestset", _Atlas_DeleteTestset(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListTestsets", _Atlas_ListTestsets(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListTestsets", _Atlas_ListTestsets(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeTestset", _Atlas_DescribeTestset(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeTestset", _Atlas_DescribeTestset(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateTest", _Atlas_CreateTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateTest", _Atlas_CreateTest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateTest", _Atlas_UpdateTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateTest", _Atlas_UpdateTest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteTest", _Atlas_DeleteTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteTest", _Atlas_DeleteTest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListTests", _Atlas_ListTests(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListTests", _Atlas_ListTests(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeTest", _Atlas_DescribeTest(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeTest", _Atlas_DescribeTest(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/GrantPermission", _Atlas_GrantPermission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/GrantPermission", _Atlas_GrantPermission(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/RevokePermission", _Atlas_RevokePermission(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/RevokePermission", _Atlas_RevokePermission(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListPermissions", _Atlas_ListPermissions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListPermissions", _Atlas_ListPermissions(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateCodeTemplate", _Atlas_CreateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateCodeTemplate", _Atlas_CreateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateCodeTemplate", _Atlas_UpdateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateCodeTemplate", _Atlas_UpdateCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteCodeTemplate", _Atlas_DeleteCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteCodeTemplate", _Atlas_DeleteCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListCodeTemplates", _Atlas_ListCodeTemplates(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListCodeTemplates", _Atlas_ListCodeTemplates(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeCodeTemplate", _Atlas_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeCodeTemplate", _Atlas_DescribeCodeTemplate(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/CreateSolution", _Atlas_CreateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/CreateSolution", _Atlas_CreateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UpdateSolution", _Atlas_UpdateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UpdateSolution", _Atlas_UpdateSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DeleteSolution", _Atlas_DeleteSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DeleteSolution", _Atlas_DeleteSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ListSolutions", _Atlas_ListSolutions(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ListSolutions", _Atlas_ListSolutions(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/DescribeSolution", _Atlas_DescribeSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/DescribeSolution", _Atlas_DescribeSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/PublishSolution", _Atlas_PublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/PublishSolution", _Atlas_PublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/UnpublishSolution", _Atlas_UnpublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/UnpublishSolution", _Atlas_UnpublishSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/ApproveSolution", _Atlas_ApproveSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/ApproveSolution", _Atlas_ApproveSolution(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.atlas.Atlas/RefuseSolution", _Atlas_RefuseSolution(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.atlas.Atlas/RefuseSolution", _Atlas_RefuseSolution(srv)).Methods(http.MethodPost)
	return router
}

func _Atlas_CreateProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListProblems(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListProblemsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListProblems(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeProblem(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeProblemInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeProblem(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListExamples(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateVerifier(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVerifierInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeVerifier(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeVerifierInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeVerifier(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateInteractor(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateInteractorInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeInteractor(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInteractorInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeInteractor(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListStatements(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListStatementsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListStatements(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeStatement(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeStatementInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeStatement(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTestsets(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsetsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTestsets(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTestset(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestsetInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTestset(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListTests(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTests(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeTest(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeTest(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_GrantPermission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &GrantPermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.GrantPermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RevokePermission(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RevokePermissionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RevokePermission(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListPermissions(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPermissionsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListPermissions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListCodeTemplates(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListCodeTemplatesInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListCodeTemplates(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeCodeTemplate(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeCodeTemplateInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeCodeTemplate(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_CreateSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UpdateSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DeleteSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DeleteSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ListSolutions(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSolutionsInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListSolutions(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_DescribeSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_PublishSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.PublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_UnpublishSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnpublishSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UnpublishSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_ApproveSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ApproveSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ApproveSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}

func _Atlas_RefuseSolution(srv AtlasServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &RefuseSolutionInput{}

		if err := _Atlas_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.RefuseSolution(r.Context(), in)
		if err != nil {
			_Atlas_HTTPWriteErrorResponse(w, err)
			return
		}

		_Atlas_HTTPWriteResponse(w, out)
	})
}
