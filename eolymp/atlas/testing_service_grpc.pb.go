// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/atlas/testing_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestingService_UpdateTestingConfig_FullMethodName   = "/eolymp.atlas.TestingService/UpdateTestingConfig"
	TestingService_DescribeTestingConfig_FullMethodName = "/eolymp.atlas.TestingService/DescribeTestingConfig"
	TestingService_UpdateChecker_FullMethodName         = "/eolymp.atlas.TestingService/UpdateChecker"
	TestingService_DescribeChecker_FullMethodName       = "/eolymp.atlas.TestingService/DescribeChecker"
	TestingService_UpdateInteractor_FullMethodName      = "/eolymp.atlas.TestingService/UpdateInteractor"
	TestingService_DescribeInteractor_FullMethodName    = "/eolymp.atlas.TestingService/DescribeInteractor"
	TestingService_CreateTestset_FullMethodName         = "/eolymp.atlas.TestingService/CreateTestset"
	TestingService_UpdateTestset_FullMethodName         = "/eolymp.atlas.TestingService/UpdateTestset"
	TestingService_DeleteTestset_FullMethodName         = "/eolymp.atlas.TestingService/DeleteTestset"
	TestingService_DescribeTestset_FullMethodName       = "/eolymp.atlas.TestingService/DescribeTestset"
	TestingService_ListTestsets_FullMethodName          = "/eolymp.atlas.TestingService/ListTestsets"
	TestingService_CreateTest_FullMethodName            = "/eolymp.atlas.TestingService/CreateTest"
	TestingService_UpdateTest_FullMethodName            = "/eolymp.atlas.TestingService/UpdateTest"
	TestingService_DeleteTest_FullMethodName            = "/eolymp.atlas.TestingService/DeleteTest"
	TestingService_DescribeTest_FullMethodName          = "/eolymp.atlas.TestingService/DescribeTest"
	TestingService_ListTests_FullMethodName             = "/eolymp.atlas.TestingService/ListTests"
	TestingService_ListExamples_FullMethodName          = "/eolymp.atlas.TestingService/ListExamples"
)

// TestingServiceClient is the client API for TestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestingServiceClient interface {
	UpdateTestingConfig(ctx context.Context, in *UpdateTestingConfigInput, opts ...grpc.CallOption) (*UpdateTestingConfigOutput, error)
	DescribeTestingConfig(ctx context.Context, in *DescribeTestingConfigInput, opts ...grpc.CallOption) (*DescribeTestingConfigOutput, error)
	UpdateChecker(ctx context.Context, in *UpdateCheckerInput, opts ...grpc.CallOption) (*UpdateCheckerOutput, error)
	DescribeChecker(ctx context.Context, in *DescribeCheckerInput, opts ...grpc.CallOption) (*DescribeCheckerOutput, error)
	UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error)
	DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error)
	CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error)
	UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error)
	DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error)
	DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error)
	ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error)
	CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error)
	UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error)
	DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error)
	DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error)
	ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error)
	ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error)
}

type testingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestingServiceClient(cc grpc.ClientConnInterface) TestingServiceClient {
	return &testingServiceClient{cc}
}

func (c *testingServiceClient) UpdateTestingConfig(ctx context.Context, in *UpdateTestingConfigInput, opts ...grpc.CallOption) (*UpdateTestingConfigOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTestingConfigOutput)
	err := c.cc.Invoke(ctx, TestingService_UpdateTestingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DescribeTestingConfig(ctx context.Context, in *DescribeTestingConfigInput, opts ...grpc.CallOption) (*DescribeTestingConfigOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTestingConfigOutput)
	err := c.cc.Invoke(ctx, TestingService_DescribeTestingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UpdateChecker(ctx context.Context, in *UpdateCheckerInput, opts ...grpc.CallOption) (*UpdateCheckerOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCheckerOutput)
	err := c.cc.Invoke(ctx, TestingService_UpdateChecker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DescribeChecker(ctx context.Context, in *DescribeCheckerInput, opts ...grpc.CallOption) (*DescribeCheckerOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeCheckerOutput)
	err := c.cc.Invoke(ctx, TestingService_DescribeChecker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractorOutput)
	err := c.cc.Invoke(ctx, TestingService_UpdateInteractor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeInteractorOutput)
	err := c.cc.Invoke(ctx, TestingService_DescribeInteractor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestsetOutput)
	err := c.cc.Invoke(ctx, TestingService_CreateTestset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTestsetOutput)
	err := c.cc.Invoke(ctx, TestingService_UpdateTestset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestsetOutput)
	err := c.cc.Invoke(ctx, TestingService_DeleteTestset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTestsetOutput)
	err := c.cc.Invoke(ctx, TestingService_DescribeTestset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestsetsOutput)
	err := c.cc.Invoke(ctx, TestingService_ListTestsets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestOutput)
	err := c.cc.Invoke(ctx, TestingService_CreateTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTestOutput)
	err := c.cc.Invoke(ctx, TestingService_UpdateTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestOutput)
	err := c.cc.Invoke(ctx, TestingService_DeleteTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTestOutput)
	err := c.cc.Invoke(ctx, TestingService_DescribeTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestsOutput)
	err := c.cc.Invoke(ctx, TestingService_ListTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExamplesOutput)
	err := c.cc.Invoke(ctx, TestingService_ListExamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestingServiceServer is the server API for TestingService service.
// All implementations should embed UnimplementedTestingServiceServer
// for forward compatibility.
type TestingServiceServer interface {
	UpdateTestingConfig(context.Context, *UpdateTestingConfigInput) (*UpdateTestingConfigOutput, error)
	DescribeTestingConfig(context.Context, *DescribeTestingConfigInput) (*DescribeTestingConfigOutput, error)
	UpdateChecker(context.Context, *UpdateCheckerInput) (*UpdateCheckerOutput, error)
	DescribeChecker(context.Context, *DescribeCheckerInput) (*DescribeCheckerOutput, error)
	UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error)
	DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error)
	CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error)
	UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error)
	DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error)
	DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error)
	ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error)
	CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error)
	UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error)
	DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error)
	DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error)
	ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error)
	ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error)
}

// UnimplementedTestingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestingServiceServer struct{}

func (UnimplementedTestingServiceServer) UpdateTestingConfig(context.Context, *UpdateTestingConfigInput) (*UpdateTestingConfigOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestingConfig not implemented")
}
func (UnimplementedTestingServiceServer) DescribeTestingConfig(context.Context, *DescribeTestingConfigInput) (*DescribeTestingConfigOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTestingConfig not implemented")
}
func (UnimplementedTestingServiceServer) UpdateChecker(context.Context, *UpdateCheckerInput) (*UpdateCheckerOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChecker not implemented")
}
func (UnimplementedTestingServiceServer) DescribeChecker(context.Context, *DescribeCheckerInput) (*DescribeCheckerOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChecker not implemented")
}
func (UnimplementedTestingServiceServer) UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInteractor not implemented")
}
func (UnimplementedTestingServiceServer) DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeInteractor not implemented")
}
func (UnimplementedTestingServiceServer) CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestset not implemented")
}
func (UnimplementedTestingServiceServer) UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestset not implemented")
}
func (UnimplementedTestingServiceServer) DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestset not implemented")
}
func (UnimplementedTestingServiceServer) DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTestset not implemented")
}
func (UnimplementedTestingServiceServer) ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestsets not implemented")
}
func (UnimplementedTestingServiceServer) CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedTestingServiceServer) UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedTestingServiceServer) DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}
func (UnimplementedTestingServiceServer) DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTest not implemented")
}
func (UnimplementedTestingServiceServer) ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedTestingServiceServer) ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamples not implemented")
}
func (UnimplementedTestingServiceServer) testEmbeddedByValue() {}

// UnsafeTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestingServiceServer will
// result in compilation errors.
type UnsafeTestingServiceServer interface {
	mustEmbedUnimplementedTestingServiceServer()
}

func RegisterTestingServiceServer(s grpc.ServiceRegistrar, srv TestingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestingService_ServiceDesc, srv)
}

func _TestingService_UpdateTestingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestingConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UpdateTestingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_UpdateTestingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UpdateTestingConfig(ctx, req.(*UpdateTestingConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DescribeTestingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestingConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DescribeTestingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DescribeTestingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DescribeTestingConfig(ctx, req.(*DescribeTestingConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UpdateChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UpdateChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_UpdateChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UpdateChecker(ctx, req.(*UpdateCheckerInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DescribeChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCheckerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DescribeChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DescribeChecker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DescribeChecker(ctx, req.(*DescribeCheckerInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UpdateInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UpdateInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_UpdateInteractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UpdateInteractor(ctx, req.(*UpdateInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DescribeInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DescribeInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DescribeInteractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DescribeInteractor(ctx, req.(*DescribeInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_CreateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).CreateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_CreateTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).CreateTestset(ctx, req.(*CreateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UpdateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UpdateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_UpdateTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UpdateTestset(ctx, req.(*UpdateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DeleteTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DeleteTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DeleteTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DeleteTestset(ctx, req.(*DeleteTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DescribeTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DescribeTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DescribeTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DescribeTestset(ctx, req.(*DescribeTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_ListTestsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).ListTestsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_ListTestsets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).ListTestsets(ctx, req.(*ListTestsetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_CreateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).CreateTest(ctx, req.(*CreateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_UpdateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UpdateTest(ctx, req.(*UpdateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DeleteTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DeleteTest(ctx, req.(*DeleteTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_DescribeTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).DescribeTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_DescribeTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).DescribeTest(ctx, req.(*DescribeTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_ListTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).ListTests(ctx, req.(*ListTestsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_ListExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamplesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).ListExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_ListExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).ListExamples(ctx, req.(*ListExamplesInput))
	}
	return interceptor(ctx, in, info, handler)
}

// TestingService_ServiceDesc is the grpc.ServiceDesc for TestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.TestingService",
	HandlerType: (*TestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTestingConfig",
			Handler:    _TestingService_UpdateTestingConfig_Handler,
		},
		{
			MethodName: "DescribeTestingConfig",
			Handler:    _TestingService_DescribeTestingConfig_Handler,
		},
		{
			MethodName: "UpdateChecker",
			Handler:    _TestingService_UpdateChecker_Handler,
		},
		{
			MethodName: "DescribeChecker",
			Handler:    _TestingService_DescribeChecker_Handler,
		},
		{
			MethodName: "UpdateInteractor",
			Handler:    _TestingService_UpdateInteractor_Handler,
		},
		{
			MethodName: "DescribeInteractor",
			Handler:    _TestingService_DescribeInteractor_Handler,
		},
		{
			MethodName: "CreateTestset",
			Handler:    _TestingService_CreateTestset_Handler,
		},
		{
			MethodName: "UpdateTestset",
			Handler:    _TestingService_UpdateTestset_Handler,
		},
		{
			MethodName: "DeleteTestset",
			Handler:    _TestingService_DeleteTestset_Handler,
		},
		{
			MethodName: "DescribeTestset",
			Handler:    _TestingService_DescribeTestset_Handler,
		},
		{
			MethodName: "ListTestsets",
			Handler:    _TestingService_ListTestsets_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _TestingService_CreateTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _TestingService_UpdateTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _TestingService_DeleteTest_Handler,
		},
		{
			MethodName: "DescribeTest",
			Handler:    _TestingService_DescribeTest_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _TestingService_ListTests_Handler,
		},
		{
			MethodName: "ListExamples",
			Handler:    _TestingService_ListExamples_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/testing_service.proto",
}
