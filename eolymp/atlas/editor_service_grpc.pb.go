// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/atlas/editor_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EditorService_DescribeState_FullMethodName = "/eolymp.atlas.EditorService/DescribeState"
	EditorService_UpdateState_FullMethodName   = "/eolymp.atlas.EditorService/UpdateState"
)

// EditorServiceClient is the client API for EditorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EditorServiceClient interface {
	DescribeState(ctx context.Context, in *DescribeStateInput, opts ...grpc.CallOption) (*DescribeStateOutput, error)
	UpdateState(ctx context.Context, in *UpdateStateInput, opts ...grpc.CallOption) (*UpdateStateOutput, error)
}

type editorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEditorServiceClient(cc grpc.ClientConnInterface) EditorServiceClient {
	return &editorServiceClient{cc}
}

func (c *editorServiceClient) DescribeState(ctx context.Context, in *DescribeStateInput, opts ...grpc.CallOption) (*DescribeStateOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeStateOutput)
	err := c.cc.Invoke(ctx, EditorService_DescribeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorServiceClient) UpdateState(ctx context.Context, in *UpdateStateInput, opts ...grpc.CallOption) (*UpdateStateOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStateOutput)
	err := c.cc.Invoke(ctx, EditorService_UpdateState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditorServiceServer is the server API for EditorService service.
// All implementations should embed UnimplementedEditorServiceServer
// for forward compatibility.
type EditorServiceServer interface {
	DescribeState(context.Context, *DescribeStateInput) (*DescribeStateOutput, error)
	UpdateState(context.Context, *UpdateStateInput) (*UpdateStateOutput, error)
}

// UnimplementedEditorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEditorServiceServer struct{}

func (UnimplementedEditorServiceServer) DescribeState(context.Context, *DescribeStateInput) (*DescribeStateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeState not implemented")
}
func (UnimplementedEditorServiceServer) UpdateState(context.Context, *UpdateStateInput) (*UpdateStateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedEditorServiceServer) testEmbeddedByValue() {}

// UnsafeEditorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EditorServiceServer will
// result in compilation errors.
type UnsafeEditorServiceServer interface {
	mustEmbedUnimplementedEditorServiceServer()
}

func RegisterEditorServiceServer(s grpc.ServiceRegistrar, srv EditorServiceServer) {
	// If the following call pancis, it indicates UnimplementedEditorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EditorService_ServiceDesc, srv)
}

func _EditorService_DescribeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServiceServer).DescribeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorService_DescribeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServiceServer).DescribeState(ctx, req.(*DescribeStateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorService_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServiceServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorService_UpdateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServiceServer).UpdateState(ctx, req.(*UpdateStateInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EditorService_ServiceDesc is the grpc.ServiceDesc for EditorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EditorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.EditorService",
	HandlerType: (*EditorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeState",
			Handler:    _EditorService_DescribeState_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _EditorService_UpdateState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/editor_service.proto",
}
