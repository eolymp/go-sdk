// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _AttachmentService_HTTPReadQueryString parses body into proto.Message
func _AttachmentService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _AttachmentService_HTTPReadRequestBody parses body into proto.Message
func _AttachmentService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _AttachmentService_HTTPWriteResponse writes proto.Message to HTTP response
func _AttachmentService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_AttachmentService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _AttachmentService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _AttachmentService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterAttachmentServiceHttpHandlers adds handlers for for AttachmentServiceServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterAttachmentServiceHttpHandlers(router *mux.Router, prefix string, srv AttachmentServiceServer) {
	router.Handle(prefix+"/attachments", _AttachmentService_CreateAttachment_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.AttachmentService.CreateAttachment")
	router.Handle(prefix+"/attachments/{attachment_id}", _AttachmentService_UpdateAttachment_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.AttachmentService.UpdateAttachment")
	router.Handle(prefix+"/attachments/{attachment_id}", _AttachmentService_DeleteAttachment_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.AttachmentService.DeleteAttachment")
	router.Handle(prefix+"/attachments", _AttachmentService_ListAttachments_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.AttachmentService.ListAttachments")
	router.Handle(prefix+"/attachments/{attachment_id}", _AttachmentService_DescribeAttachment_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.AttachmentService.DescribeAttachment")
}

func _AttachmentService_CreateAttachment_Rule0(srv AttachmentServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAttachmentInput{}

		if err := _AttachmentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAttachment(r.Context(), in)
		if err != nil {
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttachmentService_HTTPWriteResponse(w, out)
	})
}

func _AttachmentService_UpdateAttachment_Rule0(srv AttachmentServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateAttachmentInput{}

		if err := _AttachmentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.UpdateAttachment(r.Context(), in)
		if err != nil {
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttachmentService_HTTPWriteResponse(w, out)
	})
}

func _AttachmentService_DeleteAttachment_Rule0(srv AttachmentServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAttachmentInput{}

		if err := _AttachmentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.DeleteAttachment(r.Context(), in)
		if err != nil {
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttachmentService_HTTPWriteResponse(w, out)
	})
}

func _AttachmentService_ListAttachments_Rule0(srv AttachmentServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAttachmentsInput{}

		if err := _AttachmentService_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAttachments(r.Context(), in)
		if err != nil {
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttachmentService_HTTPWriteResponse(w, out)
	})
}

func _AttachmentService_DescribeAttachment_Rule0(srv AttachmentServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeAttachmentInput{}

		if err := _AttachmentService_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.AttachmentId = vars["attachment_id"]

		out, err := srv.DescribeAttachment(r.Context(), in)
		if err != nil {
			_AttachmentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_AttachmentService_HTTPWriteResponse(w, out)
	})
}

type _AttachmentServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _AttachmentServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _AttachmentServiceHandler) (out proto.Message, err error)
type AttachmentServiceInterceptor struct {
	middleware []_AttachmentServiceMiddleware
	server     AttachmentServiceServer
}

// NewAttachmentServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewAttachmentServiceInterceptor(srv AttachmentServiceServer, middleware ..._AttachmentServiceMiddleware) *AttachmentServiceInterceptor {
	return &AttachmentServiceInterceptor{server: srv, middleware: middleware}
}

func (i *AttachmentServiceInterceptor) CreateAttachment(ctx context.Context, in *CreateAttachmentInput) (*CreateAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateAttachmentInput, got %T", in))
		}

		return i.server.CreateAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.AttachmentService.CreateAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AttachmentServiceInterceptor) UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput) (*UpdateAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateAttachmentInput, got %T", in))
		}

		return i.server.UpdateAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.AttachmentService.UpdateAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AttachmentServiceInterceptor) DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput) (*DeleteAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteAttachmentInput, got %T", in))
		}

		return i.server.DeleteAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.AttachmentService.DeleteAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteAttachmentOutput, got %T", out))
	}

	return message, err
}

func (i *AttachmentServiceInterceptor) ListAttachments(ctx context.Context, in *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAttachmentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAttachmentsInput, got %T", in))
		}

		return i.server.ListAttachments(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.AttachmentService.ListAttachments", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAttachmentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAttachmentsOutput, got %T", out))
	}

	return message, err
}

func (i *AttachmentServiceInterceptor) DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput) (*DescribeAttachmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeAttachmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeAttachmentInput, got %T", in))
		}

		return i.server.DescribeAttachment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.AttachmentService.DescribeAttachment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeAttachmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeAttachmentOutput, got %T", out))
	}

	return message, err
}
