// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.4
// source: eolymp/atlas/testing_validator.proto

package atlas

import (
	executor "github.com/eolymp/go-sdk/eolymp/executor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Interactor provides configuration for program which would interact with task during execution
type Validator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionId     string                 `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Secret        bool                   `protobuf:"varint,7,opt,name=secret,proto3" json:"secret,omitempty"`  // Secret means checker code and configuration must not be exposed to users
	Runtime       string                 `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"` // Programming language in which interactor is written
	Source        string                 `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`   // Source code for interactor
	Files         []*executor.File       `protobuf:"bytes,10,rep,name=files,proto3" json:"files,omitempty"`    // Additional files placed into workdir during compilation and execution
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Validator) Reset() {
	*x = Validator{}
	mi := &file_eolymp_atlas_testing_validator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_validator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_validator_proto_rawDescGZIP(), []int{0}
}

func (x *Validator) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *Validator) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

func (x *Validator) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Validator) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Validator) GetFiles() []*executor.File {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_eolymp_atlas_testing_validator_proto protoreflect.FileDescriptor

const file_eolymp_atlas_testing_validator_proto_rawDesc = "" +
	"\n" +
	"$eolymp/atlas/testing_validator.proto\x12\feolymp.atlas\x1a\x1aeolymp/executor/file.proto\"\xa1\x01\n" +
	"\tValidator\x12\x1d\n" +
	"\n" +
	"version_id\x18\x03 \x01(\tR\tversionId\x12\x16\n" +
	"\x06secret\x18\a \x01(\bR\x06secret\x12\x18\n" +
	"\aruntime\x18\x02 \x01(\tR\aruntime\x12\x16\n" +
	"\x06source\x18\b \x01(\tR\x06source\x12+\n" +
	"\x05files\x18\n" +
	" \x03(\v2\x15.eolymp.executor.FileR\x05filesB-Z+github.com/eolymp/go-sdk/eolymp/atlas;atlasb\x06proto3"

var (
	file_eolymp_atlas_testing_validator_proto_rawDescOnce sync.Once
	file_eolymp_atlas_testing_validator_proto_rawDescData []byte
)

func file_eolymp_atlas_testing_validator_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_testing_validator_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_testing_validator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_atlas_testing_validator_proto_rawDesc), len(file_eolymp_atlas_testing_validator_proto_rawDesc)))
	})
	return file_eolymp_atlas_testing_validator_proto_rawDescData
}

var file_eolymp_atlas_testing_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_eolymp_atlas_testing_validator_proto_goTypes = []any{
	(*Validator)(nil),     // 0: eolymp.atlas.Validator
	(*executor.File)(nil), // 1: eolymp.executor.File
}
var file_eolymp_atlas_testing_validator_proto_depIdxs = []int32{
	1, // 0: eolymp.atlas.Validator.files:type_name -> eolymp.executor.File
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_testing_validator_proto_init() }
func file_eolymp_atlas_testing_validator_proto_init() {
	if File_eolymp_atlas_testing_validator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_atlas_testing_validator_proto_rawDesc), len(file_eolymp_atlas_testing_validator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_atlas_testing_validator_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_testing_validator_proto_depIdxs,
		MessageInfos:      file_eolymp_atlas_testing_validator_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_testing_validator_proto = out.File
	file_eolymp_atlas_testing_validator_proto_goTypes = nil
	file_eolymp_atlas_testing_validator_proto_depIdxs = nil
}
