// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/atlas/editorial_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EditorialService_CreateEditorial_FullMethodName   = "/eolymp.atlas.EditorialService/CreateEditorial"
	EditorialService_UpdateEditorial_FullMethodName   = "/eolymp.atlas.EditorialService/UpdateEditorial"
	EditorialService_DeleteEditorial_FullMethodName   = "/eolymp.atlas.EditorialService/DeleteEditorial"
	EditorialService_DescribeEditorial_FullMethodName = "/eolymp.atlas.EditorialService/DescribeEditorial"
	EditorialService_LookupEditorial_FullMethodName   = "/eolymp.atlas.EditorialService/LookupEditorial"
	EditorialService_PreviewEditorial_FullMethodName  = "/eolymp.atlas.EditorialService/PreviewEditorial"
	EditorialService_ListEditorials_FullMethodName    = "/eolymp.atlas.EditorialService/ListEditorials"
)

// EditorialServiceClient is the client API for EditorialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EditorialServiceClient interface {
	CreateEditorial(ctx context.Context, in *CreateEditorialInput, opts ...grpc.CallOption) (*CreateEditorialOutput, error)
	UpdateEditorial(ctx context.Context, in *UpdateEditorialInput, opts ...grpc.CallOption) (*UpdateEditorialOutput, error)
	DeleteEditorial(ctx context.Context, in *DeleteEditorialInput, opts ...grpc.CallOption) (*DeleteEditorialOutput, error)
	// DescribeEditorial returns editorial.
	DescribeEditorial(ctx context.Context, in *DescribeEditorialInput, opts ...grpc.CallOption) (*DescribeEditorialOutput, error)
	// LookupEditorial finds an editorial for the requested locale.
	LookupEditorial(ctx context.Context, in *LookupEditorialInput, opts ...grpc.CallOption) (*LookupEditorialOutput, error)
	// PreviewEditorial renders unsaved editorial.
	//
	// This method can be used to render editorial before it has been saved.
	PreviewEditorial(ctx context.Context, in *PreviewEditorialInput, opts ...grpc.CallOption) (*PreviewEditorialOutput, error)
	ListEditorials(ctx context.Context, in *ListEditorialsInput, opts ...grpc.CallOption) (*ListEditorialsOutput, error)
}

type editorialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEditorialServiceClient(cc grpc.ClientConnInterface) EditorialServiceClient {
	return &editorialServiceClient{cc}
}

func (c *editorialServiceClient) CreateEditorial(ctx context.Context, in *CreateEditorialInput, opts ...grpc.CallOption) (*CreateEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_CreateEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) UpdateEditorial(ctx context.Context, in *UpdateEditorialInput, opts ...grpc.CallOption) (*UpdateEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_UpdateEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) DeleteEditorial(ctx context.Context, in *DeleteEditorialInput, opts ...grpc.CallOption) (*DeleteEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_DeleteEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) DescribeEditorial(ctx context.Context, in *DescribeEditorialInput, opts ...grpc.CallOption) (*DescribeEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_DescribeEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) LookupEditorial(ctx context.Context, in *LookupEditorialInput, opts ...grpc.CallOption) (*LookupEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_LookupEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) PreviewEditorial(ctx context.Context, in *PreviewEditorialInput, opts ...grpc.CallOption) (*PreviewEditorialOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviewEditorialOutput)
	err := c.cc.Invoke(ctx, EditorialService_PreviewEditorial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editorialServiceClient) ListEditorials(ctx context.Context, in *ListEditorialsInput, opts ...grpc.CallOption) (*ListEditorialsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEditorialsOutput)
	err := c.cc.Invoke(ctx, EditorialService_ListEditorials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditorialServiceServer is the server API for EditorialService service.
// All implementations should embed UnimplementedEditorialServiceServer
// for forward compatibility.
type EditorialServiceServer interface {
	CreateEditorial(context.Context, *CreateEditorialInput) (*CreateEditorialOutput, error)
	UpdateEditorial(context.Context, *UpdateEditorialInput) (*UpdateEditorialOutput, error)
	DeleteEditorial(context.Context, *DeleteEditorialInput) (*DeleteEditorialOutput, error)
	// DescribeEditorial returns editorial.
	DescribeEditorial(context.Context, *DescribeEditorialInput) (*DescribeEditorialOutput, error)
	// LookupEditorial finds an editorial for the requested locale.
	LookupEditorial(context.Context, *LookupEditorialInput) (*LookupEditorialOutput, error)
	// PreviewEditorial renders unsaved editorial.
	//
	// This method can be used to render editorial before it has been saved.
	PreviewEditorial(context.Context, *PreviewEditorialInput) (*PreviewEditorialOutput, error)
	ListEditorials(context.Context, *ListEditorialsInput) (*ListEditorialsOutput, error)
}

// UnimplementedEditorialServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEditorialServiceServer struct{}

func (UnimplementedEditorialServiceServer) CreateEditorial(context.Context, *CreateEditorialInput) (*CreateEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) UpdateEditorial(context.Context, *UpdateEditorialInput) (*UpdateEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) DeleteEditorial(context.Context, *DeleteEditorialInput) (*DeleteEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) DescribeEditorial(context.Context, *DescribeEditorialInput) (*DescribeEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) LookupEditorial(context.Context, *LookupEditorialInput) (*LookupEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) PreviewEditorial(context.Context, *PreviewEditorialInput) (*PreviewEditorialOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewEditorial not implemented")
}
func (UnimplementedEditorialServiceServer) ListEditorials(context.Context, *ListEditorialsInput) (*ListEditorialsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEditorials not implemented")
}
func (UnimplementedEditorialServiceServer) testEmbeddedByValue() {}

// UnsafeEditorialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EditorialServiceServer will
// result in compilation errors.
type UnsafeEditorialServiceServer interface {
	mustEmbedUnimplementedEditorialServiceServer()
}

func RegisterEditorialServiceServer(s grpc.ServiceRegistrar, srv EditorialServiceServer) {
	// If the following call pancis, it indicates UnimplementedEditorialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EditorialService_ServiceDesc, srv)
}

func _EditorialService_CreateEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).CreateEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_CreateEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).CreateEditorial(ctx, req.(*CreateEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_UpdateEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).UpdateEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_UpdateEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).UpdateEditorial(ctx, req.(*UpdateEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_DeleteEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).DeleteEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_DeleteEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).DeleteEditorial(ctx, req.(*DeleteEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_DescribeEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).DescribeEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_DescribeEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).DescribeEditorial(ctx, req.(*DescribeEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_LookupEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).LookupEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_LookupEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).LookupEditorial(ctx, req.(*LookupEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_PreviewEditorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewEditorialInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).PreviewEditorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_PreviewEditorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).PreviewEditorial(ctx, req.(*PreviewEditorialInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditorialService_ListEditorials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEditorialsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorialServiceServer).ListEditorials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EditorialService_ListEditorials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorialServiceServer).ListEditorials(ctx, req.(*ListEditorialsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EditorialService_ServiceDesc is the grpc.ServiceDesc for EditorialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EditorialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.EditorialService",
	HandlerType: (*EditorialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEditorial",
			Handler:    _EditorialService_CreateEditorial_Handler,
		},
		{
			MethodName: "UpdateEditorial",
			Handler:    _EditorialService_UpdateEditorial_Handler,
		},
		{
			MethodName: "DeleteEditorial",
			Handler:    _EditorialService_DeleteEditorial_Handler,
		},
		{
			MethodName: "DescribeEditorial",
			Handler:    _EditorialService_DescribeEditorial_Handler,
		},
		{
			MethodName: "LookupEditorial",
			Handler:    _EditorialService_LookupEditorial_Handler,
		},
		{
			MethodName: "PreviewEditorial",
			Handler:    _EditorialService_PreviewEditorial_Handler,
		},
		{
			MethodName: "ListEditorials",
			Handler:    _EditorialService_ListEditorials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/editorial_service.proto",
}
