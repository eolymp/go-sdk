// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: eolymp/atlas/testing_service.proto

package atlas

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	executor "github.com/eolymp/go-sdk/eolymp/executor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateTestInput_Patch int32

const (
	UpdateTestInput_ALL            UpdateTestInput_Patch = 0
	UpdateTestInput_EXAMPLE        UpdateTestInput_Patch = 1
	UpdateTestInput_INACTIVE       UpdateTestInput_Patch = 2
	UpdateTestInput_SCORE          UpdateTestInput_Patch = 3
	UpdateTestInput_INPUT          UpdateTestInput_Patch = 4
	UpdateTestInput_ANSWER         UpdateTestInput_Patch = 5
	UpdateTestInput_INDEX          UpdateTestInput_Patch = 8
	UpdateTestInput_SECRET         UpdateTestInput_Patch = 9
	UpdateTestInput_EXAMPLE_INPUT  UpdateTestInput_Patch = 6
	UpdateTestInput_EXAMPLE_ANSWER UpdateTestInput_Patch = 7
)

// Enum value maps for UpdateTestInput_Patch.
var (
	UpdateTestInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "EXAMPLE",
		2: "INACTIVE",
		3: "SCORE",
		4: "INPUT",
		5: "ANSWER",
		8: "INDEX",
		9: "SECRET",
		6: "EXAMPLE_INPUT",
		7: "EXAMPLE_ANSWER",
	}
	UpdateTestInput_Patch_value = map[string]int32{
		"ALL":            0,
		"EXAMPLE":        1,
		"INACTIVE":       2,
		"SCORE":          3,
		"INPUT":          4,
		"ANSWER":         5,
		"INDEX":          8,
		"SECRET":         9,
		"EXAMPLE_INPUT":  6,
		"EXAMPLE_ANSWER": 7,
	}
)

func (x UpdateTestInput_Patch) Enum() *UpdateTestInput_Patch {
	p := new(UpdateTestInput_Patch)
	*p = x
	return p
}

func (x UpdateTestInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateTestInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_testing_service_proto_enumTypes[0].Descriptor()
}

func (UpdateTestInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_testing_service_proto_enumTypes[0]
}

func (x UpdateTestInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateTestInput_Patch.Descriptor instead.
func (UpdateTestInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{30, 0}
}

type UpdateTestingConfigInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string         `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Config    *TestingConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateTestingConfigInput) Reset() {
	*x = UpdateTestingConfigInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestingConfigInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestingConfigInput) ProtoMessage() {}

func (x *UpdateTestingConfigInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestingConfigInput.ProtoReflect.Descriptor instead.
func (*UpdateTestingConfigInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateTestingConfigInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateTestingConfigInput) GetConfig() *TestingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateTestingConfigOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTestingConfigOutput) Reset() {
	*x = UpdateTestingConfigOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestingConfigOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestingConfigOutput) ProtoMessage() {}

func (x *UpdateTestingConfigOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestingConfigOutput.ProtoReflect.Descriptor instead.
func (*UpdateTestingConfigOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{1}
}

type DescribeTestingConfigInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeTestingConfigInput) Reset() {
	*x = DescribeTestingConfigInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestingConfigInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestingConfigInput) ProtoMessage() {}

func (x *DescribeTestingConfigInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestingConfigInput.ProtoReflect.Descriptor instead.
func (*DescribeTestingConfigInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeTestingConfigInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeTestingConfigInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeTestingConfigOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TestingConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DescribeTestingConfigOutput) Reset() {
	*x = DescribeTestingConfigOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestingConfigOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestingConfigOutput) ProtoMessage() {}

func (x *DescribeTestingConfigOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestingConfigOutput.ProtoReflect.Descriptor instead.
func (*DescribeTestingConfigOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeTestingConfigOutput) GetConfig() *TestingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateCheckerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Checker   *Checker `protobuf:"bytes,2,opt,name=checker,proto3" json:"checker,omitempty"`
}

func (x *UpdateCheckerInput) Reset() {
	*x = UpdateCheckerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCheckerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCheckerInput) ProtoMessage() {}

func (x *UpdateCheckerInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCheckerInput.ProtoReflect.Descriptor instead.
func (*UpdateCheckerInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCheckerInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateCheckerInput) GetChecker() *Checker {
	if x != nil {
		return x.Checker
	}
	return nil
}

type UpdateCheckerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCheckerOutput) Reset() {
	*x = UpdateCheckerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCheckerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCheckerOutput) ProtoMessage() {}

func (x *UpdateCheckerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCheckerOutput.ProtoReflect.Descriptor instead.
func (*UpdateCheckerOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{5}
}

type DescribeCheckerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeCheckerInput) Reset() {
	*x = DescribeCheckerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCheckerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCheckerInput) ProtoMessage() {}

func (x *DescribeCheckerInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCheckerInput.ProtoReflect.Descriptor instead.
func (*DescribeCheckerInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeCheckerInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeCheckerInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeCheckerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checker *Checker `protobuf:"bytes,1,opt,name=checker,proto3" json:"checker,omitempty"`
}

func (x *DescribeCheckerOutput) Reset() {
	*x = DescribeCheckerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCheckerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCheckerOutput) ProtoMessage() {}

func (x *DescribeCheckerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCheckerOutput.ProtoReflect.Descriptor instead.
func (*DescribeCheckerOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeCheckerOutput) GetChecker() *Checker {
	if x != nil {
		return x.Checker
	}
	return nil
}

type UpdateInteractorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId  string               `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Interactor *executor.Interactor `protobuf:"bytes,2,opt,name=interactor,proto3" json:"interactor,omitempty"`
}

func (x *UpdateInteractorInput) Reset() {
	*x = UpdateInteractorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInteractorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInteractorInput) ProtoMessage() {}

func (x *UpdateInteractorInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInteractorInput.ProtoReflect.Descriptor instead.
func (*UpdateInteractorInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateInteractorInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateInteractorInput) GetInteractor() *executor.Interactor {
	if x != nil {
		return x.Interactor
	}
	return nil
}

type UpdateInteractorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInteractorOutput) Reset() {
	*x = UpdateInteractorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInteractorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInteractorOutput) ProtoMessage() {}

func (x *UpdateInteractorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInteractorOutput.ProtoReflect.Descriptor instead.
func (*UpdateInteractorOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{9}
}

type DescribeInteractorInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeInteractorInput) Reset() {
	*x = DescribeInteractorInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeInteractorInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeInteractorInput) ProtoMessage() {}

func (x *DescribeInteractorInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeInteractorInput.ProtoReflect.Descriptor instead.
func (*DescribeInteractorInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeInteractorInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeInteractorInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeInteractorOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interactor *executor.Interactor `protobuf:"bytes,1,opt,name=interactor,proto3" json:"interactor,omitempty"`
}

func (x *DescribeInteractorOutput) Reset() {
	*x = DescribeInteractorOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeInteractorOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeInteractorOutput) ProtoMessage() {}

func (x *DescribeInteractorOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeInteractorOutput.ProtoReflect.Descriptor instead.
func (*DescribeInteractorOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeInteractorOutput) GetInteractor() *executor.Interactor {
	if x != nil {
		return x.Interactor
	}
	return nil
}

type ListTestsetsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListTestsetsInput) Reset() {
	*x = ListTestsetsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsetsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsetsInput) ProtoMessage() {}

func (x *ListTestsetsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsetsInput.ProtoReflect.Descriptor instead.
func (*ListTestsetsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListTestsetsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListTestsetsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListTestsetsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Testset `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTestsetsOutput) Reset() {
	*x = ListTestsetsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsetsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsetsOutput) ProtoMessage() {}

func (x *ListTestsetsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsetsOutput.ProtoReflect.Descriptor instead.
func (*ListTestsetsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListTestsetsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTestsetsOutput) GetItems() []*Testset {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeTestsetInput) Reset() {
	*x = DescribeTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestsetInput) ProtoMessage() {}

func (x *DescribeTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestsetInput.ProtoReflect.Descriptor instead.
func (*DescribeTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DescribeTestsetInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Testset *Testset `protobuf:"bytes,1,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *DescribeTestsetOutput) Reset() {
	*x = DescribeTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestsetOutput) ProtoMessage() {}

func (x *DescribeTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestsetOutput.ProtoReflect.Descriptor instead.
func (*DescribeTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeTestsetOutput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type CreateTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Testset   *Testset `protobuf:"bytes,2,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *CreateTestsetInput) Reset() {
	*x = CreateTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestsetInput) ProtoMessage() {}

func (x *CreateTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestsetInput.ProtoReflect.Descriptor instead.
func (*CreateTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateTestsetInput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type CreateTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTestsetOutput) Reset() {
	*x = CreateTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestsetOutput) ProtoMessage() {}

func (x *CreateTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestsetOutput.ProtoReflect.Descriptor instead.
func (*CreateTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTestsetOutput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string   `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string   `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Testset   *Testset `protobuf:"bytes,3,opt,name=testset,proto3" json:"testset,omitempty"`
}

func (x *UpdateTestsetInput) Reset() {
	*x = UpdateTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestsetInput) ProtoMessage() {}

func (x *UpdateTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestsetInput.ProtoReflect.Descriptor instead.
func (*UpdateTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *UpdateTestsetInput) GetTestset() *Testset {
	if x != nil {
		return x.Testset
	}
	return nil
}

type UpdateTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTestsetOutput) Reset() {
	*x = UpdateTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestsetOutput) ProtoMessage() {}

func (x *UpdateTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestsetOutput.ProtoReflect.Descriptor instead.
func (*UpdateTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{19}
}

type DeleteTestsetInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
}

func (x *DeleteTestsetInput) Reset() {
	*x = DeleteTestsetInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestsetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestsetInput) ProtoMessage() {}

func (x *DeleteTestsetInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestsetInput.ProtoReflect.Descriptor instead.
func (*DeleteTestsetInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTestsetInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestsetInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

type DeleteTestsetOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestsetOutput) Reset() {
	*x = DeleteTestsetOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestsetOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestsetOutput) ProtoMessage() {}

func (x *DeleteTestsetOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestsetOutput.ProtoReflect.Descriptor instead.
func (*DeleteTestsetOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{21}
}

type ListExamplesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListExamplesInput) Reset() {
	*x = ListExamplesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamplesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesInput) ProtoMessage() {}

func (x *ListExamplesInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesInput.ProtoReflect.Descriptor instead.
func (*ListExamplesInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListExamplesInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListExamplesInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListExamplesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examples []*Test `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *ListExamplesOutput) Reset() {
	*x = ListExamplesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamplesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamplesOutput) ProtoMessage() {}

func (x *ListExamplesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamplesOutput.ProtoReflect.Descriptor instead.
func (*ListExamplesOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListExamplesOutput) GetExamples() []*Test {
	if x != nil {
		return x.Examples
	}
	return nil
}

type ListTestsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *ListTestsInput) Reset() {
	*x = ListTestsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsInput) ProtoMessage() {}

func (x *ListTestsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsInput.ProtoReflect.Descriptor instead.
func (*ListTestsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListTestsInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ListTestsInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *ListTestsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ListTestsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Test `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListTestsOutput) Reset() {
	*x = ListTestsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsOutput) ProtoMessage() {}

func (x *ListTestsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsOutput.ProtoReflect.Descriptor instead.
func (*ListTestsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListTestsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTestsOutput) GetItems() []*Test {
	if x != nil {
		return x.Items
	}
	return nil
}

type DescribeTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Version   uint32 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
}

func (x *DescribeTestInput) Reset() {
	*x = DescribeTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestInput) ProtoMessage() {}

func (x *DescribeTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestInput.ProtoReflect.Descriptor instead.
func (*DescribeTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DescribeTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DescribeTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *DescribeTestInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DescribeTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *Test `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *DescribeTestOutput) Reset() {
	*x = DescribeTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTestOutput) ProtoMessage() {}

func (x *DescribeTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTestOutput.ProtoReflect.Descriptor instead.
func (*DescribeTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{27}
}

func (x *DescribeTestOutput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	Test      *Test  `protobuf:"bytes,3,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *CreateTestInput) Reset() {
	*x = CreateTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestInput) ProtoMessage() {}

func (x *CreateTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestInput.ProtoReflect.Descriptor instead.
func (*CreateTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{28}
}

func (x *CreateTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *CreateTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *CreateTestInput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type CreateTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *CreateTestOutput) Reset() {
	*x = CreateTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestOutput) ProtoMessage() {}

func (x *CreateTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestOutput.ProtoReflect.Descriptor instead.
func (*CreateTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{29}
}

func (x *CreateTestOutput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type UpdateTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specify list of fields to update, if empty all fields are updated
	Patch     []UpdateTestInput_Patch `protobuf:"varint,5,rep,packed,name=patch,proto3,enum=eolymp.atlas.UpdateTestInput_Patch" json:"patch,omitempty"`
	ProblemId string                  `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string                  `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string                  `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Test      *Test                   `protobuf:"bytes,4,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *UpdateTestInput) Reset() {
	*x = UpdateTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestInput) ProtoMessage() {}

func (x *UpdateTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestInput.ProtoReflect.Descriptor instead.
func (*UpdateTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateTestInput) GetPatch() []UpdateTestInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *UpdateTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *UpdateTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *UpdateTestInput) GetTest() *Test {
	if x != nil {
		return x.Test
	}
	return nil
}

type UpdateTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTestOutput) Reset() {
	*x = UpdateTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestOutput) ProtoMessage() {}

func (x *UpdateTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestOutput.ProtoReflect.Descriptor instead.
func (*UpdateTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{31}
}

type DeleteTestInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId string `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	TestsetId string `protobuf:"bytes,2,opt,name=testset_id,json=testsetId,proto3" json:"testset_id,omitempty"`
	TestId    string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *DeleteTestInput) Reset() {
	*x = DeleteTestInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestInput) ProtoMessage() {}

func (x *DeleteTestInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestInput.ProtoReflect.Descriptor instead.
func (*DeleteTestInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteTestInput) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *DeleteTestInput) GetTestsetId() string {
	if x != nil {
		return x.TestsetId
	}
	return ""
}

func (x *DeleteTestInput) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type DeleteTestOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestOutput) Reset() {
	*x = DeleteTestOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eolymp_atlas_testing_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestOutput) ProtoMessage() {}

func (x *DeleteTestOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_testing_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestOutput.ProtoReflect.Descriptor instead.
func (*DeleteTestOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_testing_service_proto_rawDescGZIP(), []int{33}
}

var File_eolymp_atlas_testing_service_proto protoreflect.FileDescriptor

var file_eolymp_atlas_testing_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1b, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x55, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x52, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x64, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x48, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6e,
	0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48,
	0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22, 0x25,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4c, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x22, 0x68, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58,
	0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x10, 0x07, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x68, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0xa8, 0x15, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e,
	0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x1a, 0x08, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0xa8, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a,
	0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82,
	0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a, 0xd7, 0x23, 0x3e, 0xf8, 0xe2,
	0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x1a, 0x08, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x96, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b,
	0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x17, 0x8a,
	0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3d, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x0a,
	0xd7, 0x23, 0x3e, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x1a, 0x0b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3d, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x00, 0x40, 0xf8, 0xe2, 0x0a, 0x0a, 0x82, 0xe3, 0x0a, 0x17,
	0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x3b, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x40, 0xf8, 0xe2,
	0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x12, 0x9e,
	0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x9e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65,
	0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0xa0, 0x40, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x48, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0xea, 0xe2, 0x0a,
	0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17,
	0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x4f, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e,
	0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x59, 0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00,
	0x20, 0x41, 0xf8, 0xe2, 0x0a, 0xc8, 0x01, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x26, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xa6, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e,
	0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x59,
	0xea, 0xe2, 0x0a, 0x0c, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0xc8, 0x01,
	0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x2a, 0x26, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x58, 0xea,
	0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8, 0xe2, 0x0a, 0x32, 0x82, 0xe3,
	0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x4e, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x20, 0x41, 0xf8,
	0xe2, 0x0a, 0x32, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x65,
	0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3b, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eolymp_atlas_testing_service_proto_rawDescOnce sync.Once
	file_eolymp_atlas_testing_service_proto_rawDescData = file_eolymp_atlas_testing_service_proto_rawDesc
)

func file_eolymp_atlas_testing_service_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_testing_service_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_testing_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_eolymp_atlas_testing_service_proto_rawDescData)
	})
	return file_eolymp_atlas_testing_service_proto_rawDescData
}

var file_eolymp_atlas_testing_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eolymp_atlas_testing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_eolymp_atlas_testing_service_proto_goTypes = []any{
	(UpdateTestInput_Patch)(0),          // 0: eolymp.atlas.UpdateTestInput.Patch
	(*UpdateTestingConfigInput)(nil),    // 1: eolymp.atlas.UpdateTestingConfigInput
	(*UpdateTestingConfigOutput)(nil),   // 2: eolymp.atlas.UpdateTestingConfigOutput
	(*DescribeTestingConfigInput)(nil),  // 3: eolymp.atlas.DescribeTestingConfigInput
	(*DescribeTestingConfigOutput)(nil), // 4: eolymp.atlas.DescribeTestingConfigOutput
	(*UpdateCheckerInput)(nil),          // 5: eolymp.atlas.UpdateCheckerInput
	(*UpdateCheckerOutput)(nil),         // 6: eolymp.atlas.UpdateCheckerOutput
	(*DescribeCheckerInput)(nil),        // 7: eolymp.atlas.DescribeCheckerInput
	(*DescribeCheckerOutput)(nil),       // 8: eolymp.atlas.DescribeCheckerOutput
	(*UpdateInteractorInput)(nil),       // 9: eolymp.atlas.UpdateInteractorInput
	(*UpdateInteractorOutput)(nil),      // 10: eolymp.atlas.UpdateInteractorOutput
	(*DescribeInteractorInput)(nil),     // 11: eolymp.atlas.DescribeInteractorInput
	(*DescribeInteractorOutput)(nil),    // 12: eolymp.atlas.DescribeInteractorOutput
	(*ListTestsetsInput)(nil),           // 13: eolymp.atlas.ListTestsetsInput
	(*ListTestsetsOutput)(nil),          // 14: eolymp.atlas.ListTestsetsOutput
	(*DescribeTestsetInput)(nil),        // 15: eolymp.atlas.DescribeTestsetInput
	(*DescribeTestsetOutput)(nil),       // 16: eolymp.atlas.DescribeTestsetOutput
	(*CreateTestsetInput)(nil),          // 17: eolymp.atlas.CreateTestsetInput
	(*CreateTestsetOutput)(nil),         // 18: eolymp.atlas.CreateTestsetOutput
	(*UpdateTestsetInput)(nil),          // 19: eolymp.atlas.UpdateTestsetInput
	(*UpdateTestsetOutput)(nil),         // 20: eolymp.atlas.UpdateTestsetOutput
	(*DeleteTestsetInput)(nil),          // 21: eolymp.atlas.DeleteTestsetInput
	(*DeleteTestsetOutput)(nil),         // 22: eolymp.atlas.DeleteTestsetOutput
	(*ListExamplesInput)(nil),           // 23: eolymp.atlas.ListExamplesInput
	(*ListExamplesOutput)(nil),          // 24: eolymp.atlas.ListExamplesOutput
	(*ListTestsInput)(nil),              // 25: eolymp.atlas.ListTestsInput
	(*ListTestsOutput)(nil),             // 26: eolymp.atlas.ListTestsOutput
	(*DescribeTestInput)(nil),           // 27: eolymp.atlas.DescribeTestInput
	(*DescribeTestOutput)(nil),          // 28: eolymp.atlas.DescribeTestOutput
	(*CreateTestInput)(nil),             // 29: eolymp.atlas.CreateTestInput
	(*CreateTestOutput)(nil),            // 30: eolymp.atlas.CreateTestOutput
	(*UpdateTestInput)(nil),             // 31: eolymp.atlas.UpdateTestInput
	(*UpdateTestOutput)(nil),            // 32: eolymp.atlas.UpdateTestOutput
	(*DeleteTestInput)(nil),             // 33: eolymp.atlas.DeleteTestInput
	(*DeleteTestOutput)(nil),            // 34: eolymp.atlas.DeleteTestOutput
	(*TestingConfig)(nil),               // 35: eolymp.atlas.TestingConfig
	(*Checker)(nil),                     // 36: eolymp.atlas.Checker
	(*executor.Interactor)(nil),         // 37: eolymp.executor.Interactor
	(*Testset)(nil),                     // 38: eolymp.atlas.Testset
	(*Test)(nil),                        // 39: eolymp.atlas.Test
}
var file_eolymp_atlas_testing_service_proto_depIdxs = []int32{
	35, // 0: eolymp.atlas.UpdateTestingConfigInput.config:type_name -> eolymp.atlas.TestingConfig
	35, // 1: eolymp.atlas.DescribeTestingConfigOutput.config:type_name -> eolymp.atlas.TestingConfig
	36, // 2: eolymp.atlas.UpdateCheckerInput.checker:type_name -> eolymp.atlas.Checker
	36, // 3: eolymp.atlas.DescribeCheckerOutput.checker:type_name -> eolymp.atlas.Checker
	37, // 4: eolymp.atlas.UpdateInteractorInput.interactor:type_name -> eolymp.executor.Interactor
	37, // 5: eolymp.atlas.DescribeInteractorOutput.interactor:type_name -> eolymp.executor.Interactor
	38, // 6: eolymp.atlas.ListTestsetsOutput.items:type_name -> eolymp.atlas.Testset
	38, // 7: eolymp.atlas.DescribeTestsetOutput.testset:type_name -> eolymp.atlas.Testset
	38, // 8: eolymp.atlas.CreateTestsetInput.testset:type_name -> eolymp.atlas.Testset
	38, // 9: eolymp.atlas.UpdateTestsetInput.testset:type_name -> eolymp.atlas.Testset
	39, // 10: eolymp.atlas.ListExamplesOutput.examples:type_name -> eolymp.atlas.Test
	39, // 11: eolymp.atlas.ListTestsOutput.items:type_name -> eolymp.atlas.Test
	39, // 12: eolymp.atlas.DescribeTestOutput.test:type_name -> eolymp.atlas.Test
	39, // 13: eolymp.atlas.CreateTestInput.test:type_name -> eolymp.atlas.Test
	0,  // 14: eolymp.atlas.UpdateTestInput.patch:type_name -> eolymp.atlas.UpdateTestInput.Patch
	39, // 15: eolymp.atlas.UpdateTestInput.test:type_name -> eolymp.atlas.Test
	1,  // 16: eolymp.atlas.TestingService.UpdateTestingConfig:input_type -> eolymp.atlas.UpdateTestingConfigInput
	3,  // 17: eolymp.atlas.TestingService.DescribeTestingConfig:input_type -> eolymp.atlas.DescribeTestingConfigInput
	5,  // 18: eolymp.atlas.TestingService.UpdateChecker:input_type -> eolymp.atlas.UpdateCheckerInput
	7,  // 19: eolymp.atlas.TestingService.DescribeChecker:input_type -> eolymp.atlas.DescribeCheckerInput
	9,  // 20: eolymp.atlas.TestingService.UpdateInteractor:input_type -> eolymp.atlas.UpdateInteractorInput
	11, // 21: eolymp.atlas.TestingService.DescribeInteractor:input_type -> eolymp.atlas.DescribeInteractorInput
	17, // 22: eolymp.atlas.TestingService.CreateTestset:input_type -> eolymp.atlas.CreateTestsetInput
	19, // 23: eolymp.atlas.TestingService.UpdateTestset:input_type -> eolymp.atlas.UpdateTestsetInput
	21, // 24: eolymp.atlas.TestingService.DeleteTestset:input_type -> eolymp.atlas.DeleteTestsetInput
	15, // 25: eolymp.atlas.TestingService.DescribeTestset:input_type -> eolymp.atlas.DescribeTestsetInput
	13, // 26: eolymp.atlas.TestingService.ListTestsets:input_type -> eolymp.atlas.ListTestsetsInput
	29, // 27: eolymp.atlas.TestingService.CreateTest:input_type -> eolymp.atlas.CreateTestInput
	31, // 28: eolymp.atlas.TestingService.UpdateTest:input_type -> eolymp.atlas.UpdateTestInput
	33, // 29: eolymp.atlas.TestingService.DeleteTest:input_type -> eolymp.atlas.DeleteTestInput
	27, // 30: eolymp.atlas.TestingService.DescribeTest:input_type -> eolymp.atlas.DescribeTestInput
	25, // 31: eolymp.atlas.TestingService.ListTests:input_type -> eolymp.atlas.ListTestsInput
	23, // 32: eolymp.atlas.TestingService.ListExamples:input_type -> eolymp.atlas.ListExamplesInput
	2,  // 33: eolymp.atlas.TestingService.UpdateTestingConfig:output_type -> eolymp.atlas.UpdateTestingConfigOutput
	4,  // 34: eolymp.atlas.TestingService.DescribeTestingConfig:output_type -> eolymp.atlas.DescribeTestingConfigOutput
	6,  // 35: eolymp.atlas.TestingService.UpdateChecker:output_type -> eolymp.atlas.UpdateCheckerOutput
	8,  // 36: eolymp.atlas.TestingService.DescribeChecker:output_type -> eolymp.atlas.DescribeCheckerOutput
	10, // 37: eolymp.atlas.TestingService.UpdateInteractor:output_type -> eolymp.atlas.UpdateInteractorOutput
	12, // 38: eolymp.atlas.TestingService.DescribeInteractor:output_type -> eolymp.atlas.DescribeInteractorOutput
	18, // 39: eolymp.atlas.TestingService.CreateTestset:output_type -> eolymp.atlas.CreateTestsetOutput
	20, // 40: eolymp.atlas.TestingService.UpdateTestset:output_type -> eolymp.atlas.UpdateTestsetOutput
	22, // 41: eolymp.atlas.TestingService.DeleteTestset:output_type -> eolymp.atlas.DeleteTestsetOutput
	16, // 42: eolymp.atlas.TestingService.DescribeTestset:output_type -> eolymp.atlas.DescribeTestsetOutput
	14, // 43: eolymp.atlas.TestingService.ListTestsets:output_type -> eolymp.atlas.ListTestsetsOutput
	30, // 44: eolymp.atlas.TestingService.CreateTest:output_type -> eolymp.atlas.CreateTestOutput
	32, // 45: eolymp.atlas.TestingService.UpdateTest:output_type -> eolymp.atlas.UpdateTestOutput
	34, // 46: eolymp.atlas.TestingService.DeleteTest:output_type -> eolymp.atlas.DeleteTestOutput
	28, // 47: eolymp.atlas.TestingService.DescribeTest:output_type -> eolymp.atlas.DescribeTestOutput
	26, // 48: eolymp.atlas.TestingService.ListTests:output_type -> eolymp.atlas.ListTestsOutput
	24, // 49: eolymp.atlas.TestingService.ListExamples:output_type -> eolymp.atlas.ListExamplesOutput
	33, // [33:50] is the sub-list for method output_type
	16, // [16:33] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_testing_service_proto_init() }
func file_eolymp_atlas_testing_service_proto_init() {
	if File_eolymp_atlas_testing_service_proto != nil {
		return
	}
	file_eolymp_atlas_checker_proto_init()
	file_eolymp_atlas_testing_config_proto_init()
	file_eolymp_atlas_testing_test_proto_init()
	file_eolymp_atlas_testing_testset_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eolymp_atlas_testing_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestingConfigInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestingConfigOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestingConfigInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestingConfigOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCheckerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCheckerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeCheckerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeCheckerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInteractorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateInteractorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeInteractorInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeInteractorOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsetsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsetsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestsetInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestsetOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ListExamplesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListExamplesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eolymp_atlas_testing_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eolymp_atlas_testing_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_atlas_testing_service_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_testing_service_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_testing_service_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_testing_service_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_testing_service_proto = out.File
	file_eolymp_atlas_testing_service_proto_rawDesc = nil
	file_eolymp_atlas_testing_service_proto_goTypes = nil
	file_eolymp_atlas_testing_service_proto_depIdxs = nil
}
