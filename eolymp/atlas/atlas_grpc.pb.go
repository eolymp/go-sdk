// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/atlas/atlas.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Atlas_CreateProblem_FullMethodName          = "/eolymp.atlas.Atlas/CreateProblem"
	Atlas_DeleteProblem_FullMethodName          = "/eolymp.atlas.Atlas/DeleteProblem"
	Atlas_ListProblems_FullMethodName           = "/eolymp.atlas.Atlas/ListProblems"
	Atlas_DescribeProblem_FullMethodName        = "/eolymp.atlas.Atlas/DescribeProblem"
	Atlas_UpdateProblem_FullMethodName          = "/eolymp.atlas.Atlas/UpdateProblem"
	Atlas_SetBookmark_FullMethodName            = "/eolymp.atlas.Atlas/SetBookmark"
	Atlas_ListExamples_FullMethodName           = "/eolymp.atlas.Atlas/ListExamples"
	Atlas_UpdateVerifier_FullMethodName         = "/eolymp.atlas.Atlas/UpdateVerifier"
	Atlas_DescribeVerifier_FullMethodName       = "/eolymp.atlas.Atlas/DescribeVerifier"
	Atlas_UpdateInteractor_FullMethodName       = "/eolymp.atlas.Atlas/UpdateInteractor"
	Atlas_DescribeInteractor_FullMethodName     = "/eolymp.atlas.Atlas/DescribeInteractor"
	Atlas_CreateStatement_FullMethodName        = "/eolymp.atlas.Atlas/CreateStatement"
	Atlas_UpdateStatement_FullMethodName        = "/eolymp.atlas.Atlas/UpdateStatement"
	Atlas_DeleteStatement_FullMethodName        = "/eolymp.atlas.Atlas/DeleteStatement"
	Atlas_ListStatements_FullMethodName         = "/eolymp.atlas.Atlas/ListStatements"
	Atlas_DescribeStatement_FullMethodName      = "/eolymp.atlas.Atlas/DescribeStatement"
	Atlas_LookupStatement_FullMethodName        = "/eolymp.atlas.Atlas/LookupStatement"
	Atlas_RenderStatement_FullMethodName        = "/eolymp.atlas.Atlas/RenderStatement"
	Atlas_PreviewStatement_FullMethodName       = "/eolymp.atlas.Atlas/PreviewStatement"
	Atlas_CreateTestset_FullMethodName          = "/eolymp.atlas.Atlas/CreateTestset"
	Atlas_UpdateTestset_FullMethodName          = "/eolymp.atlas.Atlas/UpdateTestset"
	Atlas_DeleteTestset_FullMethodName          = "/eolymp.atlas.Atlas/DeleteTestset"
	Atlas_ListTestsets_FullMethodName           = "/eolymp.atlas.Atlas/ListTestsets"
	Atlas_DescribeTestset_FullMethodName        = "/eolymp.atlas.Atlas/DescribeTestset"
	Atlas_CreateTest_FullMethodName             = "/eolymp.atlas.Atlas/CreateTest"
	Atlas_UpdateTest_FullMethodName             = "/eolymp.atlas.Atlas/UpdateTest"
	Atlas_DeleteTest_FullMethodName             = "/eolymp.atlas.Atlas/DeleteTest"
	Atlas_ListTests_FullMethodName              = "/eolymp.atlas.Atlas/ListTests"
	Atlas_DescribeTest_FullMethodName           = "/eolymp.atlas.Atlas/DescribeTest"
	Atlas_CreateCodeTemplate_FullMethodName     = "/eolymp.atlas.Atlas/CreateCodeTemplate"
	Atlas_UpdateCodeTemplate_FullMethodName     = "/eolymp.atlas.Atlas/UpdateCodeTemplate"
	Atlas_DeleteCodeTemplate_FullMethodName     = "/eolymp.atlas.Atlas/DeleteCodeTemplate"
	Atlas_ListCodeTemplates_FullMethodName      = "/eolymp.atlas.Atlas/ListCodeTemplates"
	Atlas_DescribeCodeTemplate_FullMethodName   = "/eolymp.atlas.Atlas/DescribeCodeTemplate"
	Atlas_CreateAttachment_FullMethodName       = "/eolymp.atlas.Atlas/CreateAttachment"
	Atlas_UpdateAttachment_FullMethodName       = "/eolymp.atlas.Atlas/UpdateAttachment"
	Atlas_DeleteAttachment_FullMethodName       = "/eolymp.atlas.Atlas/DeleteAttachment"
	Atlas_ListAttachments_FullMethodName        = "/eolymp.atlas.Atlas/ListAttachments"
	Atlas_DescribeAttachment_FullMethodName     = "/eolymp.atlas.Atlas/DescribeAttachment"
	Atlas_ListVersions_FullMethodName           = "/eolymp.atlas.Atlas/ListVersions"
	Atlas_ListProblemTop_FullMethodName         = "/eolymp.atlas.Atlas/ListProblemTop"
	Atlas_DescribeProblemGrading_FullMethodName = "/eolymp.atlas.Atlas/DescribeProblemGrading"
	Atlas_CreateSubmission_FullMethodName       = "/eolymp.atlas.Atlas/CreateSubmission"
	Atlas_DescribeSubmission_FullMethodName     = "/eolymp.atlas.Atlas/DescribeSubmission"
	Atlas_RetestSubmission_FullMethodName       = "/eolymp.atlas.Atlas/RetestSubmission"
	Atlas_ListSubmissions_FullMethodName        = "/eolymp.atlas.Atlas/ListSubmissions"
	Atlas_DescribeScore_FullMethodName          = "/eolymp.atlas.Atlas/DescribeScore"
)

// AtlasClient is the client API for Atlas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtlasClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemInput, opts ...grpc.CallOption) (*CreateProblemOutput, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemInput, opts ...grpc.CallOption) (*DeleteProblemOutput, error)
	ListProblems(ctx context.Context, in *ListProblemsInput, opts ...grpc.CallOption) (*ListProblemsOutput, error)
	DescribeProblem(ctx context.Context, in *DescribeProblemInput, opts ...grpc.CallOption) (*DescribeProblemOutput, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemInput, opts ...grpc.CallOption) (*UpdateProblemOutput, error)
	SetBookmark(ctx context.Context, in *SetBookmarkInput, opts ...grpc.CallOption) (*SetBookmarkOutput, error)
	ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error)
	UpdateVerifier(ctx context.Context, in *UpdateVerifierInput, opts ...grpc.CallOption) (*UpdateVerifierOutput, error)
	DescribeVerifier(ctx context.Context, in *DescribeVerifierInput, opts ...grpc.CallOption) (*DescribeVerifierOutput, error)
	UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error)
	DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error)
	CreateStatement(ctx context.Context, in *CreateStatementInput, opts ...grpc.CallOption) (*CreateStatementOutput, error)
	UpdateStatement(ctx context.Context, in *UpdateStatementInput, opts ...grpc.CallOption) (*UpdateStatementOutput, error)
	DeleteStatement(ctx context.Context, in *DeleteStatementInput, opts ...grpc.CallOption) (*DeleteStatementOutput, error)
	ListStatements(ctx context.Context, in *ListStatementsInput, opts ...grpc.CallOption) (*ListStatementsOutput, error)
	// DescribeStatement returns statement.
	DescribeStatement(ctx context.Context, in *DescribeStatementInput, opts ...grpc.CallOption) (*DescribeStatementOutput, error)
	// LookupStatement finds a statement in one of the requested languages.
	LookupStatement(ctx context.Context, in *LookupStatementInput, opts ...grpc.CallOption) (*LookupStatementOutput, error)
	// RenderStatement returns fully resolved statement in ECM format.
	//
	// This method should be used to fetch statement for viewing, it always returns statement as ECM tree (rather than
	// HTML or LaTeX) and ensures any embedded or computed values are resolved.
	RenderStatement(ctx context.Context, in *RenderStatementInput, opts ...grpc.CallOption) (*RenderStatementOutput, error)
	// PreviewStatement renders unsaved statement.
	//
	// This method can be used to render statement before it has been saved.
	PreviewStatement(ctx context.Context, in *PreviewStatementInput, opts ...grpc.CallOption) (*PreviewStatementOutput, error)
	CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error)
	UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error)
	DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error)
	ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error)
	DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error)
	CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error)
	UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error)
	DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error)
	ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error)
	DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error)
	CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput, opts ...grpc.CallOption) (*CreateCodeTemplateOutput, error)
	UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput, opts ...grpc.CallOption) (*UpdateCodeTemplateOutput, error)
	DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput, opts ...grpc.CallOption) (*DeleteCodeTemplateOutput, error)
	ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput, opts ...grpc.CallOption) (*ListCodeTemplatesOutput, error)
	DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput, opts ...grpc.CallOption) (*DescribeCodeTemplateOutput, error)
	CreateAttachment(ctx context.Context, in *CreateAttachmentInput, opts ...grpc.CallOption) (*CreateAttachmentOutput, error)
	UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput, opts ...grpc.CallOption) (*UpdateAttachmentOutput, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput, opts ...grpc.CallOption) (*DeleteAttachmentOutput, error)
	ListAttachments(ctx context.Context, in *ListAttachmentsInput, opts ...grpc.CallOption) (*ListAttachmentsOutput, error)
	DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput, opts ...grpc.CallOption) (*DescribeAttachmentOutput, error)
	ListVersions(ctx context.Context, in *ListVersionsInput, opts ...grpc.CallOption) (*ListVersionsOutput, error)
	ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error)
	DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error)
	CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error)
	DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error)
	RetestSubmission(ctx context.Context, in *RetestSubmissionInput, opts ...grpc.CallOption) (*RetestSubmissionOutput, error)
	ListSubmissions(ctx context.Context, in *ListSubmissionsInput, opts ...grpc.CallOption) (*ListSubmissionsOutput, error)
	DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error)
}

type atlasClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlasClient(cc grpc.ClientConnInterface) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) CreateProblem(ctx context.Context, in *CreateProblemInput, opts ...grpc.CallOption) (*CreateProblemOutput, error) {
	out := new(CreateProblemOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteProblem(ctx context.Context, in *DeleteProblemInput, opts ...grpc.CallOption) (*DeleteProblemOutput, error) {
	out := new(DeleteProblemOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListProblems(ctx context.Context, in *ListProblemsInput, opts ...grpc.CallOption) (*ListProblemsOutput, error) {
	out := new(ListProblemsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListProblems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeProblem(ctx context.Context, in *DescribeProblemInput, opts ...grpc.CallOption) (*DescribeProblemOutput, error) {
	out := new(DescribeProblemOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateProblem(ctx context.Context, in *UpdateProblemInput, opts ...grpc.CallOption) (*UpdateProblemOutput, error) {
	out := new(UpdateProblemOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) SetBookmark(ctx context.Context, in *SetBookmarkInput, opts ...grpc.CallOption) (*SetBookmarkOutput, error) {
	out := new(SetBookmarkOutput)
	err := c.cc.Invoke(ctx, Atlas_SetBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error) {
	out := new(ListExamplesOutput)
	err := c.cc.Invoke(ctx, Atlas_ListExamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateVerifier(ctx context.Context, in *UpdateVerifierInput, opts ...grpc.CallOption) (*UpdateVerifierOutput, error) {
	out := new(UpdateVerifierOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateVerifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeVerifier(ctx context.Context, in *DescribeVerifierInput, opts ...grpc.CallOption) (*DescribeVerifierOutput, error) {
	out := new(DescribeVerifierOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeVerifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error) {
	out := new(UpdateInteractorOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateInteractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error) {
	out := new(DescribeInteractorOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeInteractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateStatement(ctx context.Context, in *CreateStatementInput, opts ...grpc.CallOption) (*CreateStatementOutput, error) {
	out := new(CreateStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateStatement(ctx context.Context, in *UpdateStatementInput, opts ...grpc.CallOption) (*UpdateStatementOutput, error) {
	out := new(UpdateStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteStatement(ctx context.Context, in *DeleteStatementInput, opts ...grpc.CallOption) (*DeleteStatementOutput, error) {
	out := new(DeleteStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListStatements(ctx context.Context, in *ListStatementsInput, opts ...grpc.CallOption) (*ListStatementsOutput, error) {
	out := new(ListStatementsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeStatement(ctx context.Context, in *DescribeStatementInput, opts ...grpc.CallOption) (*DescribeStatementOutput, error) {
	out := new(DescribeStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) LookupStatement(ctx context.Context, in *LookupStatementInput, opts ...grpc.CallOption) (*LookupStatementOutput, error) {
	out := new(LookupStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_LookupStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RenderStatement(ctx context.Context, in *RenderStatementInput, opts ...grpc.CallOption) (*RenderStatementOutput, error) {
	out := new(RenderStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_RenderStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) PreviewStatement(ctx context.Context, in *PreviewStatementInput, opts ...grpc.CallOption) (*PreviewStatementOutput, error) {
	out := new(PreviewStatementOutput)
	err := c.cc.Invoke(ctx, Atlas_PreviewStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error) {
	out := new(CreateTestsetOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateTestset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error) {
	out := new(UpdateTestsetOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateTestset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error) {
	out := new(DeleteTestsetOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteTestset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error) {
	out := new(ListTestsetsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListTestsets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error) {
	out := new(DescribeTestsetOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeTestset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error) {
	out := new(CreateTestOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error) {
	out := new(UpdateTestOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error) {
	out := new(DeleteTestOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error) {
	out := new(ListTestsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListTests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error) {
	out := new(DescribeTestOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput, opts ...grpc.CallOption) (*CreateCodeTemplateOutput, error) {
	out := new(CreateCodeTemplateOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateCodeTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput, opts ...grpc.CallOption) (*UpdateCodeTemplateOutput, error) {
	out := new(UpdateCodeTemplateOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateCodeTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput, opts ...grpc.CallOption) (*DeleteCodeTemplateOutput, error) {
	out := new(DeleteCodeTemplateOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteCodeTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput, opts ...grpc.CallOption) (*ListCodeTemplatesOutput, error) {
	out := new(ListCodeTemplatesOutput)
	err := c.cc.Invoke(ctx, Atlas_ListCodeTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput, opts ...grpc.CallOption) (*DescribeCodeTemplateOutput, error) {
	out := new(DescribeCodeTemplateOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeCodeTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateAttachment(ctx context.Context, in *CreateAttachmentInput, opts ...grpc.CallOption) (*CreateAttachmentOutput, error) {
	out := new(CreateAttachmentOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput, opts ...grpc.CallOption) (*UpdateAttachmentOutput, error) {
	out := new(UpdateAttachmentOutput)
	err := c.cc.Invoke(ctx, Atlas_UpdateAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput, opts ...grpc.CallOption) (*DeleteAttachmentOutput, error) {
	out := new(DeleteAttachmentOutput)
	err := c.cc.Invoke(ctx, Atlas_DeleteAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListAttachments(ctx context.Context, in *ListAttachmentsInput, opts ...grpc.CallOption) (*ListAttachmentsOutput, error) {
	out := new(ListAttachmentsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput, opts ...grpc.CallOption) (*DescribeAttachmentOutput, error) {
	out := new(DescribeAttachmentOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListVersions(ctx context.Context, in *ListVersionsInput, opts ...grpc.CallOption) (*ListVersionsOutput, error) {
	out := new(ListVersionsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error) {
	out := new(ListProblemTopOutput)
	err := c.cc.Invoke(ctx, Atlas_ListProblemTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error) {
	out := new(DescribeProblemGradingOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeProblemGrading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error) {
	out := new(CreateSubmissionOutput)
	err := c.cc.Invoke(ctx, Atlas_CreateSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error) {
	out := new(DescribeSubmissionOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RetestSubmission(ctx context.Context, in *RetestSubmissionInput, opts ...grpc.CallOption) (*RetestSubmissionOutput, error) {
	out := new(RetestSubmissionOutput)
	err := c.cc.Invoke(ctx, Atlas_RetestSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListSubmissions(ctx context.Context, in *ListSubmissionsInput, opts ...grpc.CallOption) (*ListSubmissionsOutput, error) {
	out := new(ListSubmissionsOutput)
	err := c.cc.Invoke(ctx, Atlas_ListSubmissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error) {
	out := new(DescribeScoreOutput)
	err := c.cc.Invoke(ctx, Atlas_DescribeScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlasServer is the server API for Atlas service.
// All implementations should embed UnimplementedAtlasServer
// for forward compatibility
type AtlasServer interface {
	CreateProblem(context.Context, *CreateProblemInput) (*CreateProblemOutput, error)
	DeleteProblem(context.Context, *DeleteProblemInput) (*DeleteProblemOutput, error)
	ListProblems(context.Context, *ListProblemsInput) (*ListProblemsOutput, error)
	DescribeProblem(context.Context, *DescribeProblemInput) (*DescribeProblemOutput, error)
	UpdateProblem(context.Context, *UpdateProblemInput) (*UpdateProblemOutput, error)
	SetBookmark(context.Context, *SetBookmarkInput) (*SetBookmarkOutput, error)
	ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error)
	UpdateVerifier(context.Context, *UpdateVerifierInput) (*UpdateVerifierOutput, error)
	DescribeVerifier(context.Context, *DescribeVerifierInput) (*DescribeVerifierOutput, error)
	UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error)
	DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error)
	CreateStatement(context.Context, *CreateStatementInput) (*CreateStatementOutput, error)
	UpdateStatement(context.Context, *UpdateStatementInput) (*UpdateStatementOutput, error)
	DeleteStatement(context.Context, *DeleteStatementInput) (*DeleteStatementOutput, error)
	ListStatements(context.Context, *ListStatementsInput) (*ListStatementsOutput, error)
	// DescribeStatement returns statement.
	DescribeStatement(context.Context, *DescribeStatementInput) (*DescribeStatementOutput, error)
	// LookupStatement finds a statement in one of the requested languages.
	LookupStatement(context.Context, *LookupStatementInput) (*LookupStatementOutput, error)
	// RenderStatement returns fully resolved statement in ECM format.
	//
	// This method should be used to fetch statement for viewing, it always returns statement as ECM tree (rather than
	// HTML or LaTeX) and ensures any embedded or computed values are resolved.
	RenderStatement(context.Context, *RenderStatementInput) (*RenderStatementOutput, error)
	// PreviewStatement renders unsaved statement.
	//
	// This method can be used to render statement before it has been saved.
	PreviewStatement(context.Context, *PreviewStatementInput) (*PreviewStatementOutput, error)
	CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error)
	UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error)
	DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error)
	ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error)
	DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error)
	CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error)
	UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error)
	DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error)
	ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error)
	DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error)
	CreateCodeTemplate(context.Context, *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error)
	UpdateCodeTemplate(context.Context, *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error)
	DeleteCodeTemplate(context.Context, *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error)
	ListCodeTemplates(context.Context, *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error)
	DescribeCodeTemplate(context.Context, *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error)
	CreateAttachment(context.Context, *CreateAttachmentInput) (*CreateAttachmentOutput, error)
	UpdateAttachment(context.Context, *UpdateAttachmentInput) (*UpdateAttachmentOutput, error)
	DeleteAttachment(context.Context, *DeleteAttachmentInput) (*DeleteAttachmentOutput, error)
	ListAttachments(context.Context, *ListAttachmentsInput) (*ListAttachmentsOutput, error)
	DescribeAttachment(context.Context, *DescribeAttachmentInput) (*DescribeAttachmentOutput, error)
	ListVersions(context.Context, *ListVersionsInput) (*ListVersionsOutput, error)
	ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error)
	DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error)
	CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error)
	DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error)
	RetestSubmission(context.Context, *RetestSubmissionInput) (*RetestSubmissionOutput, error)
	ListSubmissions(context.Context, *ListSubmissionsInput) (*ListSubmissionsOutput, error)
	DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error)
}

// UnimplementedAtlasServer should be embedded to have forward compatible implementations.
type UnimplementedAtlasServer struct {
}

func (UnimplementedAtlasServer) CreateProblem(context.Context, *CreateProblemInput) (*CreateProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedAtlasServer) DeleteProblem(context.Context, *DeleteProblemInput) (*DeleteProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedAtlasServer) ListProblems(context.Context, *ListProblemsInput) (*ListProblemsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedAtlasServer) DescribeProblem(context.Context, *DescribeProblemInput) (*DescribeProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProblem not implemented")
}
func (UnimplementedAtlasServer) UpdateProblem(context.Context, *UpdateProblemInput) (*UpdateProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedAtlasServer) SetBookmark(context.Context, *SetBookmarkInput) (*SetBookmarkOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBookmark not implemented")
}
func (UnimplementedAtlasServer) ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamples not implemented")
}
func (UnimplementedAtlasServer) UpdateVerifier(context.Context, *UpdateVerifierInput) (*UpdateVerifierOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifier not implemented")
}
func (UnimplementedAtlasServer) DescribeVerifier(context.Context, *DescribeVerifierInput) (*DescribeVerifierOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVerifier not implemented")
}
func (UnimplementedAtlasServer) UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInteractor not implemented")
}
func (UnimplementedAtlasServer) DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeInteractor not implemented")
}
func (UnimplementedAtlasServer) CreateStatement(context.Context, *CreateStatementInput) (*CreateStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatement not implemented")
}
func (UnimplementedAtlasServer) UpdateStatement(context.Context, *UpdateStatementInput) (*UpdateStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatement not implemented")
}
func (UnimplementedAtlasServer) DeleteStatement(context.Context, *DeleteStatementInput) (*DeleteStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatement not implemented")
}
func (UnimplementedAtlasServer) ListStatements(context.Context, *ListStatementsInput) (*ListStatementsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatements not implemented")
}
func (UnimplementedAtlasServer) DescribeStatement(context.Context, *DescribeStatementInput) (*DescribeStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStatement not implemented")
}
func (UnimplementedAtlasServer) LookupStatement(context.Context, *LookupStatementInput) (*LookupStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupStatement not implemented")
}
func (UnimplementedAtlasServer) RenderStatement(context.Context, *RenderStatementInput) (*RenderStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderStatement not implemented")
}
func (UnimplementedAtlasServer) PreviewStatement(context.Context, *PreviewStatementInput) (*PreviewStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewStatement not implemented")
}
func (UnimplementedAtlasServer) CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestset not implemented")
}
func (UnimplementedAtlasServer) UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestset not implemented")
}
func (UnimplementedAtlasServer) DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestset not implemented")
}
func (UnimplementedAtlasServer) ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestsets not implemented")
}
func (UnimplementedAtlasServer) DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTestset not implemented")
}
func (UnimplementedAtlasServer) CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedAtlasServer) UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedAtlasServer) DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}
func (UnimplementedAtlasServer) ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedAtlasServer) DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTest not implemented")
}
func (UnimplementedAtlasServer) CreateCodeTemplate(context.Context, *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) UpdateCodeTemplate(context.Context, *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) DeleteCodeTemplate(context.Context, *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) ListCodeTemplates(context.Context, *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeTemplates not implemented")
}
func (UnimplementedAtlasServer) DescribeCodeTemplate(context.Context, *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) CreateAttachment(context.Context, *CreateAttachmentInput) (*CreateAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedAtlasServer) UpdateAttachment(context.Context, *UpdateAttachmentInput) (*UpdateAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedAtlasServer) DeleteAttachment(context.Context, *DeleteAttachmentInput) (*DeleteAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedAtlasServer) ListAttachments(context.Context, *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachments not implemented")
}
func (UnimplementedAtlasServer) DescribeAttachment(context.Context, *DescribeAttachmentInput) (*DescribeAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAttachment not implemented")
}
func (UnimplementedAtlasServer) ListVersions(context.Context, *ListVersionsInput) (*ListVersionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedAtlasServer) ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemTop not implemented")
}
func (UnimplementedAtlasServer) DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProblemGrading not implemented")
}
func (UnimplementedAtlasServer) CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedAtlasServer) DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSubmission not implemented")
}
func (UnimplementedAtlasServer) RetestSubmission(context.Context, *RetestSubmissionInput) (*RetestSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetestSubmission not implemented")
}
func (UnimplementedAtlasServer) ListSubmissions(context.Context, *ListSubmissionsInput) (*ListSubmissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}
func (UnimplementedAtlasServer) DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScore not implemented")
}

// UnsafeAtlasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtlasServer will
// result in compilation errors.
type UnsafeAtlasServer interface {
	mustEmbedUnimplementedAtlasServer()
}

func RegisterAtlasServer(s grpc.ServiceRegistrar, srv AtlasServer) {
	s.RegisterService(&Atlas_ServiceDesc, srv)
}

func _Atlas_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateProblem(ctx, req.(*CreateProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteProblem(ctx, req.(*DeleteProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListProblems(ctx, req.(*ListProblemsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeProblem(ctx, req.(*DescribeProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateProblem(ctx, req.(*UpdateProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_SetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBookmarkInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).SetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_SetBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).SetBookmark(ctx, req.(*SetBookmarkInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamplesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListExamples(ctx, req.(*ListExamplesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifierInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateVerifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateVerifier(ctx, req.(*UpdateVerifierInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVerifierInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeVerifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeVerifier(ctx, req.(*DescribeVerifierInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateInteractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateInteractor(ctx, req.(*UpdateInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeInteractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeInteractor(ctx, req.(*DescribeInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateStatement(ctx, req.(*CreateStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateStatement(ctx, req.(*UpdateStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteStatement(ctx, req.(*DeleteStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatementsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListStatements(ctx, req.(*ListStatementsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeStatement(ctx, req.(*DescribeStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_LookupStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).LookupStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_LookupStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).LookupStatement(ctx, req.(*LookupStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RenderStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RenderStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_RenderStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RenderStatement(ctx, req.(*RenderStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_PreviewStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).PreviewStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_PreviewStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).PreviewStatement(ctx, req.(*PreviewStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateTestset(ctx, req.(*CreateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateTestset(ctx, req.(*UpdateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteTestset(ctx, req.(*DeleteTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListTestsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListTestsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListTestsets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListTestsets(ctx, req.(*ListTestsetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeTestset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeTestset(ctx, req.(*DescribeTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateTest(ctx, req.(*CreateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateTest(ctx, req.(*UpdateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteTest(ctx, req.(*DeleteTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListTests(ctx, req.(*ListTestsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeTest(ctx, req.(*DescribeTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateCodeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateCodeTemplate(ctx, req.(*CreateCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateCodeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateCodeTemplate(ctx, req.(*UpdateCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteCodeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteCodeTemplate(ctx, req.(*DeleteCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListCodeTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeTemplatesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListCodeTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListCodeTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListCodeTemplates(ctx, req.(*ListCodeTemplatesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeCodeTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeCodeTemplate(ctx, req.(*DescribeCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateAttachment(ctx, req.(*CreateAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_UpdateAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateAttachment(ctx, req.(*UpdateAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DeleteAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteAttachment(ctx, req.(*DeleteAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListAttachments(ctx, req.(*ListAttachmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeAttachment(ctx, req.(*DescribeAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListVersions(ctx, req.(*ListVersionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListProblemTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemTopInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListProblemTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListProblemTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListProblemTop(ctx, req.(*ListProblemTopInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeProblemGrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProblemGradingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeProblemGrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeProblemGrading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeProblemGrading(ctx, req.(*DescribeProblemGradingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_CreateSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateSubmission(ctx, req.(*CreateSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeSubmission(ctx, req.(*DescribeSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RetestSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetestSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RetestSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_RetestSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RetestSubmission(ctx, req.(*RetestSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_ListSubmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListSubmissions(ctx, req.(*ListSubmissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atlas_DescribeScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeScore(ctx, req.(*DescribeScoreInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Atlas_ServiceDesc is the grpc.ServiceDesc for Atlas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Atlas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _Atlas_CreateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _Atlas_DeleteProblem_Handler,
		},
		{
			MethodName: "ListProblems",
			Handler:    _Atlas_ListProblems_Handler,
		},
		{
			MethodName: "DescribeProblem",
			Handler:    _Atlas_DescribeProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _Atlas_UpdateProblem_Handler,
		},
		{
			MethodName: "SetBookmark",
			Handler:    _Atlas_SetBookmark_Handler,
		},
		{
			MethodName: "ListExamples",
			Handler:    _Atlas_ListExamples_Handler,
		},
		{
			MethodName: "UpdateVerifier",
			Handler:    _Atlas_UpdateVerifier_Handler,
		},
		{
			MethodName: "DescribeVerifier",
			Handler:    _Atlas_DescribeVerifier_Handler,
		},
		{
			MethodName: "UpdateInteractor",
			Handler:    _Atlas_UpdateInteractor_Handler,
		},
		{
			MethodName: "DescribeInteractor",
			Handler:    _Atlas_DescribeInteractor_Handler,
		},
		{
			MethodName: "CreateStatement",
			Handler:    _Atlas_CreateStatement_Handler,
		},
		{
			MethodName: "UpdateStatement",
			Handler:    _Atlas_UpdateStatement_Handler,
		},
		{
			MethodName: "DeleteStatement",
			Handler:    _Atlas_DeleteStatement_Handler,
		},
		{
			MethodName: "ListStatements",
			Handler:    _Atlas_ListStatements_Handler,
		},
		{
			MethodName: "DescribeStatement",
			Handler:    _Atlas_DescribeStatement_Handler,
		},
		{
			MethodName: "LookupStatement",
			Handler:    _Atlas_LookupStatement_Handler,
		},
		{
			MethodName: "RenderStatement",
			Handler:    _Atlas_RenderStatement_Handler,
		},
		{
			MethodName: "PreviewStatement",
			Handler:    _Atlas_PreviewStatement_Handler,
		},
		{
			MethodName: "CreateTestset",
			Handler:    _Atlas_CreateTestset_Handler,
		},
		{
			MethodName: "UpdateTestset",
			Handler:    _Atlas_UpdateTestset_Handler,
		},
		{
			MethodName: "DeleteTestset",
			Handler:    _Atlas_DeleteTestset_Handler,
		},
		{
			MethodName: "ListTestsets",
			Handler:    _Atlas_ListTestsets_Handler,
		},
		{
			MethodName: "DescribeTestset",
			Handler:    _Atlas_DescribeTestset_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _Atlas_CreateTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _Atlas_UpdateTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _Atlas_DeleteTest_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _Atlas_ListTests_Handler,
		},
		{
			MethodName: "DescribeTest",
			Handler:    _Atlas_DescribeTest_Handler,
		},
		{
			MethodName: "CreateCodeTemplate",
			Handler:    _Atlas_CreateCodeTemplate_Handler,
		},
		{
			MethodName: "UpdateCodeTemplate",
			Handler:    _Atlas_UpdateCodeTemplate_Handler,
		},
		{
			MethodName: "DeleteCodeTemplate",
			Handler:    _Atlas_DeleteCodeTemplate_Handler,
		},
		{
			MethodName: "ListCodeTemplates",
			Handler:    _Atlas_ListCodeTemplates_Handler,
		},
		{
			MethodName: "DescribeCodeTemplate",
			Handler:    _Atlas_DescribeCodeTemplate_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _Atlas_CreateAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _Atlas_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _Atlas_DeleteAttachment_Handler,
		},
		{
			MethodName: "ListAttachments",
			Handler:    _Atlas_ListAttachments_Handler,
		},
		{
			MethodName: "DescribeAttachment",
			Handler:    _Atlas_DescribeAttachment_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _Atlas_ListVersions_Handler,
		},
		{
			MethodName: "ListProblemTop",
			Handler:    _Atlas_ListProblemTop_Handler,
		},
		{
			MethodName: "DescribeProblemGrading",
			Handler:    _Atlas_DescribeProblemGrading_Handler,
		},
		{
			MethodName: "CreateSubmission",
			Handler:    _Atlas_CreateSubmission_Handler,
		},
		{
			MethodName: "DescribeSubmission",
			Handler:    _Atlas_DescribeSubmission_Handler,
		},
		{
			MethodName: "RetestSubmission",
			Handler:    _Atlas_RetestSubmission_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _Atlas_ListSubmissions_Handler,
		},
		{
			MethodName: "DescribeScore",
			Handler:    _Atlas_DescribeScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/atlas.proto",
}
