// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AtlasClient is the client API for Atlas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtlasClient interface {
	CreateProblem(ctx context.Context, in *CreateProblemInput, opts ...grpc.CallOption) (*CreateProblemOutput, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemInput, opts ...grpc.CallOption) (*DeleteProblemOutput, error)
	ListProblems(ctx context.Context, in *ListProblemsInput, opts ...grpc.CallOption) (*ListProblemsOutput, error)
	DescribeProblem(ctx context.Context, in *DescribeProblemInput, opts ...grpc.CallOption) (*DescribeProblemOutput, error)
	UpdateVisibility(ctx context.Context, in *UpdateVisibilityInput, opts ...grpc.CallOption) (*UpdateVisibilityOutput, error)
	UpdatePrivacy(ctx context.Context, in *UpdatePrivacyInput, opts ...grpc.CallOption) (*UpdatePrivacyOutput, error)
	ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error)
	UpdateVerifier(ctx context.Context, in *UpdateVerifierInput, opts ...grpc.CallOption) (*UpdateVerifierOutput, error)
	DescribeVerifier(ctx context.Context, in *DescribeVerifierInput, opts ...grpc.CallOption) (*DescribeVerifierOutput, error)
	UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error)
	DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error)
	CreateStatement(ctx context.Context, in *CreateStatementInput, opts ...grpc.CallOption) (*CreateStatementOutput, error)
	UpdateStatement(ctx context.Context, in *UpdateStatementInput, opts ...grpc.CallOption) (*UpdateStatementOutput, error)
	DeleteStatement(ctx context.Context, in *DeleteStatementInput, opts ...grpc.CallOption) (*DeleteStatementOutput, error)
	ListStatements(ctx context.Context, in *ListStatementsInput, opts ...grpc.CallOption) (*ListStatementsOutput, error)
	DescribeStatement(ctx context.Context, in *DescribeStatementInput, opts ...grpc.CallOption) (*DescribeStatementOutput, error)
	CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error)
	UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error)
	DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error)
	ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error)
	DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error)
	CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error)
	UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error)
	DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error)
	ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error)
	DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error)
	GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error)
	RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error)
	ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error)
	CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput, opts ...grpc.CallOption) (*CreateCodeTemplateOutput, error)
	UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput, opts ...grpc.CallOption) (*UpdateCodeTemplateOutput, error)
	DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput, opts ...grpc.CallOption) (*DeleteCodeTemplateOutput, error)
	ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput, opts ...grpc.CallOption) (*ListCodeTemplatesOutput, error)
	DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput, opts ...grpc.CallOption) (*DescribeCodeTemplateOutput, error)
	CreateAttachment(ctx context.Context, in *CreateAttachmentInput, opts ...grpc.CallOption) (*CreateAttachmentOutput, error)
	UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput, opts ...grpc.CallOption) (*UpdateAttachmentOutput, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput, opts ...grpc.CallOption) (*DeleteAttachmentOutput, error)
	ListAttachments(ctx context.Context, in *ListAttachmentsInput, opts ...grpc.CallOption) (*ListAttachmentsOutput, error)
	DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput, opts ...grpc.CallOption) (*DescribeAttachmentOutput, error)
	DescribeChange(ctx context.Context, in *DescribeChangeInput, opts ...grpc.CallOption) (*DescribeChangeOutput, error)
	ListChanges(ctx context.Context, in *ListChangesInput, opts ...grpc.CallOption) (*ListChangesOutput, error)
	ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error)
	DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error)
	CreateSolution(ctx context.Context, in *CreateSolutionInput, opts ...grpc.CallOption) (*CreateSolutionOutput, error)
	UpdateSolution(ctx context.Context, in *UpdateSolutionInput, opts ...grpc.CallOption) (*UpdateSolutionOutput, error)
	DeleteSolution(ctx context.Context, in *DeleteSolutionInput, opts ...grpc.CallOption) (*DeleteSolutionOutput, error)
	ListSolutions(ctx context.Context, in *ListSolutionsInput, opts ...grpc.CallOption) (*ListSolutionsOutput, error)
	DescribeSolution(ctx context.Context, in *DescribeSolutionInput, opts ...grpc.CallOption) (*DescribeSolutionOutput, error)
	PublishSolution(ctx context.Context, in *PublishSolutionInput, opts ...grpc.CallOption) (*PublishSolutionOutput, error)
	UnpublishSolution(ctx context.Context, in *UnpublishSolutionInput, opts ...grpc.CallOption) (*UnpublishSolutionOutput, error)
	ApproveSolution(ctx context.Context, in *ApproveSolutionInput, opts ...grpc.CallOption) (*ApproveSolutionOutput, error)
	RefuseSolution(ctx context.Context, in *RefuseSolutionInput, opts ...grpc.CallOption) (*RefuseSolutionOutput, error)
	CreateCategory(ctx context.Context, in *CreateCategoryInput, opts ...grpc.CallOption) (*CreateCategoryOutput, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryInput, opts ...grpc.CallOption) (*UpdateCategoryOutput, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryInput, opts ...grpc.CallOption) (*DeleteCategoryOutput, error)
	ListCategories(ctx context.Context, in *ListCategoriesInput, opts ...grpc.CallOption) (*ListCategoriesOutput, error)
	DescribeCategory(ctx context.Context, in *DescribeCategoryInput, opts ...grpc.CallOption) (*DescribeCategoryOutput, error)
	AssignCategory(ctx context.Context, in *AssignCategoryInput, opts ...grpc.CallOption) (*AssignCategoryOutput, error)
	UnassignCategory(ctx context.Context, in *UnassignCategoryInput, opts ...grpc.CallOption) (*UnassignCategoryOutput, error)
	CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error)
	DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error)
	DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error)
}

type atlasClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlasClient(cc grpc.ClientConnInterface) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) CreateProblem(ctx context.Context, in *CreateProblemInput, opts ...grpc.CallOption) (*CreateProblemOutput, error) {
	out := new(CreateProblemOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteProblem(ctx context.Context, in *DeleteProblemInput, opts ...grpc.CallOption) (*DeleteProblemOutput, error) {
	out := new(DeleteProblemOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListProblems(ctx context.Context, in *ListProblemsInput, opts ...grpc.CallOption) (*ListProblemsOutput, error) {
	out := new(ListProblemsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeProblem(ctx context.Context, in *DescribeProblemInput, opts ...grpc.CallOption) (*DescribeProblemOutput, error) {
	out := new(DescribeProblemOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateVisibility(ctx context.Context, in *UpdateVisibilityInput, opts ...grpc.CallOption) (*UpdateVisibilityOutput, error) {
	out := new(UpdateVisibilityOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdatePrivacy(ctx context.Context, in *UpdatePrivacyInput, opts ...grpc.CallOption) (*UpdatePrivacyOutput, error) {
	out := new(UpdatePrivacyOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdatePrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListExamples(ctx context.Context, in *ListExamplesInput, opts ...grpc.CallOption) (*ListExamplesOutput, error) {
	out := new(ListExamplesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateVerifier(ctx context.Context, in *UpdateVerifierInput, opts ...grpc.CallOption) (*UpdateVerifierOutput, error) {
	out := new(UpdateVerifierOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeVerifier(ctx context.Context, in *DescribeVerifierInput, opts ...grpc.CallOption) (*DescribeVerifierOutput, error) {
	out := new(DescribeVerifierOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput, opts ...grpc.CallOption) (*UpdateInteractorOutput, error) {
	out := new(UpdateInteractorOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateInteractor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput, opts ...grpc.CallOption) (*DescribeInteractorOutput, error) {
	out := new(DescribeInteractorOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeInteractor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateStatement(ctx context.Context, in *CreateStatementInput, opts ...grpc.CallOption) (*CreateStatementOutput, error) {
	out := new(CreateStatementOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateStatement(ctx context.Context, in *UpdateStatementInput, opts ...grpc.CallOption) (*UpdateStatementOutput, error) {
	out := new(UpdateStatementOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteStatement(ctx context.Context, in *DeleteStatementInput, opts ...grpc.CallOption) (*DeleteStatementOutput, error) {
	out := new(DeleteStatementOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListStatements(ctx context.Context, in *ListStatementsInput, opts ...grpc.CallOption) (*ListStatementsOutput, error) {
	out := new(ListStatementsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListStatements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeStatement(ctx context.Context, in *DescribeStatementInput, opts ...grpc.CallOption) (*DescribeStatementOutput, error) {
	out := new(DescribeStatementOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateTestset(ctx context.Context, in *CreateTestsetInput, opts ...grpc.CallOption) (*CreateTestsetOutput, error) {
	out := new(CreateTestsetOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateTestset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateTestset(ctx context.Context, in *UpdateTestsetInput, opts ...grpc.CallOption) (*UpdateTestsetOutput, error) {
	out := new(UpdateTestsetOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateTestset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteTestset(ctx context.Context, in *DeleteTestsetInput, opts ...grpc.CallOption) (*DeleteTestsetOutput, error) {
	out := new(DeleteTestsetOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteTestset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListTestsets(ctx context.Context, in *ListTestsetsInput, opts ...grpc.CallOption) (*ListTestsetsOutput, error) {
	out := new(ListTestsetsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListTestsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeTestset(ctx context.Context, in *DescribeTestsetInput, opts ...grpc.CallOption) (*DescribeTestsetOutput, error) {
	out := new(DescribeTestsetOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeTestset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateTest(ctx context.Context, in *CreateTestInput, opts ...grpc.CallOption) (*CreateTestOutput, error) {
	out := new(CreateTestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateTest(ctx context.Context, in *UpdateTestInput, opts ...grpc.CallOption) (*UpdateTestOutput, error) {
	out := new(UpdateTestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteTest(ctx context.Context, in *DeleteTestInput, opts ...grpc.CallOption) (*DeleteTestOutput, error) {
	out := new(DeleteTestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListTests(ctx context.Context, in *ListTestsInput, opts ...grpc.CallOption) (*ListTestsOutput, error) {
	out := new(ListTestsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeTest(ctx context.Context, in *DescribeTestInput, opts ...grpc.CallOption) (*DescribeTestOutput, error) {
	out := new(DescribeTestOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) GrantPermission(ctx context.Context, in *GrantPermissionInput, opts ...grpc.CallOption) (*GrantPermissionOutput, error) {
	out := new(GrantPermissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/GrantPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RevokePermission(ctx context.Context, in *RevokePermissionInput, opts ...grpc.CallOption) (*RevokePermissionOutput, error) {
	out := new(RevokePermissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/RevokePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListPermissions(ctx context.Context, in *ListPermissionsInput, opts ...grpc.CallOption) (*ListPermissionsOutput, error) {
	out := new(ListPermissionsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateCodeTemplate(ctx context.Context, in *CreateCodeTemplateInput, opts ...grpc.CallOption) (*CreateCodeTemplateOutput, error) {
	out := new(CreateCodeTemplateOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateCodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateCodeTemplate(ctx context.Context, in *UpdateCodeTemplateInput, opts ...grpc.CallOption) (*UpdateCodeTemplateOutput, error) {
	out := new(UpdateCodeTemplateOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateCodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteCodeTemplate(ctx context.Context, in *DeleteCodeTemplateInput, opts ...grpc.CallOption) (*DeleteCodeTemplateOutput, error) {
	out := new(DeleteCodeTemplateOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteCodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListCodeTemplates(ctx context.Context, in *ListCodeTemplatesInput, opts ...grpc.CallOption) (*ListCodeTemplatesOutput, error) {
	out := new(ListCodeTemplatesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListCodeTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeCodeTemplate(ctx context.Context, in *DescribeCodeTemplateInput, opts ...grpc.CallOption) (*DescribeCodeTemplateOutput, error) {
	out := new(DescribeCodeTemplateOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeCodeTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateAttachment(ctx context.Context, in *CreateAttachmentInput, opts ...grpc.CallOption) (*CreateAttachmentOutput, error) {
	out := new(CreateAttachmentOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateAttachment(ctx context.Context, in *UpdateAttachmentInput, opts ...grpc.CallOption) (*UpdateAttachmentOutput, error) {
	out := new(UpdateAttachmentOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentInput, opts ...grpc.CallOption) (*DeleteAttachmentOutput, error) {
	out := new(DeleteAttachmentOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListAttachments(ctx context.Context, in *ListAttachmentsInput, opts ...grpc.CallOption) (*ListAttachmentsOutput, error) {
	out := new(ListAttachmentsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeAttachment(ctx context.Context, in *DescribeAttachmentInput, opts ...grpc.CallOption) (*DescribeAttachmentOutput, error) {
	out := new(DescribeAttachmentOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeChange(ctx context.Context, in *DescribeChangeInput, opts ...grpc.CallOption) (*DescribeChangeOutput, error) {
	out := new(DescribeChangeOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListChanges(ctx context.Context, in *ListChangesInput, opts ...grpc.CallOption) (*ListChangesOutput, error) {
	out := new(ListChangesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListProblemTop(ctx context.Context, in *ListProblemTopInput, opts ...grpc.CallOption) (*ListProblemTopOutput, error) {
	out := new(ListProblemTopOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListProblemTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeProblemGrading(ctx context.Context, in *DescribeProblemGradingInput, opts ...grpc.CallOption) (*DescribeProblemGradingOutput, error) {
	out := new(DescribeProblemGradingOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeProblemGrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateSolution(ctx context.Context, in *CreateSolutionInput, opts ...grpc.CallOption) (*CreateSolutionOutput, error) {
	out := new(CreateSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateSolution(ctx context.Context, in *UpdateSolutionInput, opts ...grpc.CallOption) (*UpdateSolutionOutput, error) {
	out := new(UpdateSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteSolution(ctx context.Context, in *DeleteSolutionInput, opts ...grpc.CallOption) (*DeleteSolutionOutput, error) {
	out := new(DeleteSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListSolutions(ctx context.Context, in *ListSolutionsInput, opts ...grpc.CallOption) (*ListSolutionsOutput, error) {
	out := new(ListSolutionsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeSolution(ctx context.Context, in *DescribeSolutionInput, opts ...grpc.CallOption) (*DescribeSolutionOutput, error) {
	out := new(DescribeSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) PublishSolution(ctx context.Context, in *PublishSolutionInput, opts ...grpc.CallOption) (*PublishSolutionOutput, error) {
	out := new(PublishSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/PublishSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UnpublishSolution(ctx context.Context, in *UnpublishSolutionInput, opts ...grpc.CallOption) (*UnpublishSolutionOutput, error) {
	out := new(UnpublishSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UnpublishSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ApproveSolution(ctx context.Context, in *ApproveSolutionInput, opts ...grpc.CallOption) (*ApproveSolutionOutput, error) {
	out := new(ApproveSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ApproveSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) RefuseSolution(ctx context.Context, in *RefuseSolutionInput, opts ...grpc.CallOption) (*RefuseSolutionOutput, error) {
	out := new(RefuseSolutionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/RefuseSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateCategory(ctx context.Context, in *CreateCategoryInput, opts ...grpc.CallOption) (*CreateCategoryOutput, error) {
	out := new(CreateCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UpdateCategory(ctx context.Context, in *UpdateCategoryInput, opts ...grpc.CallOption) (*UpdateCategoryOutput, error) {
	out := new(UpdateCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DeleteCategory(ctx context.Context, in *DeleteCategoryInput, opts ...grpc.CallOption) (*DeleteCategoryOutput, error) {
	out := new(DeleteCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) ListCategories(ctx context.Context, in *ListCategoriesInput, opts ...grpc.CallOption) (*ListCategoriesOutput, error) {
	out := new(ListCategoriesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeCategory(ctx context.Context, in *DescribeCategoryInput, opts ...grpc.CallOption) (*DescribeCategoryOutput, error) {
	out := new(DescribeCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) AssignCategory(ctx context.Context, in *AssignCategoryInput, opts ...grpc.CallOption) (*AssignCategoryOutput, error) {
	out := new(AssignCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/AssignCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) UnassignCategory(ctx context.Context, in *UnassignCategoryInput, opts ...grpc.CallOption) (*UnassignCategoryOutput, error) {
	out := new(UnassignCategoryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/UnassignCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error) {
	out := new(CreateSubmissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/CreateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error) {
	out := new(DescribeSubmissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasClient) DescribeScore(ctx context.Context, in *DescribeScoreInput, opts ...grpc.CallOption) (*DescribeScoreOutput, error) {
	out := new(DescribeScoreOutput)
	err := c.cc.Invoke(ctx, "/eolymp.atlas.Atlas/DescribeScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlasServer is the server API for Atlas service.
// All implementations must embed UnimplementedAtlasServer
// for forward compatibility
type AtlasServer interface {
	CreateProblem(context.Context, *CreateProblemInput) (*CreateProblemOutput, error)
	DeleteProblem(context.Context, *DeleteProblemInput) (*DeleteProblemOutput, error)
	ListProblems(context.Context, *ListProblemsInput) (*ListProblemsOutput, error)
	DescribeProblem(context.Context, *DescribeProblemInput) (*DescribeProblemOutput, error)
	UpdateVisibility(context.Context, *UpdateVisibilityInput) (*UpdateVisibilityOutput, error)
	UpdatePrivacy(context.Context, *UpdatePrivacyInput) (*UpdatePrivacyOutput, error)
	ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error)
	UpdateVerifier(context.Context, *UpdateVerifierInput) (*UpdateVerifierOutput, error)
	DescribeVerifier(context.Context, *DescribeVerifierInput) (*DescribeVerifierOutput, error)
	UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error)
	DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error)
	CreateStatement(context.Context, *CreateStatementInput) (*CreateStatementOutput, error)
	UpdateStatement(context.Context, *UpdateStatementInput) (*UpdateStatementOutput, error)
	DeleteStatement(context.Context, *DeleteStatementInput) (*DeleteStatementOutput, error)
	ListStatements(context.Context, *ListStatementsInput) (*ListStatementsOutput, error)
	DescribeStatement(context.Context, *DescribeStatementInput) (*DescribeStatementOutput, error)
	CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error)
	UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error)
	DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error)
	ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error)
	DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error)
	CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error)
	UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error)
	DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error)
	ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error)
	DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error)
	GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error)
	RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error)
	ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error)
	CreateCodeTemplate(context.Context, *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error)
	UpdateCodeTemplate(context.Context, *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error)
	DeleteCodeTemplate(context.Context, *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error)
	ListCodeTemplates(context.Context, *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error)
	DescribeCodeTemplate(context.Context, *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error)
	CreateAttachment(context.Context, *CreateAttachmentInput) (*CreateAttachmentOutput, error)
	UpdateAttachment(context.Context, *UpdateAttachmentInput) (*UpdateAttachmentOutput, error)
	DeleteAttachment(context.Context, *DeleteAttachmentInput) (*DeleteAttachmentOutput, error)
	ListAttachments(context.Context, *ListAttachmentsInput) (*ListAttachmentsOutput, error)
	DescribeAttachment(context.Context, *DescribeAttachmentInput) (*DescribeAttachmentOutput, error)
	DescribeChange(context.Context, *DescribeChangeInput) (*DescribeChangeOutput, error)
	ListChanges(context.Context, *ListChangesInput) (*ListChangesOutput, error)
	ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error)
	DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error)
	CreateSolution(context.Context, *CreateSolutionInput) (*CreateSolutionOutput, error)
	UpdateSolution(context.Context, *UpdateSolutionInput) (*UpdateSolutionOutput, error)
	DeleteSolution(context.Context, *DeleteSolutionInput) (*DeleteSolutionOutput, error)
	ListSolutions(context.Context, *ListSolutionsInput) (*ListSolutionsOutput, error)
	DescribeSolution(context.Context, *DescribeSolutionInput) (*DescribeSolutionOutput, error)
	PublishSolution(context.Context, *PublishSolutionInput) (*PublishSolutionOutput, error)
	UnpublishSolution(context.Context, *UnpublishSolutionInput) (*UnpublishSolutionOutput, error)
	ApproveSolution(context.Context, *ApproveSolutionInput) (*ApproveSolutionOutput, error)
	RefuseSolution(context.Context, *RefuseSolutionInput) (*RefuseSolutionOutput, error)
	CreateCategory(context.Context, *CreateCategoryInput) (*CreateCategoryOutput, error)
	UpdateCategory(context.Context, *UpdateCategoryInput) (*UpdateCategoryOutput, error)
	DeleteCategory(context.Context, *DeleteCategoryInput) (*DeleteCategoryOutput, error)
	ListCategories(context.Context, *ListCategoriesInput) (*ListCategoriesOutput, error)
	DescribeCategory(context.Context, *DescribeCategoryInput) (*DescribeCategoryOutput, error)
	AssignCategory(context.Context, *AssignCategoryInput) (*AssignCategoryOutput, error)
	UnassignCategory(context.Context, *UnassignCategoryInput) (*UnassignCategoryOutput, error)
	CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error)
	DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error)
	DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error)
	mustEmbedUnimplementedAtlasServer()
}

// UnimplementedAtlasServer must be embedded to have forward compatible implementations.
type UnimplementedAtlasServer struct {
}

func (UnimplementedAtlasServer) CreateProblem(context.Context, *CreateProblemInput) (*CreateProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedAtlasServer) DeleteProblem(context.Context, *DeleteProblemInput) (*DeleteProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedAtlasServer) ListProblems(context.Context, *ListProblemsInput) (*ListProblemsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblems not implemented")
}
func (UnimplementedAtlasServer) DescribeProblem(context.Context, *DescribeProblemInput) (*DescribeProblemOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProblem not implemented")
}
func (UnimplementedAtlasServer) UpdateVisibility(context.Context, *UpdateVisibilityInput) (*UpdateVisibilityOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisibility not implemented")
}
func (UnimplementedAtlasServer) UpdatePrivacy(context.Context, *UpdatePrivacyInput) (*UpdatePrivacyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivacy not implemented")
}
func (UnimplementedAtlasServer) ListExamples(context.Context, *ListExamplesInput) (*ListExamplesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamples not implemented")
}
func (UnimplementedAtlasServer) UpdateVerifier(context.Context, *UpdateVerifierInput) (*UpdateVerifierOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifier not implemented")
}
func (UnimplementedAtlasServer) DescribeVerifier(context.Context, *DescribeVerifierInput) (*DescribeVerifierOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVerifier not implemented")
}
func (UnimplementedAtlasServer) UpdateInteractor(context.Context, *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInteractor not implemented")
}
func (UnimplementedAtlasServer) DescribeInteractor(context.Context, *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeInteractor not implemented")
}
func (UnimplementedAtlasServer) CreateStatement(context.Context, *CreateStatementInput) (*CreateStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatement not implemented")
}
func (UnimplementedAtlasServer) UpdateStatement(context.Context, *UpdateStatementInput) (*UpdateStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatement not implemented")
}
func (UnimplementedAtlasServer) DeleteStatement(context.Context, *DeleteStatementInput) (*DeleteStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatement not implemented")
}
func (UnimplementedAtlasServer) ListStatements(context.Context, *ListStatementsInput) (*ListStatementsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatements not implemented")
}
func (UnimplementedAtlasServer) DescribeStatement(context.Context, *DescribeStatementInput) (*DescribeStatementOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStatement not implemented")
}
func (UnimplementedAtlasServer) CreateTestset(context.Context, *CreateTestsetInput) (*CreateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestset not implemented")
}
func (UnimplementedAtlasServer) UpdateTestset(context.Context, *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestset not implemented")
}
func (UnimplementedAtlasServer) DeleteTestset(context.Context, *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestset not implemented")
}
func (UnimplementedAtlasServer) ListTestsets(context.Context, *ListTestsetsInput) (*ListTestsetsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestsets not implemented")
}
func (UnimplementedAtlasServer) DescribeTestset(context.Context, *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTestset not implemented")
}
func (UnimplementedAtlasServer) CreateTest(context.Context, *CreateTestInput) (*CreateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedAtlasServer) UpdateTest(context.Context, *UpdateTestInput) (*UpdateTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedAtlasServer) DeleteTest(context.Context, *DeleteTestInput) (*DeleteTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}
func (UnimplementedAtlasServer) ListTests(context.Context, *ListTestsInput) (*ListTestsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTests not implemented")
}
func (UnimplementedAtlasServer) DescribeTest(context.Context, *DescribeTestInput) (*DescribeTestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTest not implemented")
}
func (UnimplementedAtlasServer) GrantPermission(context.Context, *GrantPermissionInput) (*GrantPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPermission not implemented")
}
func (UnimplementedAtlasServer) RevokePermission(context.Context, *RevokePermissionInput) (*RevokePermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermission not implemented")
}
func (UnimplementedAtlasServer) ListPermissions(context.Context, *ListPermissionsInput) (*ListPermissionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAtlasServer) CreateCodeTemplate(context.Context, *CreateCodeTemplateInput) (*CreateCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) UpdateCodeTemplate(context.Context, *UpdateCodeTemplateInput) (*UpdateCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) DeleteCodeTemplate(context.Context, *DeleteCodeTemplateInput) (*DeleteCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) ListCodeTemplates(context.Context, *ListCodeTemplatesInput) (*ListCodeTemplatesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeTemplates not implemented")
}
func (UnimplementedAtlasServer) DescribeCodeTemplate(context.Context, *DescribeCodeTemplateInput) (*DescribeCodeTemplateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCodeTemplate not implemented")
}
func (UnimplementedAtlasServer) CreateAttachment(context.Context, *CreateAttachmentInput) (*CreateAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedAtlasServer) UpdateAttachment(context.Context, *UpdateAttachmentInput) (*UpdateAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedAtlasServer) DeleteAttachment(context.Context, *DeleteAttachmentInput) (*DeleteAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedAtlasServer) ListAttachments(context.Context, *ListAttachmentsInput) (*ListAttachmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachments not implemented")
}
func (UnimplementedAtlasServer) DescribeAttachment(context.Context, *DescribeAttachmentInput) (*DescribeAttachmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAttachment not implemented")
}
func (UnimplementedAtlasServer) DescribeChange(context.Context, *DescribeChangeInput) (*DescribeChangeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChange not implemented")
}
func (UnimplementedAtlasServer) ListChanges(context.Context, *ListChangesInput) (*ListChangesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedAtlasServer) ListProblemTop(context.Context, *ListProblemTopInput) (*ListProblemTopOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProblemTop not implemented")
}
func (UnimplementedAtlasServer) DescribeProblemGrading(context.Context, *DescribeProblemGradingInput) (*DescribeProblemGradingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProblemGrading not implemented")
}
func (UnimplementedAtlasServer) CreateSolution(context.Context, *CreateSolutionInput) (*CreateSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolution not implemented")
}
func (UnimplementedAtlasServer) UpdateSolution(context.Context, *UpdateSolutionInput) (*UpdateSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSolution not implemented")
}
func (UnimplementedAtlasServer) DeleteSolution(context.Context, *DeleteSolutionInput) (*DeleteSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSolution not implemented")
}
func (UnimplementedAtlasServer) ListSolutions(context.Context, *ListSolutionsInput) (*ListSolutionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutions not implemented")
}
func (UnimplementedAtlasServer) DescribeSolution(context.Context, *DescribeSolutionInput) (*DescribeSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSolution not implemented")
}
func (UnimplementedAtlasServer) PublishSolution(context.Context, *PublishSolutionInput) (*PublishSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSolution not implemented")
}
func (UnimplementedAtlasServer) UnpublishSolution(context.Context, *UnpublishSolutionInput) (*UnpublishSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishSolution not implemented")
}
func (UnimplementedAtlasServer) ApproveSolution(context.Context, *ApproveSolutionInput) (*ApproveSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveSolution not implemented")
}
func (UnimplementedAtlasServer) RefuseSolution(context.Context, *RefuseSolutionInput) (*RefuseSolutionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseSolution not implemented")
}
func (UnimplementedAtlasServer) CreateCategory(context.Context, *CreateCategoryInput) (*CreateCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedAtlasServer) UpdateCategory(context.Context, *UpdateCategoryInput) (*UpdateCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedAtlasServer) DeleteCategory(context.Context, *DeleteCategoryInput) (*DeleteCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedAtlasServer) ListCategories(context.Context, *ListCategoriesInput) (*ListCategoriesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedAtlasServer) DescribeCategory(context.Context, *DescribeCategoryInput) (*DescribeCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCategory not implemented")
}
func (UnimplementedAtlasServer) AssignCategory(context.Context, *AssignCategoryInput) (*AssignCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCategory not implemented")
}
func (UnimplementedAtlasServer) UnassignCategory(context.Context, *UnassignCategoryInput) (*UnassignCategoryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignCategory not implemented")
}
func (UnimplementedAtlasServer) CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedAtlasServer) DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSubmission not implemented")
}
func (UnimplementedAtlasServer) DescribeScore(context.Context, *DescribeScoreInput) (*DescribeScoreOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeScore not implemented")
}
func (UnimplementedAtlasServer) mustEmbedUnimplementedAtlasServer() {}

// UnsafeAtlasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtlasServer will
// result in compilation errors.
type UnsafeAtlasServer interface {
	mustEmbedUnimplementedAtlasServer()
}

func RegisterAtlasServer(s grpc.ServiceRegistrar, srv AtlasServer) {
	s.RegisterService(&Atlas_ServiceDesc, srv)
}

func _Atlas_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateProblem(ctx, req.(*CreateProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteProblem(ctx, req.(*DeleteProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListProblems(ctx, req.(*ListProblemsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProblemInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeProblem(ctx, req.(*DescribeProblemInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisibilityInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateVisibility(ctx, req.(*UpdateVisibilityInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdatePrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivacyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdatePrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdatePrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdatePrivacy(ctx, req.(*UpdatePrivacyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamplesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListExamples(ctx, req.(*ListExamplesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVerifierInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateVerifier(ctx, req.(*UpdateVerifierInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVerifierInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeVerifier(ctx, req.(*DescribeVerifierInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateInteractor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateInteractor(ctx, req.(*UpdateInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeInteractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeInteractorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeInteractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeInteractor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeInteractor(ctx, req.(*DescribeInteractorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateStatement(ctx, req.(*CreateStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateStatement(ctx, req.(*UpdateStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteStatement(ctx, req.(*DeleteStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatementsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListStatements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListStatements(ctx, req.(*ListStatementsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStatementInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeStatement(ctx, req.(*DescribeStatementInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateTestset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateTestset(ctx, req.(*CreateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateTestset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateTestset(ctx, req.(*UpdateTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteTestset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteTestset(ctx, req.(*DeleteTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListTestsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsetsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListTestsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListTestsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListTestsets(ctx, req.(*ListTestsetsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeTestset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestsetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeTestset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeTestset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeTestset(ctx, req.(*DescribeTestsetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateTest(ctx, req.(*CreateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateTest(ctx, req.(*UpdateTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteTest(ctx, req.(*DeleteTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListTests(ctx, req.(*ListTestsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeTest(ctx, req.(*DescribeTestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_GrantPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantPermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).GrantPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/GrantPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).GrantPermission(ctx, req.(*GrantPermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePermissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/RevokePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RevokePermission(ctx, req.(*RevokePermissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListPermissions(ctx, req.(*ListPermissionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateCodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateCodeTemplate(ctx, req.(*CreateCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateCodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateCodeTemplate(ctx, req.(*UpdateCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteCodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteCodeTemplate(ctx, req.(*DeleteCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListCodeTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeTemplatesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListCodeTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListCodeTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListCodeTemplates(ctx, req.(*ListCodeTemplatesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeCodeTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCodeTemplateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeCodeTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeCodeTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeCodeTemplate(ctx, req.(*DescribeCodeTemplateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateAttachment(ctx, req.(*CreateAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateAttachment(ctx, req.(*UpdateAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteAttachment(ctx, req.(*DeleteAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListAttachments(ctx, req.(*ListAttachmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAttachmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeAttachment(ctx, req.(*DescribeAttachmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeChange(ctx, req.(*DescribeChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListChanges(ctx, req.(*ListChangesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListProblemTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProblemTopInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListProblemTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListProblemTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListProblemTop(ctx, req.(*ListProblemTopInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeProblemGrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProblemGradingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeProblemGrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeProblemGrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeProblemGrading(ctx, req.(*DescribeProblemGradingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateSolution(ctx, req.(*CreateSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateSolution(ctx, req.(*UpdateSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteSolution(ctx, req.(*DeleteSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListSolutions(ctx, req.(*ListSolutionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeSolution(ctx, req.(*DescribeSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_PublishSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).PublishSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/PublishSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).PublishSolution(ctx, req.(*PublishSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UnpublishSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UnpublishSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UnpublishSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UnpublishSolution(ctx, req.(*UnpublishSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ApproveSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ApproveSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ApproveSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ApproveSolution(ctx, req.(*ApproveSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_RefuseSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseSolutionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).RefuseSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/RefuseSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).RefuseSolution(ctx, req.(*RefuseSolutionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateCategory(ctx, req.(*CreateCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UpdateCategory(ctx, req.(*UpdateCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DeleteCategory(ctx, req.(*DeleteCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).ListCategories(ctx, req.(*ListCategoriesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeCategory(ctx, req.(*DescribeCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_AssignCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).AssignCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/AssignCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).AssignCategory(ctx, req.(*AssignCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_UnassignCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignCategoryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).UnassignCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/UnassignCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).UnassignCategory(ctx, req.(*UnassignCategoryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/CreateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).CreateSubmission(ctx, req.(*CreateSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeSubmission(ctx, req.(*DescribeSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atlas_DescribeScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeScoreInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServer).DescribeScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.atlas.Atlas/DescribeScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServer).DescribeScore(ctx, req.(*DescribeScoreInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Atlas_ServiceDesc is the grpc.ServiceDesc for Atlas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Atlas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.atlas.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProblem",
			Handler:    _Atlas_CreateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _Atlas_DeleteProblem_Handler,
		},
		{
			MethodName: "ListProblems",
			Handler:    _Atlas_ListProblems_Handler,
		},
		{
			MethodName: "DescribeProblem",
			Handler:    _Atlas_DescribeProblem_Handler,
		},
		{
			MethodName: "UpdateVisibility",
			Handler:    _Atlas_UpdateVisibility_Handler,
		},
		{
			MethodName: "UpdatePrivacy",
			Handler:    _Atlas_UpdatePrivacy_Handler,
		},
		{
			MethodName: "ListExamples",
			Handler:    _Atlas_ListExamples_Handler,
		},
		{
			MethodName: "UpdateVerifier",
			Handler:    _Atlas_UpdateVerifier_Handler,
		},
		{
			MethodName: "DescribeVerifier",
			Handler:    _Atlas_DescribeVerifier_Handler,
		},
		{
			MethodName: "UpdateInteractor",
			Handler:    _Atlas_UpdateInteractor_Handler,
		},
		{
			MethodName: "DescribeInteractor",
			Handler:    _Atlas_DescribeInteractor_Handler,
		},
		{
			MethodName: "CreateStatement",
			Handler:    _Atlas_CreateStatement_Handler,
		},
		{
			MethodName: "UpdateStatement",
			Handler:    _Atlas_UpdateStatement_Handler,
		},
		{
			MethodName: "DeleteStatement",
			Handler:    _Atlas_DeleteStatement_Handler,
		},
		{
			MethodName: "ListStatements",
			Handler:    _Atlas_ListStatements_Handler,
		},
		{
			MethodName: "DescribeStatement",
			Handler:    _Atlas_DescribeStatement_Handler,
		},
		{
			MethodName: "CreateTestset",
			Handler:    _Atlas_CreateTestset_Handler,
		},
		{
			MethodName: "UpdateTestset",
			Handler:    _Atlas_UpdateTestset_Handler,
		},
		{
			MethodName: "DeleteTestset",
			Handler:    _Atlas_DeleteTestset_Handler,
		},
		{
			MethodName: "ListTestsets",
			Handler:    _Atlas_ListTestsets_Handler,
		},
		{
			MethodName: "DescribeTestset",
			Handler:    _Atlas_DescribeTestset_Handler,
		},
		{
			MethodName: "CreateTest",
			Handler:    _Atlas_CreateTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _Atlas_UpdateTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _Atlas_DeleteTest_Handler,
		},
		{
			MethodName: "ListTests",
			Handler:    _Atlas_ListTests_Handler,
		},
		{
			MethodName: "DescribeTest",
			Handler:    _Atlas_DescribeTest_Handler,
		},
		{
			MethodName: "GrantPermission",
			Handler:    _Atlas_GrantPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _Atlas_RevokePermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _Atlas_ListPermissions_Handler,
		},
		{
			MethodName: "CreateCodeTemplate",
			Handler:    _Atlas_CreateCodeTemplate_Handler,
		},
		{
			MethodName: "UpdateCodeTemplate",
			Handler:    _Atlas_UpdateCodeTemplate_Handler,
		},
		{
			MethodName: "DeleteCodeTemplate",
			Handler:    _Atlas_DeleteCodeTemplate_Handler,
		},
		{
			MethodName: "ListCodeTemplates",
			Handler:    _Atlas_ListCodeTemplates_Handler,
		},
		{
			MethodName: "DescribeCodeTemplate",
			Handler:    _Atlas_DescribeCodeTemplate_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _Atlas_CreateAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _Atlas_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _Atlas_DeleteAttachment_Handler,
		},
		{
			MethodName: "ListAttachments",
			Handler:    _Atlas_ListAttachments_Handler,
		},
		{
			MethodName: "DescribeAttachment",
			Handler:    _Atlas_DescribeAttachment_Handler,
		},
		{
			MethodName: "DescribeChange",
			Handler:    _Atlas_DescribeChange_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _Atlas_ListChanges_Handler,
		},
		{
			MethodName: "ListProblemTop",
			Handler:    _Atlas_ListProblemTop_Handler,
		},
		{
			MethodName: "DescribeProblemGrading",
			Handler:    _Atlas_DescribeProblemGrading_Handler,
		},
		{
			MethodName: "CreateSolution",
			Handler:    _Atlas_CreateSolution_Handler,
		},
		{
			MethodName: "UpdateSolution",
			Handler:    _Atlas_UpdateSolution_Handler,
		},
		{
			MethodName: "DeleteSolution",
			Handler:    _Atlas_DeleteSolution_Handler,
		},
		{
			MethodName: "ListSolutions",
			Handler:    _Atlas_ListSolutions_Handler,
		},
		{
			MethodName: "DescribeSolution",
			Handler:    _Atlas_DescribeSolution_Handler,
		},
		{
			MethodName: "PublishSolution",
			Handler:    _Atlas_PublishSolution_Handler,
		},
		{
			MethodName: "UnpublishSolution",
			Handler:    _Atlas_UnpublishSolution_Handler,
		},
		{
			MethodName: "ApproveSolution",
			Handler:    _Atlas_ApproveSolution_Handler,
		},
		{
			MethodName: "RefuseSolution",
			Handler:    _Atlas_RefuseSolution_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Atlas_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Atlas_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Atlas_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _Atlas_ListCategories_Handler,
		},
		{
			MethodName: "DescribeCategory",
			Handler:    _Atlas_DescribeCategory_Handler,
		},
		{
			MethodName: "AssignCategory",
			Handler:    _Atlas_AssignCategory_Handler,
		},
		{
			MethodName: "UnassignCategory",
			Handler:    _Atlas_UnassignCategory_Handler,
		},
		{
			MethodName: "CreateSubmission",
			Handler:    _Atlas_CreateSubmission_Handler,
		},
		{
			MethodName: "DescribeSubmission",
			Handler:    _Atlas_DescribeSubmission_Handler,
		},
		{
			MethodName: "DescribeScore",
			Handler:    _Atlas_DescribeScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/atlas/atlas.proto",
}
