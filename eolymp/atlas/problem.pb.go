// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.4
// source: eolymp/atlas/problem.proto

package atlas

import (
	ecm "github.com/eolymp/go-sdk/eolymp/ecm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Problem_Extra int32

const (
	Problem_UNKNOWN_EXTRA  Problem_Extra = 0
	Problem_VOTE           Problem_Extra = 1
	Problem_TITLE          Problem_Extra = 2
	Problem_CONTENT_VALUE  Problem_Extra = 3
	Problem_CONTENT_RENDER Problem_Extra = 4
)

// Enum value maps for Problem_Extra.
var (
	Problem_Extra_name = map[int32]string{
		0: "UNKNOWN_EXTRA",
		1: "VOTE",
		2: "TITLE",
		3: "CONTENT_VALUE",
		4: "CONTENT_RENDER",
	}
	Problem_Extra_value = map[string]int32{
		"UNKNOWN_EXTRA":  0,
		"VOTE":           1,
		"TITLE":          2,
		"CONTENT_VALUE":  3,
		"CONTENT_RENDER": 4,
	}
)

func (x Problem_Extra) Enum() *Problem_Extra {
	p := new(Problem_Extra)
	*p = x
	return p
}

func (x Problem_Extra) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Problem_Extra) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_problem_proto_enumTypes[0].Descriptor()
}

func (Problem_Extra) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_problem_proto_enumTypes[0]
}

func (x Problem_Extra) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Problem_Extra.Descriptor instead.
func (Problem_Extra) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_proto_rawDescGZIP(), []int{0, 0}
}

type Problem_Type int32

const (
	Problem_UNKNOWN_TYPE Problem_Type = 0
	Problem_PROGRAM      Problem_Type = 1 // program problem, user should write a program to solve it
	Problem_FUNCTION     Problem_Type = 2 // function problem, user should write a function to solve it
	Problem_OUTPUT       Problem_Type = 3 // output-only problem, user should upload answer file to solve it
	Problem_SQL          Problem_Type = 4 // SQL problem, user should write SQL queries to solve it
	Problem_ML           Problem_Type = 5 // Machine learning problem
)

// Enum value maps for Problem_Type.
var (
	Problem_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "PROGRAM",
		2: "FUNCTION",
		3: "OUTPUT",
		4: "SQL",
		5: "ML",
	}
	Problem_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"PROGRAM":      1,
		"FUNCTION":     2,
		"OUTPUT":       3,
		"SQL":          4,
		"ML":           5,
	}
)

func (x Problem_Type) Enum() *Problem_Type {
	p := new(Problem_Type)
	*p = x
	return p
}

func (x Problem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Problem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_problem_proto_enumTypes[1].Descriptor()
}

func (Problem_Type) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_problem_proto_enumTypes[1]
}

func (x Problem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Problem_Type.Descriptor instead.
func (Problem_Type) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_proto_rawDescGZIP(), []int{0, 1}
}

type Problem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier.
	Id    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url   string            `protobuf:"bytes,682,opt,name=url,proto3" json:"url,omitempty"`
	Type  Problem_Type      `protobuf:"varint,23,opt,name=type,proto3,enum=eolymp.atlas.Problem_Type" json:"type,omitempty"`
	Links map[string]string `protobuf:"bytes,683,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Index in the public problem catalog.
	Number int32 `protobuf:"varint,10,opt,name=number,proto3" json:"number,omitempty"`
	// Problem is visible to users in public catalog.
	Visible bool `protobuf:"varint,11,opt,name=visible,proto3" json:"visible,omitempty"`
	// For imported problems, provides the source from where the problem is imported and synchronized.
	Origin  string       `protobuf:"bytes,13,opt,name=origin,proto3" json:"origin,omitempty"`
	Title   string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content *ecm.Content `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// Problem topics (ID of topics from eolymp.taxonomy.TopicService)
	Topics      []string             `protobuf:"bytes,20,rep,name=topics,proto3" json:"topics,omitempty"`
	Score       float32              `protobuf:"fixed32,31,opt,name=score,proto3" json:"score,omitempty"`           // Total score
	Constraints *Problem_Constraints `protobuf:"bytes,30,opt,name=constraints,proto3" json:"constraints,omitempty"` // Constraints
	// Acceptance rate from 0 to 1, where 1 means that all submissions are accepted.
	AcceptanceRate      float32 `protobuf:"fixed32,40,opt,name=acceptance_rate,json=acceptanceRate,proto3" json:"acceptance_rate,omitempty"`
	SubmissionsCount    uint32  `protobuf:"varint,42,opt,name=submissions_count,json=submissionsCount,proto3" json:"submissions_count,omitempty"`
	SubmissionsAccepted uint32  `protobuf:"varint,43,opt,name=submissions_accepted,json=submissionsAccepted,proto3" json:"submissions_accepted,omitempty"`
	// Number of votes for the problem
	Vote      int32 `protobuf:"varint,50,opt,name=vote,proto3" json:"vote,omitempty"`
	VoteCount int32 `protobuf:"varint,51,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	// Difficulty from 0 (very easy) to 5 (very hard)
	Difficulty    uint32 `protobuf:"varint,21,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_eolymp_atlas_problem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_proto_rawDescGZIP(), []int{0}
}

func (x *Problem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Problem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Problem) GetType() Problem_Type {
	if x != nil {
		return x.Type
	}
	return Problem_UNKNOWN_TYPE
}

func (x *Problem) GetLinks() map[string]string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Problem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Problem) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Problem) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetContent() *ecm.Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Problem) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Problem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Problem) GetConstraints() *Problem_Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Problem) GetAcceptanceRate() float32 {
	if x != nil {
		return x.AcceptanceRate
	}
	return 0
}

func (x *Problem) GetSubmissionsCount() uint32 {
	if x != nil {
		return x.SubmissionsCount
	}
	return 0
}

func (x *Problem) GetSubmissionsAccepted() uint32 {
	if x != nil {
		return x.SubmissionsAccepted
	}
	return 0
}

func (x *Problem) GetVote() int32 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *Problem) GetVoteCount() int32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *Problem) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type Problem_Constraints struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TimeLimitMin   uint32                 `protobuf:"varint,60,opt,name=time_limit_min,json=timeLimitMin,proto3" json:"time_limit_min,omitempty"`
	TimeLimitMax   uint32                 `protobuf:"varint,61,opt,name=time_limit_max,json=timeLimitMax,proto3" json:"time_limit_max,omitempty"`
	CpuLimitMin    uint32                 `protobuf:"varint,62,opt,name=cpu_limit_min,json=cpuLimitMin,proto3" json:"cpu_limit_min,omitempty"`
	CpuLimitMax    uint32                 `protobuf:"varint,63,opt,name=cpu_limit_max,json=cpuLimitMax,proto3" json:"cpu_limit_max,omitempty"`
	MemoryLimitMin uint64                 `protobuf:"varint,64,opt,name=memory_limit_min,json=memoryLimitMin,proto3" json:"memory_limit_min,omitempty"`
	MemoryLimitMax uint64                 `protobuf:"varint,65,opt,name=memory_limit_max,json=memoryLimitMax,proto3" json:"memory_limit_max,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Problem_Constraints) Reset() {
	*x = Problem_Constraints{}
	mi := &file_eolymp_atlas_problem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem_Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem_Constraints) ProtoMessage() {}

func (x *Problem_Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_problem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem_Constraints.ProtoReflect.Descriptor instead.
func (*Problem_Constraints) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_problem_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Problem_Constraints) GetTimeLimitMin() uint32 {
	if x != nil {
		return x.TimeLimitMin
	}
	return 0
}

func (x *Problem_Constraints) GetTimeLimitMax() uint32 {
	if x != nil {
		return x.TimeLimitMax
	}
	return 0
}

func (x *Problem_Constraints) GetCpuLimitMin() uint32 {
	if x != nil {
		return x.CpuLimitMin
	}
	return 0
}

func (x *Problem_Constraints) GetCpuLimitMax() uint32 {
	if x != nil {
		return x.CpuLimitMax
	}
	return 0
}

func (x *Problem_Constraints) GetMemoryLimitMin() uint64 {
	if x != nil {
		return x.MemoryLimitMin
	}
	return 0
}

func (x *Problem_Constraints) GetMemoryLimitMax() uint64 {
	if x != nil {
		return x.MemoryLimitMax
	}
	return 0
}

var File_eolymp_atlas_problem_proto protoreflect.FileDescriptor

const file_eolymp_atlas_problem_proto_rawDesc = "" +
	"\n" +
	"\x1aeolymp/atlas/problem.proto\x12\feolymp.atlas\x1a\x18eolymp/ecm/content.proto\"\xcf\b\n" +
	"\aProblem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x11\n" +
	"\x03url\x18\xaa\x05 \x01(\tR\x03url\x12.\n" +
	"\x04type\x18\x17 \x01(\x0e2\x1a.eolymp.atlas.Problem.TypeR\x04type\x127\n" +
	"\x05links\x18\xab\x05 \x03(\v2 .eolymp.atlas.Problem.LinksEntryR\x05links\x12\x16\n" +
	"\x06number\x18\n" +
	" \x01(\x05R\x06number\x12\x18\n" +
	"\avisible\x18\v \x01(\bR\avisible\x12\x16\n" +
	"\x06origin\x18\r \x01(\tR\x06origin\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12-\n" +
	"\acontent\x18\x03 \x01(\v2\x13.eolymp.ecm.ContentR\acontent\x12\x16\n" +
	"\x06topics\x18\x14 \x03(\tR\x06topics\x12\x14\n" +
	"\x05score\x18\x1f \x01(\x02R\x05score\x12C\n" +
	"\vconstraints\x18\x1e \x01(\v2!.eolymp.atlas.Problem.ConstraintsR\vconstraints\x12'\n" +
	"\x0facceptance_rate\x18( \x01(\x02R\x0eacceptanceRate\x12+\n" +
	"\x11submissions_count\x18* \x01(\rR\x10submissionsCount\x121\n" +
	"\x14submissions_accepted\x18+ \x01(\rR\x13submissionsAccepted\x12\x12\n" +
	"\x04vote\x182 \x01(\x05R\x04vote\x12\x1d\n" +
	"\n" +
	"vote_count\x183 \x01(\x05R\tvoteCount\x12\x1e\n" +
	"\n" +
	"difficulty\x18\x15 \x01(\rR\n" +
	"difficulty\x1a\xf5\x01\n" +
	"\vConstraints\x12$\n" +
	"\x0etime_limit_min\x18< \x01(\rR\ftimeLimitMin\x12$\n" +
	"\x0etime_limit_max\x18= \x01(\rR\ftimeLimitMax\x12\"\n" +
	"\rcpu_limit_min\x18> \x01(\rR\vcpuLimitMin\x12\"\n" +
	"\rcpu_limit_max\x18? \x01(\rR\vcpuLimitMax\x12(\n" +
	"\x10memory_limit_min\x18@ \x01(\x04R\x0ememoryLimitMin\x12(\n" +
	"\x10memory_limit_max\x18A \x01(\x04R\x0ememoryLimitMax\x1a8\n" +
	"\n" +
	"LinksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"V\n" +
	"\x05Extra\x12\x11\n" +
	"\rUNKNOWN_EXTRA\x10\x00\x12\b\n" +
	"\x04VOTE\x10\x01\x12\t\n" +
	"\x05TITLE\x10\x02\x12\x11\n" +
	"\rCONTENT_VALUE\x10\x03\x12\x12\n" +
	"\x0eCONTENT_RENDER\x10\x04\"P\n" +
	"\x04Type\x12\x10\n" +
	"\fUNKNOWN_TYPE\x10\x00\x12\v\n" +
	"\aPROGRAM\x10\x01\x12\f\n" +
	"\bFUNCTION\x10\x02\x12\n" +
	"\n" +
	"\x06OUTPUT\x10\x03\x12\a\n" +
	"\x03SQL\x10\x04\x12\x06\n" +
	"\x02ML\x10\x05B-Z+github.com/eolymp/go-sdk/eolymp/atlas;atlasb\x06proto3"

var (
	file_eolymp_atlas_problem_proto_rawDescOnce sync.Once
	file_eolymp_atlas_problem_proto_rawDescData []byte
)

func file_eolymp_atlas_problem_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_problem_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_problem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_atlas_problem_proto_rawDesc), len(file_eolymp_atlas_problem_proto_rawDesc)))
	})
	return file_eolymp_atlas_problem_proto_rawDescData
}

var file_eolymp_atlas_problem_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_atlas_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_eolymp_atlas_problem_proto_goTypes = []any{
	(Problem_Extra)(0),          // 0: eolymp.atlas.Problem.Extra
	(Problem_Type)(0),           // 1: eolymp.atlas.Problem.Type
	(*Problem)(nil),             // 2: eolymp.atlas.Problem
	(*Problem_Constraints)(nil), // 3: eolymp.atlas.Problem.Constraints
	nil,                         // 4: eolymp.atlas.Problem.LinksEntry
	(*ecm.Content)(nil),         // 5: eolymp.ecm.Content
}
var file_eolymp_atlas_problem_proto_depIdxs = []int32{
	1, // 0: eolymp.atlas.Problem.type:type_name -> eolymp.atlas.Problem.Type
	4, // 1: eolymp.atlas.Problem.links:type_name -> eolymp.atlas.Problem.LinksEntry
	5, // 2: eolymp.atlas.Problem.content:type_name -> eolymp.ecm.Content
	3, // 3: eolymp.atlas.Problem.constraints:type_name -> eolymp.atlas.Problem.Constraints
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_problem_proto_init() }
func file_eolymp_atlas_problem_proto_init() {
	if File_eolymp_atlas_problem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_atlas_problem_proto_rawDesc), len(file_eolymp_atlas_problem_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_atlas_problem_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_problem_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_problem_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_problem_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_problem_proto = out.File
	file_eolymp_atlas_problem_proto_goTypes = nil
	file_eolymp_atlas_problem_proto_depIdxs = nil
}
