// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _SuggestionService_HTTPReadQueryString parses body into proto.Message
func _SuggestionService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _SuggestionService_HTTPReadRequestBody parses body into proto.Message
func _SuggestionService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _SuggestionService_HTTPWriteResponse writes proto.Message to HTTP response
func _SuggestionService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_SuggestionService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _SuggestionService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _SuggestionService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _SuggestionService_WebsocketErrorResponse writes error to websocket connection
func _SuggestionService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _SuggestionService_WebsocketCodec implements protobuf codec for websockets package
var _SuggestionService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterSuggestionServiceHttpHandlers adds handlers for for SuggestionServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterSuggestionServiceHttpHandlers(router *mux.Router, prefix string, cli SuggestionServiceClient) {
	router.Handle(prefix+"/suggestions", _SuggestionService_CreateSuggestion_Rule0(cli)).
		Methods("POST").
		Name("eolymp.atlas.SuggestionService.CreateSuggestion")
	router.Handle(prefix+"/suggestions/{suggestion_id}", _SuggestionService_UpdateSuggestion_Rule0(cli)).
		Methods("POST").
		Name("eolymp.atlas.SuggestionService.UpdateSuggestion")
	router.Handle(prefix+"/suggestions/{suggestion_id}/review", _SuggestionService_ReviewSuggestion_Rule0(cli)).
		Methods("POST").
		Name("eolymp.atlas.SuggestionService.ReviewSuggestion")
	router.Handle(prefix+"/suggestions/{suggestion_id}/resubmit", _SuggestionService_ResubmitSuggestion_Rule0(cli)).
		Methods("POST").
		Name("eolymp.atlas.SuggestionService.ResubmitSuggestion")
	router.Handle(prefix+"/suggestions/{suggestion_id}", _SuggestionService_DeleteSuggestion_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.atlas.SuggestionService.DeleteSuggestion")
	router.Handle(prefix+"/suggestions", _SuggestionService_ListSuggestions_Rule0(cli)).
		Methods("GET").
		Name("eolymp.atlas.SuggestionService.ListSuggestions")
	router.Handle(prefix+"/suggestions/{suggestion_id}", _SuggestionService_DescribeSuggestion_Rule0(cli)).
		Methods("GET").
		Name("eolymp.atlas.SuggestionService.DescribeSuggestion")
}

func _SuggestionService_CreateSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateSuggestionInput{}

		if err := _SuggestionService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_UpdateSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateSuggestionInput{}

		if err := _SuggestionService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.SuggestionId = vars["suggestion_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_ReviewSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ReviewSuggestionInput{}

		if err := _SuggestionService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.SuggestionId = vars["suggestion_id"]

		var header, trailer metadata.MD

		out, err := cli.ReviewSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_ResubmitSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResubmitSuggestionInput{}

		if err := _SuggestionService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.SuggestionId = vars["suggestion_id"]

		var header, trailer metadata.MD

		out, err := cli.ResubmitSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_DeleteSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteSuggestionInput{}

		if err := _SuggestionService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.SuggestionId = vars["suggestion_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_ListSuggestions_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListSuggestionsInput{}

		if err := _SuggestionService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListSuggestions(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _SuggestionService_DescribeSuggestion_Rule0(cli SuggestionServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeSuggestionInput{}

		if err := _SuggestionService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.SuggestionId = vars["suggestion_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeSuggestion(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_SuggestionService_HTTPWriteErrorResponse(w, err)
			return
		}

		_SuggestionService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _SuggestionServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _SuggestionServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _SuggestionServiceHandler) (out proto.Message, err error)
type SuggestionServiceInterceptor struct {
	middleware []_SuggestionServiceMiddleware
	client     SuggestionServiceClient
}

// NewSuggestionServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewSuggestionServiceInterceptor(cli SuggestionServiceClient, middleware ..._SuggestionServiceMiddleware) *SuggestionServiceInterceptor {
	return &SuggestionServiceInterceptor{client: cli, middleware: middleware}
}

func (i *SuggestionServiceInterceptor) CreateSuggestion(ctx context.Context, in *CreateSuggestionInput, opts ...grpc.CallOption) (*CreateSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateSuggestionInput, got %T", in))
		}

		return i.client.CreateSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.CreateSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateSuggestionOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) UpdateSuggestion(ctx context.Context, in *UpdateSuggestionInput, opts ...grpc.CallOption) (*UpdateSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateSuggestionInput, got %T", in))
		}

		return i.client.UpdateSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.UpdateSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateSuggestionOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) ReviewSuggestion(ctx context.Context, in *ReviewSuggestionInput, opts ...grpc.CallOption) (*ReviewSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ReviewSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ReviewSuggestionInput, got %T", in))
		}

		return i.client.ReviewSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.ReviewSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ReviewSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ReviewSuggestionOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) ResubmitSuggestion(ctx context.Context, in *ResubmitSuggestionInput, opts ...grpc.CallOption) (*ResubmitSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResubmitSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResubmitSuggestionInput, got %T", in))
		}

		return i.client.ResubmitSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.ResubmitSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResubmitSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResubmitSuggestionOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) DeleteSuggestion(ctx context.Context, in *DeleteSuggestionInput, opts ...grpc.CallOption) (*DeleteSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteSuggestionInput, got %T", in))
		}

		return i.client.DeleteSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.DeleteSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteSuggestionOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) ListSuggestions(ctx context.Context, in *ListSuggestionsInput, opts ...grpc.CallOption) (*ListSuggestionsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListSuggestionsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListSuggestionsInput, got %T", in))
		}

		return i.client.ListSuggestions(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.ListSuggestions", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListSuggestionsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListSuggestionsOutput, got %T", out))
	}

	return message, err
}

func (i *SuggestionServiceInterceptor) DescribeSuggestion(ctx context.Context, in *DescribeSuggestionInput, opts ...grpc.CallOption) (*DescribeSuggestionOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeSuggestionInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeSuggestionInput, got %T", in))
		}

		return i.client.DescribeSuggestion(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.SuggestionService.DescribeSuggestion", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeSuggestionOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeSuggestionOutput, got %T", out))
	}

	return message, err
}
