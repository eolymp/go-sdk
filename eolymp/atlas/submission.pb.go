// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.4
// source: eolymp/atlas/submission.proto

package atlas

import (
	executor "github.com/eolymp/go-sdk/eolymp/executor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Submission_Status int32

const (
	Submission_NONE         Submission_Status = 0  // reserved, should not be used
	Submission_PENDING      Submission_Status = 1  // awaiting testing
	Submission_PROVISIONING Submission_Status = 9  // provisioning environment
	Submission_INITIALIZING Submission_Status = 10 // initializing program
	Submission_TESTING      Submission_Status = 2  // testing in progress
	Submission_TIMEOUT      Submission_Status = 3  //  testing took too long (too many timeouts in tests)
	Submission_COMPLETE     Submission_Status = 4  // testing complete (score is populated)
	Submission_ERROR        Submission_Status = 5  // testing produced an error (eg. compilation error or runtime error)
	Submission_FAILURE      Submission_Status = 6  // testing failed due to system error (or problem configuration error)
	Submission_SKIPPED      Submission_Status = 7  // testing is skipped because previous test failed
	Submission_BLOCKED      Submission_Status = 8  // testing is blocked because the dependency failed
)

// Enum value maps for Submission_Status.
var (
	Submission_Status_name = map[int32]string{
		0:  "NONE",
		1:  "PENDING",
		9:  "PROVISIONING",
		10: "INITIALIZING",
		2:  "TESTING",
		3:  "TIMEOUT",
		4:  "COMPLETE",
		5:  "ERROR",
		6:  "FAILURE",
		7:  "SKIPPED",
		8:  "BLOCKED",
	}
	Submission_Status_value = map[string]int32{
		"NONE":         0,
		"PENDING":      1,
		"PROVISIONING": 9,
		"INITIALIZING": 10,
		"TESTING":      2,
		"TIMEOUT":      3,
		"COMPLETE":     4,
		"ERROR":        5,
		"FAILURE":      6,
		"SKIPPED":      7,
		"BLOCKED":      8,
	}
)

func (x Submission_Status) Enum() *Submission_Status {
	p := new(Submission_Status)
	*p = x
	return p
}

func (x Submission_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Submission_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_submission_proto_enumTypes[0].Descriptor()
}

func (Submission_Status) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_submission_proto_enumTypes[0]
}

func (x Submission_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Submission_Status.Descriptor instead.
func (Submission_Status) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 0}
}

type Submission_Verdict int32

const (
	Submission_NO_VERDICT          Submission_Verdict = 0 // Solution is not judged
	Submission_ACCEPTED            Submission_Verdict = 1 // Solution gave correct answer
	Submission_WRONG_ANSWER        Submission_Verdict = 2 // Solution gave wrong answer
	Submission_TIME_LIMIT_EXCEEDED Submission_Verdict = 3 // Time limit exceeded
	Submission_CPU_EXHAUSTED       Submission_Verdict = 4 // CPU usage limit exceeded
	Submission_MEMORY_OVERFLOW     Submission_Verdict = 5 // Memory usage limit exceeded
	Submission_RUNTIME_ERROR       Submission_Verdict = 6 // Solution finished with an error
)

// Enum value maps for Submission_Verdict.
var (
	Submission_Verdict_name = map[int32]string{
		0: "NO_VERDICT",
		1: "ACCEPTED",
		2: "WRONG_ANSWER",
		3: "TIME_LIMIT_EXCEEDED",
		4: "CPU_EXHAUSTED",
		5: "MEMORY_OVERFLOW",
		6: "RUNTIME_ERROR",
	}
	Submission_Verdict_value = map[string]int32{
		"NO_VERDICT":          0,
		"ACCEPTED":            1,
		"WRONG_ANSWER":        2,
		"TIME_LIMIT_EXCEEDED": 3,
		"CPU_EXHAUSTED":       4,
		"MEMORY_OVERFLOW":     5,
		"RUNTIME_ERROR":       6,
	}
)

func (x Submission_Verdict) Enum() *Submission_Verdict {
	p := new(Submission_Verdict)
	*p = x
	return p
}

func (x Submission_Verdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Submission_Verdict) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_submission_proto_enumTypes[1].Descriptor()
}

func (Submission_Verdict) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_submission_proto_enumTypes[1]
}

func (x Submission_Verdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Submission_Verdict.Descriptor instead.
func (Submission_Verdict) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 1}
}

type Submission_Extra_Field int32

const (
	Submission_Extra_UNKNOWN_EXTRA Submission_Extra_Field = 0
	Submission_Extra_GROUPS        Submission_Extra_Field = 3
	Submission_Extra_RUNS          Submission_Extra_Field = 4
)

// Enum value maps for Submission_Extra_Field.
var (
	Submission_Extra_Field_name = map[int32]string{
		0: "UNKNOWN_EXTRA",
		3: "GROUPS",
		4: "RUNS",
	}
	Submission_Extra_Field_value = map[string]int32{
		"UNKNOWN_EXTRA": 0,
		"GROUPS":        3,
		"RUNS":          4,
	}
)

func (x Submission_Extra_Field) Enum() *Submission_Extra_Field {
	p := new(Submission_Extra_Field)
	*p = x
	return p
}

func (x Submission_Extra_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Submission_Extra_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_submission_proto_enumTypes[2].Descriptor()
}

func (Submission_Extra_Field) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_submission_proto_enumTypes[2]
}

func (x Submission_Extra_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Submission_Extra_Field.Descriptor instead.
func (Submission_Extra_Field) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Submission struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // unique identifier
	ProblemId string                 `protobuf:"bytes,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"` // problem
	Version   uint32                 `protobuf:"varint,99,opt,name=version,proto3" json:"version,omitempty"`                    // constantly increasing number to track changes in the submission
	// Types that are valid to be assigned to Submitter:
	//
	//	*Submission_UserId
	//	*Submission_MemberId
	Submitter          isSubmission_Submitter `protobuf_oneof:"submitter"`
	SubmittedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`             // time when submission was created
	JudgedAt           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=judged_at,json=judgedAt,proto3" json:"judged_at,omitempty"`                      // time when submission was judged
	Lang               string                 `protobuf:"bytes,10,opt,name=lang,proto3" json:"lang,omitempty"`                                             // programming language
	Source             string                 `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`                                         // deprecated: source code
	SourceUrl          string                 `protobuf:"bytes,13,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`                  // source code URL
	Values             []*Form_Value          `protobuf:"bytes,14,rep,name=values,proto3" json:"values,omitempty"`                                         // submission values
	Signature          string                 `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`                                   // submission signature
	Status             Submission_Status      `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`    // status (see explanation for enumeration values)
	Verdict            Submission_Verdict     `protobuf:"varint,22,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"` // overall verdict based on verdicts in groups / runs
	Error              string                 `protobuf:"bytes,21,opt,name=error,proto3" json:"error,omitempty"`                                           // error message in case status is ERROR
	ErrorUrl           string                 `protobuf:"bytes,23,opt,name=error_url,json=errorUrl,proto3" json:"error_url,omitempty"`                     // a URL with error output
	Cost               float32                `protobuf:"fixed32,30,opt,name=cost,proto3" json:"cost,omitempty"`                                           // maximum possible score for the submission
	Score              float32                `protobuf:"fixed32,31,opt,name=score,proto3" json:"score,omitempty"`                                         // sum of earned points
	Percentage         float32                `protobuf:"fixed32,32,opt,name=percentage,proto3" json:"percentage,omitempty"`
	TimeUsage          uint32                 `protobuf:"varint,41,opt,name=time_usage,json=timeUsage,proto3" json:"time_usage,omitempty"`                            // maximum wall time
	CpuUsage           uint32                 `protobuf:"varint,42,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                               // maximum cpu time
	MemoryUsage        uint64                 `protobuf:"varint,46,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                      // maximum memory usage
	ResourceUsage      float32                `protobuf:"fixed32,47,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`               // maximum resource usage
	Groups             []*Submission_Group    `protobuf:"bytes,50,rep,name=groups,proto3" json:"groups,omitempty"`                                                    // status for each run by group
	AssistantAvailable bool                   `protobuf:"varint,60,opt,name=assistant_available,json=assistantAvailable,proto3" json:"assistant_available,omitempty"` // if true, submission can be debugged using submission assistant
	Cursor             string                 `protobuf:"bytes,100,opt,name=cursor,proto3" json:"cursor,omitempty"`                                                   // cursor in the list
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Submission) Reset() {
	*x = Submission{}
	mi := &file_eolymp_atlas_submission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission) ProtoMessage() {}

func (x *Submission) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_submission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission.ProtoReflect.Descriptor instead.
func (*Submission) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0}
}

func (x *Submission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Submission) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Submission) GetSubmitter() isSubmission_Submitter {
	if x != nil {
		return x.Submitter
	}
	return nil
}

func (x *Submission) GetUserId() string {
	if x != nil {
		if x, ok := x.Submitter.(*Submission_UserId); ok {
			return x.UserId
		}
	}
	return ""
}

func (x *Submission) GetMemberId() string {
	if x != nil {
		if x, ok := x.Submitter.(*Submission_MemberId); ok {
			return x.MemberId
		}
	}
	return ""
}

func (x *Submission) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Submission) GetJudgedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JudgedAt
	}
	return nil
}

func (x *Submission) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Submission) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Submission) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Submission) GetValues() []*Form_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Submission) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Submission) GetStatus() Submission_Status {
	if x != nil {
		return x.Status
	}
	return Submission_NONE
}

func (x *Submission) GetVerdict() Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return Submission_NO_VERDICT
}

func (x *Submission) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Submission) GetErrorUrl() string {
	if x != nil {
		return x.ErrorUrl
	}
	return ""
}

func (x *Submission) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Submission) GetTimeUsage() uint32 {
	if x != nil {
		return x.TimeUsage
	}
	return 0
}

func (x *Submission) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Submission) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission) GetResourceUsage() float32 {
	if x != nil {
		return x.ResourceUsage
	}
	return 0
}

func (x *Submission) GetGroups() []*Submission_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Submission) GetAssistantAvailable() bool {
	if x != nil {
		return x.AssistantAvailable
	}
	return false
}

func (x *Submission) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type isSubmission_Submitter interface {
	isSubmission_Submitter()
}

type Submission_UserId struct {
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof"`
}

type Submission_MemberId struct {
	MemberId string `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3,oneof"`
}

func (*Submission_UserId) isSubmission_Submitter() {}

func (*Submission_MemberId) isSubmission_Submitter() {}

type Submission_Extra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Submission_Extra) Reset() {
	*x = Submission_Extra{}
	mi := &file_eolymp_atlas_submission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission_Extra) ProtoMessage() {}

func (x *Submission_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_submission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission_Extra.ProtoReflect.Descriptor instead.
func (*Submission_Extra) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 0}
}

type Submission_Run struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index           uint32                 `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
	TimeUsage       uint32                 `protobuf:"varint,2,opt,name=time_usage,json=timeUsage,proto3" json:"time_usage,omitempty"` // wall time (real-world time) usage
	CpuUsage        uint32                 `protobuf:"varint,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`    // cpu time (time cpu was active)
	MemoryUsage     uint64                 `protobuf:"varint,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	ResourceUsage   float32                `protobuf:"fixed32,5,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`
	InputUrl        string                 `protobuf:"bytes,8,opt,name=input_url,json=inputUrl,proto3" json:"input_url,omitempty"`
	OutputUrl       string                 `protobuf:"bytes,6,opt,name=output_url,json=outputUrl,proto3" json:"output_url,omitempty"`
	AnswerUrl       string                 `protobuf:"bytes,9,opt,name=answer_url,json=answerUrl,proto3" json:"answer_url,omitempty"`
	Cost            float32                `protobuf:"fixed32,12,opt,name=cost,proto3" json:"cost,omitempty"`
	Score           float32                `protobuf:"fixed32,13,opt,name=score,proto3" json:"score,omitempty"`
	Status          Submission_Status      `protobuf:"varint,20,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`
	Verdict         Submission_Verdict     `protobuf:"varint,21,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"`
	DebugStats      *executor.Stats        `protobuf:"bytes,14,opt,name=debug_stats,json=debugStats,proto3" json:"debug_stats,omitempty"`
	CheckerStats    *executor.Stats        `protobuf:"bytes,31,opt,name=checker_stats,json=checkerStats,proto3" json:"checker_stats,omitempty"`
	InteractorStats *executor.Stats        `protobuf:"bytes,41,opt,name=interactor_stats,json=interactorStats,proto3" json:"interactor_stats,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Submission_Run) Reset() {
	*x = Submission_Run{}
	mi := &file_eolymp_atlas_submission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission_Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission_Run) ProtoMessage() {}

func (x *Submission_Run) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_submission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission_Run.ProtoReflect.Descriptor instead.
func (*Submission_Run) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Submission_Run) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Submission_Run) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Submission_Run) GetTimeUsage() uint32 {
	if x != nil {
		return x.TimeUsage
	}
	return 0
}

func (x *Submission_Run) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Submission_Run) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission_Run) GetResourceUsage() float32 {
	if x != nil {
		return x.ResourceUsage
	}
	return 0
}

func (x *Submission_Run) GetInputUrl() string {
	if x != nil {
		return x.InputUrl
	}
	return ""
}

func (x *Submission_Run) GetOutputUrl() string {
	if x != nil {
		return x.OutputUrl
	}
	return ""
}

func (x *Submission_Run) GetAnswerUrl() string {
	if x != nil {
		return x.AnswerUrl
	}
	return ""
}

func (x *Submission_Run) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission_Run) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission_Run) GetStatus() Submission_Status {
	if x != nil {
		return x.Status
	}
	return Submission_NONE
}

func (x *Submission_Run) GetVerdict() Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return Submission_NO_VERDICT
}

func (x *Submission_Run) GetDebugStats() *executor.Stats {
	if x != nil {
		return x.DebugStats
	}
	return nil
}

func (x *Submission_Run) GetCheckerStats() *executor.Stats {
	if x != nil {
		return x.CheckerStats
	}
	return nil
}

func (x *Submission_Run) GetInteractorStats() *executor.Stats {
	if x != nil {
		return x.InteractorStats
	}
	return nil
}

type Submission_Group struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Index          uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                                                           // group index
	Status         Submission_Status      `protobuf:"varint,10,opt,name=status,proto3,enum=eolymp.atlas.Submission_Status" json:"status,omitempty"`                                    // status of the group
	Verdict        Submission_Verdict     `protobuf:"varint,12,opt,name=verdict,proto3,enum=eolymp.atlas.Submission_Verdict" json:"verdict,omitempty"`                                 // overall verdict based on verdicts in runs
	Dependencies   []uint32               `protobuf:"varint,11,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`                                                     // other group indices which need to pass for this group to run
	Cost           float32                `protobuf:"fixed32,20,opt,name=cost,proto3" json:"cost,omitempty"`                                                                           // max possible score for passing all tests in the group
	Score          float32                `protobuf:"fixed32,21,opt,name=score,proto3" json:"score,omitempty"`                                                                         // sum of earned points within a group
	ScoringMode    ScoringMode            `protobuf:"varint,22,opt,name=scoring_mode,json=scoringMode,proto3,enum=eolymp.atlas.ScoringMode" json:"scoring_mode,omitempty"`             // how group is scored
	FeedbackPolicy FeedbackPolicy         `protobuf:"varint,30,opt,name=feedback_policy,json=feedbackPolicy,proto3,enum=eolymp.atlas.FeedbackPolicy" json:"feedback_policy,omitempty"` // how tests are shown to the user
	TimeUsage      uint32                 `protobuf:"varint,41,opt,name=time_usage,json=timeUsage,proto3" json:"time_usage,omitempty"`                                                 // provides feedback on wall time usage within the group, depending on feedback mode it might be max execution time in group or time usage in the first non-accepted test
	CpuUsage       uint32                 `protobuf:"varint,42,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                                                    // provides feedback on CPU time usage within the group, depending on feedback mode it might be max execution time in group or time usage in the first non-accepted test
	MemoryUsage    uint64                 `protobuf:"varint,46,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                                           // provides feedback on memory usage within the group, depending on feedback mode it might be memory usage peak in group or memory usage in the first non-accepted test
	ResourceUsage  float32                `protobuf:"fixed32,47,opt,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`                                    // provides feedback on resource usage within the group, depending on feedback mode it might be resource usage peak in group or resource usage in the first non-accepted test
	Runs           []*Submission_Run      `protobuf:"bytes,100,rep,name=runs,proto3" json:"runs,omitempty"`                                                                            // runs of the group
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Submission_Group) Reset() {
	*x = Submission_Group{}
	mi := &file_eolymp_atlas_submission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submission_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submission_Group) ProtoMessage() {}

func (x *Submission_Group) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_submission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submission_Group.ProtoReflect.Descriptor instead.
func (*Submission_Group) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_submission_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Submission_Group) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Submission_Group) GetStatus() Submission_Status {
	if x != nil {
		return x.Status
	}
	return Submission_NONE
}

func (x *Submission_Group) GetVerdict() Submission_Verdict {
	if x != nil {
		return x.Verdict
	}
	return Submission_NO_VERDICT
}

func (x *Submission_Group) GetDependencies() []uint32 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Submission_Group) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Submission_Group) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Submission_Group) GetScoringMode() ScoringMode {
	if x != nil {
		return x.ScoringMode
	}
	return ScoringMode_NO_SCORE
}

func (x *Submission_Group) GetFeedbackPolicy() FeedbackPolicy {
	if x != nil {
		return x.FeedbackPolicy
	}
	return FeedbackPolicy_COMPLETE
}

func (x *Submission_Group) GetTimeUsage() uint32 {
	if x != nil {
		return x.TimeUsage
	}
	return 0
}

func (x *Submission_Group) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Submission_Group) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Submission_Group) GetResourceUsage() float32 {
	if x != nil {
		return x.ResourceUsage
	}
	return 0
}

func (x *Submission_Group) GetRuns() []*Submission_Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

var File_eolymp_atlas_submission_proto protoreflect.FileDescriptor

const file_eolymp_atlas_submission_proto_rawDesc = "" +
	"\n" +
	"\x1deolymp/atlas/submission.proto\x12\feolymp.atlas\x1a\x17eolymp/atlas/form.proto\x1a#eolymp/atlas/testing_feedback.proto\x1a\"eolymp/atlas/testing_scoring.proto\x1a\x1beolymp/executor/stats.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9a\x13\n" +
	"\n" +
	"Submission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"problem_id\x18\x02 \x01(\tR\tproblemId\x12\x18\n" +
	"\aversion\x18c \x01(\rR\aversion\x12\x19\n" +
	"\auser_id\x18\x03 \x01(\tH\x00R\x06userId\x12\x1d\n" +
	"\tmember_id\x18\x04 \x01(\tH\x00R\bmemberId\x12=\n" +
	"\fsubmitted_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vsubmittedAt\x127\n" +
	"\tjudged_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\bjudgedAt\x12\x12\n" +
	"\x04lang\x18\n" +
	" \x01(\tR\x04lang\x12\x16\n" +
	"\x06source\x18\v \x01(\tR\x06source\x12\x1d\n" +
	"\n" +
	"source_url\x18\r \x01(\tR\tsourceUrl\x120\n" +
	"\x06values\x18\x0e \x03(\v2\x18.eolymp.atlas.Form.ValueR\x06values\x12\x1c\n" +
	"\tsignature\x18\f \x01(\tR\tsignature\x127\n" +
	"\x06status\x18\x14 \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\x16 \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x12\x14\n" +
	"\x05error\x18\x15 \x01(\tR\x05error\x12\x1b\n" +
	"\terror_url\x18\x17 \x01(\tR\berrorUrl\x12\x12\n" +
	"\x04cost\x18\x1e \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\x1f \x01(\x02R\x05score\x12\x1e\n" +
	"\n" +
	"percentage\x18  \x01(\x02R\n" +
	"percentage\x12\x1d\n" +
	"\n" +
	"time_usage\x18) \x01(\rR\ttimeUsage\x12\x1b\n" +
	"\tcpu_usage\x18* \x01(\rR\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18. \x01(\x04R\vmemoryUsage\x12%\n" +
	"\x0eresource_usage\x18/ \x01(\x02R\rresourceUsage\x126\n" +
	"\x06groups\x182 \x03(\v2\x1e.eolymp.atlas.Submission.GroupR\x06groups\x12/\n" +
	"\x13assistant_available\x18< \x01(\bR\x12assistantAvailable\x12\x16\n" +
	"\x06cursor\x18d \x01(\tR\x06cursor\x1a9\n" +
	"\x05Extra\"0\n" +
	"\x05Field\x12\x11\n" +
	"\rUNKNOWN_EXTRA\x10\x00\x12\n" +
	"\n" +
	"\x06GROUPS\x10\x03\x12\b\n" +
	"\x04RUNS\x10\x04\x1a\xe4\x04\n" +
	"\x03Run\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05index\x18\n" +
	" \x01(\rR\x05index\x12\x1d\n" +
	"\n" +
	"time_usage\x18\x02 \x01(\rR\ttimeUsage\x12\x1b\n" +
	"\tcpu_usage\x18\x03 \x01(\rR\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x04 \x01(\x04R\vmemoryUsage\x12%\n" +
	"\x0eresource_usage\x18\x05 \x01(\x02R\rresourceUsage\x12\x1b\n" +
	"\tinput_url\x18\b \x01(\tR\binputUrl\x12\x1d\n" +
	"\n" +
	"output_url\x18\x06 \x01(\tR\toutputUrl\x12\x1d\n" +
	"\n" +
	"answer_url\x18\t \x01(\tR\tanswerUrl\x12\x12\n" +
	"\x04cost\x18\f \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\r \x01(\x02R\x05score\x127\n" +
	"\x06status\x18\x14 \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\x15 \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x127\n" +
	"\vdebug_stats\x18\x0e \x01(\v2\x16.eolymp.executor.StatsR\n" +
	"debugStats\x12;\n" +
	"\rchecker_stats\x18\x1f \x01(\v2\x16.eolymp.executor.StatsR\fcheckerStats\x12A\n" +
	"\x10interactor_stats\x18) \x01(\v2\x16.eolymp.executor.StatsR\x0finteractorStats\x1a\x9d\x04\n" +
	"\x05Group\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\x127\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x1f.eolymp.atlas.Submission.StatusR\x06status\x12:\n" +
	"\averdict\x18\f \x01(\x0e2 .eolymp.atlas.Submission.VerdictR\averdict\x12\"\n" +
	"\fdependencies\x18\v \x03(\rR\fdependencies\x12\x12\n" +
	"\x04cost\x18\x14 \x01(\x02R\x04cost\x12\x14\n" +
	"\x05score\x18\x15 \x01(\x02R\x05score\x12<\n" +
	"\fscoring_mode\x18\x16 \x01(\x0e2\x19.eolymp.atlas.ScoringModeR\vscoringMode\x12E\n" +
	"\x0ffeedback_policy\x18\x1e \x01(\x0e2\x1c.eolymp.atlas.FeedbackPolicyR\x0efeedbackPolicy\x12\x1d\n" +
	"\n" +
	"time_usage\x18) \x01(\rR\ttimeUsage\x12\x1b\n" +
	"\tcpu_usage\x18* \x01(\rR\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18. \x01(\x04R\vmemoryUsage\x12%\n" +
	"\x0eresource_usage\x18/ \x01(\x02R\rresourceUsage\x120\n" +
	"\x04runs\x18d \x03(\v2\x1c.eolymp.atlas.Submission.RunR\x04runs\"\x9d\x01\n" +
	"\x06Status\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\x10\n" +
	"\fPROVISIONING\x10\t\x12\x10\n" +
	"\fINITIALIZING\x10\n" +
	"\x12\v\n" +
	"\aTESTING\x10\x02\x12\v\n" +
	"\aTIMEOUT\x10\x03\x12\f\n" +
	"\bCOMPLETE\x10\x04\x12\t\n" +
	"\x05ERROR\x10\x05\x12\v\n" +
	"\aFAILURE\x10\x06\x12\v\n" +
	"\aSKIPPED\x10\a\x12\v\n" +
	"\aBLOCKED\x10\b\"\x8d\x01\n" +
	"\aVerdict\x12\x0e\n" +
	"\n" +
	"NO_VERDICT\x10\x00\x12\f\n" +
	"\bACCEPTED\x10\x01\x12\x10\n" +
	"\fWRONG_ANSWER\x10\x02\x12\x17\n" +
	"\x13TIME_LIMIT_EXCEEDED\x10\x03\x12\x11\n" +
	"\rCPU_EXHAUSTED\x10\x04\x12\x13\n" +
	"\x0fMEMORY_OVERFLOW\x10\x05\x12\x11\n" +
	"\rRUNTIME_ERROR\x10\x06B\v\n" +
	"\tsubmitterB-Z+github.com/eolymp/go-sdk/eolymp/atlas;atlasb\x06proto3"

var (
	file_eolymp_atlas_submission_proto_rawDescOnce sync.Once
	file_eolymp_atlas_submission_proto_rawDescData []byte
)

func file_eolymp_atlas_submission_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_submission_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_submission_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_atlas_submission_proto_rawDesc), len(file_eolymp_atlas_submission_proto_rawDesc)))
	})
	return file_eolymp_atlas_submission_proto_rawDescData
}

var file_eolymp_atlas_submission_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_eolymp_atlas_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_eolymp_atlas_submission_proto_goTypes = []any{
	(Submission_Status)(0),        // 0: eolymp.atlas.Submission.Status
	(Submission_Verdict)(0),       // 1: eolymp.atlas.Submission.Verdict
	(Submission_Extra_Field)(0),   // 2: eolymp.atlas.Submission.Extra.Field
	(*Submission)(nil),            // 3: eolymp.atlas.Submission
	(*Submission_Extra)(nil),      // 4: eolymp.atlas.Submission.Extra
	(*Submission_Run)(nil),        // 5: eolymp.atlas.Submission.Run
	(*Submission_Group)(nil),      // 6: eolymp.atlas.Submission.Group
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*Form_Value)(nil),            // 8: eolymp.atlas.Form.Value
	(*executor.Stats)(nil),        // 9: eolymp.executor.Stats
	(ScoringMode)(0),              // 10: eolymp.atlas.ScoringMode
	(FeedbackPolicy)(0),           // 11: eolymp.atlas.FeedbackPolicy
}
var file_eolymp_atlas_submission_proto_depIdxs = []int32{
	7,  // 0: eolymp.atlas.Submission.submitted_at:type_name -> google.protobuf.Timestamp
	7,  // 1: eolymp.atlas.Submission.judged_at:type_name -> google.protobuf.Timestamp
	8,  // 2: eolymp.atlas.Submission.values:type_name -> eolymp.atlas.Form.Value
	0,  // 3: eolymp.atlas.Submission.status:type_name -> eolymp.atlas.Submission.Status
	1,  // 4: eolymp.atlas.Submission.verdict:type_name -> eolymp.atlas.Submission.Verdict
	6,  // 5: eolymp.atlas.Submission.groups:type_name -> eolymp.atlas.Submission.Group
	0,  // 6: eolymp.atlas.Submission.Run.status:type_name -> eolymp.atlas.Submission.Status
	1,  // 7: eolymp.atlas.Submission.Run.verdict:type_name -> eolymp.atlas.Submission.Verdict
	9,  // 8: eolymp.atlas.Submission.Run.debug_stats:type_name -> eolymp.executor.Stats
	9,  // 9: eolymp.atlas.Submission.Run.checker_stats:type_name -> eolymp.executor.Stats
	9,  // 10: eolymp.atlas.Submission.Run.interactor_stats:type_name -> eolymp.executor.Stats
	0,  // 11: eolymp.atlas.Submission.Group.status:type_name -> eolymp.atlas.Submission.Status
	1,  // 12: eolymp.atlas.Submission.Group.verdict:type_name -> eolymp.atlas.Submission.Verdict
	10, // 13: eolymp.atlas.Submission.Group.scoring_mode:type_name -> eolymp.atlas.ScoringMode
	11, // 14: eolymp.atlas.Submission.Group.feedback_policy:type_name -> eolymp.atlas.FeedbackPolicy
	5,  // 15: eolymp.atlas.Submission.Group.runs:type_name -> eolymp.atlas.Submission.Run
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_submission_proto_init() }
func file_eolymp_atlas_submission_proto_init() {
	if File_eolymp_atlas_submission_proto != nil {
		return
	}
	file_eolymp_atlas_form_proto_init()
	file_eolymp_atlas_testing_feedback_proto_init()
	file_eolymp_atlas_testing_scoring_proto_init()
	file_eolymp_atlas_submission_proto_msgTypes[0].OneofWrappers = []any{
		(*Submission_UserId)(nil),
		(*Submission_MemberId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_atlas_submission_proto_rawDesc), len(file_eolymp_atlas_submission_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eolymp_atlas_submission_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_submission_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_submission_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_submission_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_submission_proto = out.File
	file_eolymp_atlas_submission_proto_goTypes = nil
	file_eolymp_atlas_submission_proto_depIdxs = nil
}
