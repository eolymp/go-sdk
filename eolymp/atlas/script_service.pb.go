// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: eolymp/atlas/script_service.proto

package atlas

import (
	_ "github.com/eolymp/go-sdk/eolymp/annotations"
	wellknown "github.com/eolymp/go-sdk/eolymp/wellknown"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateScriptInput_Patch int32

const (
	UpdateScriptInput_ALL        UpdateScriptInput_Patch = 0
	UpdateScriptInput_NAME       UpdateScriptInput_Patch = 1
	UpdateScriptInput_SECRET     UpdateScriptInput_Patch = 2
	UpdateScriptInput_RUNTIME    UpdateScriptInput_Patch = 3
	UpdateScriptInput_SOURCE_URL UpdateScriptInput_Patch = 4
	UpdateScriptInput_FILES      UpdateScriptInput_Patch = 5
)

// Enum value maps for UpdateScriptInput_Patch.
var (
	UpdateScriptInput_Patch_name = map[int32]string{
		0: "ALL",
		1: "NAME",
		2: "SECRET",
		3: "RUNTIME",
		4: "SOURCE_URL",
		5: "FILES",
	}
	UpdateScriptInput_Patch_value = map[string]int32{
		"ALL":        0,
		"NAME":       1,
		"SECRET":     2,
		"RUNTIME":    3,
		"SOURCE_URL": 4,
		"FILES":      5,
	}
)

func (x UpdateScriptInput_Patch) Enum() *UpdateScriptInput_Patch {
	p := new(UpdateScriptInput_Patch)
	*p = x
	return p
}

func (x UpdateScriptInput_Patch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateScriptInput_Patch) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_script_service_proto_enumTypes[0].Descriptor()
}

func (UpdateScriptInput_Patch) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_script_service_proto_enumTypes[0]
}

func (x UpdateScriptInput_Patch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateScriptInput_Patch.Descriptor instead.
func (UpdateScriptInput_Patch) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{3, 0}
}

type ListScriptsInput_Sortable int32

const (
	ListScriptsInput_NAME ListScriptsInput_Sortable = 0
)

// Enum value maps for ListScriptsInput_Sortable.
var (
	ListScriptsInput_Sortable_name = map[int32]string{
		0: "NAME",
	}
	ListScriptsInput_Sortable_value = map[string]int32{
		"NAME": 0,
	}
)

func (x ListScriptsInput_Sortable) Enum() *ListScriptsInput_Sortable {
	p := new(ListScriptsInput_Sortable)
	*p = x
	return p
}

func (x ListScriptsInput_Sortable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListScriptsInput_Sortable) Descriptor() protoreflect.EnumDescriptor {
	return file_eolymp_atlas_script_service_proto_enumTypes[1].Descriptor()
}

func (ListScriptsInput_Sortable) Type() protoreflect.EnumType {
	return &file_eolymp_atlas_script_service_proto_enumTypes[1]
}

func (x ListScriptsInput_Sortable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListScriptsInput_Sortable.Descriptor instead.
func (ListScriptsInput_Sortable) EnumDescriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{9, 0}
}

type ScriptChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProblemId     string                 `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	Before        *Script                `protobuf:"bytes,2,opt,name=before,proto3" json:"before,omitempty"`
	After         *Script                `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScriptChangedEvent) Reset() {
	*x = ScriptChangedEvent{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptChangedEvent) ProtoMessage() {}

func (x *ScriptChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptChangedEvent.ProtoReflect.Descriptor instead.
func (*ScriptChangedEvent) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{0}
}

func (x *ScriptChangedEvent) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *ScriptChangedEvent) GetBefore() *Script {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ScriptChangedEvent) GetAfter() *Script {
	if x != nil {
		return x.After
	}
	return nil
}

type CreateScriptInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Script        *Script                `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateScriptInput) Reset() {
	*x = CreateScriptInput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScriptInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScriptInput) ProtoMessage() {}

func (x *CreateScriptInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScriptInput.ProtoReflect.Descriptor instead.
func (*CreateScriptInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateScriptInput) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

type CreateScriptOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptId      string                 `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateScriptOutput) Reset() {
	*x = CreateScriptOutput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScriptOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScriptOutput) ProtoMessage() {}

func (x *CreateScriptOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScriptOutput.ProtoReflect.Descriptor instead.
func (*CreateScriptOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateScriptOutput) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

type UpdateScriptInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// specify list of fields to update, if empty all fields are updated
	Patch         []UpdateScriptInput_Patch `protobuf:"varint,1,rep,packed,name=patch,proto3,enum=eolymp.atlas.UpdateScriptInput_Patch" json:"patch,omitempty"`
	ScriptId      string                    `protobuf:"bytes,2,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	Script        *Script                   `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScriptInput) Reset() {
	*x = UpdateScriptInput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScriptInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScriptInput) ProtoMessage() {}

func (x *UpdateScriptInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScriptInput.ProtoReflect.Descriptor instead.
func (*UpdateScriptInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateScriptInput) GetPatch() []UpdateScriptInput_Patch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *UpdateScriptInput) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *UpdateScriptInput) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

type UpdateScriptOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScriptOutput) Reset() {
	*x = UpdateScriptOutput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScriptOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScriptOutput) ProtoMessage() {}

func (x *UpdateScriptOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScriptOutput.ProtoReflect.Descriptor instead.
func (*UpdateScriptOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{4}
}

type DeleteScriptInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptId      string                 `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScriptInput) Reset() {
	*x = DeleteScriptInput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScriptInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScriptInput) ProtoMessage() {}

func (x *DeleteScriptInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScriptInput.ProtoReflect.Descriptor instead.
func (*DeleteScriptInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteScriptInput) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

type DeleteScriptOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScriptOutput) Reset() {
	*x = DeleteScriptOutput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScriptOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScriptOutput) ProtoMessage() {}

func (x *DeleteScriptOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScriptOutput.ProtoReflect.Descriptor instead.
func (*DeleteScriptOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{6}
}

type DescribeScriptInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptId      string                 `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	Version       uint32                 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
	Extra         []Script_Extra         `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.atlas.Script_Extra" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeScriptInput) Reset() {
	*x = DescribeScriptInput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeScriptInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScriptInput) ProtoMessage() {}

func (x *DescribeScriptInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScriptInput.ProtoReflect.Descriptor instead.
func (*DescribeScriptInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeScriptInput) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *DescribeScriptInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DescribeScriptInput) GetExtra() []Script_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DescribeScriptOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Script        *Script                `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeScriptOutput) Reset() {
	*x = DescribeScriptOutput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeScriptOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeScriptOutput) ProtoMessage() {}

func (x *DescribeScriptOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeScriptOutput.ProtoReflect.Descriptor instead.
func (*DescribeScriptOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeScriptOutput) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

type ListScriptsInput struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Version uint32                 `protobuf:"varint,100,opt,name=version,proto3" json:"version,omitempty"` // request data for specific problem version
	// pagination
	Offset int32 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int32 `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	// data filters
	Search        string                    `protobuf:"bytes,20,opt,name=search,proto3" json:"search,omitempty"`
	Filters       *ListScriptsInput_Filter  `protobuf:"bytes,40,opt,name=filters,proto3" json:"filters,omitempty"`
	Sort          ListScriptsInput_Sortable `protobuf:"varint,50,opt,name=sort,proto3,enum=eolymp.atlas.ListScriptsInput_Sortable" json:"sort,omitempty"`
	Order         wellknown.Direction       `protobuf:"varint,51,opt,name=order,proto3,enum=eolymp.wellknown.Direction" json:"order,omitempty"`
	Extra         []Script_Extra            `protobuf:"varint,1123,rep,packed,name=extra,proto3,enum=eolymp.atlas.Script_Extra" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScriptsInput) Reset() {
	*x = ListScriptsInput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScriptsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScriptsInput) ProtoMessage() {}

func (x *ListScriptsInput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScriptsInput.ProtoReflect.Descriptor instead.
func (*ListScriptsInput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListScriptsInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListScriptsInput) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListScriptsInput) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListScriptsInput) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListScriptsInput) GetFilters() *ListScriptsInput_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListScriptsInput) GetSort() ListScriptsInput_Sortable {
	if x != nil {
		return x.Sort
	}
	return ListScriptsInput_NAME
}

func (x *ListScriptsInput) GetOrder() wellknown.Direction {
	if x != nil {
		return x.Order
	}
	return wellknown.Direction(0)
}

func (x *ListScriptsInput) GetExtra() []Script_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ListScriptsOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items         []*Script              `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScriptsOutput) Reset() {
	*x = ListScriptsOutput{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScriptsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScriptsOutput) ProtoMessage() {}

func (x *ListScriptsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScriptsOutput.ProtoReflect.Descriptor instead.
func (*ListScriptsOutput) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListScriptsOutput) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListScriptsOutput) GetItems() []*Script {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListScriptsInput_Filter struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Id            []*wellknown.ExpressionID     `protobuf:"bytes,10,rep,name=id,proto3" json:"id,omitempty"`
	Name          []*wellknown.ExpressionString `protobuf:"bytes,11,rep,name=name,proto3" json:"name,omitempty"`
	Runtime       []*wellknown.ExpressionEnum   `protobuf:"bytes,12,rep,name=runtime,proto3" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScriptsInput_Filter) Reset() {
	*x = ListScriptsInput_Filter{}
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScriptsInput_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScriptsInput_Filter) ProtoMessage() {}

func (x *ListScriptsInput_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_eolymp_atlas_script_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScriptsInput_Filter.ProtoReflect.Descriptor instead.
func (*ListScriptsInput_Filter) Descriptor() ([]byte, []int) {
	return file_eolymp_atlas_script_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListScriptsInput_Filter) GetId() []*wellknown.ExpressionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListScriptsInput_Filter) GetName() []*wellknown.ExpressionString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListScriptsInput_Filter) GetRuntime() []*wellknown.ExpressionEnum {
	if x != nil {
		return x.Runtime
	}
	return nil
}

var File_eolymp_atlas_script_service_proto protoreflect.FileDescriptor

var file_eolymp_atlas_script_service_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x1a, 0x1d, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f, 0x6c, 0x79,
	0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f, 0x6c,
	0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x4e, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x05, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x30,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x7f, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xe3, 0x08,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x99, 0x04,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x3f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xe3, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x1a, 0xac, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d,
	0x70, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x22, 0x55, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x32, 0x84, 0x06, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3a, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x1a, 0x08, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x46, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00,
	0x00, 0x80, 0x3f, 0xf8, 0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x14, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x99,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x1f, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x46, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0x80, 0x3f, 0xf8,
	0xe2, 0x0a, 0x05, 0x82, 0xe3, 0x0a, 0x17, 0x8a, 0xe3, 0x0a, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x0e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x2e,
	0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x45, 0xea, 0xe2, 0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0,
	0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a, 0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f,
	0x6c, 0x79, 0x6d, 0x70, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x39, 0xea, 0xe2,
	0x0a, 0x0b, 0xf5, 0xe2, 0x0a, 0x00, 0x00, 0xa0, 0x41, 0xf8, 0xe2, 0x0a, 0x64, 0x82, 0xe3, 0x0a,
	0x16, 0x8a, 0xe3, 0x0a, 0x12, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x65, 0x6f, 0x6c, 0x79, 0x6d, 0x70, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x3b, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_eolymp_atlas_script_service_proto_rawDescOnce sync.Once
	file_eolymp_atlas_script_service_proto_rawDescData []byte
)

func file_eolymp_atlas_script_service_proto_rawDescGZIP() []byte {
	file_eolymp_atlas_script_service_proto_rawDescOnce.Do(func() {
		file_eolymp_atlas_script_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eolymp_atlas_script_service_proto_rawDesc), len(file_eolymp_atlas_script_service_proto_rawDesc)))
	})
	return file_eolymp_atlas_script_service_proto_rawDescData
}

var file_eolymp_atlas_script_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eolymp_atlas_script_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_eolymp_atlas_script_service_proto_goTypes = []any{
	(UpdateScriptInput_Patch)(0),       // 0: eolymp.atlas.UpdateScriptInput.Patch
	(ListScriptsInput_Sortable)(0),     // 1: eolymp.atlas.ListScriptsInput.Sortable
	(*ScriptChangedEvent)(nil),         // 2: eolymp.atlas.ScriptChangedEvent
	(*CreateScriptInput)(nil),          // 3: eolymp.atlas.CreateScriptInput
	(*CreateScriptOutput)(nil),         // 4: eolymp.atlas.CreateScriptOutput
	(*UpdateScriptInput)(nil),          // 5: eolymp.atlas.UpdateScriptInput
	(*UpdateScriptOutput)(nil),         // 6: eolymp.atlas.UpdateScriptOutput
	(*DeleteScriptInput)(nil),          // 7: eolymp.atlas.DeleteScriptInput
	(*DeleteScriptOutput)(nil),         // 8: eolymp.atlas.DeleteScriptOutput
	(*DescribeScriptInput)(nil),        // 9: eolymp.atlas.DescribeScriptInput
	(*DescribeScriptOutput)(nil),       // 10: eolymp.atlas.DescribeScriptOutput
	(*ListScriptsInput)(nil),           // 11: eolymp.atlas.ListScriptsInput
	(*ListScriptsOutput)(nil),          // 12: eolymp.atlas.ListScriptsOutput
	(*ListScriptsInput_Filter)(nil),    // 13: eolymp.atlas.ListScriptsInput.Filter
	(*Script)(nil),                     // 14: eolymp.atlas.Script
	(Script_Extra)(0),                  // 15: eolymp.atlas.Script.Extra
	(wellknown.Direction)(0),           // 16: eolymp.wellknown.Direction
	(*wellknown.ExpressionID)(nil),     // 17: eolymp.wellknown.ExpressionID
	(*wellknown.ExpressionString)(nil), // 18: eolymp.wellknown.ExpressionString
	(*wellknown.ExpressionEnum)(nil),   // 19: eolymp.wellknown.ExpressionEnum
}
var file_eolymp_atlas_script_service_proto_depIdxs = []int32{
	14, // 0: eolymp.atlas.ScriptChangedEvent.before:type_name -> eolymp.atlas.Script
	14, // 1: eolymp.atlas.ScriptChangedEvent.after:type_name -> eolymp.atlas.Script
	14, // 2: eolymp.atlas.CreateScriptInput.script:type_name -> eolymp.atlas.Script
	0,  // 3: eolymp.atlas.UpdateScriptInput.patch:type_name -> eolymp.atlas.UpdateScriptInput.Patch
	14, // 4: eolymp.atlas.UpdateScriptInput.script:type_name -> eolymp.atlas.Script
	15, // 5: eolymp.atlas.DescribeScriptInput.extra:type_name -> eolymp.atlas.Script.Extra
	14, // 6: eolymp.atlas.DescribeScriptOutput.script:type_name -> eolymp.atlas.Script
	13, // 7: eolymp.atlas.ListScriptsInput.filters:type_name -> eolymp.atlas.ListScriptsInput.Filter
	1,  // 8: eolymp.atlas.ListScriptsInput.sort:type_name -> eolymp.atlas.ListScriptsInput.Sortable
	16, // 9: eolymp.atlas.ListScriptsInput.order:type_name -> eolymp.wellknown.Direction
	15, // 10: eolymp.atlas.ListScriptsInput.extra:type_name -> eolymp.atlas.Script.Extra
	14, // 11: eolymp.atlas.ListScriptsOutput.items:type_name -> eolymp.atlas.Script
	17, // 12: eolymp.atlas.ListScriptsInput.Filter.id:type_name -> eolymp.wellknown.ExpressionID
	18, // 13: eolymp.atlas.ListScriptsInput.Filter.name:type_name -> eolymp.wellknown.ExpressionString
	19, // 14: eolymp.atlas.ListScriptsInput.Filter.runtime:type_name -> eolymp.wellknown.ExpressionEnum
	3,  // 15: eolymp.atlas.ScriptService.CreateScript:input_type -> eolymp.atlas.CreateScriptInput
	5,  // 16: eolymp.atlas.ScriptService.UpdateScript:input_type -> eolymp.atlas.UpdateScriptInput
	7,  // 17: eolymp.atlas.ScriptService.DeleteScript:input_type -> eolymp.atlas.DeleteScriptInput
	9,  // 18: eolymp.atlas.ScriptService.DescribeScript:input_type -> eolymp.atlas.DescribeScriptInput
	11, // 19: eolymp.atlas.ScriptService.ListScripts:input_type -> eolymp.atlas.ListScriptsInput
	4,  // 20: eolymp.atlas.ScriptService.CreateScript:output_type -> eolymp.atlas.CreateScriptOutput
	6,  // 21: eolymp.atlas.ScriptService.UpdateScript:output_type -> eolymp.atlas.UpdateScriptOutput
	8,  // 22: eolymp.atlas.ScriptService.DeleteScript:output_type -> eolymp.atlas.DeleteScriptOutput
	10, // 23: eolymp.atlas.ScriptService.DescribeScript:output_type -> eolymp.atlas.DescribeScriptOutput
	12, // 24: eolymp.atlas.ScriptService.ListScripts:output_type -> eolymp.atlas.ListScriptsOutput
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_eolymp_atlas_script_service_proto_init() }
func file_eolymp_atlas_script_service_proto_init() {
	if File_eolymp_atlas_script_service_proto != nil {
		return
	}
	file_eolymp_atlas_script_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eolymp_atlas_script_service_proto_rawDesc), len(file_eolymp_atlas_script_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eolymp_atlas_script_service_proto_goTypes,
		DependencyIndexes: file_eolymp_atlas_script_service_proto_depIdxs,
		EnumInfos:         file_eolymp_atlas_script_service_proto_enumTypes,
		MessageInfos:      file_eolymp_atlas_script_service_proto_msgTypes,
	}.Build()
	File_eolymp_atlas_script_service_proto = out.File
	file_eolymp_atlas_script_service_proto_goTypes = nil
	file_eolymp_atlas_script_service_proto_depIdxs = nil
}
