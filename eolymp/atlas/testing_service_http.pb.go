// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package atlas

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _TestingService_HTTPReadQueryString parses body into proto.Message
func _TestingService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _TestingService_HTTPReadRequestBody parses body into proto.Message
func _TestingService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _TestingService_HTTPWriteResponse writes proto.Message to HTTP response
func _TestingService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_TestingService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _TestingService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _TestingService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _TestingService_WebsocketErrorResponse writes error to websocket connection
func _TestingService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _TestingService_WebsocketCodec implements protobuf codec for websockets package
var _TestingService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterTestingServiceHttpHandlers adds handlers for for TestingServiceServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterTestingServiceHttpHandlers(router *mux.Router, prefix string, srv TestingServiceServer) {
	router.Handle(prefix+"/verifier", _TestingService_UpdateChecker_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.TestingService.UpdateChecker")
	router.Handle(prefix+"/verifier", _TestingService_DescribeChecker_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.DescribeChecker")
	router.Handle(prefix+"/interactor", _TestingService_UpdateInteractor_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.TestingService.UpdateInteractor")
	router.Handle(prefix+"/interactor", _TestingService_DescribeInteractor_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.DescribeInteractor")
	router.Handle(prefix+"/testsets", _TestingService_CreateTestset_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.TestingService.CreateTestset")
	router.Handle(prefix+"/testsets/{testset_id}", _TestingService_UpdateTestset_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.TestingService.UpdateTestset")
	router.Handle(prefix+"/testsets/{testset_id}", _TestingService_DeleteTestset_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.TestingService.DeleteTestset")
	router.Handle(prefix+"/testsets/{testset_id}", _TestingService_DescribeTestset_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.DescribeTestset")
	router.Handle(prefix+"/testsets", _TestingService_ListTestsets_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.ListTestsets")
	router.Handle(prefix+"/testsets/{testset_id}/tests", _TestingService_CreateTest_Rule0(srv)).
		Methods("POST").
		Name("eolymp.atlas.TestingService.CreateTest")
	router.Handle(prefix+"/testsets/{testset_id}/tests/{test_id}", _TestingService_UpdateTest_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.atlas.TestingService.UpdateTest")
	router.Handle(prefix+"/testsets/{testset_id}/tests/{test_id}", _TestingService_DeleteTest_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.atlas.TestingService.DeleteTest")
	router.Handle(prefix+"/testsets/{testset_id}/tests/{test_id}", _TestingService_DescribeTest_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.DescribeTest")
	router.Handle(prefix+"/testsets/{testset_id}/tests", _TestingService_ListTests_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.ListTests")
	router.Handle(prefix+"/examples", _TestingService_ListExamples_Rule0(srv)).
		Methods("GET").
		Name("eolymp.atlas.TestingService.ListExamples")
}

func _TestingService_UpdateChecker_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVerifierInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateChecker(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DescribeChecker_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeVerifierInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeChecker(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_UpdateInteractor_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateInteractorInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateInteractor(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DescribeInteractor_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeInteractorInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeInteractor(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_CreateTestset_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestsetInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateTestset(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_UpdateTestset_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestsetInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]

		out, err := srv.UpdateTestset(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DeleteTestset_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestsetInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]

		out, err := srv.DeleteTestset(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DescribeTestset_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestsetInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]

		out, err := srv.DescribeTestset(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_ListTestsets_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsetsInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListTestsets(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_CreateTest_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTestInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]

		out, err := srv.CreateTest(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_UpdateTest_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateTestInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.UpdateTest(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DeleteTest_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteTestInput{}

		if err := _TestingService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.DeleteTest(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_DescribeTest_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeTestInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]
		in.TestId = vars["test_id"]

		out, err := srv.DescribeTest(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_ListTests_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListTestsInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.TestsetId = vars["testset_id"]

		out, err := srv.ListTests(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

func _TestingService_ListExamples_Rule0(srv TestingServiceServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListExamplesInput{}

		if err := _TestingService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListExamples(r.Context(), in)
		if err != nil {
			_TestingService_HTTPWriteErrorResponse(w, err)
			return
		}

		_TestingService_HTTPWriteResponse(w, out)
	})
}

type _TestingServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _TestingServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _TestingServiceHandler) (out proto.Message, err error)
type TestingServiceInterceptor struct {
	middleware []_TestingServiceMiddleware
	server     TestingServiceServer
}

// NewTestingServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewTestingServiceInterceptor(srv TestingServiceServer, middleware ..._TestingServiceMiddleware) *TestingServiceInterceptor {
	return &TestingServiceInterceptor{server: srv, middleware: middleware}
}

func (i *TestingServiceInterceptor) UpdateChecker(ctx context.Context, in *UpdateVerifierInput) (*UpdateVerifierOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateVerifierInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateVerifierInput, got %T", in))
		}

		return i.server.UpdateChecker(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.UpdateChecker", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateVerifierOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateVerifierOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DescribeChecker(ctx context.Context, in *DescribeVerifierInput) (*DescribeVerifierOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeVerifierInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeVerifierInput, got %T", in))
		}

		return i.server.DescribeChecker(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DescribeChecker", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeVerifierOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeVerifierOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) UpdateInteractor(ctx context.Context, in *UpdateInteractorInput) (*UpdateInteractorOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateInteractorInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateInteractorInput, got %T", in))
		}

		return i.server.UpdateInteractor(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.UpdateInteractor", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateInteractorOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateInteractorOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DescribeInteractor(ctx context.Context, in *DescribeInteractorInput) (*DescribeInteractorOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeInteractorInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeInteractorInput, got %T", in))
		}

		return i.server.DescribeInteractor(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DescribeInteractor", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeInteractorOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeInteractorOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) CreateTestset(ctx context.Context, in *CreateTestsetInput) (*CreateTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTestsetInput, got %T", in))
		}

		return i.server.CreateTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.CreateTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) UpdateTestset(ctx context.Context, in *UpdateTestsetInput) (*UpdateTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTestsetInput, got %T", in))
		}

		return i.server.UpdateTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.UpdateTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DeleteTestset(ctx context.Context, in *DeleteTestsetInput) (*DeleteTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTestsetInput, got %T", in))
		}

		return i.server.DeleteTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DeleteTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DescribeTestset(ctx context.Context, in *DescribeTestsetInput) (*DescribeTestsetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTestsetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTestsetInput, got %T", in))
		}

		return i.server.DescribeTestset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DescribeTestset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTestsetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTestsetOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) ListTestsets(ctx context.Context, in *ListTestsetsInput) (*ListTestsetsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTestsetsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTestsetsInput, got %T", in))
		}

		return i.server.ListTestsets(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.ListTestsets", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTestsetsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTestsetsOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) CreateTest(ctx context.Context, in *CreateTestInput) (*CreateTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTestInput, got %T", in))
		}

		return i.server.CreateTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.CreateTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTestOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) UpdateTest(ctx context.Context, in *UpdateTestInput) (*UpdateTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateTestInput, got %T", in))
		}

		return i.server.UpdateTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.UpdateTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateTestOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DeleteTest(ctx context.Context, in *DeleteTestInput) (*DeleteTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteTestInput, got %T", in))
		}

		return i.server.DeleteTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DeleteTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteTestOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) DescribeTest(ctx context.Context, in *DescribeTestInput) (*DescribeTestOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeTestInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeTestInput, got %T", in))
		}

		return i.server.DescribeTest(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.DescribeTest", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeTestOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeTestOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) ListTests(ctx context.Context, in *ListTestsInput) (*ListTestsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListTestsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListTestsInput, got %T", in))
		}

		return i.server.ListTests(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.ListTests", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListTestsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListTestsOutput, got %T", out))
	}

	return message, err
}

func (i *TestingServiceInterceptor) ListExamples(ctx context.Context, in *ListExamplesInput) (*ListExamplesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListExamplesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListExamplesInput, got %T", in))
		}

		return i.server.ListExamples(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.atlas.TestingService.ListExamples", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListExamplesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListExamplesOutput, got %T", out))
	}

	return message, err
}
