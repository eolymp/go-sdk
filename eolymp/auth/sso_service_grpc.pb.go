// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/auth/sso_service.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SSOService_SignonRequest_FullMethodName  = "/eolymp.auth.SSOService/SignonRequest"
	SSOService_SignonExchange_FullMethodName = "/eolymp.auth.SSOService/SignonExchange"
)

// SSOServiceClient is the client API for SSOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOServiceClient interface {
	SignonRequest(ctx context.Context, in *SignonRequestInput, opts ...grpc.CallOption) (*SignonRequestOutput, error)
	SignonExchange(ctx context.Context, in *SignonExchangeInput, opts ...grpc.CallOption) (*SignonExchangeOutput, error)
}

type sSOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOServiceClient(cc grpc.ClientConnInterface) SSOServiceClient {
	return &sSOServiceClient{cc}
}

func (c *sSOServiceClient) SignonRequest(ctx context.Context, in *SignonRequestInput, opts ...grpc.CallOption) (*SignonRequestOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignonRequestOutput)
	err := c.cc.Invoke(ctx, SSOService_SignonRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) SignonExchange(ctx context.Context, in *SignonExchangeInput, opts ...grpc.CallOption) (*SignonExchangeOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignonExchangeOutput)
	err := c.cc.Invoke(ctx, SSOService_SignonExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServiceServer is the server API for SSOService service.
// All implementations should embed UnimplementedSSOServiceServer
// for forward compatibility.
type SSOServiceServer interface {
	SignonRequest(context.Context, *SignonRequestInput) (*SignonRequestOutput, error)
	SignonExchange(context.Context, *SignonExchangeInput) (*SignonExchangeOutput, error)
}

// UnimplementedSSOServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSOServiceServer struct{}

func (UnimplementedSSOServiceServer) SignonRequest(context.Context, *SignonRequestInput) (*SignonRequestOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignonRequest not implemented")
}
func (UnimplementedSSOServiceServer) SignonExchange(context.Context, *SignonExchangeInput) (*SignonExchangeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignonExchange not implemented")
}
func (UnimplementedSSOServiceServer) testEmbeddedByValue() {}

// UnsafeSSOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServiceServer will
// result in compilation errors.
type UnsafeSSOServiceServer interface {
	mustEmbedUnimplementedSSOServiceServer()
}

func RegisterSSOServiceServer(s grpc.ServiceRegistrar, srv SSOServiceServer) {
	// If the following call pancis, it indicates UnimplementedSSOServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSOService_ServiceDesc, srv)
}

func _SSOService_SignonRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignonRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).SignonRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOService_SignonRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).SignonRequest(ctx, req.(*SignonRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_SignonExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignonExchangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).SignonExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSOService_SignonExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).SignonExchange(ctx, req.(*SignonExchangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOService_ServiceDesc is the grpc.ServiceDesc for SSOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.auth.SSOService",
	HandlerType: (*SSOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignonRequest",
			Handler:    _SSOService_SignonRequest_Handler,
		},
		{
			MethodName: "SignonExchange",
			Handler:    _SSOService_SignonExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/auth/sso_service.proto",
}
