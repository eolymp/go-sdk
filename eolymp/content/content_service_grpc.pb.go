// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/content/content_service.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentService_DescribeFragment_FullMethodName = "/eolymp.content.ContentService/DescribeFragment"
	ContentService_ListFragments_FullMethodName    = "/eolymp.content.ContentService/ListFragments"
	ContentService_CreateFragment_FullMethodName   = "/eolymp.content.ContentService/CreateFragment"
	ContentService_UpdateFragment_FullMethodName   = "/eolymp.content.ContentService/UpdateFragment"
	ContentService_DeleteFragment_FullMethodName   = "/eolymp.content.ContentService/DeleteFragment"
	ContentService_DescribePath_FullMethodName     = "/eolymp.content.ContentService/DescribePath"
	ContentService_ListPaths_FullMethodName        = "/eolymp.content.ContentService/ListPaths"
	ContentService_ListParents_FullMethodName      = "/eolymp.content.ContentService/ListParents"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	DescribeFragment(ctx context.Context, in *DescribeFragmentInput, opts ...grpc.CallOption) (*DescribeFragmentOutput, error)
	ListFragments(ctx context.Context, in *ListFragmentsInput, opts ...grpc.CallOption) (*ListFragmentsOutput, error)
	CreateFragment(ctx context.Context, in *CreateFragmentInput, opts ...grpc.CallOption) (*CreateFragmentOutput, error)
	UpdateFragment(ctx context.Context, in *UpdateFragmentInput, opts ...grpc.CallOption) (*UpdateFragmentOutput, error)
	DeleteFragment(ctx context.Context, in *DeleteFragmentInput, opts ...grpc.CallOption) (*DeleteFragmentOutput, error)
	DescribePath(ctx context.Context, in *DescribePathInput, opts ...grpc.CallOption) (*DescribePathOutput, error)
	ListPaths(ctx context.Context, in *ListPathsInput, opts ...grpc.CallOption) (*ListPathsOutput, error)
	ListParents(ctx context.Context, in *ListParentsInput, opts ...grpc.CallOption) (*ListParentsOutput, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) DescribeFragment(ctx context.Context, in *DescribeFragmentInput, opts ...grpc.CallOption) (*DescribeFragmentOutput, error) {
	out := new(DescribeFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_DescribeFragment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListFragments(ctx context.Context, in *ListFragmentsInput, opts ...grpc.CallOption) (*ListFragmentsOutput, error) {
	out := new(ListFragmentsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListFragments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateFragment(ctx context.Context, in *CreateFragmentInput, opts ...grpc.CallOption) (*CreateFragmentOutput, error) {
	out := new(CreateFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_CreateFragment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateFragment(ctx context.Context, in *UpdateFragmentInput, opts ...grpc.CallOption) (*UpdateFragmentOutput, error) {
	out := new(UpdateFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_UpdateFragment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteFragment(ctx context.Context, in *DeleteFragmentInput, opts ...grpc.CallOption) (*DeleteFragmentOutput, error) {
	out := new(DeleteFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_DeleteFragment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DescribePath(ctx context.Context, in *DescribePathInput, opts ...grpc.CallOption) (*DescribePathOutput, error) {
	out := new(DescribePathOutput)
	err := c.cc.Invoke(ctx, ContentService_DescribePath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListPaths(ctx context.Context, in *ListPathsInput, opts ...grpc.CallOption) (*ListPathsOutput, error) {
	out := new(ListPathsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListPaths_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListParents(ctx context.Context, in *ListParentsInput, opts ...grpc.CallOption) (*ListParentsOutput, error) {
	out := new(ListParentsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListParents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations should embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	DescribeFragment(context.Context, *DescribeFragmentInput) (*DescribeFragmentOutput, error)
	ListFragments(context.Context, *ListFragmentsInput) (*ListFragmentsOutput, error)
	CreateFragment(context.Context, *CreateFragmentInput) (*CreateFragmentOutput, error)
	UpdateFragment(context.Context, *UpdateFragmentInput) (*UpdateFragmentOutput, error)
	DeleteFragment(context.Context, *DeleteFragmentInput) (*DeleteFragmentOutput, error)
	DescribePath(context.Context, *DescribePathInput) (*DescribePathOutput, error)
	ListPaths(context.Context, *ListPathsInput) (*ListPathsOutput, error)
	ListParents(context.Context, *ListParentsInput) (*ListParentsOutput, error)
}

// UnimplementedContentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) DescribeFragment(context.Context, *DescribeFragmentInput) (*DescribeFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFragment not implemented")
}
func (UnimplementedContentServiceServer) ListFragments(context.Context, *ListFragmentsInput) (*ListFragmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFragments not implemented")
}
func (UnimplementedContentServiceServer) CreateFragment(context.Context, *CreateFragmentInput) (*CreateFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFragment not implemented")
}
func (UnimplementedContentServiceServer) UpdateFragment(context.Context, *UpdateFragmentInput) (*UpdateFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFragment not implemented")
}
func (UnimplementedContentServiceServer) DeleteFragment(context.Context, *DeleteFragmentInput) (*DeleteFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragment not implemented")
}
func (UnimplementedContentServiceServer) DescribePath(context.Context, *DescribePathInput) (*DescribePathOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePath not implemented")
}
func (UnimplementedContentServiceServer) ListPaths(context.Context, *ListPathsInput) (*ListPathsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaths not implemented")
}
func (UnimplementedContentServiceServer) ListParents(context.Context, *ListParentsInput) (*ListParentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParents not implemented")
}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_DescribeFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DescribeFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DescribeFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DescribeFragment(ctx, req.(*DescribeFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListFragments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFragmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListFragments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListFragments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListFragments(ctx, req.(*ListFragmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateFragment(ctx, req.(*CreateFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateFragment(ctx, req.(*UpdateFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteFragment(ctx, req.(*DeleteFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DescribePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePathInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DescribePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DescribePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DescribePath(ctx, req.(*DescribePathInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListPaths(ctx, req.(*ListPathsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListParents(ctx, req.(*ListParentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeFragment",
			Handler:    _ContentService_DescribeFragment_Handler,
		},
		{
			MethodName: "ListFragments",
			Handler:    _ContentService_ListFragments_Handler,
		},
		{
			MethodName: "CreateFragment",
			Handler:    _ContentService_CreateFragment_Handler,
		},
		{
			MethodName: "UpdateFragment",
			Handler:    _ContentService_UpdateFragment_Handler,
		},
		{
			MethodName: "DeleteFragment",
			Handler:    _ContentService_DeleteFragment_Handler,
		},
		{
			MethodName: "DescribePath",
			Handler:    _ContentService_DescribePath_Handler,
		},
		{
			MethodName: "ListPaths",
			Handler:    _ContentService_ListPaths_Handler,
		},
		{
			MethodName: "ListParents",
			Handler:    _ContentService_ListParents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/content/content_service.proto",
}
