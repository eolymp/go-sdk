// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/content/content_service.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentService_DescribeFragment_FullMethodName            = "/eolymp.content.ContentService/DescribeFragment"
	ContentService_ListFragments_FullMethodName               = "/eolymp.content.ContentService/ListFragments"
	ContentService_CreateFragment_FullMethodName              = "/eolymp.content.ContentService/CreateFragment"
	ContentService_UpdateFragment_FullMethodName              = "/eolymp.content.ContentService/UpdateFragment"
	ContentService_DeleteFragment_FullMethodName              = "/eolymp.content.ContentService/DeleteFragment"
	ContentService_TranslateFragment_FullMethodName           = "/eolymp.content.ContentService/TranslateFragment"
	ContentService_DescribeFragmentTranslation_FullMethodName = "/eolymp.content.ContentService/DescribeFragmentTranslation"
	ContentService_ListFragmentTranslations_FullMethodName    = "/eolymp.content.ContentService/ListFragmentTranslations"
	ContentService_CreateFragmentTranslation_FullMethodName   = "/eolymp.content.ContentService/CreateFragmentTranslation"
	ContentService_UpdateFragmentTranslation_FullMethodName   = "/eolymp.content.ContentService/UpdateFragmentTranslation"
	ContentService_DeleteFragmentTranslation_FullMethodName   = "/eolymp.content.ContentService/DeleteFragmentTranslation"
	ContentService_DescribePath_FullMethodName                = "/eolymp.content.ContentService/DescribePath"
	ContentService_ListParents_FullMethodName                 = "/eolymp.content.ContentService/ListParents"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	DescribeFragment(ctx context.Context, in *DescribeFragmentInput, opts ...grpc.CallOption) (*DescribeFragmentOutput, error)
	ListFragments(ctx context.Context, in *ListFragmentsInput, opts ...grpc.CallOption) (*ListFragmentsOutput, error)
	CreateFragment(ctx context.Context, in *CreateFragmentInput, opts ...grpc.CallOption) (*CreateFragmentOutput, error)
	UpdateFragment(ctx context.Context, in *UpdateFragmentInput, opts ...grpc.CallOption) (*UpdateFragmentOutput, error)
	DeleteFragment(ctx context.Context, in *DeleteFragmentInput, opts ...grpc.CallOption) (*DeleteFragmentOutput, error)
	TranslateFragment(ctx context.Context, in *TranslateFragmentInput, opts ...grpc.CallOption) (*TranslateFragmentOutput, error)
	DescribeFragmentTranslation(ctx context.Context, in *DescribeFragmentTranslationInput, opts ...grpc.CallOption) (*DescribeFragmentTranslationOutput, error)
	ListFragmentTranslations(ctx context.Context, in *ListFragmentTranslationsInput, opts ...grpc.CallOption) (*ListFragmentTranslationsOutput, error)
	CreateFragmentTranslation(ctx context.Context, in *CreateFragmentTranslationInput, opts ...grpc.CallOption) (*CreateFragmentTranslationOutput, error)
	UpdateFragmentTranslation(ctx context.Context, in *UpdateFragmentTranslationInput, opts ...grpc.CallOption) (*UpdateFragmentTranslationOutput, error)
	DeleteFragmentTranslation(ctx context.Context, in *DeleteFragmentTranslationInput, opts ...grpc.CallOption) (*DeleteFragmentTranslationOutput, error)
	DescribePath(ctx context.Context, in *DescribePathInput, opts ...grpc.CallOption) (*DescribePathOutput, error)
	ListParents(ctx context.Context, in *ListParentsInput, opts ...grpc.CallOption) (*ListParentsOutput, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) DescribeFragment(ctx context.Context, in *DescribeFragmentInput, opts ...grpc.CallOption) (*DescribeFragmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_DescribeFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListFragments(ctx context.Context, in *ListFragmentsInput, opts ...grpc.CallOption) (*ListFragmentsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFragmentsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListFragments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateFragment(ctx context.Context, in *CreateFragmentInput, opts ...grpc.CallOption) (*CreateFragmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_CreateFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateFragment(ctx context.Context, in *UpdateFragmentInput, opts ...grpc.CallOption) (*UpdateFragmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_UpdateFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteFragment(ctx context.Context, in *DeleteFragmentInput, opts ...grpc.CallOption) (*DeleteFragmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_DeleteFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TranslateFragment(ctx context.Context, in *TranslateFragmentInput, opts ...grpc.CallOption) (*TranslateFragmentOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateFragmentOutput)
	err := c.cc.Invoke(ctx, ContentService_TranslateFragment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DescribeFragmentTranslation(ctx context.Context, in *DescribeFragmentTranslationInput, opts ...grpc.CallOption) (*DescribeFragmentTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeFragmentTranslationOutput)
	err := c.cc.Invoke(ctx, ContentService_DescribeFragmentTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListFragmentTranslations(ctx context.Context, in *ListFragmentTranslationsInput, opts ...grpc.CallOption) (*ListFragmentTranslationsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFragmentTranslationsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListFragmentTranslations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateFragmentTranslation(ctx context.Context, in *CreateFragmentTranslationInput, opts ...grpc.CallOption) (*CreateFragmentTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFragmentTranslationOutput)
	err := c.cc.Invoke(ctx, ContentService_CreateFragmentTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateFragmentTranslation(ctx context.Context, in *UpdateFragmentTranslationInput, opts ...grpc.CallOption) (*UpdateFragmentTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFragmentTranslationOutput)
	err := c.cc.Invoke(ctx, ContentService_UpdateFragmentTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteFragmentTranslation(ctx context.Context, in *DeleteFragmentTranslationInput, opts ...grpc.CallOption) (*DeleteFragmentTranslationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFragmentTranslationOutput)
	err := c.cc.Invoke(ctx, ContentService_DeleteFragmentTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DescribePath(ctx context.Context, in *DescribePathInput, opts ...grpc.CallOption) (*DescribePathOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribePathOutput)
	err := c.cc.Invoke(ctx, ContentService_DescribePath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListParents(ctx context.Context, in *ListParentsInput, opts ...grpc.CallOption) (*ListParentsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListParentsOutput)
	err := c.cc.Invoke(ctx, ContentService_ListParents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations should embed UnimplementedContentServiceServer
// for forward compatibility.
type ContentServiceServer interface {
	DescribeFragment(context.Context, *DescribeFragmentInput) (*DescribeFragmentOutput, error)
	ListFragments(context.Context, *ListFragmentsInput) (*ListFragmentsOutput, error)
	CreateFragment(context.Context, *CreateFragmentInput) (*CreateFragmentOutput, error)
	UpdateFragment(context.Context, *UpdateFragmentInput) (*UpdateFragmentOutput, error)
	DeleteFragment(context.Context, *DeleteFragmentInput) (*DeleteFragmentOutput, error)
	TranslateFragment(context.Context, *TranslateFragmentInput) (*TranslateFragmentOutput, error)
	DescribeFragmentTranslation(context.Context, *DescribeFragmentTranslationInput) (*DescribeFragmentTranslationOutput, error)
	ListFragmentTranslations(context.Context, *ListFragmentTranslationsInput) (*ListFragmentTranslationsOutput, error)
	CreateFragmentTranslation(context.Context, *CreateFragmentTranslationInput) (*CreateFragmentTranslationOutput, error)
	UpdateFragmentTranslation(context.Context, *UpdateFragmentTranslationInput) (*UpdateFragmentTranslationOutput, error)
	DeleteFragmentTranslation(context.Context, *DeleteFragmentTranslationInput) (*DeleteFragmentTranslationOutput, error)
	DescribePath(context.Context, *DescribePathInput) (*DescribePathOutput, error)
	ListParents(context.Context, *ListParentsInput) (*ListParentsOutput, error)
}

// UnimplementedContentServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentServiceServer struct{}

func (UnimplementedContentServiceServer) DescribeFragment(context.Context, *DescribeFragmentInput) (*DescribeFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFragment not implemented")
}
func (UnimplementedContentServiceServer) ListFragments(context.Context, *ListFragmentsInput) (*ListFragmentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFragments not implemented")
}
func (UnimplementedContentServiceServer) CreateFragment(context.Context, *CreateFragmentInput) (*CreateFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFragment not implemented")
}
func (UnimplementedContentServiceServer) UpdateFragment(context.Context, *UpdateFragmentInput) (*UpdateFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFragment not implemented")
}
func (UnimplementedContentServiceServer) DeleteFragment(context.Context, *DeleteFragmentInput) (*DeleteFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragment not implemented")
}
func (UnimplementedContentServiceServer) TranslateFragment(context.Context, *TranslateFragmentInput) (*TranslateFragmentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateFragment not implemented")
}
func (UnimplementedContentServiceServer) DescribeFragmentTranslation(context.Context, *DescribeFragmentTranslationInput) (*DescribeFragmentTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFragmentTranslation not implemented")
}
func (UnimplementedContentServiceServer) ListFragmentTranslations(context.Context, *ListFragmentTranslationsInput) (*ListFragmentTranslationsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFragmentTranslations not implemented")
}
func (UnimplementedContentServiceServer) CreateFragmentTranslation(context.Context, *CreateFragmentTranslationInput) (*CreateFragmentTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFragmentTranslation not implemented")
}
func (UnimplementedContentServiceServer) UpdateFragmentTranslation(context.Context, *UpdateFragmentTranslationInput) (*UpdateFragmentTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFragmentTranslation not implemented")
}
func (UnimplementedContentServiceServer) DeleteFragmentTranslation(context.Context, *DeleteFragmentTranslationInput) (*DeleteFragmentTranslationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragmentTranslation not implemented")
}
func (UnimplementedContentServiceServer) DescribePath(context.Context, *DescribePathInput) (*DescribePathOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePath not implemented")
}
func (UnimplementedContentServiceServer) ListParents(context.Context, *ListParentsInput) (*ListParentsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParents not implemented")
}
func (UnimplementedContentServiceServer) testEmbeddedByValue() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_DescribeFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DescribeFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DescribeFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DescribeFragment(ctx, req.(*DescribeFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListFragments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFragmentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListFragments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListFragments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListFragments(ctx, req.(*ListFragmentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateFragment(ctx, req.(*CreateFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateFragment(ctx, req.(*UpdateFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteFragment(ctx, req.(*DeleteFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TranslateFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateFragmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TranslateFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_TranslateFragment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TranslateFragment(ctx, req.(*TranslateFragmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DescribeFragmentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFragmentTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DescribeFragmentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DescribeFragmentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DescribeFragmentTranslation(ctx, req.(*DescribeFragmentTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListFragmentTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFragmentTranslationsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListFragmentTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListFragmentTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListFragmentTranslations(ctx, req.(*ListFragmentTranslationsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateFragmentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFragmentTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateFragmentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateFragmentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateFragmentTranslation(ctx, req.(*CreateFragmentTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateFragmentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFragmentTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateFragmentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateFragmentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateFragmentTranslation(ctx, req.(*UpdateFragmentTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteFragmentTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentTranslationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteFragmentTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteFragmentTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteFragmentTranslation(ctx, req.(*DeleteFragmentTranslationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DescribePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePathInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DescribePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DescribePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DescribePath(ctx, req.(*DescribePathInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParentsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListParents(ctx, req.(*ListParentsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeFragment",
			Handler:    _ContentService_DescribeFragment_Handler,
		},
		{
			MethodName: "ListFragments",
			Handler:    _ContentService_ListFragments_Handler,
		},
		{
			MethodName: "CreateFragment",
			Handler:    _ContentService_CreateFragment_Handler,
		},
		{
			MethodName: "UpdateFragment",
			Handler:    _ContentService_UpdateFragment_Handler,
		},
		{
			MethodName: "DeleteFragment",
			Handler:    _ContentService_DeleteFragment_Handler,
		},
		{
			MethodName: "TranslateFragment",
			Handler:    _ContentService_TranslateFragment_Handler,
		},
		{
			MethodName: "DescribeFragmentTranslation",
			Handler:    _ContentService_DescribeFragmentTranslation_Handler,
		},
		{
			MethodName: "ListFragmentTranslations",
			Handler:    _ContentService_ListFragmentTranslations_Handler,
		},
		{
			MethodName: "CreateFragmentTranslation",
			Handler:    _ContentService_CreateFragmentTranslation_Handler,
		},
		{
			MethodName: "UpdateFragmentTranslation",
			Handler:    _ContentService_UpdateFragmentTranslation_Handler,
		},
		{
			MethodName: "DeleteFragmentTranslation",
			Handler:    _ContentService_DeleteFragmentTranslation_Handler,
		},
		{
			MethodName: "DescribePath",
			Handler:    _ContentService_DescribePath_Handler,
		},
		{
			MethodName: "ListParents",
			Handler:    _ContentService_ListParents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/content/content_service.proto",
}
