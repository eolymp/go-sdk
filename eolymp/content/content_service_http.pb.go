// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package content

import (
	go_querystring "github.com/eolymp/go-querystring"
	mux "github.com/gorilla/mux"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	strconv "strconv"
)

// _ContentService_HTTPReadQueryString parses body into proto.Message
func _ContentService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	if h := r.Header.Values("Strict-Parsing"); len(h) > 0 {
		strict, err := strconv.ParseBool(h[len(h)-1])
		if err != nil {
			return err
		}

		if strict {
			query, err := url.ParseQuery(r.URL.RawQuery)
			if err != nil {
				return err
			}

			return go_querystring.UnmarshalStrict(query, v)
		}
	}

	return go_querystring.Unmarshal(r.URL.Query(), v)
}

// _ContentService_HTTPReadRequestBody parses body into proto.Message
func _ContentService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _ContentService_HTTPWriteResponse writes proto.Message to HTTP response
func _ContentService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_ContentService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _ContentService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _ContentService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterContentServiceHttpHandlers adds handlers for for ContentServiceClient
func RegisterContentServiceHttpHandlers(router *mux.Router, prefix string, cli ContentServiceClient) {
	router.Handle(prefix+"/content/fragments/{fragment_id}", _ContentService_DescribeFragment_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.DescribeFragment")
	router.Handle(prefix+"/content/fragments", _ContentService_ListFragments_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.ListFragments")
	router.Handle(prefix+"/content/fragments", _ContentService_CreateFragment_Rule0(cli)).
		Methods("POST").
		Name("eolymp.content.ContentService.CreateFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}", _ContentService_UpdateFragment_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.content.ContentService.UpdateFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}", _ContentService_DeleteFragment_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.content.ContentService.DeleteFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}/translate", _ContentService_TranslateFragment_Rule0(cli)).
		Methods("POST").
		Name("eolymp.content.ContentService.TranslateFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}/variants/{variant_id}", _ContentService_DescribeVariant_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.DescribeVariant")
	router.Handle(prefix+"/content/fragments/{fragment_id}/variants", _ContentService_ListVariants_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.ListVariants")
	router.Handle(prefix+"/content/fragments/{fragment_id}/variants", _ContentService_CreateVariant_Rule0(cli)).
		Methods("POST").
		Name("eolymp.content.ContentService.CreateVariant")
	router.Handle(prefix+"/content/fragments/{fragment_id}/variants/{variant_id}", _ContentService_UpdateVariant_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.content.ContentService.UpdateVariant")
	router.Handle(prefix+"/content/fragments/{fragment_id}/variants/{variant_id}", _ContentService_DeleteVariant_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.content.ContentService.DeleteVariant")
	router.Handle(prefix+"/content/path", _ContentService_DescribePath_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.DescribePath")
	router.Handle(prefix+"/content/parents", _ContentService_ListParents_Rule0(cli)).
		Methods("GET").
		Name("eolymp.content.ContentService.ListParents")
}

// RegisterContentServiceHttpProxy adds proxy handlers for for ContentServiceClient
func RegisterContentServiceHttpProxy(router *mux.Router, prefix string, conn grpc.ClientConnInterface) {
	RegisterContentServiceHttpHandlers(router, prefix, NewContentServiceClient(conn))
}

func _ContentService_DescribeFragment_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeFragmentInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeFragment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_ListFragments_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListFragmentsInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListFragments(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_CreateFragment_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateFragmentInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreateFragment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_UpdateFragment_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateFragmentInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateFragment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_DeleteFragment_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteFragmentInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteFragment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_TranslateFragment_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslateFragmentInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.TranslateFragment(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_DescribeVariant_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeVariantInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]
		in.VariantId = vars["variant_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribeVariant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_ListVariants_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListVariantsInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.ListVariants(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_CreateVariant_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateVariantInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		var header, trailer metadata.MD

		out, err := cli.CreateVariant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_UpdateVariant_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateVariantInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]
		in.VariantId = vars["variant_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdateVariant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_DeleteVariant_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteVariantInput{}

		if err := _ContentService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]
		in.VariantId = vars["variant_id"]

		var header, trailer metadata.MD

		out, err := cli.DeleteVariant(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_DescribePath_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePathInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.DescribePath(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _ContentService_ListParents_Rule0(cli ContentServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParentsInput{}

		if err := _ContentService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListParents(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_ContentService_HTTPWriteErrorResponse(w, err)
			return
		}

		_ContentService_HTTPWriteResponse(w, out, header, trailer)
	})
}
