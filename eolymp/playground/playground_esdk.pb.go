// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package playground

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	os "os"
	strings "strings"
)

// NewPlayground constructs client for Playground
func NewPlayground(cli PlaygroundHTTPClient) *PlaygroundService {
	base := "https://api.eolymp.com"
	if v := os.Getenv("EOLYMP_API_URL"); v != "" {
		base = v
	}
	return &PlaygroundService{base: strings.TrimSuffix(base, "/"), cli: cli}
}

type PlaygroundHTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type PlaygroundService struct {
	base string
	cli  PlaygroundHTTPClient
}

// invoke RPC method using twirp-like protocol
func (s *PlaygroundService) invoke(ctx context.Context, method string, in, out proto.Message) (err error) {
	input := []byte("{}")

	if in != nil {
		input, err = protojson.Marshal(in)
		if err != nil {
			return err
		}
	}

	req, err := http.NewRequest(http.MethodPost, s.base+"/"+method, bytes.NewReader(input))
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
		}

		return fmt.Errorf("non-200 response code (%v): %s", resp.StatusCode, data)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *PlaygroundService) CreateRun(ctx context.Context, in *CreateRunInput) (*CreateRunOutput, error) {
	out := &CreateRunOutput{}

	if err := s.invoke(ctx, "eolymp.playground.Playground/CreateRun", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *PlaygroundService) DescribeRun(ctx context.Context, in *DescribeRunInput) (*DescribeRunOutput, error) {
	out := &DescribeRunOutput{}

	if err := s.invoke(ctx, "eolymp.playground.Playground/DescribeRun", in, out); err != nil {
		return nil, err
	}

	return out, nil
}
