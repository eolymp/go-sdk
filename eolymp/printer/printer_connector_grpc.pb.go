// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: eolymp/printer/printer_connector.proto

package printer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrinterConnector_Connect_FullMethodName = "/eolymp.printer.PrinterConnector/Connect"
)

// PrinterConnectorClient is the client API for PrinterConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrinterConnectorClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PrinterConnectorClientMessage, PrinterConnectorServerMessage], error)
}

type printerConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewPrinterConnectorClient(cc grpc.ClientConnInterface) PrinterConnectorClient {
	return &printerConnectorClient{cc}
}

func (c *printerConnectorClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PrinterConnectorClientMessage, PrinterConnectorServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PrinterConnector_ServiceDesc.Streams[0], PrinterConnector_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PrinterConnectorClientMessage, PrinterConnectorServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrinterConnector_ConnectClient = grpc.BidiStreamingClient[PrinterConnectorClientMessage, PrinterConnectorServerMessage]

// PrinterConnectorServer is the server API for PrinterConnector service.
// All implementations should embed UnimplementedPrinterConnectorServer
// for forward compatibility.
type PrinterConnectorServer interface {
	Connect(grpc.BidiStreamingServer[PrinterConnectorClientMessage, PrinterConnectorServerMessage]) error
}

// UnimplementedPrinterConnectorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrinterConnectorServer struct{}

func (UnimplementedPrinterConnectorServer) Connect(grpc.BidiStreamingServer[PrinterConnectorClientMessage, PrinterConnectorServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPrinterConnectorServer) testEmbeddedByValue() {}

// UnsafePrinterConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrinterConnectorServer will
// result in compilation errors.
type UnsafePrinterConnectorServer interface {
	mustEmbedUnimplementedPrinterConnectorServer()
}

func RegisterPrinterConnectorServer(s grpc.ServiceRegistrar, srv PrinterConnectorServer) {
	// If the following call pancis, it indicates UnimplementedPrinterConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrinterConnector_ServiceDesc, srv)
}

func _PrinterConnector_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrinterConnectorServer).Connect(&grpc.GenericServerStream[PrinterConnectorClientMessage, PrinterConnectorServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrinterConnector_ConnectServer = grpc.BidiStreamingServer[PrinterConnectorClientMessage, PrinterConnectorServerMessage]

// PrinterConnector_ServiceDesc is the grpc.ServiceDesc for PrinterConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrinterConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.printer.PrinterConnector",
	HandlerType: (*PrinterConnectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _PrinterConnector_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eolymp/printer/printer_connector.proto",
}
