// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package printer

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _PrinterConnector_HTTPReadQueryString parses body into proto.Message
func _PrinterConnector_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _PrinterConnector_HTTPReadRequestBody parses body into proto.Message
func _PrinterConnector_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _PrinterConnector_HTTPWriteResponse writes proto.Message to HTTP response
func _PrinterConnector_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_PrinterConnector_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _PrinterConnector_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _PrinterConnector_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _PrinterConnector_WebsocketErrorResponse writes error to websocket connection
func _PrinterConnector_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _PrinterConnector_WebsocketCodec implements protobuf codec for websockets package
var _PrinterConnector_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

type _PrinterConnector_Connect_WSStream struct {
	ctx  context.Context
	conn *websocket.Conn
}

func (s *_PrinterConnector_Connect_WSStream) Send(m *PrinterConnectorServerMessage) error {
	return s.SendMsg(m)
}

func (s *_PrinterConnector_Connect_WSStream) SetHeader(metadata.MD) error {
	return nil
}

func (s *_PrinterConnector_Connect_WSStream) SendHeader(metadata.MD) error {
	return nil
}

func (s *_PrinterConnector_Connect_WSStream) SetTrailer(metadata.MD) {
}

func (s *_PrinterConnector_Connect_WSStream) Context() context.Context {
	return s.ctx
}

func (s *_PrinterConnector_Connect_WSStream) SendMsg(m interface{}) error {
	return _PrinterConnector_WebsocketCodec.Send(s.conn, m)
}

func (s *_PrinterConnector_Connect_WSStream) RecvMsg(m interface{}) error {
	return nil
}

// RegisterPrinterConnectorHttpHandlers adds handlers for for PrinterConnectorClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterPrinterConnectorHttpHandlers(router *mux.Router, prefix string, cli PrinterConnectorClient) {
}

type _PrinterConnectorHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _PrinterConnectorMiddleware = func(ctx context.Context, method string, in proto.Message, handler _PrinterConnectorHandler) (out proto.Message, err error)
type PrinterConnectorInterceptor struct {
	middleware []_PrinterConnectorMiddleware
	client     PrinterConnectorClient
}

// NewPrinterConnectorInterceptor constructs additional middleware for a server based on annotations in proto files
func NewPrinterConnectorInterceptor(cli PrinterConnectorClient, middleware ..._PrinterConnectorMiddleware) *PrinterConnectorInterceptor {
	return &PrinterConnectorInterceptor{client: cli, middleware: middleware}
}

func (i *PrinterConnectorInterceptor) Connect(ctx context.Context, in *PrinterConnectorClientMessage, opts ...grpc.CallOption) (PrinterConnector_ConnectClient, error) {
	return i.client.Connect(ctx, in, opts...)
}
