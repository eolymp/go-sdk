// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: eolymp/printer/printer_service.proto

package printer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrinterService_CreatePrinter_FullMethodName      = "/eolymp.printer.PrinterService/CreatePrinter"
	PrinterService_UpdatePrinter_FullMethodName      = "/eolymp.printer.PrinterService/UpdatePrinter"
	PrinterService_DeletePrinter_FullMethodName      = "/eolymp.printer.PrinterService/DeletePrinter"
	PrinterService_DescribePrinter_FullMethodName    = "/eolymp.printer.PrinterService/DescribePrinter"
	PrinterService_ListPrinters_FullMethodName       = "/eolymp.printer.PrinterService/ListPrinters"
	PrinterService_CreatePrinterJob_FullMethodName   = "/eolymp.printer.PrinterService/CreatePrinterJob"
	PrinterService_DescribePrinterJob_FullMethodName = "/eolymp.printer.PrinterService/DescribePrinterJob"
	PrinterService_ListPrinterJobs_FullMethodName    = "/eolymp.printer.PrinterService/ListPrinterJobs"
	PrinterService_UpdatePrinterJob_FullMethodName   = "/eolymp.printer.PrinterService/UpdatePrinterJob"
	PrinterService_DeletePrinterJob_FullMethodName   = "/eolymp.printer.PrinterService/DeletePrinterJob"
)

// PrinterServiceClient is the client API for PrinterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrinterServiceClient interface {
	CreatePrinter(ctx context.Context, in *CreatePrinterInput, opts ...grpc.CallOption) (*CreatePrinterOutput, error)
	UpdatePrinter(ctx context.Context, in *UpdatePrinterInput, opts ...grpc.CallOption) (*UpdatePrinterOutput, error)
	DeletePrinter(ctx context.Context, in *DeletePrinterInput, opts ...grpc.CallOption) (*DeletePrinterOutput, error)
	DescribePrinter(ctx context.Context, in *DescribePrinterInput, opts ...grpc.CallOption) (*DescribePrinterOutput, error)
	ListPrinters(ctx context.Context, in *ListPrintersInput, opts ...grpc.CallOption) (*ListPrintersOutput, error)
	CreatePrinterJob(ctx context.Context, in *CreatePrinterJobInput, opts ...grpc.CallOption) (*CreatePrinterJobOutput, error)
	DescribePrinterJob(ctx context.Context, in *DescribePrinterJobInput, opts ...grpc.CallOption) (*DescribePrinterJobOutput, error)
	ListPrinterJobs(ctx context.Context, in *ListPrinterJobsInput, opts ...grpc.CallOption) (*ListPrinterJobsOutput, error)
	UpdatePrinterJob(ctx context.Context, in *UpdatePrinterJobInput, opts ...grpc.CallOption) (*UpdatePrinterJobOutput, error)
	DeletePrinterJob(ctx context.Context, in *DeletePrinterJobInput, opts ...grpc.CallOption) (*DeletePrinterJobOutput, error)
}

type printerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrinterServiceClient(cc grpc.ClientConnInterface) PrinterServiceClient {
	return &printerServiceClient{cc}
}

func (c *printerServiceClient) CreatePrinter(ctx context.Context, in *CreatePrinterInput, opts ...grpc.CallOption) (*CreatePrinterOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrinterOutput)
	err := c.cc.Invoke(ctx, PrinterService_CreatePrinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) UpdatePrinter(ctx context.Context, in *UpdatePrinterInput, opts ...grpc.CallOption) (*UpdatePrinterOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrinterOutput)
	err := c.cc.Invoke(ctx, PrinterService_UpdatePrinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) DeletePrinter(ctx context.Context, in *DeletePrinterInput, opts ...grpc.CallOption) (*DeletePrinterOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrinterOutput)
	err := c.cc.Invoke(ctx, PrinterService_DeletePrinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) DescribePrinter(ctx context.Context, in *DescribePrinterInput, opts ...grpc.CallOption) (*DescribePrinterOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribePrinterOutput)
	err := c.cc.Invoke(ctx, PrinterService_DescribePrinter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) ListPrinters(ctx context.Context, in *ListPrintersInput, opts ...grpc.CallOption) (*ListPrintersOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrintersOutput)
	err := c.cc.Invoke(ctx, PrinterService_ListPrinters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) CreatePrinterJob(ctx context.Context, in *CreatePrinterJobInput, opts ...grpc.CallOption) (*CreatePrinterJobOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrinterJobOutput)
	err := c.cc.Invoke(ctx, PrinterService_CreatePrinterJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) DescribePrinterJob(ctx context.Context, in *DescribePrinterJobInput, opts ...grpc.CallOption) (*DescribePrinterJobOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribePrinterJobOutput)
	err := c.cc.Invoke(ctx, PrinterService_DescribePrinterJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) ListPrinterJobs(ctx context.Context, in *ListPrinterJobsInput, opts ...grpc.CallOption) (*ListPrinterJobsOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrinterJobsOutput)
	err := c.cc.Invoke(ctx, PrinterService_ListPrinterJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) UpdatePrinterJob(ctx context.Context, in *UpdatePrinterJobInput, opts ...grpc.CallOption) (*UpdatePrinterJobOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrinterJobOutput)
	err := c.cc.Invoke(ctx, PrinterService_UpdatePrinterJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerServiceClient) DeletePrinterJob(ctx context.Context, in *DeletePrinterJobInput, opts ...grpc.CallOption) (*DeletePrinterJobOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrinterJobOutput)
	err := c.cc.Invoke(ctx, PrinterService_DeletePrinterJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrinterServiceServer is the server API for PrinterService service.
// All implementations should embed UnimplementedPrinterServiceServer
// for forward compatibility.
type PrinterServiceServer interface {
	CreatePrinter(context.Context, *CreatePrinterInput) (*CreatePrinterOutput, error)
	UpdatePrinter(context.Context, *UpdatePrinterInput) (*UpdatePrinterOutput, error)
	DeletePrinter(context.Context, *DeletePrinterInput) (*DeletePrinterOutput, error)
	DescribePrinter(context.Context, *DescribePrinterInput) (*DescribePrinterOutput, error)
	ListPrinters(context.Context, *ListPrintersInput) (*ListPrintersOutput, error)
	CreatePrinterJob(context.Context, *CreatePrinterJobInput) (*CreatePrinterJobOutput, error)
	DescribePrinterJob(context.Context, *DescribePrinterJobInput) (*DescribePrinterJobOutput, error)
	ListPrinterJobs(context.Context, *ListPrinterJobsInput) (*ListPrinterJobsOutput, error)
	UpdatePrinterJob(context.Context, *UpdatePrinterJobInput) (*UpdatePrinterJobOutput, error)
	DeletePrinterJob(context.Context, *DeletePrinterJobInput) (*DeletePrinterJobOutput, error)
}

// UnimplementedPrinterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrinterServiceServer struct{}

func (UnimplementedPrinterServiceServer) CreatePrinter(context.Context, *CreatePrinterInput) (*CreatePrinterOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) UpdatePrinter(context.Context, *UpdatePrinterInput) (*UpdatePrinterOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) DeletePrinter(context.Context, *DeletePrinterInput) (*DeletePrinterOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) DescribePrinter(context.Context, *DescribePrinterInput) (*DescribePrinterOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePrinter not implemented")
}
func (UnimplementedPrinterServiceServer) ListPrinters(context.Context, *ListPrintersInput) (*ListPrintersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrinters not implemented")
}
func (UnimplementedPrinterServiceServer) CreatePrinterJob(context.Context, *CreatePrinterJobInput) (*CreatePrinterJobOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrinterJob not implemented")
}
func (UnimplementedPrinterServiceServer) DescribePrinterJob(context.Context, *DescribePrinterJobInput) (*DescribePrinterJobOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePrinterJob not implemented")
}
func (UnimplementedPrinterServiceServer) ListPrinterJobs(context.Context, *ListPrinterJobsInput) (*ListPrinterJobsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrinterJobs not implemented")
}
func (UnimplementedPrinterServiceServer) UpdatePrinterJob(context.Context, *UpdatePrinterJobInput) (*UpdatePrinterJobOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrinterJob not implemented")
}
func (UnimplementedPrinterServiceServer) DeletePrinterJob(context.Context, *DeletePrinterJobInput) (*DeletePrinterJobOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrinterJob not implemented")
}
func (UnimplementedPrinterServiceServer) testEmbeddedByValue() {}

// UnsafePrinterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrinterServiceServer will
// result in compilation errors.
type UnsafePrinterServiceServer interface {
	mustEmbedUnimplementedPrinterServiceServer()
}

func RegisterPrinterServiceServer(s grpc.ServiceRegistrar, srv PrinterServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrinterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrinterService_ServiceDesc, srv)
}

func _PrinterService_CreatePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrinterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).CreatePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_CreatePrinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).CreatePrinter(ctx, req.(*CreatePrinterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_UpdatePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrinterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).UpdatePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_UpdatePrinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).UpdatePrinter(ctx, req.(*UpdatePrinterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_DeletePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrinterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).DeletePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_DeletePrinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).DeletePrinter(ctx, req.(*DeletePrinterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_DescribePrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePrinterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).DescribePrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_DescribePrinter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).DescribePrinter(ctx, req.(*DescribePrinterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_ListPrinters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrintersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).ListPrinters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_ListPrinters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).ListPrinters(ctx, req.(*ListPrintersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_CreatePrinterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrinterJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).CreatePrinterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_CreatePrinterJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).CreatePrinterJob(ctx, req.(*CreatePrinterJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_DescribePrinterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePrinterJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).DescribePrinterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_DescribePrinterJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).DescribePrinterJob(ctx, req.(*DescribePrinterJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_ListPrinterJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrinterJobsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).ListPrinterJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_ListPrinterJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).ListPrinterJobs(ctx, req.(*ListPrinterJobsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_UpdatePrinterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrinterJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).UpdatePrinterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_UpdatePrinterJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).UpdatePrinterJob(ctx, req.(*UpdatePrinterJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrinterService_DeletePrinterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrinterJobInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrinterServiceServer).DeletePrinterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrinterService_DeletePrinterJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrinterServiceServer).DeletePrinterJob(ctx, req.(*DeletePrinterJobInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PrinterService_ServiceDesc is the grpc.ServiceDesc for PrinterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrinterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.printer.PrinterService",
	HandlerType: (*PrinterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrinter",
			Handler:    _PrinterService_CreatePrinter_Handler,
		},
		{
			MethodName: "UpdatePrinter",
			Handler:    _PrinterService_UpdatePrinter_Handler,
		},
		{
			MethodName: "DeletePrinter",
			Handler:    _PrinterService_DeletePrinter_Handler,
		},
		{
			MethodName: "DescribePrinter",
			Handler:    _PrinterService_DescribePrinter_Handler,
		},
		{
			MethodName: "ListPrinters",
			Handler:    _PrinterService_ListPrinters_Handler,
		},
		{
			MethodName: "CreatePrinterJob",
			Handler:    _PrinterService_CreatePrinterJob_Handler,
		},
		{
			MethodName: "DescribePrinterJob",
			Handler:    _PrinterService_DescribePrinterJob_Handler,
		},
		{
			MethodName: "ListPrinterJobs",
			Handler:    _PrinterService_ListPrinterJobs_Handler,
		},
		{
			MethodName: "UpdatePrinterJob",
			Handler:    _PrinterService_UpdatePrinterJob_Handler,
		},
		{
			MethodName: "DeletePrinterJob",
			Handler:    _PrinterService_DeletePrinterJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/printer/printer_service.proto",
}
