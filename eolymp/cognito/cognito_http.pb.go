// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package cognito

import (
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Cognito_HTTPReadRequestBody parses body into proto.Message
func _Cognito_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Cognito_HTTPWriteResponse writes proto.Message to HTTP response
func _Cognito_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Cognito_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Cognito_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Cognito_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewCognitoHandler constructs new http.Handler for CognitoServer
func NewCognitoHandler(srv CognitoServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/twirp/eolymp.cognito.Cognito/CreateToken", _Cognito_CreateToken(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/CreateToken", _Cognito_CreateToken(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/IntrospectToken", _Cognito_IntrospectToken(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/IntrospectToken", _Cognito_IntrospectToken(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/CreateAuthorization", _Cognito_CreateAuthorization(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/CreateAuthorization", _Cognito_CreateAuthorization(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/CreateUser", _Cognito_CreateUser(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/CreateUser", _Cognito_CreateUser(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/VerifyEmail", _Cognito_VerifyEmail(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/VerifyEmail", _Cognito_VerifyEmail(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/UpdateEmail", _Cognito_UpdateEmail(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/UpdateEmail", _Cognito_UpdateEmail(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/StartRecovery", _Cognito_StartRecovery(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/StartRecovery", _Cognito_StartRecovery(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/CompleteRecovery", _Cognito_CompleteRecovery(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/CompleteRecovery", _Cognito_CompleteRecovery(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/IntrospectUser", _Cognito_IntrospectUser(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/IntrospectUser", _Cognito_IntrospectUser(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/DescribeUser", _Cognito_DescribeUser(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/DescribeUser", _Cognito_DescribeUser(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/ListUsers", _Cognito_ListUsers(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/ListUsers", _Cognito_ListUsers(srv)).Methods(http.MethodPost)
	router.Handle("/twirp/eolymp.cognito.Cognito/IntrospectQuota", _Cognito_IntrospectQuota(srv)).Methods(http.MethodPost)
	router.Handle("/eolymp.cognito.Cognito/IntrospectQuota", _Cognito_IntrospectQuota(srv)).Methods(http.MethodPost)
	return router
}

func _Cognito_CreateToken(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateTokenInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateToken(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectToken(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectTokenInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectToken(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CreateAuthorization(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAuthorizationInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAuthorization(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CreateUser(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateUserInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_VerifyEmail(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyEmailInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.VerifyEmail(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdateEmail(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateEmailInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateEmail(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_StartRecovery(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartRecoveryInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartRecovery(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CompleteRecovery(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CompleteRecoverInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CompleteRecovery(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectUser(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectUserInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_DescribeUser(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeUserInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribeUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ListUsers(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListUsersInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListUsers(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectQuota(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectQuotaInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectQuota(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}
