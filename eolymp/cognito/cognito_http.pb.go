// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package cognito

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Cognito_HTTPReadQueryString parses body into proto.Message
func _Cognito_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Cognito_HTTPReadRequestBody parses body into proto.Message
func _Cognito_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Cognito_HTTPWriteResponse writes proto.Message to HTTP response
func _Cognito_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Cognito_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Cognito_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Cognito_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterCognitoHttpHandlers adds handlers for for CognitoServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterCognitoHttpHandlers(router *mux.Router, prefix string, srv CognitoServer) {
	router.Handle(prefix+"/self/signout", _Cognito_Signout_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.Signout")
	router.Handle(prefix+"/access-keys", _Cognito_CreateAccessKey_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.CreateAccessKey")
	router.Handle(prefix+"/access-keys/{key_id}", _Cognito_DeleteAccessKey_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.cognito.Cognito.DeleteAccessKey")
	router.Handle(prefix+"/access-keys", _Cognito_ListAccessKeys_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.ListAccessKeys")
	router.Handle(prefix+"/users", _Cognito_CreateUser_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.CreateUser")
	router.Handle(prefix+"/users/{user_id}/verify", _Cognito_VerifyEmail_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.VerifyEmail")
	router.Handle(prefix+"/self/email", _Cognito_UpdateEmail_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.UpdateEmail")
	router.Handle(prefix+"/self", _Cognito_UpdateProfile_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.UpdateProfile")
	router.Handle(prefix+"/self/picture", _Cognito_UpdatePicture_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.UpdatePicture")
	router.Handle(prefix+"/self/password", _Cognito_UpdatePassword_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.UpdatePassword")
	router.Handle(prefix+"/self/email/resend-verification", _Cognito_ResendEmailVerification_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.ResendEmailVerification")
	router.Handle(prefix+"/self/recovery", _Cognito_StartRecovery_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.StartRecovery")
	router.Handle(prefix+"/users/{user_id}/recover", _Cognito_CompleteRecovery_Rule0(srv)).
		Methods("POST").
		Name("eolymp.cognito.Cognito.CompleteRecovery")
	router.Handle(prefix+"/self", _Cognito_IntrospectUser_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.IntrospectUser")
	router.Handle(prefix+"/users/{user_id}", _Cognito_DescribeUser_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.DescribeUser")
	router.Handle(prefix+"/users", _Cognito_ListUsers_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.ListUsers")
	router.Handle(prefix+"/self/quota", _Cognito_IntrospectQuota_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.IntrospectQuota")
	router.Handle(prefix+"/self/roles", _Cognito_IntrospectRoles_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.IntrospectRoles")
	router.Handle(prefix+"/users/{user_id}/roles", _Cognito_ListRoles_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.ListRoles")
	router.Handle(prefix+"/users/{user_id}/roles", _Cognito_UpdateRoles_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.cognito.Cognito.UpdateRoles")
	router.Handle(prefix+"/__cognito/entitlements", _Cognito_ListEntitlements_Rule0(srv)).
		Methods("GET").
		Name("eolymp.cognito.Cognito.ListEntitlements")
	router.Handle(prefix+"/self", _Cognito_SelfDestruct_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.cognito.Cognito.SelfDestruct")
}

func _Cognito_Signout_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SignoutInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.Signout(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CreateAccessKey_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateAccessKeyInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateAccessKey(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_DeleteAccessKey_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteAccessKeyInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.KeyId = vars["key_id"]

		out, err := srv.DeleteAccessKey(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ListAccessKeys_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListAccessKeysInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListAccessKeys(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CreateUser_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateUserInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_VerifyEmail_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VerifyEmailInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.VerifyEmail(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdateEmail_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateEmailInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateEmail(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdateProfile_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateProfileInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdateProfile(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdatePicture_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePictureInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdatePicture(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdatePassword_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePasswordInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UpdatePassword(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ResendEmailVerification_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ResendEmailVerificationInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ResendEmailVerification(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_StartRecovery_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &StartRecoveryInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.StartRecovery(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_CompleteRecovery_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CompleteRecoverInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.CompleteRecovery(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectUser_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectUserInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_DescribeUser_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeUserInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.DescribeUser(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ListUsers_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListUsersInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListUsers(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectQuota_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectQuotaInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectQuota(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_IntrospectRoles_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &IntrospectRolesInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.IntrospectRoles(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ListRoles_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListRolesInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.ListRoles(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_UpdateRoles_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateRolesInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.UserId = vars["user_id"]

		out, err := srv.UpdateRoles(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_ListEntitlements_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListEntitlementsInput{}

		if err := _Cognito_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListEntitlements(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

func _Cognito_SelfDestruct_Rule0(srv CognitoServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &SelfDestructInput{}

		if err := _Cognito_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.SelfDestruct(r.Context(), in)
		if err != nil {
			_Cognito_HTTPWriteErrorResponse(w, err)
			return
		}

		_Cognito_HTTPWriteResponse(w, out)
	})
}

type _CognitoHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _CognitoMiddleware = func(ctx context.Context, method string, in proto.Message, handler _CognitoHandler) (out proto.Message, err error)
type CognitoInterceptor struct {
	middleware []_CognitoMiddleware
	server     CognitoServer
}

// NewCognitoInterceptor constructs additional middleware for a server based on annotations in proto files
func NewCognitoInterceptor(srv CognitoServer, middleware ..._CognitoMiddleware) *CognitoInterceptor {
	return &CognitoInterceptor{server: srv, middleware: middleware}
}

func (i *CognitoInterceptor) CreateToken(ctx context.Context, in *CreateTokenInput) (*CreateTokenOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateTokenInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateTokenInput, got %T", in))
		}

		return i.server.CreateToken(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.CreateToken", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateTokenOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateTokenOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) IntrospectToken(ctx context.Context, in *IntrospectTokenInput) (*IntrospectTokenOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectTokenInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectTokenInput, got %T", in))
		}

		return i.server.IntrospectToken(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.IntrospectToken", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectTokenOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectTokenOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) RevokeToken(ctx context.Context, in *RevokeTokenInput) (*RevokeTokenOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*RevokeTokenInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *RevokeTokenInput, got %T", in))
		}

		return i.server.RevokeToken(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.RevokeToken", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*RevokeTokenOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *RevokeTokenOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) Singin(ctx context.Context, in *SinginInput) (*SinginOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SinginInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SinginInput, got %T", in))
		}

		return i.server.Singin(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.Singin", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SinginOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SinginOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) Signout(ctx context.Context, in *SignoutInput) (*SignoutOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SignoutInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SignoutInput, got %T", in))
		}

		return i.server.Signout(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.Signout", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SignoutOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SignoutOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) CreateAccessKey(ctx context.Context, in *CreateAccessKeyInput) (*CreateAccessKeyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateAccessKeyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateAccessKeyInput, got %T", in))
		}

		return i.server.CreateAccessKey(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.CreateAccessKey", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateAccessKeyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateAccessKeyOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyInput) (*DeleteAccessKeyOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteAccessKeyInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteAccessKeyInput, got %T", in))
		}

		return i.server.DeleteAccessKey(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.DeleteAccessKey", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteAccessKeyOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteAccessKeyOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) ListAccessKeys(ctx context.Context, in *ListAccessKeysInput) (*ListAccessKeysOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListAccessKeysInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListAccessKeysInput, got %T", in))
		}

		return i.server.ListAccessKeys(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.ListAccessKeys", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListAccessKeysOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListAccessKeysOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) CreateUser(ctx context.Context, in *CreateUserInput) (*CreateUserOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateUserInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateUserInput, got %T", in))
		}

		return i.server.CreateUser(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.CreateUser", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateUserOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateUserOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) VerifyEmail(ctx context.Context, in *VerifyEmailInput) (*VerifyEmailOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*VerifyEmailInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *VerifyEmailInput, got %T", in))
		}

		return i.server.VerifyEmail(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.VerifyEmail", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*VerifyEmailOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *VerifyEmailOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) UpdateEmail(ctx context.Context, in *UpdateEmailInput) (*UpdateEmailOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateEmailInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateEmailInput, got %T", in))
		}

		return i.server.UpdateEmail(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.UpdateEmail", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateEmailOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateEmailOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) UpdateProfile(ctx context.Context, in *UpdateProfileInput) (*UpdateProfileOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateProfileInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateProfileInput, got %T", in))
		}

		return i.server.UpdateProfile(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.UpdateProfile", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateProfileOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateProfileOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) UpdatePicture(ctx context.Context, in *UpdatePictureInput) (*UpdatePictureOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdatePictureInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdatePictureInput, got %T", in))
		}

		return i.server.UpdatePicture(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.UpdatePicture", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdatePictureOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdatePictureOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) UpdatePassword(ctx context.Context, in *UpdatePasswordInput) (*UpdatePasswordOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdatePasswordInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdatePasswordInput, got %T", in))
		}

		return i.server.UpdatePassword(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.UpdatePassword", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdatePasswordOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdatePasswordOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) ResendEmailVerification(ctx context.Context, in *ResendEmailVerificationInput) (*ResendEmailVerificationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ResendEmailVerificationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ResendEmailVerificationInput, got %T", in))
		}

		return i.server.ResendEmailVerification(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.ResendEmailVerification", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ResendEmailVerificationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ResendEmailVerificationOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) StartRecovery(ctx context.Context, in *StartRecoveryInput) (*StartRecoveryOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*StartRecoveryInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *StartRecoveryInput, got %T", in))
		}

		return i.server.StartRecovery(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.StartRecovery", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*StartRecoveryOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *StartRecoveryOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) CompleteRecovery(ctx context.Context, in *CompleteRecoverInput) (*CompleteRecoverOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CompleteRecoverInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CompleteRecoverInput, got %T", in))
		}

		return i.server.CompleteRecovery(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.CompleteRecovery", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CompleteRecoverOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CompleteRecoverOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) IntrospectUser(ctx context.Context, in *IntrospectUserInput) (*IntrospectUserOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectUserInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectUserInput, got %T", in))
		}

		return i.server.IntrospectUser(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.IntrospectUser", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectUserOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectUserOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) DescribeUser(ctx context.Context, in *DescribeUserInput) (*DescribeUserOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeUserInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeUserInput, got %T", in))
		}

		return i.server.DescribeUser(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.DescribeUser", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeUserOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeUserOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) ListUsers(ctx context.Context, in *ListUsersInput) (*ListUsersOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListUsersInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListUsersInput, got %T", in))
		}

		return i.server.ListUsers(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.ListUsers", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListUsersOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListUsersOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput) (*IntrospectQuotaOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectQuotaInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectQuotaInput, got %T", in))
		}

		return i.server.IntrospectQuota(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.IntrospectQuota", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectQuotaOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectQuotaOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) IntrospectRoles(ctx context.Context, in *IntrospectRolesInput) (*IntrospectRolesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*IntrospectRolesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *IntrospectRolesInput, got %T", in))
		}

		return i.server.IntrospectRoles(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.IntrospectRoles", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*IntrospectRolesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *IntrospectRolesOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) ListRoles(ctx context.Context, in *ListRolesInput) (*ListRolesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListRolesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListRolesInput, got %T", in))
		}

		return i.server.ListRoles(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.ListRoles", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListRolesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListRolesOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) UpdateRoles(ctx context.Context, in *UpdateRolesInput) (*UpdateRolesOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateRolesInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateRolesInput, got %T", in))
		}

		return i.server.UpdateRoles(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.UpdateRoles", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateRolesOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateRolesOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (*ListEntitlementsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListEntitlementsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListEntitlementsInput, got %T", in))
		}

		return i.server.ListEntitlements(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.ListEntitlements", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListEntitlementsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListEntitlementsOutput, got %T", out))
	}

	return message, err
}

func (i *CognitoInterceptor) SelfDestruct(ctx context.Context, in *SelfDestructInput) (*SelfDestructOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*SelfDestructInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *SelfDestructInput, got %T", in))
		}

		return i.server.SelfDestruct(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.cognito.Cognito.SelfDestruct", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*SelfDestructOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *SelfDestructOutput, got %T", out))
	}

	return message, err
}
