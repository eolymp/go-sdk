// Code generated by protoc-gen-go-esdk. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-esdk for more details.

package cognito

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	os "os"
	strings "strings"
)

// NewCognito constructs client for Cognito
func NewCognito(cli CognitoHTTPClient) *CognitoService {
	base := "https://api.e-olymp.com"
	if v := os.Getenv("EOLYMP_API_URL"); v != "" {
		base = v
	}
	return &CognitoService{base: strings.TrimSuffix(base, "/"), cli: cli}
}

type CognitoHTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type CognitoService struct {
	base string
	cli  CognitoHTTPClient
}

// invoke RPC method using twirp-like protocol
func (s *CognitoService) invoke(ctx context.Context, method string, in, out proto.Message) error {
	input, err := protojson.Marshal(in)
	if err != nil {
		return err
	}

	req, err := http.NewRequest(http.MethodPost, s.base+"/twirp/"+method, bytes.NewReader(input))
	if err != nil {
		return err
	}

	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")
	req = req.WithContext(ctx)

	resp, err := s.cli.Do(req)
	if resp != nil && resp.Body != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		return err
	}

	if resp.StatusCode != 200 {
		return fmt.Errorf("non-200 response code (%v)", resp.StatusCode)
	}

	if out != nil {
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return err
		}

		if err := protojson.Unmarshal(data, out); err != nil {
			return err
		}
	}

	return nil
}

func (s *CognitoService) CreateToken(ctx context.Context, in *CreateTokenInput) (*CreateTokenOutput, error) {
	out := &CreateTokenOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/CreateToken", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) IntrospectToken(ctx context.Context, in *IntrospectTokenInput) (*IntrospectTokenOutput, error) {
	out := &IntrospectTokenOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/IntrospectToken", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) CreateAuthorization(ctx context.Context, in *CreateAuthorizationInput) (*CreateAuthorizationOutput, error) {
	out := &CreateAuthorizationOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/CreateAuthorization", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) RevokeToken(ctx context.Context, in *RevokeTokenInput) (*RevokeTokenOutput, error) {
	out := &RevokeTokenOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/RevokeToken", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) Signout(ctx context.Context, in *SignoutInput) (*SignoutOutput, error) {
	out := &SignoutOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/Signout", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) CreateAccessKey(ctx context.Context, in *CreateAccessKeyInput) (*CreateAccessKeyOutput, error) {
	out := &CreateAccessKeyOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/CreateAccessKey", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyInput) (*DeleteAccessKeyOutput, error) {
	out := &DeleteAccessKeyOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/DeleteAccessKey", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) ListAccessKeys(ctx context.Context, in *ListAccessKeysInput) (*ListAccessKeysOutput, error) {
	out := &ListAccessKeysOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/ListAccessKeys", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) CreateUser(ctx context.Context, in *CreateUserInput) (*CreateUserOutput, error) {
	out := &CreateUserOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/CreateUser", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) VerifyEmail(ctx context.Context, in *VerifyEmailInput) (*VerifyEmailOutput, error) {
	out := &VerifyEmailOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/VerifyEmail", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) UpdateEmail(ctx context.Context, in *UpdateEmailInput) (*UpdateEmailOutput, error) {
	out := &UpdateEmailOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/UpdateEmail", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) UpdateProfile(ctx context.Context, in *UpdateProfileInput) (*UpdateProfileOutput, error) {
	out := &UpdateProfileOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/UpdateProfile", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) StartRecovery(ctx context.Context, in *StartRecoveryInput) (*StartRecoveryOutput, error) {
	out := &StartRecoveryOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/StartRecovery", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) CompleteRecovery(ctx context.Context, in *CompleteRecoverInput) (*CompleteRecoverOutput, error) {
	out := &CompleteRecoverOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/CompleteRecovery", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) IntrospectUser(ctx context.Context, in *IntrospectUserInput) (*IntrospectUserOutput, error) {
	out := &IntrospectUserOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/IntrospectUser", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) DescribeUser(ctx context.Context, in *DescribeUserInput) (*DescribeUserOutput, error) {
	out := &DescribeUserOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/DescribeUser", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) ListUsers(ctx context.Context, in *ListUsersInput) (*ListUsersOutput, error) {
	out := &ListUsersOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/ListUsers", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput) (*IntrospectQuotaOutput, error) {
	out := &IntrospectQuotaOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/IntrospectQuota", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) IntrospectRoles(ctx context.Context, in *IntrospectRolesInput) (*IntrospectRolesOutput, error) {
	out := &IntrospectRolesOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/IntrospectRoles", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) ListRoles(ctx context.Context, in *ListRolesInput) (*ListRolesOutput, error) {
	out := &ListRolesOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/ListRoles", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) UpdateRoles(ctx context.Context, in *UpdateRolesInput) (*UpdateRolesOutput, error) {
	out := &UpdateRolesOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/UpdateRoles", in, out); err != nil {
		return nil, err
	}

	return out, nil
}

func (s *CognitoService) ListEntitlements(ctx context.Context, in *ListEntitlementsInput) (*ListEntitlementsOutput, error) {
	out := &ListEntitlementsOutput{}

	if err := s.invoke(ctx, "eolymp.cognito.Cognito/ListEntitlements", in, out); err != nil {
		return nil, err
	}

	return out, nil
}
