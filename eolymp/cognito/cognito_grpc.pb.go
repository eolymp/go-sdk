// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cognito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CognitoClient is the client API for Cognito service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CognitoClient interface {
	// Create oauth access token.
	CreateToken(ctx context.Context, in *CreateTokenInput, opts ...grpc.CallOption) (*CreateTokenOutput, error)
	// Introspect oauth token, returns access token details for a given token.
	IntrospectToken(ctx context.Context, in *IntrospectTokenInput, opts ...grpc.CallOption) (*IntrospectTokenOutput, error)
	// Create authorization code.
	CreateAuthorization(ctx context.Context, in *CreateAuthorizationInput, opts ...grpc.CallOption) (*CreateAuthorizationOutput, error)
	// Revoke token disables given token and related tokens.
	RevokeToken(ctx context.Context, in *RevokeTokenInput, opts ...grpc.CallOption) (*RevokeTokenOutput, error)
	// Signout revokes all user's tokens or all tokens of current session.
	Signout(ctx context.Context, in *SignoutInput, opts ...grpc.CallOption) (*SignoutOutput, error)
	// Create user account.
	CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error)
	// Verify user email, takes email verification token and if it's correct - changes email status to CONFIRMED.
	VerifyEmail(ctx context.Context, in *VerifyEmailInput, opts ...grpc.CallOption) (*VerifyEmailOutput, error)
	// Update user email, changes user's current email and starts email verification process.
	UpdateEmail(ctx context.Context, in *UpdateEmailInput, opts ...grpc.CallOption) (*UpdateEmailOutput, error)
	// Start access recovery procedure, this method will send recovery token to the user's email.
	// This method will return OK even if email does not exist.
	StartRecovery(ctx context.Context, in *StartRecoveryInput, opts ...grpc.CallOption) (*StartRecoveryOutput, error)
	// Finish recovery procedure by setting new password, this method requires token sent by email using `StartRecovery`
	// method
	CompleteRecovery(ctx context.Context, in *CompleteRecoverInput, opts ...grpc.CallOption) (*CompleteRecoverOutput, error)
	// Introspect user, returns user profile for authenticated user.
	IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error)
	// Describe user by ID.
	DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error)
	// List users.
	ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error)
	// Describe user's quota.
	IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput, opts ...grpc.CallOption) (*IntrospectQuotaOutput, error)
	// List own roles.
	IntrospectRoles(ctx context.Context, in *IntrospectRolesInput, opts ...grpc.CallOption) (*IntrospectRolesOutput, error)
	// List roles assigned to a user.
	ListRoles(ctx context.Context, in *ListRolesInput, opts ...grpc.CallOption) (*ListRolesOutput, error)
	// Update user's roles.
	UpdateRoles(ctx context.Context, in *UpdateRolesInput, opts ...grpc.CallOption) (*UpdateRolesOutput, error)
	// Lists entitlements granted to authenticated user.
	ListEntitlements(ctx context.Context, in *ListEntitlementsInput, opts ...grpc.CallOption) (*ListEntitlementsOutput, error)
}

type cognitoClient struct {
	cc grpc.ClientConnInterface
}

func NewCognitoClient(cc grpc.ClientConnInterface) CognitoClient {
	return &cognitoClient{cc}
}

func (c *cognitoClient) CreateToken(ctx context.Context, in *CreateTokenInput, opts ...grpc.CallOption) (*CreateTokenOutput, error) {
	out := new(CreateTokenOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectToken(ctx context.Context, in *IntrospectTokenInput, opts ...grpc.CallOption) (*IntrospectTokenOutput, error) {
	out := new(IntrospectTokenOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/IntrospectToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) CreateAuthorization(ctx context.Context, in *CreateAuthorizationInput, opts ...grpc.CallOption) (*CreateAuthorizationOutput, error) {
	out := new(CreateAuthorizationOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/CreateAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) RevokeToken(ctx context.Context, in *RevokeTokenInput, opts ...grpc.CallOption) (*RevokeTokenOutput, error) {
	out := new(RevokeTokenOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) Signout(ctx context.Context, in *SignoutInput, opts ...grpc.CallOption) (*SignoutOutput, error) {
	out := new(SignoutOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/Signout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error) {
	out := new(CreateUserOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) VerifyEmail(ctx context.Context, in *VerifyEmailInput, opts ...grpc.CallOption) (*VerifyEmailOutput, error) {
	out := new(VerifyEmailOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdateEmail(ctx context.Context, in *UpdateEmailInput, opts ...grpc.CallOption) (*UpdateEmailOutput, error) {
	out := new(UpdateEmailOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) StartRecovery(ctx context.Context, in *StartRecoveryInput, opts ...grpc.CallOption) (*StartRecoveryOutput, error) {
	out := new(StartRecoveryOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/StartRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) CompleteRecovery(ctx context.Context, in *CompleteRecoverInput, opts ...grpc.CallOption) (*CompleteRecoverOutput, error) {
	out := new(CompleteRecoverOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/CompleteRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error) {
	out := new(IntrospectUserOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/IntrospectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error) {
	out := new(DescribeUserOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/DescribeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error) {
	out := new(ListUsersOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput, opts ...grpc.CallOption) (*IntrospectQuotaOutput, error) {
	out := new(IntrospectQuotaOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/IntrospectQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectRoles(ctx context.Context, in *IntrospectRolesInput, opts ...grpc.CallOption) (*IntrospectRolesOutput, error) {
	out := new(IntrospectRolesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/IntrospectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListRoles(ctx context.Context, in *ListRolesInput, opts ...grpc.CallOption) (*ListRolesOutput, error) {
	out := new(ListRolesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdateRoles(ctx context.Context, in *UpdateRolesInput, opts ...grpc.CallOption) (*UpdateRolesOutput, error) {
	out := new(UpdateRolesOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/UpdateRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListEntitlements(ctx context.Context, in *ListEntitlementsInput, opts ...grpc.CallOption) (*ListEntitlementsOutput, error) {
	out := new(ListEntitlementsOutput)
	err := c.cc.Invoke(ctx, "/eolymp.cognito.Cognito/ListEntitlements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CognitoServer is the server API for Cognito service.
// All implementations must embed UnimplementedCognitoServer
// for forward compatibility
type CognitoServer interface {
	// Create oauth access token.
	CreateToken(context.Context, *CreateTokenInput) (*CreateTokenOutput, error)
	// Introspect oauth token, returns access token details for a given token.
	IntrospectToken(context.Context, *IntrospectTokenInput) (*IntrospectTokenOutput, error)
	// Create authorization code.
	CreateAuthorization(context.Context, *CreateAuthorizationInput) (*CreateAuthorizationOutput, error)
	// Revoke token disables given token and related tokens.
	RevokeToken(context.Context, *RevokeTokenInput) (*RevokeTokenOutput, error)
	// Signout revokes all user's tokens or all tokens of current session.
	Signout(context.Context, *SignoutInput) (*SignoutOutput, error)
	// Create user account.
	CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error)
	// Verify user email, takes email verification token and if it's correct - changes email status to CONFIRMED.
	VerifyEmail(context.Context, *VerifyEmailInput) (*VerifyEmailOutput, error)
	// Update user email, changes user's current email and starts email verification process.
	UpdateEmail(context.Context, *UpdateEmailInput) (*UpdateEmailOutput, error)
	// Start access recovery procedure, this method will send recovery token to the user's email.
	// This method will return OK even if email does not exist.
	StartRecovery(context.Context, *StartRecoveryInput) (*StartRecoveryOutput, error)
	// Finish recovery procedure by setting new password, this method requires token sent by email using `StartRecovery`
	// method
	CompleteRecovery(context.Context, *CompleteRecoverInput) (*CompleteRecoverOutput, error)
	// Introspect user, returns user profile for authenticated user.
	IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error)
	// Describe user by ID.
	DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error)
	// List users.
	ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error)
	// Describe user's quota.
	IntrospectQuota(context.Context, *IntrospectQuotaInput) (*IntrospectQuotaOutput, error)
	// List own roles.
	IntrospectRoles(context.Context, *IntrospectRolesInput) (*IntrospectRolesOutput, error)
	// List roles assigned to a user.
	ListRoles(context.Context, *ListRolesInput) (*ListRolesOutput, error)
	// Update user's roles.
	UpdateRoles(context.Context, *UpdateRolesInput) (*UpdateRolesOutput, error)
	// Lists entitlements granted to authenticated user.
	ListEntitlements(context.Context, *ListEntitlementsInput) (*ListEntitlementsOutput, error)
	mustEmbedUnimplementedCognitoServer()
}

// UnimplementedCognitoServer must be embedded to have forward compatible implementations.
type UnimplementedCognitoServer struct {
}

func (UnimplementedCognitoServer) CreateToken(context.Context, *CreateTokenInput) (*CreateTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedCognitoServer) IntrospectToken(context.Context, *IntrospectTokenInput) (*IntrospectTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectToken not implemented")
}
func (UnimplementedCognitoServer) CreateAuthorization(context.Context, *CreateAuthorizationInput) (*CreateAuthorizationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorization not implemented")
}
func (UnimplementedCognitoServer) RevokeToken(context.Context, *RevokeTokenInput) (*RevokeTokenOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedCognitoServer) Signout(context.Context, *SignoutInput) (*SignoutOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signout not implemented")
}
func (UnimplementedCognitoServer) CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCognitoServer) VerifyEmail(context.Context, *VerifyEmailInput) (*VerifyEmailOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedCognitoServer) UpdateEmail(context.Context, *UpdateEmailInput) (*UpdateEmailOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedCognitoServer) StartRecovery(context.Context, *StartRecoveryInput) (*StartRecoveryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecovery not implemented")
}
func (UnimplementedCognitoServer) CompleteRecovery(context.Context, *CompleteRecoverInput) (*CompleteRecoverOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRecovery not implemented")
}
func (UnimplementedCognitoServer) IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectUser not implemented")
}
func (UnimplementedCognitoServer) DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUser not implemented")
}
func (UnimplementedCognitoServer) ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCognitoServer) IntrospectQuota(context.Context, *IntrospectQuotaInput) (*IntrospectQuotaOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectQuota not implemented")
}
func (UnimplementedCognitoServer) IntrospectRoles(context.Context, *IntrospectRolesInput) (*IntrospectRolesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectRoles not implemented")
}
func (UnimplementedCognitoServer) ListRoles(context.Context, *ListRolesInput) (*ListRolesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedCognitoServer) UpdateRoles(context.Context, *UpdateRolesInput) (*UpdateRolesOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoles not implemented")
}
func (UnimplementedCognitoServer) ListEntitlements(context.Context, *ListEntitlementsInput) (*ListEntitlementsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntitlements not implemented")
}
func (UnimplementedCognitoServer) mustEmbedUnimplementedCognitoServer() {}

// UnsafeCognitoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CognitoServer will
// result in compilation errors.
type UnsafeCognitoServer interface {
	mustEmbedUnimplementedCognitoServer()
}

func RegisterCognitoServer(s grpc.ServiceRegistrar, srv CognitoServer) {
	s.RegisterService(&Cognito_ServiceDesc, srv)
}

func _Cognito_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CreateToken(ctx, req.(*CreateTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/IntrospectToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectToken(ctx, req.(*IntrospectTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_CreateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorizationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CreateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/CreateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CreateAuthorization(ctx, req.(*CreateAuthorizationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).RevokeToken(ctx, req.(*RevokeTokenInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_Signout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignoutInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).Signout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/Signout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).Signout(ctx, req.(*SignoutInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CreateUser(ctx, req.(*CreateUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).VerifyEmail(ctx, req.(*VerifyEmailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdateEmail(ctx, req.(*UpdateEmailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_StartRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecoveryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).StartRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/StartRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).StartRecovery(ctx, req.(*StartRecoveryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_CompleteRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRecoverInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CompleteRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/CompleteRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CompleteRecovery(ctx, req.(*CompleteRecoverInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/IntrospectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectUser(ctx, req.(*IntrospectUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_DescribeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).DescribeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/DescribeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).DescribeUser(ctx, req.(*DescribeUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListUsers(ctx, req.(*ListUsersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectQuotaInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/IntrospectQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectQuota(ctx, req.(*IntrospectQuotaInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectRolesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/IntrospectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectRoles(ctx, req.(*IntrospectRolesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListRoles(ctx, req.(*ListRolesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdateRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdateRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/UpdateRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdateRoles(ctx, req.(*UpdateRolesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitlementsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.cognito.Cognito/ListEntitlements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListEntitlements(ctx, req.(*ListEntitlementsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Cognito_ServiceDesc is the grpc.ServiceDesc for Cognito service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cognito_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.cognito.Cognito",
	HandlerType: (*CognitoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _Cognito_CreateToken_Handler,
		},
		{
			MethodName: "IntrospectToken",
			Handler:    _Cognito_IntrospectToken_Handler,
		},
		{
			MethodName: "CreateAuthorization",
			Handler:    _Cognito_CreateAuthorization_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _Cognito_RevokeToken_Handler,
		},
		{
			MethodName: "Signout",
			Handler:    _Cognito_Signout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Cognito_CreateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Cognito_VerifyEmail_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Cognito_UpdateEmail_Handler,
		},
		{
			MethodName: "StartRecovery",
			Handler:    _Cognito_StartRecovery_Handler,
		},
		{
			MethodName: "CompleteRecovery",
			Handler:    _Cognito_CompleteRecovery_Handler,
		},
		{
			MethodName: "IntrospectUser",
			Handler:    _Cognito_IntrospectUser_Handler,
		},
		{
			MethodName: "DescribeUser",
			Handler:    _Cognito_DescribeUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Cognito_ListUsers_Handler,
		},
		{
			MethodName: "IntrospectQuota",
			Handler:    _Cognito_IntrospectQuota_Handler,
		},
		{
			MethodName: "IntrospectRoles",
			Handler:    _Cognito_IntrospectRoles_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Cognito_ListRoles_Handler,
		},
		{
			MethodName: "UpdateRoles",
			Handler:    _Cognito_UpdateRoles_Handler,
		},
		{
			MethodName: "ListEntitlements",
			Handler:    _Cognito_ListEntitlements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/cognito/cognito.proto",
}
