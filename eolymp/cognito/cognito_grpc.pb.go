// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/cognito/cognito.proto

package cognito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cognito_IntrospectUser_FullMethodName = "/eolymp.cognito.Cognito/IntrospectUser"
	Cognito_DescribeUser_FullMethodName   = "/eolymp.cognito.Cognito/DescribeUser"
	Cognito_ListUsers_FullMethodName      = "/eolymp.cognito.Cognito/ListUsers"
)

// CognitoClient is the client API for Cognito service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CognitoClient interface {
	// deprecated. Introspect user, returns user profile for authenticated user.
	IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error)
	// deprecated. Describe user by ID.
	DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error)
	// deprecated. List users.
	ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error)
}

type cognitoClient struct {
	cc grpc.ClientConnInterface
}

func NewCognitoClient(cc grpc.ClientConnInterface) CognitoClient {
	return &cognitoClient{cc}
}

func (c *cognitoClient) IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntrospectUserOutput)
	err := c.cc.Invoke(ctx, Cognito_IntrospectUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeUserOutput)
	err := c.cc.Invoke(ctx, Cognito_DescribeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersOutput)
	err := c.cc.Invoke(ctx, Cognito_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CognitoServer is the server API for Cognito service.
// All implementations should embed UnimplementedCognitoServer
// for forward compatibility.
type CognitoServer interface {
	// deprecated. Introspect user, returns user profile for authenticated user.
	IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error)
	// deprecated. Describe user by ID.
	DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error)
	// deprecated. List users.
	ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error)
}

// UnimplementedCognitoServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCognitoServer struct{}

func (UnimplementedCognitoServer) IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectUser not implemented")
}
func (UnimplementedCognitoServer) DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUser not implemented")
}
func (UnimplementedCognitoServer) ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCognitoServer) testEmbeddedByValue() {}

// UnsafeCognitoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CognitoServer will
// result in compilation errors.
type UnsafeCognitoServer interface {
	mustEmbedUnimplementedCognitoServer()
}

func RegisterCognitoServer(s grpc.ServiceRegistrar, srv CognitoServer) {
	// If the following call pancis, it indicates UnimplementedCognitoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cognito_ServiceDesc, srv)
}

func _Cognito_IntrospectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_IntrospectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectUser(ctx, req.(*IntrospectUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_DescribeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).DescribeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_DescribeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).DescribeUser(ctx, req.(*DescribeUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListUsers(ctx, req.(*ListUsersInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Cognito_ServiceDesc is the grpc.ServiceDesc for Cognito service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cognito_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.cognito.Cognito",
	HandlerType: (*CognitoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntrospectUser",
			Handler:    _Cognito_IntrospectUser_Handler,
		},
		{
			MethodName: "DescribeUser",
			Handler:    _Cognito_DescribeUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Cognito_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/cognito/cognito.proto",
}
