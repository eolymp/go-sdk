// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/cognito/cognito.proto

package cognito

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cognito_CreateAccessKey_FullMethodName         = "/eolymp.cognito.Cognito/CreateAccessKey"
	Cognito_DeleteAccessKey_FullMethodName         = "/eolymp.cognito.Cognito/DeleteAccessKey"
	Cognito_ListAccessKeys_FullMethodName          = "/eolymp.cognito.Cognito/ListAccessKeys"
	Cognito_CreateUser_FullMethodName              = "/eolymp.cognito.Cognito/CreateUser"
	Cognito_VerifyEmail_FullMethodName             = "/eolymp.cognito.Cognito/VerifyEmail"
	Cognito_ResendEmailVerification_FullMethodName = "/eolymp.cognito.Cognito/ResendEmailVerification"
	Cognito_UpdateEmail_FullMethodName             = "/eolymp.cognito.Cognito/UpdateEmail"
	Cognito_UpdateProfile_FullMethodName           = "/eolymp.cognito.Cognito/UpdateProfile"
	Cognito_UpdatePicture_FullMethodName           = "/eolymp.cognito.Cognito/UpdatePicture"
	Cognito_UpdatePassword_FullMethodName          = "/eolymp.cognito.Cognito/UpdatePassword"
	Cognito_IntrospectUser_FullMethodName          = "/eolymp.cognito.Cognito/IntrospectUser"
	Cognito_DescribeUser_FullMethodName            = "/eolymp.cognito.Cognito/DescribeUser"
	Cognito_ListUsers_FullMethodName               = "/eolymp.cognito.Cognito/ListUsers"
	Cognito_IntrospectQuota_FullMethodName         = "/eolymp.cognito.Cognito/IntrospectQuota"
	Cognito_StartRecovery_FullMethodName           = "/eolymp.cognito.Cognito/StartRecovery"
	Cognito_CompleteRecovery_FullMethodName        = "/eolymp.cognito.Cognito/CompleteRecovery"
	Cognito_SelfDestruct_FullMethodName            = "/eolymp.cognito.Cognito/SelfDestruct"
)

// CognitoClient is the client API for Cognito service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CognitoClient interface {
	// Create API key.
	CreateAccessKey(ctx context.Context, in *CreateAccessKeyInput, opts ...grpc.CallOption) (*CreateAccessKeyOutput, error)
	// Delete API key.
	DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyInput, opts ...grpc.CallOption) (*DeleteAccessKeyOutput, error)
	ListAccessKeys(ctx context.Context, in *ListAccessKeysInput, opts ...grpc.CallOption) (*ListAccessKeysOutput, error)
	// Create user account.
	CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error)
	// Verify user email, takes email verification token and if it's correct - changes email status to CONFIRMED.
	VerifyEmail(ctx context.Context, in *VerifyEmailInput, opts ...grpc.CallOption) (*VerifyEmailOutput, error)
	ResendEmailVerification(ctx context.Context, in *ResendEmailVerificationInput, opts ...grpc.CallOption) (*ResendEmailVerificationOutput, error)
	// Update user email, changes user's current email and starts email verification process.
	// DEPRECATED: use UpdateProfile instead
	UpdateEmail(ctx context.Context, in *UpdateEmailInput, opts ...grpc.CallOption) (*UpdateEmailOutput, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileInput, opts ...grpc.CallOption) (*UpdateProfileOutput, error)
	UpdatePicture(ctx context.Context, in *UpdatePictureInput, opts ...grpc.CallOption) (*UpdatePictureOutput, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordInput, opts ...grpc.CallOption) (*UpdatePasswordOutput, error)
	// Introspect user, returns user profile for authenticated user.
	IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error)
	// Describe user by ID.
	DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error)
	// List users.
	ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error)
	// Describe user's quota.
	IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput, opts ...grpc.CallOption) (*IntrospectQuotaOutput, error)
	// Start access recovery procedure, this method will send recovery token to the user's email.
	// This method will return OK even if email does not exist.
	StartRecovery(ctx context.Context, in *StartRecoveryInput, opts ...grpc.CallOption) (*StartRecoveryOutput, error)
	// Finish recovery procedure by setting new password, this method requires token sent by email using `StartRecovery`
	// method
	CompleteRecovery(ctx context.Context, in *CompleteRecoverInput, opts ...grpc.CallOption) (*CompleteRecoverOutput, error)
	SelfDestruct(ctx context.Context, in *SelfDestructInput, opts ...grpc.CallOption) (*SelfDestructOutput, error)
}

type cognitoClient struct {
	cc grpc.ClientConnInterface
}

func NewCognitoClient(cc grpc.ClientConnInterface) CognitoClient {
	return &cognitoClient{cc}
}

func (c *cognitoClient) CreateAccessKey(ctx context.Context, in *CreateAccessKeyInput, opts ...grpc.CallOption) (*CreateAccessKeyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccessKeyOutput)
	err := c.cc.Invoke(ctx, Cognito_CreateAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) DeleteAccessKey(ctx context.Context, in *DeleteAccessKeyInput, opts ...grpc.CallOption) (*DeleteAccessKeyOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessKeyOutput)
	err := c.cc.Invoke(ctx, Cognito_DeleteAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListAccessKeys(ctx context.Context, in *ListAccessKeysInput, opts ...grpc.CallOption) (*ListAccessKeysOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessKeysOutput)
	err := c.cc.Invoke(ctx, Cognito_ListAccessKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) CreateUser(ctx context.Context, in *CreateUserInput, opts ...grpc.CallOption) (*CreateUserOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserOutput)
	err := c.cc.Invoke(ctx, Cognito_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) VerifyEmail(ctx context.Context, in *VerifyEmailInput, opts ...grpc.CallOption) (*VerifyEmailOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailOutput)
	err := c.cc.Invoke(ctx, Cognito_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ResendEmailVerification(ctx context.Context, in *ResendEmailVerificationInput, opts ...grpc.CallOption) (*ResendEmailVerificationOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendEmailVerificationOutput)
	err := c.cc.Invoke(ctx, Cognito_ResendEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdateEmail(ctx context.Context, in *UpdateEmailInput, opts ...grpc.CallOption) (*UpdateEmailOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailOutput)
	err := c.cc.Invoke(ctx, Cognito_UpdateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdateProfile(ctx context.Context, in *UpdateProfileInput, opts ...grpc.CallOption) (*UpdateProfileOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileOutput)
	err := c.cc.Invoke(ctx, Cognito_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdatePicture(ctx context.Context, in *UpdatePictureInput, opts ...grpc.CallOption) (*UpdatePictureOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePictureOutput)
	err := c.cc.Invoke(ctx, Cognito_UpdatePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) UpdatePassword(ctx context.Context, in *UpdatePasswordInput, opts ...grpc.CallOption) (*UpdatePasswordOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordOutput)
	err := c.cc.Invoke(ctx, Cognito_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectUser(ctx context.Context, in *IntrospectUserInput, opts ...grpc.CallOption) (*IntrospectUserOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntrospectUserOutput)
	err := c.cc.Invoke(ctx, Cognito_IntrospectUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) DescribeUser(ctx context.Context, in *DescribeUserInput, opts ...grpc.CallOption) (*DescribeUserOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeUserOutput)
	err := c.cc.Invoke(ctx, Cognito_DescribeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) ListUsers(ctx context.Context, in *ListUsersInput, opts ...grpc.CallOption) (*ListUsersOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersOutput)
	err := c.cc.Invoke(ctx, Cognito_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) IntrospectQuota(ctx context.Context, in *IntrospectQuotaInput, opts ...grpc.CallOption) (*IntrospectQuotaOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntrospectQuotaOutput)
	err := c.cc.Invoke(ctx, Cognito_IntrospectQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) StartRecovery(ctx context.Context, in *StartRecoveryInput, opts ...grpc.CallOption) (*StartRecoveryOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRecoveryOutput)
	err := c.cc.Invoke(ctx, Cognito_StartRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) CompleteRecovery(ctx context.Context, in *CompleteRecoverInput, opts ...grpc.CallOption) (*CompleteRecoverOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteRecoverOutput)
	err := c.cc.Invoke(ctx, Cognito_CompleteRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cognitoClient) SelfDestruct(ctx context.Context, in *SelfDestructInput, opts ...grpc.CallOption) (*SelfDestructOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfDestructOutput)
	err := c.cc.Invoke(ctx, Cognito_SelfDestruct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CognitoServer is the server API for Cognito service.
// All implementations should embed UnimplementedCognitoServer
// for forward compatibility.
type CognitoServer interface {
	// Create API key.
	CreateAccessKey(context.Context, *CreateAccessKeyInput) (*CreateAccessKeyOutput, error)
	// Delete API key.
	DeleteAccessKey(context.Context, *DeleteAccessKeyInput) (*DeleteAccessKeyOutput, error)
	ListAccessKeys(context.Context, *ListAccessKeysInput) (*ListAccessKeysOutput, error)
	// Create user account.
	CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error)
	// Verify user email, takes email verification token and if it's correct - changes email status to CONFIRMED.
	VerifyEmail(context.Context, *VerifyEmailInput) (*VerifyEmailOutput, error)
	ResendEmailVerification(context.Context, *ResendEmailVerificationInput) (*ResendEmailVerificationOutput, error)
	// Update user email, changes user's current email and starts email verification process.
	// DEPRECATED: use UpdateProfile instead
	UpdateEmail(context.Context, *UpdateEmailInput) (*UpdateEmailOutput, error)
	UpdateProfile(context.Context, *UpdateProfileInput) (*UpdateProfileOutput, error)
	UpdatePicture(context.Context, *UpdatePictureInput) (*UpdatePictureOutput, error)
	UpdatePassword(context.Context, *UpdatePasswordInput) (*UpdatePasswordOutput, error)
	// Introspect user, returns user profile for authenticated user.
	IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error)
	// Describe user by ID.
	DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error)
	// List users.
	ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error)
	// Describe user's quota.
	IntrospectQuota(context.Context, *IntrospectQuotaInput) (*IntrospectQuotaOutput, error)
	// Start access recovery procedure, this method will send recovery token to the user's email.
	// This method will return OK even if email does not exist.
	StartRecovery(context.Context, *StartRecoveryInput) (*StartRecoveryOutput, error)
	// Finish recovery procedure by setting new password, this method requires token sent by email using `StartRecovery`
	// method
	CompleteRecovery(context.Context, *CompleteRecoverInput) (*CompleteRecoverOutput, error)
	SelfDestruct(context.Context, *SelfDestructInput) (*SelfDestructOutput, error)
}

// UnimplementedCognitoServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCognitoServer struct{}

func (UnimplementedCognitoServer) CreateAccessKey(context.Context, *CreateAccessKeyInput) (*CreateAccessKeyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessKey not implemented")
}
func (UnimplementedCognitoServer) DeleteAccessKey(context.Context, *DeleteAccessKeyInput) (*DeleteAccessKeyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessKey not implemented")
}
func (UnimplementedCognitoServer) ListAccessKeys(context.Context, *ListAccessKeysInput) (*ListAccessKeysOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessKeys not implemented")
}
func (UnimplementedCognitoServer) CreateUser(context.Context, *CreateUserInput) (*CreateUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCognitoServer) VerifyEmail(context.Context, *VerifyEmailInput) (*VerifyEmailOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedCognitoServer) ResendEmailVerification(context.Context, *ResendEmailVerificationInput) (*ResendEmailVerificationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailVerification not implemented")
}
func (UnimplementedCognitoServer) UpdateEmail(context.Context, *UpdateEmailInput) (*UpdateEmailOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedCognitoServer) UpdateProfile(context.Context, *UpdateProfileInput) (*UpdateProfileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedCognitoServer) UpdatePicture(context.Context, *UpdatePictureInput) (*UpdatePictureOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePicture not implemented")
}
func (UnimplementedCognitoServer) UpdatePassword(context.Context, *UpdatePasswordInput) (*UpdatePasswordOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedCognitoServer) IntrospectUser(context.Context, *IntrospectUserInput) (*IntrospectUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectUser not implemented")
}
func (UnimplementedCognitoServer) DescribeUser(context.Context, *DescribeUserInput) (*DescribeUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeUser not implemented")
}
func (UnimplementedCognitoServer) ListUsers(context.Context, *ListUsersInput) (*ListUsersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCognitoServer) IntrospectQuota(context.Context, *IntrospectQuotaInput) (*IntrospectQuotaOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectQuota not implemented")
}
func (UnimplementedCognitoServer) StartRecovery(context.Context, *StartRecoveryInput) (*StartRecoveryOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecovery not implemented")
}
func (UnimplementedCognitoServer) CompleteRecovery(context.Context, *CompleteRecoverInput) (*CompleteRecoverOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRecovery not implemented")
}
func (UnimplementedCognitoServer) SelfDestruct(context.Context, *SelfDestructInput) (*SelfDestructOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfDestruct not implemented")
}
func (UnimplementedCognitoServer) testEmbeddedByValue() {}

// UnsafeCognitoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CognitoServer will
// result in compilation errors.
type UnsafeCognitoServer interface {
	mustEmbedUnimplementedCognitoServer()
}

func RegisterCognitoServer(s grpc.ServiceRegistrar, srv CognitoServer) {
	// If the following call pancis, it indicates UnimplementedCognitoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cognito_ServiceDesc, srv)
}

func _Cognito_CreateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessKeyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CreateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_CreateAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CreateAccessKey(ctx, req.(*CreateAccessKeyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_DeleteAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessKeyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).DeleteAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_DeleteAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).DeleteAccessKey(ctx, req.(*DeleteAccessKeyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListAccessKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessKeysInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListAccessKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_ListAccessKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListAccessKeys(ctx, req.(*ListAccessKeysInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CreateUser(ctx, req.(*CreateUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).VerifyEmail(ctx, req.(*VerifyEmailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ResendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailVerificationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ResendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_ResendEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ResendEmailVerification(ctx, req.(*ResendEmailVerificationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_UpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdateEmail(ctx, req.(*UpdateEmailInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdateProfile(ctx, req.(*UpdateProfileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdatePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePictureInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdatePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_UpdatePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdatePicture(ctx, req.(*UpdatePictureInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).UpdatePassword(ctx, req.(*UpdatePasswordInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_IntrospectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectUser(ctx, req.(*IntrospectUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_DescribeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).DescribeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_DescribeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).DescribeUser(ctx, req.(*DescribeUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).ListUsers(ctx, req.(*ListUsersInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_IntrospectQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectQuotaInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).IntrospectQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_IntrospectQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).IntrospectQuota(ctx, req.(*IntrospectQuotaInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_StartRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecoveryInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).StartRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_StartRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).StartRecovery(ctx, req.(*StartRecoveryInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_CompleteRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRecoverInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).CompleteRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_CompleteRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).CompleteRecovery(ctx, req.(*CompleteRecoverInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cognito_SelfDestruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfDestructInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CognitoServer).SelfDestruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cognito_SelfDestruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CognitoServer).SelfDestruct(ctx, req.(*SelfDestructInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Cognito_ServiceDesc is the grpc.ServiceDesc for Cognito service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cognito_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.cognito.Cognito",
	HandlerType: (*CognitoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessKey",
			Handler:    _Cognito_CreateAccessKey_Handler,
		},
		{
			MethodName: "DeleteAccessKey",
			Handler:    _Cognito_DeleteAccessKey_Handler,
		},
		{
			MethodName: "ListAccessKeys",
			Handler:    _Cognito_ListAccessKeys_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Cognito_CreateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Cognito_VerifyEmail_Handler,
		},
		{
			MethodName: "ResendEmailVerification",
			Handler:    _Cognito_ResendEmailVerification_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Cognito_UpdateEmail_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Cognito_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdatePicture",
			Handler:    _Cognito_UpdatePicture_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Cognito_UpdatePassword_Handler,
		},
		{
			MethodName: "IntrospectUser",
			Handler:    _Cognito_IntrospectUser_Handler,
		},
		{
			MethodName: "DescribeUser",
			Handler:    _Cognito_DescribeUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Cognito_ListUsers_Handler,
		},
		{
			MethodName: "IntrospectQuota",
			Handler:    _Cognito_IntrospectQuota_Handler,
		},
		{
			MethodName: "StartRecovery",
			Handler:    _Cognito_StartRecovery_Handler,
		},
		{
			MethodName: "CompleteRecovery",
			Handler:    _Cognito_CompleteRecovery_Handler,
		},
		{
			MethodName: "SelfDestruct",
			Handler:    _Cognito_SelfDestruct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/cognito/cognito.proto",
}
