// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: eolymp/discussion/thread_endpoint.proto

package discussion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreadEndpoint_DescribeThread_FullMethodName = "/eolymp.discussion.ThreadEndpoint/DescribeThread"
	ThreadEndpoint_VoteThread_FullMethodName     = "/eolymp.discussion.ThreadEndpoint/VoteThread"
)

// ThreadEndpointClient is the client API for ThreadEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadEndpointClient interface {
	DescribeThread(ctx context.Context, in *DescribeThreadInput, opts ...grpc.CallOption) (*DescribeThreadOutput, error)
	VoteThread(ctx context.Context, in *VoteThreadInput, opts ...grpc.CallOption) (*VoteThreadOutput, error)
}

type threadEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadEndpointClient(cc grpc.ClientConnInterface) ThreadEndpointClient {
	return &threadEndpointClient{cc}
}

func (c *threadEndpointClient) DescribeThread(ctx context.Context, in *DescribeThreadInput, opts ...grpc.CallOption) (*DescribeThreadOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeThreadOutput)
	err := c.cc.Invoke(ctx, ThreadEndpoint_DescribeThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadEndpointClient) VoteThread(ctx context.Context, in *VoteThreadInput, opts ...grpc.CallOption) (*VoteThreadOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteThreadOutput)
	err := c.cc.Invoke(ctx, ThreadEndpoint_VoteThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadEndpointServer is the server API for ThreadEndpoint service.
// All implementations should embed UnimplementedThreadEndpointServer
// for forward compatibility.
type ThreadEndpointServer interface {
	DescribeThread(context.Context, *DescribeThreadInput) (*DescribeThreadOutput, error)
	VoteThread(context.Context, *VoteThreadInput) (*VoteThreadOutput, error)
}

// UnimplementedThreadEndpointServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreadEndpointServer struct{}

func (UnimplementedThreadEndpointServer) DescribeThread(context.Context, *DescribeThreadInput) (*DescribeThreadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeThread not implemented")
}
func (UnimplementedThreadEndpointServer) VoteThread(context.Context, *VoteThreadInput) (*VoteThreadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteThread not implemented")
}
func (UnimplementedThreadEndpointServer) testEmbeddedByValue() {}

// UnsafeThreadEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadEndpointServer will
// result in compilation errors.
type UnsafeThreadEndpointServer interface {
	mustEmbedUnimplementedThreadEndpointServer()
}

func RegisterThreadEndpointServer(s grpc.ServiceRegistrar, srv ThreadEndpointServer) {
	// If the following call pancis, it indicates UnimplementedThreadEndpointServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreadEndpoint_ServiceDesc, srv)
}

func _ThreadEndpoint_DescribeThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeThreadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadEndpointServer).DescribeThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadEndpoint_DescribeThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadEndpointServer).DescribeThread(ctx, req.(*DescribeThreadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadEndpoint_VoteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteThreadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadEndpointServer).VoteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadEndpoint_VoteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadEndpointServer).VoteThread(ctx, req.(*VoteThreadInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreadEndpoint_ServiceDesc is the grpc.ServiceDesc for ThreadEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.discussion.ThreadEndpoint",
	HandlerType: (*ThreadEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeThread",
			Handler:    _ThreadEndpoint_DescribeThread_Handler,
		},
		{
			MethodName: "VoteThread",
			Handler:    _ThreadEndpoint_VoteThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/discussion/thread_endpoint.proto",
}
