// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/discussion/forum_service.proto

package atlas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ForumService_DescribeForum_FullMethodName = "/eolymp.discussion.ForumService/DescribeForum"
	ForumService_ListForums_FullMethodName    = "/eolymp.discussion.ForumService/ListForums"
	ForumService_CreateForum_FullMethodName   = "/eolymp.discussion.ForumService/CreateForum"
	ForumService_UpdateForum_FullMethodName   = "/eolymp.discussion.ForumService/UpdateForum"
	ForumService_DeleteForum_FullMethodName   = "/eolymp.discussion.ForumService/DeleteForum"
)

// ForumServiceClient is the client API for ForumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumServiceClient interface {
	DescribeForum(ctx context.Context, in *DescribeForumInput, opts ...grpc.CallOption) (*DescribeForumOutput, error)
	ListForums(ctx context.Context, in *ListForumsInput, opts ...grpc.CallOption) (*ListForumsOutput, error)
	CreateForum(ctx context.Context, in *CreateForumInput, opts ...grpc.CallOption) (*CreateForumOutput, error)
	UpdateForum(ctx context.Context, in *UpdateForumInput, opts ...grpc.CallOption) (*UpdateForumOutput, error)
	DeleteForum(ctx context.Context, in *DeleteForumInput, opts ...grpc.CallOption) (*DeleteForumOutput, error)
}

type forumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForumServiceClient(cc grpc.ClientConnInterface) ForumServiceClient {
	return &forumServiceClient{cc}
}

func (c *forumServiceClient) DescribeForum(ctx context.Context, in *DescribeForumInput, opts ...grpc.CallOption) (*DescribeForumOutput, error) {
	out := new(DescribeForumOutput)
	err := c.cc.Invoke(ctx, ForumService_DescribeForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) ListForums(ctx context.Context, in *ListForumsInput, opts ...grpc.CallOption) (*ListForumsOutput, error) {
	out := new(ListForumsOutput)
	err := c.cc.Invoke(ctx, ForumService_ListForums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) CreateForum(ctx context.Context, in *CreateForumInput, opts ...grpc.CallOption) (*CreateForumOutput, error) {
	out := new(CreateForumOutput)
	err := c.cc.Invoke(ctx, ForumService_CreateForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) UpdateForum(ctx context.Context, in *UpdateForumInput, opts ...grpc.CallOption) (*UpdateForumOutput, error) {
	out := new(UpdateForumOutput)
	err := c.cc.Invoke(ctx, ForumService_UpdateForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) DeleteForum(ctx context.Context, in *DeleteForumInput, opts ...grpc.CallOption) (*DeleteForumOutput, error) {
	out := new(DeleteForumOutput)
	err := c.cc.Invoke(ctx, ForumService_DeleteForum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServiceServer is the server API for ForumService service.
// All implementations should embed UnimplementedForumServiceServer
// for forward compatibility
type ForumServiceServer interface {
	DescribeForum(context.Context, *DescribeForumInput) (*DescribeForumOutput, error)
	ListForums(context.Context, *ListForumsInput) (*ListForumsOutput, error)
	CreateForum(context.Context, *CreateForumInput) (*CreateForumOutput, error)
	UpdateForum(context.Context, *UpdateForumInput) (*UpdateForumOutput, error)
	DeleteForum(context.Context, *DeleteForumInput) (*DeleteForumOutput, error)
}

// UnimplementedForumServiceServer should be embedded to have forward compatible implementations.
type UnimplementedForumServiceServer struct {
}

func (UnimplementedForumServiceServer) DescribeForum(context.Context, *DescribeForumInput) (*DescribeForumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeForum not implemented")
}
func (UnimplementedForumServiceServer) ListForums(context.Context, *ListForumsInput) (*ListForumsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForums not implemented")
}
func (UnimplementedForumServiceServer) CreateForum(context.Context, *CreateForumInput) (*CreateForumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForum not implemented")
}
func (UnimplementedForumServiceServer) UpdateForum(context.Context, *UpdateForumInput) (*UpdateForumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForum not implemented")
}
func (UnimplementedForumServiceServer) DeleteForum(context.Context, *DeleteForumInput) (*DeleteForumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForum not implemented")
}

// UnsafeForumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServiceServer will
// result in compilation errors.
type UnsafeForumServiceServer interface {
	mustEmbedUnimplementedForumServiceServer()
}

func RegisterForumServiceServer(s grpc.ServiceRegistrar, srv ForumServiceServer) {
	s.RegisterService(&ForumService_ServiceDesc, srv)
}

func _ForumService_DescribeForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeForumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).DescribeForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_DescribeForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).DescribeForum(ctx, req.(*DescribeForumInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_ListForums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForumsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).ListForums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_ListForums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).ListForums(ctx, req.(*ListForumsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_CreateForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).CreateForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_CreateForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).CreateForum(ctx, req.(*CreateForumInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_UpdateForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).UpdateForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_UpdateForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).UpdateForum(ctx, req.(*UpdateForumInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_DeleteForum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).DeleteForum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_DeleteForum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).DeleteForum(ctx, req.(*DeleteForumInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ForumService_ServiceDesc is the grpc.ServiceDesc for ForumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.discussion.ForumService",
	HandlerType: (*ForumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeForum",
			Handler:    _ForumService_DescribeForum_Handler,
		},
		{
			MethodName: "ListForums",
			Handler:    _ForumService_ListForums_Handler,
		},
		{
			MethodName: "CreateForum",
			Handler:    _ForumService_CreateForum_Handler,
		},
		{
			MethodName: "UpdateForum",
			Handler:    _ForumService_UpdateForum_Handler,
		},
		{
			MethodName: "DeleteForum",
			Handler:    _ForumService_DeleteForum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/discussion/forum_service.proto",
}
