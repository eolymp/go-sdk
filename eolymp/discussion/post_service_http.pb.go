// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package discussion

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	websocket "golang.org/x/net/websocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _PostService_HTTPReadQueryString parses body into proto.Message
func _PostService_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _PostService_HTTPReadRequestBody parses body into proto.Message
func _PostService_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _PostService_HTTPWriteResponse writes proto.Message to HTTP response
func _PostService_HTTPWriteResponse(w http.ResponseWriter, v proto.Message, h, t metadata.MD) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_PostService_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")

	if v := append(h.Get("cache-control"), t.Get("cache-control")...); len(v) > 0 {
		w.Header().Set("Cache-Control", v[len(v)-1])
	}

	if v := append(h.Get("etag"), t.Get("etag")...); len(v) > 0 {
		w.Header().Set("ETag", v[len(v)-1])
	}

	if v := append(h.Get("last-modified"), t.Get("last-modified")...); len(v) > 0 {
		w.Header().Set("Last-Modified", v[len(v)-1])
	}

	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _PostService_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _PostService_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// _PostService_WebsocketErrorResponse writes error to websocket connection
func _PostService_WebsocketErrorResponse(conn *websocket.Conn, e error) {
	switch status.Convert(e).Code() {
	case codes.OK:
		conn.WriteClose(1000)
	case codes.Canceled:
		conn.WriteClose(1000)
	case codes.Unknown:
		conn.WriteClose(1011)
	case codes.InvalidArgument:
		conn.WriteClose(1003)
	case codes.DeadlineExceeded:
		conn.WriteClose(1000)
	case codes.NotFound:
		conn.WriteClose(1000)
	case codes.AlreadyExists:
		conn.WriteClose(1000)
	case codes.PermissionDenied:
		conn.WriteClose(1000)
	case codes.ResourceExhausted:
		conn.WriteClose(1000)
	case codes.FailedPrecondition:
		conn.WriteClose(1000)
	case codes.Aborted:
		conn.WriteClose(1000)
	case codes.OutOfRange:
		conn.WriteClose(1000)
	case codes.Unimplemented:
		conn.WriteClose(1011)
	case codes.Internal:
		conn.WriteClose(1011)
	case codes.Unavailable:
		conn.WriteClose(1011)
	case codes.DataLoss:
		conn.WriteClose(1011)
	case codes.Unauthenticated:
		conn.WriteClose(1000)
	default:
		conn.WriteClose(1000)
	}
}

// _PostService_WebsocketCodec implements protobuf codec for websockets package
var _PostService_WebsocketCodec = websocket.Codec{
	Marshal: func(v interface{}) ([]byte, byte, error) {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		d, err := protojson.Marshal(m)
		if err != nil {
			return nil, 0, err
		}

		return d, websocket.TextFrame, err
	},
	Unmarshal: func(d []byte, t byte, v interface{}) error {
		m, ok := v.(proto.Message)
		if !ok {
			panic(fmt.Errorf("invalid message type %T", v))
		}

		return protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(d, m)
	},
}

// RegisterPostServiceHttpHandlers adds handlers for for PostServiceClient
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterPostServiceHttpHandlers(router *mux.Router, prefix string, cli PostServiceClient) {
	router.Handle(prefix+"/posts/{post_id}", _PostService_DescribePost_Rule0(cli)).
		Methods("GET").
		Name("eolymp.discussion.PostService.DescribePost")
	router.Handle(prefix+"/posts", _PostService_ListPosts_Rule0(cli)).
		Methods("GET").
		Name("eolymp.discussion.PostService.ListPosts")
	router.Handle(prefix+"/posts", _PostService_CreatePost_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.CreatePost")
	router.Handle(prefix+"/posts/{post_id}", _PostService_UpdatePost_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.discussion.PostService.UpdatePost")
	router.Handle(prefix+"/posts/{post_id}/publish", _PostService_PublishPost_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.PublishPost")
	router.Handle(prefix+"/posts/{post_id}/publish", _PostService_UnpublishPost_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.discussion.PostService.UnpublishPost")
	router.Handle(prefix+"/posts/{post_id}/moderate", _PostService_ModeratePost_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.ModeratePost")
	router.Handle(prefix+"/posts/{post_id}", _PostService_DeletePost_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.discussion.PostService.DeletePost")
	router.Handle(prefix+"/posts/{post_id}/vote", _PostService_VotePost_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.VotePost")
	router.Handle(prefix+"/posts/{post_id}/translate", _PostService_TranslatePost_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.TranslatePost")
	router.Handle(prefix+"/posts/{post_id}/translations/{translation_id}", _PostService_DescribePostTranslation_Rule0(cli)).
		Methods("GET").
		Name("eolymp.discussion.PostService.DescribePostTranslation")
	router.Handle(prefix+"/posts/{post_id}/translations", _PostService_ListPostTranslations_Rule0(cli)).
		Methods("GET").
		Name("eolymp.discussion.PostService.ListPostTranslations")
	router.Handle(prefix+"/posts/{post_id}/translations", _PostService_CreatePostTranslation_Rule0(cli)).
		Methods("POST").
		Name("eolymp.discussion.PostService.CreatePostTranslation")
	router.Handle(prefix+"/posts/{post_id}/translations/{translation_id}", _PostService_UpdatePostTranslation_Rule0(cli)).
		Methods("PUT").
		Name("eolymp.discussion.PostService.UpdatePostTranslation")
	router.Handle(prefix+"/posts/{post_id}/translations/{translation_id}", _PostService_DeletePostTranslation_Rule0(cli)).
		Methods("DELETE").
		Name("eolymp.discussion.PostService.DeletePostTranslation")
}

func _PostService_DescribePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePostInput{}

		if err := _PostService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_ListPosts_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPostsInput{}

		if err := _PostService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.ListPosts(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_CreatePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreatePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		var header, trailer metadata.MD

		out, err := cli.CreatePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_UpdatePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdatePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_PublishPost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &PublishPostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.PublishPost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_UnpublishPost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UnpublishPostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.UnpublishPost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_ModeratePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ModeratePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.ModeratePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_DeletePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeletePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.DeletePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_VotePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &VotePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.VotePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_TranslatePost_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &TranslatePostInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.TranslatePost(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_DescribePostTranslation_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePostTranslationInput{}

		if err := _PostService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DescribePostTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_ListPostTranslations_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPostTranslationsInput{}

		if err := _PostService_HTTPReadQueryString(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.ListPostTranslations(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_CreatePostTranslation_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreatePostTranslationInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]

		var header, trailer metadata.MD

		out, err := cli.CreatePostTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_UpdatePostTranslation_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdatePostTranslationInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.UpdatePostTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

func _PostService_DeletePostTranslation_Rule0(cli PostServiceClient) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeletePostTranslationInput{}

		if err := _PostService_HTTPReadRequestBody(r, in); err != nil {
			err = status.Error(codes.InvalidArgument, err.Error())
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.PostId = vars["post_id"]
		in.TranslationId = vars["translation_id"]

		var header, trailer metadata.MD

		out, err := cli.DeletePostTranslation(r.Context(), in, grpc.Header(&header), grpc.Trailer(&trailer))
		if err != nil {
			_PostService_HTTPWriteErrorResponse(w, err)
			return
		}

		_PostService_HTTPWriteResponse(w, out, header, trailer)
	})
}

type _PostServiceHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _PostServiceMiddleware = func(ctx context.Context, method string, in proto.Message, handler _PostServiceHandler) (out proto.Message, err error)
type PostServiceInterceptor struct {
	middleware []_PostServiceMiddleware
	client     PostServiceClient
}

// NewPostServiceInterceptor constructs additional middleware for a server based on annotations in proto files
func NewPostServiceInterceptor(cli PostServiceClient, middleware ..._PostServiceMiddleware) *PostServiceInterceptor {
	return &PostServiceInterceptor{client: cli, middleware: middleware}
}

func (i *PostServiceInterceptor) DescribePost(ctx context.Context, in *DescribePostInput, opts ...grpc.CallOption) (*DescribePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribePostInput, got %T", in))
		}

		return i.client.DescribePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.DescribePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) ListPosts(ctx context.Context, in *ListPostsInput, opts ...grpc.CallOption) (*ListPostsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListPostsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListPostsInput, got %T", in))
		}

		return i.client.ListPosts(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.ListPosts", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListPostsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListPostsOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) CreatePost(ctx context.Context, in *CreatePostInput, opts ...grpc.CallOption) (*CreatePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreatePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreatePostInput, got %T", in))
		}

		return i.client.CreatePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.CreatePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreatePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreatePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) UpdatePost(ctx context.Context, in *UpdatePostInput, opts ...grpc.CallOption) (*UpdatePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdatePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdatePostInput, got %T", in))
		}

		return i.client.UpdatePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.UpdatePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdatePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdatePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) PublishPost(ctx context.Context, in *PublishPostInput, opts ...grpc.CallOption) (*PublishPostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*PublishPostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *PublishPostInput, got %T", in))
		}

		return i.client.PublishPost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.PublishPost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*PublishPostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *PublishPostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) UnpublishPost(ctx context.Context, in *UnpublishPostInput, opts ...grpc.CallOption) (*UnpublishPostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UnpublishPostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UnpublishPostInput, got %T", in))
		}

		return i.client.UnpublishPost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.UnpublishPost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UnpublishPostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UnpublishPostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) ModeratePost(ctx context.Context, in *ModeratePostInput, opts ...grpc.CallOption) (*ModeratePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ModeratePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ModeratePostInput, got %T", in))
		}

		return i.client.ModeratePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.ModeratePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ModeratePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ModeratePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) DeletePost(ctx context.Context, in *DeletePostInput, opts ...grpc.CallOption) (*DeletePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeletePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeletePostInput, got %T", in))
		}

		return i.client.DeletePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.DeletePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeletePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeletePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) VotePost(ctx context.Context, in *VotePostInput, opts ...grpc.CallOption) (*VotePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*VotePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *VotePostInput, got %T", in))
		}

		return i.client.VotePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.VotePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*VotePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *VotePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) TranslatePost(ctx context.Context, in *TranslatePostInput, opts ...grpc.CallOption) (*TranslatePostOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*TranslatePostInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *TranslatePostInput, got %T", in))
		}

		return i.client.TranslatePost(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.TranslatePost", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*TranslatePostOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *TranslatePostOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) DescribePostTranslation(ctx context.Context, in *DescribePostTranslationInput, opts ...grpc.CallOption) (*DescribePostTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribePostTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribePostTranslationInput, got %T", in))
		}

		return i.client.DescribePostTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.DescribePostTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribePostTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribePostTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) ListPostTranslations(ctx context.Context, in *ListPostTranslationsInput, opts ...grpc.CallOption) (*ListPostTranslationsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListPostTranslationsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListPostTranslationsInput, got %T", in))
		}

		return i.client.ListPostTranslations(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.ListPostTranslations", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListPostTranslationsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListPostTranslationsOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) CreatePostTranslation(ctx context.Context, in *CreatePostTranslationInput, opts ...grpc.CallOption) (*CreatePostTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreatePostTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreatePostTranslationInput, got %T", in))
		}

		return i.client.CreatePostTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.CreatePostTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreatePostTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreatePostTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) UpdatePostTranslation(ctx context.Context, in *UpdatePostTranslationInput, opts ...grpc.CallOption) (*UpdatePostTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdatePostTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdatePostTranslationInput, got %T", in))
		}

		return i.client.UpdatePostTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.UpdatePostTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdatePostTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdatePostTranslationOutput, got %T", out))
	}

	return message, err
}

func (i *PostServiceInterceptor) DeletePostTranslation(ctx context.Context, in *DeletePostTranslationInput, opts ...grpc.CallOption) (*DeletePostTranslationOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeletePostTranslationInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeletePostTranslationInput, got %T", in))
		}

		return i.client.DeletePostTranslation(ctx, message, opts...)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.discussion.PostService.DeletePostTranslation", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeletePostTranslationOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeletePostTranslationOutput, got %T", out))
	}

	return message, err
}
