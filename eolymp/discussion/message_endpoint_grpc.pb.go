// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/discussion/message_endpoint.proto

package discussion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageEndpoint_DescribeMessage_FullMethodName = "/eolymp.discussion.MessageEndpoint/DescribeMessage"
	MessageEndpoint_UpdateMessage_FullMethodName   = "/eolymp.discussion.MessageEndpoint/UpdateMessage"
	MessageEndpoint_DeleteMessage_FullMethodName   = "/eolymp.discussion.MessageEndpoint/DeleteMessage"
	MessageEndpoint_VoteMessage_FullMethodName     = "/eolymp.discussion.MessageEndpoint/VoteMessage"
)

// MessageEndpointClient is the client API for MessageEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageEndpointClient interface {
	DescribeMessage(ctx context.Context, in *DescribeMessageInput, opts ...grpc.CallOption) (*DescribeMessageOutput, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageInput, opts ...grpc.CallOption) (*UpdateMessageOutput, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageInput, opts ...grpc.CallOption) (*DeleteMessageOutput, error)
	VoteMessage(ctx context.Context, in *VoteMessageInput, opts ...grpc.CallOption) (*VoteMessageOutput, error)
}

type messageEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageEndpointClient(cc grpc.ClientConnInterface) MessageEndpointClient {
	return &messageEndpointClient{cc}
}

func (c *messageEndpointClient) DescribeMessage(ctx context.Context, in *DescribeMessageInput, opts ...grpc.CallOption) (*DescribeMessageOutput, error) {
	out := new(DescribeMessageOutput)
	err := c.cc.Invoke(ctx, MessageEndpoint_DescribeMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEndpointClient) UpdateMessage(ctx context.Context, in *UpdateMessageInput, opts ...grpc.CallOption) (*UpdateMessageOutput, error) {
	out := new(UpdateMessageOutput)
	err := c.cc.Invoke(ctx, MessageEndpoint_UpdateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEndpointClient) DeleteMessage(ctx context.Context, in *DeleteMessageInput, opts ...grpc.CallOption) (*DeleteMessageOutput, error) {
	out := new(DeleteMessageOutput)
	err := c.cc.Invoke(ctx, MessageEndpoint_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageEndpointClient) VoteMessage(ctx context.Context, in *VoteMessageInput, opts ...grpc.CallOption) (*VoteMessageOutput, error) {
	out := new(VoteMessageOutput)
	err := c.cc.Invoke(ctx, MessageEndpoint_VoteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageEndpointServer is the server API for MessageEndpoint service.
// All implementations should embed UnimplementedMessageEndpointServer
// for forward compatibility
type MessageEndpointServer interface {
	DescribeMessage(context.Context, *DescribeMessageInput) (*DescribeMessageOutput, error)
	UpdateMessage(context.Context, *UpdateMessageInput) (*UpdateMessageOutput, error)
	DeleteMessage(context.Context, *DeleteMessageInput) (*DeleteMessageOutput, error)
	VoteMessage(context.Context, *VoteMessageInput) (*VoteMessageOutput, error)
}

// UnimplementedMessageEndpointServer should be embedded to have forward compatible implementations.
type UnimplementedMessageEndpointServer struct {
}

func (UnimplementedMessageEndpointServer) DescribeMessage(context.Context, *DescribeMessageInput) (*DescribeMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMessage not implemented")
}
func (UnimplementedMessageEndpointServer) UpdateMessage(context.Context, *UpdateMessageInput) (*UpdateMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedMessageEndpointServer) DeleteMessage(context.Context, *DeleteMessageInput) (*DeleteMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessageEndpointServer) VoteMessage(context.Context, *VoteMessageInput) (*VoteMessageOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMessage not implemented")
}

// UnsafeMessageEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageEndpointServer will
// result in compilation errors.
type UnsafeMessageEndpointServer interface {
	mustEmbedUnimplementedMessageEndpointServer()
}

func RegisterMessageEndpointServer(s grpc.ServiceRegistrar, srv MessageEndpointServer) {
	s.RegisterService(&MessageEndpoint_ServiceDesc, srv)
}

func _MessageEndpoint_DescribeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEndpointServer).DescribeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageEndpoint_DescribeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEndpointServer).DescribeMessage(ctx, req.(*DescribeMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEndpoint_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEndpointServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageEndpoint_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEndpointServer).UpdateMessage(ctx, req.(*UpdateMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEndpoint_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEndpointServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageEndpoint_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEndpointServer).DeleteMessage(ctx, req.(*DeleteMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageEndpoint_VoteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteMessageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEndpointServer).VoteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageEndpoint_VoteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEndpointServer).VoteMessage(ctx, req.(*VoteMessageInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageEndpoint_ServiceDesc is the grpc.ServiceDesc for MessageEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.discussion.MessageEndpoint",
	HandlerType: (*MessageEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeMessage",
			Handler:    _MessageEndpoint_DescribeMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _MessageEndpoint_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _MessageEndpoint_DeleteMessage_Handler,
		},
		{
			MethodName: "VoteMessage",
			Handler:    _MessageEndpoint_VoteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/discussion/message_endpoint.proto",
}
