// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: eolymp/pastebin/pastebin.proto

package pastebin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pastebin_UploadFile_FullMethodName              = "/eolymp.pastebin.Pastebin/UploadFile"
	Pastebin_StartMultipartUpload_FullMethodName    = "/eolymp.pastebin.Pastebin/StartMultipartUpload"
	Pastebin_UploadPart_FullMethodName              = "/eolymp.pastebin.Pastebin/UploadPart"
	Pastebin_CompleteMultipartUpload_FullMethodName = "/eolymp.pastebin.Pastebin/CompleteMultipartUpload"
)

// PastebinClient is the client API for Pastebin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PastebinClient interface {
	UploadFile(ctx context.Context, in *UploadFileInput, opts ...grpc.CallOption) (*UploadFileOutput, error)
	StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error)
	UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error)
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error)
}

type pastebinClient struct {
	cc grpc.ClientConnInterface
}

func NewPastebinClient(cc grpc.ClientConnInterface) PastebinClient {
	return &pastebinClient{cc}
}

func (c *pastebinClient) UploadFile(ctx context.Context, in *UploadFileInput, opts ...grpc.CallOption) (*UploadFileOutput, error) {
	out := new(UploadFileOutput)
	err := c.cc.Invoke(ctx, Pastebin_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinClient) StartMultipartUpload(ctx context.Context, in *StartMultipartUploadInput, opts ...grpc.CallOption) (*StartMultipartUploadOutput, error) {
	out := new(StartMultipartUploadOutput)
	err := c.cc.Invoke(ctx, Pastebin_StartMultipartUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinClient) UploadPart(ctx context.Context, in *UploadPartInput, opts ...grpc.CallOption) (*UploadPartOutput, error) {
	out := new(UploadPartOutput)
	err := c.cc.Invoke(ctx, Pastebin_UploadPart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error) {
	out := new(CompleteMultipartUploadOutput)
	err := c.cc.Invoke(ctx, Pastebin_CompleteMultipartUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PastebinServer is the server API for Pastebin service.
// All implementations should embed UnimplementedPastebinServer
// for forward compatibility
type PastebinServer interface {
	UploadFile(context.Context, *UploadFileInput) (*UploadFileOutput, error)
	StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error)
	UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error)
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error)
}

// UnimplementedPastebinServer should be embedded to have forward compatible implementations.
type UnimplementedPastebinServer struct {
}

func (UnimplementedPastebinServer) UploadFile(context.Context, *UploadFileInput) (*UploadFileOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPastebinServer) StartMultipartUpload(context.Context, *StartMultipartUploadInput) (*StartMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultipartUpload not implemented")
}
func (UnimplementedPastebinServer) UploadPart(context.Context, *UploadPartInput) (*UploadPartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedPastebinServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}

// UnsafePastebinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PastebinServer will
// result in compilation errors.
type UnsafePastebinServer interface {
	mustEmbedUnimplementedPastebinServer()
}

func RegisterPastebinServer(s grpc.ServiceRegistrar, srv PastebinServer) {
	s.RegisterService(&Pastebin_ServiceDesc, srv)
}

func _Pastebin_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pastebin_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServer).UploadFile(ctx, req.(*UploadFileInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pastebin_StartMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServer).StartMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pastebin_StartMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServer).StartMultipartUpload(ctx, req.(*StartMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pastebin_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pastebin_UploadPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServer).UploadPart(ctx, req.(*UploadPartInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pastebin_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pastebin_CompleteMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Pastebin_ServiceDesc is the grpc.ServiceDesc for Pastebin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pastebin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.pastebin.Pastebin",
	HandlerType: (*PastebinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Pastebin_UploadFile_Handler,
		},
		{
			MethodName: "StartMultipartUpload",
			Handler:    _Pastebin_StartMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _Pastebin_UploadPart_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _Pastebin_CompleteMultipartUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/pastebin/pastebin.proto",
}
