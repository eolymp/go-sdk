// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package typewriter

import (
	context "context"
	fmt "fmt"
	mux "github.com/gorilla/mux"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
)

// _Typewriter_HTTPReadQueryString parses body into proto.Message
func _Typewriter_HTTPReadQueryString(r *http.Request, v proto.Message) error {
	query := r.URL.Query().Get("q")
	if query == "" {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal([]byte(query), v)); err != nil {
		return err
	}

	return nil
}

// _Typewriter_HTTPReadRequestBody parses body into proto.Message
func _Typewriter_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Typewriter_HTTPWriteResponse writes proto.Message to HTTP response
func _Typewriter_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Typewriter_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Typewriter_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Typewriter_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// RegisterTypewriterHttpHandlers adds handlers for for TypewriterServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func RegisterTypewriterHttpHandlers(router *mux.Router, prefix string, srv TypewriterServer) {
	router.Handle(prefix+"/content/fragments/{fragment_id}", _Typewriter_DescribeFragment_Rule0(srv)).
		Methods("GET").
		Name("eolymp.typewriter.Typewriter.DescribeFragment")
	router.Handle(prefix+"/content/fragments", _Typewriter_ListFragments_Rule0(srv)).
		Methods("GET").
		Name("eolymp.typewriter.Typewriter.ListFragments")
	router.Handle(prefix+"/content/fragments", _Typewriter_CreateFragment_Rule0(srv)).
		Methods("POST").
		Name("eolymp.typewriter.Typewriter.CreateFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}", _Typewriter_UpdateFragment_Rule0(srv)).
		Methods("PUT").
		Name("eolymp.typewriter.Typewriter.UpdateFragment")
	router.Handle(prefix+"/content/fragments/{fragment_id}", _Typewriter_DeleteFragment_Rule0(srv)).
		Methods("DELETE").
		Name("eolymp.typewriter.Typewriter.DeleteFragment")
	router.Handle(prefix+"/content/path", _Typewriter_DescribePath_Rule0(srv)).
		Methods("GET").
		Name("eolymp.typewriter.Typewriter.DescribePath")
	router.Handle(prefix+"/content/paths", _Typewriter_ListPaths_Rule0(srv)).
		Methods("GET").
		Name("eolymp.typewriter.Typewriter.ListPaths")
	router.Handle(prefix+"/content/parents", _Typewriter_ListParents_Rule0(srv)).
		Methods("GET").
		Name("eolymp.typewriter.Typewriter.ListParents")
	router.Handle(prefix+"/assets", _Typewriter_UploadAsset_Rule0(srv)).
		Methods("POST").
		Name("eolymp.typewriter.Typewriter.UploadAsset")
}

func _Typewriter_DescribeFragment_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribeFragmentInput{}

		if err := _Typewriter_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		out, err := srv.DescribeFragment(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_ListFragments_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListFragmentsInput{}

		if err := _Typewriter_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListFragments(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_CreateFragment_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &CreateFragmentInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.CreateFragment(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_UpdateFragment_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UpdateFragmentInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		out, err := srv.UpdateFragment(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_DeleteFragment_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DeleteFragmentInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		vars := mux.Vars(r)
		in.FragmentId = vars["fragment_id"]

		out, err := srv.DeleteFragment(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_DescribePath_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &DescribePathInput{}

		if err := _Typewriter_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.DescribePath(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_ListPaths_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListPathsInput{}

		if err := _Typewriter_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListPaths(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_ListParents_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &ListParentsInput{}

		if err := _Typewriter_HTTPReadQueryString(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.ListParents(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_UploadAsset_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadAssetInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UploadAsset(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

type _TypewriterHandler = func(ctx context.Context, in proto.Message) (proto.Message, error)
type _TypewriterMiddleware = func(ctx context.Context, method string, in proto.Message, handler _TypewriterHandler) (out proto.Message, err error)
type TypewriterInterceptor struct {
	middleware []_TypewriterMiddleware
	server     TypewriterServer
}

// NewTypewriterInterceptor constructs additional middleware for a server based on annotations in proto files
func NewTypewriterInterceptor(srv TypewriterServer, middleware ..._TypewriterMiddleware) *TypewriterInterceptor {
	return &TypewriterInterceptor{server: srv, middleware: middleware}
}

func (i *TypewriterInterceptor) DescribeFragment(ctx context.Context, in *DescribeFragmentInput) (*DescribeFragmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribeFragmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribeFragmentInput, got %T", in))
		}

		return i.server.DescribeFragment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.DescribeFragment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribeFragmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribeFragmentOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) ListFragments(ctx context.Context, in *ListFragmentsInput) (*ListFragmentsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListFragmentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListFragmentsInput, got %T", in))
		}

		return i.server.ListFragments(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.ListFragments", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListFragmentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListFragmentsOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) CreateFragment(ctx context.Context, in *CreateFragmentInput) (*CreateFragmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*CreateFragmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *CreateFragmentInput, got %T", in))
		}

		return i.server.CreateFragment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.CreateFragment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*CreateFragmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *CreateFragmentOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) UpdateFragment(ctx context.Context, in *UpdateFragmentInput) (*UpdateFragmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UpdateFragmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UpdateFragmentInput, got %T", in))
		}

		return i.server.UpdateFragment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.UpdateFragment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UpdateFragmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UpdateFragmentOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) DeleteFragment(ctx context.Context, in *DeleteFragmentInput) (*DeleteFragmentOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DeleteFragmentInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DeleteFragmentInput, got %T", in))
		}

		return i.server.DeleteFragment(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.DeleteFragment", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DeleteFragmentOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DeleteFragmentOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) DescribePath(ctx context.Context, in *DescribePathInput) (*DescribePathOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*DescribePathInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *DescribePathInput, got %T", in))
		}

		return i.server.DescribePath(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.DescribePath", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*DescribePathOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *DescribePathOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) ListPaths(ctx context.Context, in *ListPathsInput) (*ListPathsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListPathsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListPathsInput, got %T", in))
		}

		return i.server.ListPaths(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.ListPaths", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListPathsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListPathsOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) ListParents(ctx context.Context, in *ListParentsInput) (*ListParentsOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*ListParentsInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *ListParentsInput, got %T", in))
		}

		return i.server.ListParents(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.ListParents", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*ListParentsOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *ListParentsOutput, got %T", out))
	}

	return message, err
}

func (i *TypewriterInterceptor) UploadAsset(ctx context.Context, in *UploadAssetInput) (*UploadAssetOutput, error) {
	handler := func(ctx context.Context, in proto.Message) (proto.Message, error) {
		message, ok := in.(*UploadAssetInput)
		if !ok && in != nil {
			panic(fmt.Errorf("request input type is invalid: want *UploadAssetInput, got %T", in))
		}

		return i.server.UploadAsset(ctx, message)
	}

	for _, mw := range i.middleware {
		mw := mw
		next := handler

		handler = func(ctx context.Context, in proto.Message) (proto.Message, error) {
			return mw(ctx, "eolymp.typewriter.Typewriter.UploadAsset", in, next)
		}
	}

	out, err := handler(ctx, in)
	if err != nil {
		return nil, err
	}

	message, ok := out.(*UploadAssetOutput)
	if !ok && out != nil {
		panic(fmt.Errorf("output type is invalid: want *UploadAssetOutput, got %T", out))
	}

	return message, err
}
