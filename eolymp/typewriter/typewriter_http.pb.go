// Code generated by protoc-gen-go-server. DO NOT EDIT.
// See https://github.com/eolymp/contracts/tree/main/cmd/protoc-gen-go-server for more details.

package typewriter

import (
	context "context"
	oauth "github.com/eolymp/go-packages/oauth"
	mux "github.com/gorilla/mux"
	prometheus "github.com/prometheus/client_golang/prometheus"
	promauto "github.com/prometheus/client_golang/prometheus/promauto"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	time "time"
)

// _Typewriter_HTTPReadRequestBody parses body into proto.Message
func _Typewriter_HTTPReadRequestBody(r *http.Request, v proto.Message) error {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if len(data) == 0 {
		return nil
	}

	if err := (protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(data, v)); err != nil {
		return err
	}

	return nil
}

// _Typewriter_HTTPWriteResponse writes proto.Message to HTTP response
func _Typewriter_HTTPWriteResponse(w http.ResponseWriter, v proto.Message) {
	data, err := protojson.Marshal(v)
	if err != nil {
		_Typewriter_HTTPWriteErrorResponse(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	_, _ = w.Write(data)
}

// _Typewriter_HTTPWriteErrorResponse writes error to HTTP response with error status code
func _Typewriter_HTTPWriteErrorResponse(w http.ResponseWriter, e error) {
	s := status.Convert(e)

	w.Header().Set("Content-Type", "application/json")

	switch s.Code() {
	case codes.OK:
		w.WriteHeader(http.StatusOK)
	case codes.Canceled:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.Unknown:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.InvalidArgument:
		w.WriteHeader(http.StatusBadRequest)
	case codes.DeadlineExceeded:
		w.WriteHeader(http.StatusGatewayTimeout)
	case codes.NotFound:
		w.WriteHeader(http.StatusNotFound)
	case codes.AlreadyExists:
		w.WriteHeader(http.StatusConflict)
	case codes.PermissionDenied:
		w.WriteHeader(http.StatusForbidden)
	case codes.ResourceExhausted:
		w.WriteHeader(http.StatusTooManyRequests)
	case codes.FailedPrecondition:
		w.WriteHeader(http.StatusPreconditionFailed)
	case codes.Aborted:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.OutOfRange:
		w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	case codes.Unimplemented:
		w.WriteHeader(http.StatusNotImplemented)
	case codes.Internal:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unavailable:
		w.WriteHeader(http.StatusServiceUnavailable)
	case codes.DataLoss:
		w.WriteHeader(http.StatusInternalServerError)
	case codes.Unauthenticated:
		w.WriteHeader(http.StatusUnauthorized)
	default:
		w.WriteHeader(http.StatusInternalServerError)
	}

	data, err := protojson.Marshal(s.Proto())
	if err != nil {
		panic(err)
	}

	_, _ = w.Write(data)
}

// NewTypewriterHandler constructs new http.Handler for TypewriterServer
func NewTypewriterHandler(srv TypewriterServer) http.Handler {
	router := mux.NewRouter()
	router.Handle("/eolymp.typewriter.Typewriter/UploadAsset", _Typewriter_UploadAsset(srv)).Methods(http.MethodPost)
	return router
}

// NewTypewriterHandlerHttp constructs new http.Handler for TypewriterServer
// This constructor creates http.Handler, the actual implementation might change at any moment
func NewTypewriterHandlerHttp(srv TypewriterServer, prefix string) http.Handler {
	router := mux.NewRouter()

	router.Handle(prefix+"/assets", _Typewriter_UploadAsset_Rule0(srv)).
		Methods("POST").
		Name("eolymp.typewriter.Typewriter.UploadAsset")

	return router
}

func _Typewriter_UploadAsset(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadAssetInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UploadAsset(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

func _Typewriter_UploadAsset_Rule0(srv TypewriterServer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		in := &UploadAssetInput{}

		if err := _Typewriter_HTTPReadRequestBody(r, in); err != nil {
			err = status.New(codes.InvalidArgument, err.Error()).Err()
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		out, err := srv.UploadAsset(r.Context(), in)
		if err != nil {
			_Typewriter_HTTPWriteErrorResponse(w, err)
			return
		}

		_Typewriter_HTTPWriteResponse(w, out)
	})
}

var promTypewriterRequestLatency = promauto.NewHistogramVec(prometheus.HistogramOpts{
	Name:    "typewriter_request_latency",
	Help:    "Typewriter request latency",
	Buckets: []float64{0.1, 0.4, 1, 5},
}, []string{"method", "status"})

type _TypewriterLimiter interface {
	Allow(context.Context, string, float64, int) bool
}

type TypewriterInterceptor struct {
	limiter _TypewriterLimiter
	server  TypewriterServer
}

// NewTypewriterInterceptor constructs additional middleware for a server based on annotations in proto files
func NewTypewriterInterceptor(srv TypewriterServer, lim _TypewriterLimiter) *TypewriterInterceptor {
	return &TypewriterInterceptor{server: srv, limiter: lim}
}

func (i *TypewriterInterceptor) UploadAsset(ctx context.Context, in *UploadAssetInput) (out *UploadAssetOutput, err error) {
	start := time.Now()
	defer func() {
		s, _ := status.FromError(err)
		if s == nil {
			s = status.New(codes.OK, "OK")
		}

		promTypewriterRequestLatency.WithLabelValues("eolymp.typewriter.Typewriter/UploadAsset", s.Code().String()).
			Observe(time.Since(start).Seconds())
	}()

	token, ok := oauth.TokenFromContext(ctx)
	if ok && !token.Has("typewriter:asset:write") {
		err = status.Error(codes.PermissionDenied, "required token scopes are missing: typewriter:asset:write")
		return
	}

	if !i.limiter.Allow(ctx, "eolymp.typewriter.Typewriter/UploadAsset", 2, 100) {
		err = status.Error(codes.ResourceExhausted, "too many requests")
		return
	}

	out, err = i.server.UploadAsset(ctx, in)
	return
}
