// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.2
// source: eolymp/typewriter/typewriter.proto

package typewriter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypewriterClient is the client API for Typewriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypewriterClient interface {
	UploadAsset(ctx context.Context, in *UploadAssetInput, opts ...grpc.CallOption) (*UploadAssetOutput, error)
}

type typewriterClient struct {
	cc grpc.ClientConnInterface
}

func NewTypewriterClient(cc grpc.ClientConnInterface) TypewriterClient {
	return &typewriterClient{cc}
}

func (c *typewriterClient) UploadAsset(ctx context.Context, in *UploadAssetInput, opts ...grpc.CallOption) (*UploadAssetOutput, error) {
	out := new(UploadAssetOutput)
	err := c.cc.Invoke(ctx, "/eolymp.typewriter.Typewriter/UploadAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypewriterServer is the server API for Typewriter service.
// All implementations should embed UnimplementedTypewriterServer
// for forward compatibility
type TypewriterServer interface {
	UploadAsset(context.Context, *UploadAssetInput) (*UploadAssetOutput, error)
}

// UnimplementedTypewriterServer should be embedded to have forward compatible implementations.
type UnimplementedTypewriterServer struct {
}

func (UnimplementedTypewriterServer) UploadAsset(context.Context, *UploadAssetInput) (*UploadAssetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}

// UnsafeTypewriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypewriterServer will
// result in compilation errors.
type UnsafeTypewriterServer interface {
	mustEmbedUnimplementedTypewriterServer()
}

func RegisterTypewriterServer(s grpc.ServiceRegistrar, srv TypewriterServer) {
	s.RegisterService(&Typewriter_ServiceDesc, srv)
}

func _Typewriter_UploadAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAssetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypewriterServer).UploadAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.typewriter.Typewriter/UploadAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypewriterServer).UploadAsset(ctx, req.(*UploadAssetInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Typewriter_ServiceDesc is the grpc.ServiceDesc for Typewriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Typewriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.typewriter.Typewriter",
	HandlerType: (*TypewriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadAsset",
			Handler:    _Typewriter_UploadAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/typewriter/typewriter.proto",
}
