// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apollo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApolloClient is the client API for Apollo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApolloClient interface {
	CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error)
	DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error)
}

type apolloClient struct {
	cc grpc.ClientConnInterface
}

func NewApolloClient(cc grpc.ClientConnInterface) ApolloClient {
	return &apolloClient{cc}
}

func (c *apolloClient) CreateSubmission(ctx context.Context, in *CreateSubmissionInput, opts ...grpc.CallOption) (*CreateSubmissionOutput, error) {
	out := new(CreateSubmissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.apollo.Apollo/CreateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apolloClient) DescribeSubmission(ctx context.Context, in *DescribeSubmissionInput, opts ...grpc.CallOption) (*DescribeSubmissionOutput, error) {
	out := new(DescribeSubmissionOutput)
	err := c.cc.Invoke(ctx, "/eolymp.apollo.Apollo/DescribeSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApolloServer is the server API for Apollo service.
// All implementations must embed UnimplementedApolloServer
// for forward compatibility
type ApolloServer interface {
	CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error)
	DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error)
	mustEmbedUnimplementedApolloServer()
}

// UnimplementedApolloServer must be embedded to have forward compatible implementations.
type UnimplementedApolloServer struct {
}

func (UnimplementedApolloServer) CreateSubmission(context.Context, *CreateSubmissionInput) (*CreateSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmission not implemented")
}
func (UnimplementedApolloServer) DescribeSubmission(context.Context, *DescribeSubmissionInput) (*DescribeSubmissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSubmission not implemented")
}
func (UnimplementedApolloServer) mustEmbedUnimplementedApolloServer() {}

// UnsafeApolloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApolloServer will
// result in compilation errors.
type UnsafeApolloServer interface {
	mustEmbedUnimplementedApolloServer()
}

func RegisterApolloServer(s grpc.ServiceRegistrar, srv ApolloServer) {
	s.RegisterService(&Apollo_ServiceDesc, srv)
}

func _Apollo_CreateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServer).CreateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.apollo.Apollo/CreateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServer).CreateSubmission(ctx, req.(*CreateSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apollo_DescribeSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSubmissionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApolloServer).DescribeSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eolymp.apollo.Apollo/DescribeSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApolloServer).DescribeSubmission(ctx, req.(*DescribeSubmissionInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Apollo_ServiceDesc is the grpc.ServiceDesc for Apollo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apollo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eolymp.apollo.Apollo",
	HandlerType: (*ApolloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubmission",
			Handler:    _Apollo_CreateSubmission_Handler,
		},
		{
			MethodName: "DescribeSubmission",
			Handler:    _Apollo_DescribeSubmission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eolymp/apollo/apollo.proto",
}
